(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Coveo__temporary"] = factory();
	else
		root["Coveo__temporary"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var CoveoUnderscore_1 = __webpack_require__(255);
	exports._ = CoveoUnderscore_1.underscoreInstance;
	__export(__webpack_require__(2));
	__export(__webpack_require__(30));
	__export(__webpack_require__(36));
	__export(__webpack_require__(39));
	__export(__webpack_require__(55));
	__export(__webpack_require__(73));
	__export(__webpack_require__(100));
	__export(__webpack_require__(104));
	__export(__webpack_require__(175));
	var Analytics_1 = __webpack_require__(127);
	exports.Analytics = Analytics_1.Analytics;
	var AnalyticsSuggestions_1 = __webpack_require__(246);
	exports.AnalyticsSuggestions = AnalyticsSuggestions_1.AnalyticsSuggestions;
	var FieldSuggestions_1 = __webpack_require__(247);
	exports.FieldSuggestions = FieldSuggestions_1.FieldSuggestions;
	var Omnibox_1 = __webpack_require__(190);
	exports.Omnibox = Omnibox_1.Omnibox;
	var Querybox_1 = __webpack_require__(186);
	exports.Querybox = Querybox_1.Querybox;
	var SearchButton_1 = __webpack_require__(188);
	exports.SearchButton = SearchButton_1.SearchButton;
	var Searchbox_1 = __webpack_require__(189);
	exports.Searchbox = Searchbox_1.Searchbox;
	var SwapVar_1 = __webpack_require__(411);
	SwapVar_1.swapVar(this);


/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var PromisesShim_1 = __webpack_require__(3);
	PromisesShim_1.shim();
	var CustomEventPolyfill_1 = __webpack_require__(7);
	CustomEventPolyfill_1.customEventPolyfill();
	// MISC
	var Version_1 = __webpack_require__(8);
	exports.version = Version_1.version;
	var SearchEndpoint_1 = __webpack_require__(9);
	exports.SearchEndpoint = SearchEndpoint_1.SearchEndpoint;
	__export(__webpack_require__(23));
	// Default language needs to be set after external module, since this is where l10n will be imported
	var DefaultLanguage_1 = __webpack_require__(27);
	DefaultLanguage_1.defaultLanguage();
	var DefaultLanguage_2 = __webpack_require__(27);
	exports.setLanguageAfterPageLoaded = DefaultLanguage_2.setLanguageAfterPageLoaded;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(4);
	function shim() {
	    es6_promise_1.Promise.prototype['finally'] = function finallyPolyfill(callback) {
	        var constructor = this.constructor;
	        return this.then(function (value) {
	            return constructor.resolve(callback()).then(function () {
	                return value;
	            });
	        }, function (reason) {
	            return constructor.resolve(callback()).then(function () {
	                throw reason;
	            });
	        });
	    };
	    var rethrowError = function (self) {
	        self.then(null, function (err) {
	            setTimeout(function () {
	                throw err;
	            }, 0);
	        });
	    };
	    if (typeof es6_promise_1.Promise.prototype['done'] !== 'function') {
	        es6_promise_1.Promise.prototype['done'] = function (onFulfilled, onRejected) {
	            var self = arguments.length ? this.then.apply(this, arguments) : this;
	            rethrowError(self);
	            return this;
	        };
	    }
	    if (typeof es6_promise_1.Promise.prototype['fail'] !== 'function') {
	        es6_promise_1.Promise.prototype['fail'] = function (onFulfilled, onRejected) {
	            var self = arguments.length ? this.catch.apply(this, arguments) : this;
	            rethrowError(self);
	            return this;
	        };
	    }
	}
	exports.shim = shim;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   3.3.1
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  return function () {
	    vertxNext(flush);
	  };
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(6);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	polyfill();
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), (function() { return this; }())))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// CustomEvent polyfill from MDN
	// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill
	function customEventPolyfill() {
	    // window.CustomEvent is missing from the definitions
	    if (typeof window.CustomEvent === 'function') {
	        return;
	    }
	    var CustomEvent = function (event, params) {
	        params = params || { bubbles: false, cancelable: false, detail: undefined };
	        var customEvent = document.createEvent('CustomEvent');
	        customEvent.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
	        return customEvent;
	    };
	    // window.Event is specific to IE
	    CustomEvent.prototype = window.Event.prototype;
	    window.CustomEvent = CustomEvent;
	}
	exports.customEventPolyfill = customEventPolyfill;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = {
	    'lib': '1.2537.19',
	    'product': '1.2537.19',
	    'supportedApiVersion': 2
	};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var EndpointCaller_1 = __webpack_require__(10);
	var Logger_1 = __webpack_require__(11);
	var Assert_1 = __webpack_require__(12);
	var Version_1 = __webpack_require__(8);
	var AjaxError_1 = __webpack_require__(19);
	var MissingAuthenticationError_1 = __webpack_require__(20);
	var QueryUtils_1 = __webpack_require__(21);
	var QueryError_1 = __webpack_require__(22);
	var Utils_1 = __webpack_require__(13);
	var es6_promise_1 = __webpack_require__(4);
	var PromisesShim_1 = __webpack_require__(3);
	var _ = __webpack_require__(14);
	PromisesShim_1.shim();
	var DefaultSearchEndpointOptions = (function () {
	    function DefaultSearchEndpointOptions() {
	        this.version = 'v2';
	        this.queryStringArguments = {};
	        this.anonymous = false;
	        this.isGuestUser = false;
	    }
	    return DefaultSearchEndpointOptions;
	}());
	exports.DefaultSearchEndpointOptions = DefaultSearchEndpointOptions;
	/**
	 * A search endpoint allows to execute various actions against the Coveo Search API and index.<br/>
	 * For example, you can search, list field values, get the quickview content for a document, etc.<br/>
	 * Any actions that you execute using this class will not trigger a full query cycle for the Coveo components.<br/>
	 * This is because this class will not trigger any query events directly.<br/>
	 * If you wish to execute a query that all components will react to (and trigger the corresponding query events), use the {@link QueryController}
	 */
	var SearchEndpoint = (function () {
	    /**
	     * Create a new SearchEndpoint.<br/>
	     * Will use a set of sane default options, and merge them with the options parameter.<br/>
	     * Will create an {@link EndpointCaller} and use it to communicate with the endpoint internally
	     * @param options
	     */
	    function SearchEndpoint(options) {
	        var _this = this;
	        this.options = options;
	        Assert_1.Assert.exists(options);
	        Assert_1.Assert.exists(options.restUri);
	        // For backward compatibility, we set anonymous to true when an access token
	        // is specified on a page loaded through the filesystem. This causes withCredentials
	        // to NOT be set, allowing those pages to work with non Windows/Basic/Cookie
	        // authentication. If anonymous is explicitly set to false, we'll use withCredentials.
	        var defaultOptions = new DefaultSearchEndpointOptions();
	        defaultOptions.anonymous = window.location.href.indexOf('file://') == 0 && Utils_1.Utils.isNonEmptyString(options.accessToken);
	        this.options = _.extend({}, defaultOptions, options);
	        // Forward any debug=1 query argument to the REST API to ease debugging
	        if (SearchEndpoint.isDebugArgumentPresent()) {
	            this.options.queryStringArguments['debug'] = 1;
	        }
	        this.onUnload = function () {
	            _this.handleUnload();
	        };
	        window.addEventListener('beforeunload', this.onUnload);
	        this.logger = new Logger_1.Logger(this);
	        this.createEndpointCaller();
	    }
	    /**
	     * Configure an endpoint that will point to a Coveo Cloud index, which contains a set of public sources with no security on them.<br/>
	     * Used for demo purposes and ease of setup.
	     * @param otherOptions A set of additional options to use when configuring this endpoint
	     */
	    SearchEndpoint.configureSampleEndpoint = function (otherOptions) {
	        if (SearchEndpoint.isUseLocalArgumentPresent()) {
	            // This is a handy flag to quickly test a local search API and alerts
	            SearchEndpoint.endpoints['default'] = new SearchEndpoint(_.extend({
	                restUri: 'http://localhost:8100/rest/search',
	                searchAlertsUri: 'http://localhost:8088/rest/search/alerts/'
	            }, otherOptions));
	        }
	        else {
	            // This OAuth token points to the organization used for samples.
	            // It contains a set of harmless content sources.
	            SearchEndpoint.endpoints['default'] = new SearchEndpoint(_.extend({
	                restUri: 'https://cloudplatform.coveo.com/rest/search',
	                accessToken: '52d806a2-0f64-4390-a3f2-e0f41a4a73ec'
	            }, otherOptions));
	        }
	    };
	    /**
	     * Configure an endpoint that will point to a Coveo Cloud index V2, which contains a set of public sources with no security on them.<br/>
	     * Used for demo purposes and ease of setup.
	     * @param otherOptions A set of additional options to use when configuring this endpoint
	     */
	    SearchEndpoint.configureSampleEndpointV2 = function (optionsOPtions) {
	        SearchEndpoint.endpoints['default'] = new SearchEndpoint(_.extend({
	            restUri: 'https://platform.cloud.coveo.com/rest/search',
	            accessToken: 'xx564559b1-0045-48e1-953c-3addd1ee4457',
	            queryStringArguments: {
	                organizationID: 'searchuisamples',
	                viewAllContent: 1
	            }
	        }));
	    };
	    /**
	     * Configure an endpoint to a Coveo Cloud index.
	     * @param organization The organization id of your Coveo cloud index
	     * @param token The token to use to execute query. If null, you will most probably need to login when querying.
	     * @param uri The uri of your cloud Search API. By default, will point to the production environment
	     * @param otherOptions A set of additional options to use when configuring this endpoint
	     */
	    SearchEndpoint.configureCloudEndpoint = function (organization, token, uri, otherOptions) {
	        if (uri === void 0) { uri = 'https://cloudplatform.coveo.com/rest/search'; }
	        var options = {
	            restUri: uri,
	            accessToken: token,
	            queryStringArguments: { organizationId: organization }
	        };
	        var merged = SearchEndpoint.mergeConfigOptions(options, otherOptions);
	        SearchEndpoint.endpoints['default'] = new SearchEndpoint(SearchEndpoint.removeUndefinedConfigOption(merged));
	    };
	    /**
	     * Configure an endpoint to a Coveo Cloud index, in the V2 platform.
	     * @param organization The organization id of your Coveo cloud index
	     * @param token The token to use to execute query. If null, you will most probably need to login when querying.
	     * @param uri The uri of your cloud Search API. By default, will point to the production environment
	     * @param otherOptions A set of additional options to use when configuring this endpoint
	     */
	    SearchEndpoint.configureCloudV2Endpoint = function (organization, token, uri, otherOptions) {
	        if (uri === void 0) { uri = 'https://platform.cloud.coveo.com/rest/search'; }
	        return SearchEndpoint.configureCloudEndpoint(organization, token, uri, otherOptions);
	    };
	    /**
	     * Configure an endpoint to a Coveo on premise index.
	     * @param uri The uri of your Coveo Search API endpoint. eg : http://myserver:8080/rest/search
	     * @param token The token to use to execute query. If null, you will most probably need to login when querying (unless the search api is configured using advanced auth options, like windows auth or claims)
	     * @param otherOptions A set of additional options to use when configuring this endpoint
	     */
	    SearchEndpoint.configureOnPremiseEndpoint = function (uri, token, otherOptions) {
	        var merged = SearchEndpoint.mergeConfigOptions({
	            restUri: uri,
	            accessToken: token
	        }, otherOptions);
	        SearchEndpoint.endpoints['default'] = new SearchEndpoint(SearchEndpoint.removeUndefinedConfigOption(merged));
	    };
	    SearchEndpoint.removeUndefinedConfigOption = function (config) {
	        _.each(_.keys(config), function (key) {
	            if (config[key] == undefined) {
	                delete config[key];
	            }
	        });
	        return config;
	    };
	    SearchEndpoint.mergeConfigOptions = function (first, second) {
	        first = SearchEndpoint.removeUndefinedConfigOption(first);
	        second = SearchEndpoint.removeUndefinedConfigOption(second);
	        return _.extend({}, first, second);
	    };
	    SearchEndpoint.prototype.reset = function () {
	        this.createEndpointCaller();
	    };
	    /**
	     * Set a function which will allow external code to modify all endpoint call parameters before they are sent by the browser.
	     *
	     * Used in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.
	     * @param requestModifier
	     */
	    SearchEndpoint.prototype.setRequestModifier = function (requestModifier) {
	        this.caller.options.requestModifier = requestModifier;
	    };
	    /**
	     * Return the base uri of the endpoint to perform search
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getBaseUri = function () {
	        return this.buildBaseUri('');
	    };
	    /**
	     * Return the base uri of the endpoint for search alert
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getBaseAlertsUri = function () {
	        return this.buildSearchAlertsUri('');
	    };
	    /**
	     * Get the uri that can be used to authenticate against the given provider
	     * @param provider The provider name
	     * @param returnUri The uri at which to return after the authentication is completed
	     * @param message The message for authentication
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getAuthenticationProviderUri = function (provider, returnUri, message, callOptions, callParams) {
	        var queryString = this.buildBaseQueryString(callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        callParams.url += provider + '?';
	        if (Utils_1.Utils.isNonEmptyString(returnUri)) {
	            callParams.url += 'redirectUri=' + encodeURIComponent(returnUri) + '&';
	        }
	        else if (Utils_1.Utils.isNonEmptyString(message)) {
	            callParams.url += 'message=' + encodeURIComponent(message) + '&';
	        }
	        callParams.url += callParams.queryString.join('&');
	        return callParams.url;
	    };
	    /**
	     * is the search endpoint using jsonp internally to communicate with Search API
	     * @returns {boolean}
	     */
	    SearchEndpoint.prototype.isJsonp = function () {
	        return this.caller.useJsonp;
	    };
	    /**
	     * Perform a search on the index and returns a Promise of {@link IQueryResults}.<br/>
	     * Will modify the query results slightly, by adding additional information on each results (an id, the state object, etc.)
	     * @param query The query to execute. Typically, the query object is built using a {@link QueryBuilder}
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<IQueryResults>}
	     */
	    SearchEndpoint.prototype.search = function (query, callOptions, callParams) {
	        var _this = this;
	        Assert_1.Assert.exists(query);
	        callParams.requestData = query;
	        this.logger.info('Performing REST query', query);
	        return this.performOneCall(callParams, callOptions).then(function (results) {
	            _this.logger.info('REST query successful', results, query);
	            // Version check
	            // If the SearchAPI doesn't give us any apiVersion info, we assume version 1 (before apiVersion was implemented)
	            if (results.apiVersion == null) {
	                results.apiVersion = 1;
	            }
	            if (results.apiVersion < Version_1.version.supportedApiVersion) {
	                _this.logger.error('Please update your REST Search API');
	            }
	            // If the server specified no search ID generated one using the client-side
	            // GUID generator. We prefer server generated guids to allow tracking a query
	            // all the way from the analytics to the logs.
	            if (Utils_1.Utils.isNullOrEmptyString(results.searchUid)) {
	                results.searchUid = QueryUtils_1.QueryUtils.createGuid();
	            }
	            QueryUtils_1.QueryUtils.setIndexAndUidOnQueryResults(query, results, results.searchUid, results.pipeline, results.splitTestRun);
	            QueryUtils_1.QueryUtils.setTermsToHighlightOnQueryResults(query, results);
	            return results;
	        });
	    };
	    /**
	     * Get a link/uri to download a set of results, for a given query, to an xlsx format.<br/>
	     * Note : This does not download automatically the documents, merely provide an url at which to download them.
	     * @param query The query for which to get the xlsx documents
	     * @param numberOfResults The number of results that should be downloaded
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getExportToExcelLink = function (query, numberOfResults, callOptions, callParams) {
	        var queryString = this.buildBaseQueryString(callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        queryString = this.buildCompleteQueryString(null, query);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        if (numberOfResults != null) {
	            callParams.queryString.push('numberOfResults=' + numberOfResults);
	        }
	        callParams.queryString.push('format=xlsx');
	        return callParams.url + '?' + callParams.queryString.join('&');
	    };
	    /**
	     * Get the raw datastream for a given document. This is typically used to get a thumbnail for a document.<br/>
	     * Return an array buffer : <br/>
	     * eg : let rawBinary = String.fromCharCode.apply(null, new Uint8Array(response));<br/>
	     * img.setAttribute('src', 'data:image/png;base64,' + btoa(rawBinary));
	     * @param documentUniqueId Typically the {@link IQueryResult.uniqueId} on each result
	     * @param dataStreamType Normally : '$Thumbnail'
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<TResult>|Promise<U>}
	     */
	    SearchEndpoint.prototype.getRawDataStream = function (documentUniqueId, dataStreamType, callOptions, callParams) {
	        var _this = this;
	        Assert_1.Assert.exists(documentUniqueId);
	        var queryString = this.buildViewAsHtmlQueryString(documentUniqueId, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        this.logger.info('Performing REST query for datastream ' + dataStreamType + ' on document uniqueID' + documentUniqueId);
	        callParams.queryString.push('dataStream=' + dataStreamType);
	        return this.performOneCall(callParams).then(function (results) {
	            _this.logger.info('REST query successful', results, documentUniqueId);
	            return results;
	        });
	    };
	    /**
	     * Return an url that will allow to see the datastream for a given document. This is typically used to get a thumbnail for a document.<br/>
	     * @param documentUniqueID Typically the {@link IQueryResult.uniqueId} on each result
	     * @param dataStreamType Normally : '$Thumbnail'
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getViewAsDatastreamUri = function (documentUniqueID, dataStreamType, callOptions, callParams) {
	        callOptions = _.extend({}, callOptions);
	        var queryString = this.buildBaseQueryString(callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        queryString = this.buildCompleteQueryString(callOptions.query, callOptions.queryObject);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        return callParams.url + '?' + callParams.queryString.join('&') + '&dataStream=' + encodeURIComponent(dataStreamType);
	    };
	    /**
	     * Return a single document, using it's uniqueId
	     * @param documentUniqueID Typically the {@link IQueryResult.uniqueId} on each result
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<IQueryResult>}
	     */
	    SearchEndpoint.prototype.getDocument = function (documentUniqueID, callOptions, callParams) {
	        var queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Return the content for a single document, as text.<br/>
	     * Think : quickview
	     * @param documentUniqueID Typically the {@link IQueryResult.uniqueId} on each result
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<string>}
	     */
	    SearchEndpoint.prototype.getDocumentText = function (documentUniqueID, callOptions, callParams) {
	        var queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        return this.performOneCall(callParams)
	            .then(function (data) {
	            return data.content;
	        });
	    };
	    /**
	     * Return the content for a single document, as an HTMLDocument.<br/>
	     * Think : quickview
	     * @param documentUniqueID Typically the {@link IQueryResult.uniqueId} on each result
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<HTMLDocument>}
	     */
	    SearchEndpoint.prototype.getDocumentHtml = function (documentUniqueID, callOptions, callParams) {
	        callOptions = _.extend({}, callOptions);
	        var queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        callParams.requestData = callOptions.queryObject || { q: callOptions.query };
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Return an url that will allow to see a single document content, as HTML.<br/>
	     * Think : quickview
	     * @param documentUniqueID Typically the {@link IQueryResult.uniqueId} on each result
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {string}
	     */
	    SearchEndpoint.prototype.getViewAsHtmlUri = function (documentUniqueID, callOptions, callParams) {
	        var queryString = this.buildBaseQueryString(callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
	        callParams.queryString = callParams.queryString.concat(queryString);
	        callParams.queryString = _.uniq(callParams.queryString);
	        return callParams.url + '?' + callParams.queryString.join('&');
	    };
	    SearchEndpoint.prototype.batchFieldValues = function (request, callOptions, callParams) {
	        var _this = this;
	        Assert_1.Assert.exists(request);
	        return this.performOneCall(callParams)
	            .then(function (data) {
	            _this.logger.info('REST list field values successful', data.values, request);
	            return data.values;
	        });
	    };
	    /**
	     * List the possible values for a given request
	     * @param request The request for which to list the possible field values
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<TResult>|Promise<U>}
	     */
	    SearchEndpoint.prototype.listFieldValues = function (request, callOptions, callParams) {
	        var _this = this;
	        Assert_1.Assert.exists(request);
	        callParams.requestData = request;
	        this.logger.info('Listing field values', request);
	        return this.performOneCall(callParams)
	            .then(function (data) {
	            _this.logger.info('REST list field values successful', data.values, request);
	            return data.values;
	        });
	    };
	    /**
	     * List all fields for the index, and return an array of their description
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<TResult>|Promise<U>}
	     */
	    SearchEndpoint.prototype.listFields = function (callOptions, callParams) {
	        this.logger.info('Listing fields');
	        return this.performOneCall(callParams).then(function (data) {
	            return data.fields;
	        });
	    };
	    /**
	     * List all available query extensions for the search endpoint
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<IExtension[]>}
	     */
	    SearchEndpoint.prototype.extensions = function (callOptions, callParams) {
	        this.logger.info('Listing extensions');
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Allow to rate a single document in the index (granted that collaborative rating is enabled on your index)
	     * @param ratingRequest Document id and rating
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<boolean>|Promise<T>}
	     */
	    SearchEndpoint.prototype.rateDocument = function (ratingRequest, callOptions, callParams) {
	        this.logger.info('Rating a document', ratingRequest);
	        callParams.requestData = ratingRequest;
	        return this.performOneCall(callParams).then(function () {
	            return true;
	        });
	    };
	    /**
	     * Allow to tag a single document
	     * @param taggingRequest Document id and tag action to perform
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<boolean>|Promise<T>}
	     */
	    SearchEndpoint.prototype.tagDocument = function (taggingRequest, callOptions, callParams) {
	        this.logger.info('Tagging a document', taggingRequest);
	        callParams.requestData = taggingRequest;
	        return this.performOneCall(callParams).then(function () {
	            return true;
	        });
	    };
	    /**
	     * Returns a list of Coveo Machine Learning query suggestions, based on the given request
	     * @param request query and number of suggestions to return
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<IRevealQuerySuggestResponse>}
	     */
	    SearchEndpoint.prototype.getRevealQuerySuggest = function (request, callOptions, callParams) {
	        this.logger.info('Get Reveal Query Suggest', request);
	        callParams.requestData = request;
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Allow to follow a document or a query on the search alerts service
	     * @param request
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<ISubscription>}
	     */
	    SearchEndpoint.prototype.follow = function (request, callOptions, callParams) {
	        callParams.requestData = request;
	        this.logger.info('Following a document or a query', request);
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Return a Promise of array of current subscriptions
	     * @param page The page of the subsctiptions
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {any}
	     */
	    SearchEndpoint.prototype.listSubscriptions = function (page, callOptions, callParams) {
	        var _this = this;
	        if (this.options.isGuestUser) {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                reject();
	            });
	        }
	        if (this.currentListSubscriptions == null) {
	            callParams.queryString.push('page=' + (page || 0));
	            this.currentListSubscriptions = this.performOneCall(callParams);
	            this.currentListSubscriptions.then(function (data) {
	                _this.currentListSubscriptions = null;
	                return data;
	            }).catch(function (e) {
	                // Trap 503 error, as the listSubscription call is called on every page initialization
	                // to check for current subscriptions. By default, the search alert service is not enabled for most organization
	                // Don't want to pollute the console with un-needed noise and confusion
	                if (e.status != 503) {
	                    throw e;
	                }
	            });
	        }
	        return this.currentListSubscriptions;
	    };
	    /**
	     * Update a subscription with new parameters
	     * @param subscription The subscription to update with new parameters
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<ISubscription>}
	     */
	    SearchEndpoint.prototype.updateSubscription = function (subscription, callOptions, callParams) {
	        callParams.requestData = subscription;
	        this.logger.info('Updating a subscription', subscription);
	        callParams.url += subscription.id;
	        return this.performOneCall(callParams);
	    };
	    /**
	     * Delete a subscription
	     * @param subscription The subscription to delete
	     * @param callOptions Additional set of options to use for this call.
	     * @param callParams Options injected by the applied decorators.
	     * @returns {Promise<ISubscription>}
	     */
	    SearchEndpoint.prototype.deleteSubscription = function (subscription, callOptions, callParams) {
	        callParams.url += subscription.id;
	        return this.performOneCall(callParams);
	    };
	    SearchEndpoint.prototype.logError = function (sentryLog, callOptions, callParams) {
	        callParams.requestData = sentryLog;
	        return this.performOneCall(callParams, callOptions)
	            .then(function () {
	            return true;
	        })
	            .catch(function () {
	            return false;
	        });
	    };
	    SearchEndpoint.prototype.nuke = function () {
	        window.removeEventListener('beforeunload', this.onUnload);
	    };
	    SearchEndpoint.prototype.createEndpointCaller = function () {
	        this.caller = new EndpointCaller_1.EndpointCaller(this.options);
	    };
	    SearchEndpoint.isDebugArgumentPresent = function () {
	        return /[?&]debug=1([&]|$)/.test(window.location.search);
	    };
	    SearchEndpoint.isUseLocalArgumentPresent = function () {
	        return /[?&]useLocal=1([&]|$)/.test(window.location.search);
	    };
	    SearchEndpoint.prototype.handleUnload = function () {
	        this.isRedirecting = true;
	    };
	    SearchEndpoint.prototype.buildBaseUri = function (path) {
	        Assert_1.Assert.isString(path);
	        var uri = this.options.restUri;
	        uri = this.removeTrailingSlash(uri);
	        if (Utils_1.Utils.isNonEmptyString(this.options.version)) {
	            uri += '/' + this.options.version;
	        }
	        uri += path;
	        return uri;
	    };
	    SearchEndpoint.prototype.buildSearchAlertsUri = function (path) {
	        Assert_1.Assert.isString(path);
	        var uri = this.options.searchAlertsUri || this.options.restUri + '/alerts';
	        if (uri == null) {
	            return null;
	        }
	        uri = this.removeTrailingSlash(uri);
	        uri += path;
	        return uri;
	    };
	    // see https://github.com/palantir/tslint/issues/1421
	    // tslint:disable-next-line:no-unused-variable
	    SearchEndpoint.prototype.buildAccessToken = function (tokenKey) {
	        var queryString = [];
	        if (Utils_1.Utils.isNonEmptyString(this.options.accessToken)) {
	            queryString.push(tokenKey + '=' + encodeURIComponent(this.options.accessToken));
	        }
	        return queryString;
	    };
	    SearchEndpoint.prototype.buildBaseQueryString = function (callOptions) {
	        callOptions = _.extend({}, callOptions);
	        var queryString = [];
	        for (var name_1 in this.options.queryStringArguments) {
	            queryString.push(name_1 + '=' + encodeURIComponent(this.options.queryStringArguments[name_1]));
	        }
	        if (callOptions && _.isArray(callOptions.authentication) && callOptions.authentication.length != 0) {
	            queryString.push('authentication=' + callOptions.authentication.join(','));
	        }
	        return queryString;
	    };
	    SearchEndpoint.prototype.buildCompleteQueryString = function (query, queryObject) {
	        // In an ideal parallel reality, the entire query used in the 'search' call is used here.
	        // In this reality however, we must support GET calls (ex: GET /html) for CORS/JSONP/IE reasons.
	        // Therefore, we cherry-pick parts of the query to include in a 'query string' instead of a body payload.
	        var queryString = [];
	        if (queryObject) {
	            _.each(['q', 'aq', 'cq', 'dq', 'searchHub', 'tab', 'language', 'pipeline', 'lowercaseOperators'], function (key) {
	                if (queryObject[key]) {
	                    queryString.push(key + '=' + encodeURIComponent(queryObject[key]));
	                }
	            });
	            _.each(queryObject.context, function (value, key) {
	                queryString.push('context[' + key + ']=' + encodeURIComponent(value));
	            });
	            if (queryObject.fieldsToInclude) {
	                queryString.push("fieldsToInclude=[" + _.map(queryObject.fieldsToInclude, function (field) { return '"' + encodeURIComponent(field.replace('@', '')) + '"'; }).join(',') + "]");
	            }
	        }
	        else if (query) {
	            queryString.push('q=' + encodeURIComponent(query));
	        }
	        return queryString;
	    };
	    SearchEndpoint.prototype.buildViewAsHtmlQueryString = function (uniqueId, callOptions) {
	        callOptions = _.extend({}, callOptions);
	        var queryString = this.buildBaseQueryString(callOptions);
	        queryString.push('uniqueId=' + encodeURIComponent(uniqueId));
	        if (callOptions.query || callOptions.queryObject) {
	            queryString.push('enableNavigation=true');
	        }
	        if (callOptions.requestedOutputSize) {
	            queryString.push('requestedOutputSize=' + encodeURIComponent(callOptions.requestedOutputSize.toString()));
	        }
	        if (callOptions.contentType) {
	            queryString.push('contentType=' + encodeURIComponent(callOptions.contentType));
	        }
	        return queryString;
	    };
	    SearchEndpoint.prototype.performOneCall = function (params, callOptions, autoRenewToken) {
	        var _this = this;
	        if (autoRenewToken === void 0) { autoRenewToken = true; }
	        var queryString = this.buildBaseQueryString(callOptions);
	        params.queryString = params.queryString.concat(queryString);
	        params.queryString = _.uniq(params.queryString);
	        return this.caller.call(params)
	            .then(function (response) {
	            if (response.data && response.data.clientDuration) {
	                response.data.clientDuration = response.duration;
	            }
	            return response.data;
	        }).catch(function (error) {
	            if (autoRenewToken && _this.canRenewAccessToken() && _this.isAccessTokenExpiredStatus(error.statusCode)) {
	                _this.renewAccessToken().then(function () {
	                    return _this.performOneCall(params, callOptions, autoRenewToken);
	                })
	                    .catch(function () {
	                    return es6_promise_1.Promise.reject(_this.handleErrorResponse(error));
	                });
	            }
	            else if (error.statusCode == 0 && _this.isRedirecting) {
	                // The page is getting redirected
	                // Set timeout on return with empty string, since it does not really matter
	                _.defer(function () {
	                    return '';
	                });
	            }
	            else {
	                return es6_promise_1.Promise.reject(_this.handleErrorResponse(error));
	            }
	        });
	    };
	    SearchEndpoint.prototype.handleErrorResponse = function (errorResponse) {
	        if (this.isMissingAuthenticationProviderStatus(errorResponse.statusCode)) {
	            return new MissingAuthenticationError_1.MissingAuthenticationError(errorResponse.data['provider']);
	        }
	        else if (errorResponse.data && errorResponse.data.message && errorResponse.data.type) {
	            return new QueryError_1.QueryError(errorResponse);
	        }
	        else if (errorResponse.data && errorResponse.data.message) {
	            return new AjaxError_1.AjaxError("Request Error : " + errorResponse.data.message, errorResponse.statusCode);
	        }
	        else {
	            return new AjaxError_1.AjaxError('Request Error', errorResponse.statusCode);
	        }
	    };
	    SearchEndpoint.prototype.canRenewAccessToken = function () {
	        return Utils_1.Utils.isNonEmptyString(this.options.accessToken) && _.isFunction(this.options.renewAccessToken);
	    };
	    SearchEndpoint.prototype.renewAccessToken = function () {
	        var _this = this;
	        this.logger.info('Renewing expired access token');
	        return this.options.renewAccessToken().then(function (token) {
	            Assert_1.Assert.isNonEmptyString(token);
	            _this.options.accessToken = token;
	            _this.createEndpointCaller();
	            return token;
	        }).catch(function (e) {
	            _this.logger.error('Failed to renew access token', e);
	            return e;
	        });
	    };
	    SearchEndpoint.prototype.removeTrailingSlash = function (uri) {
	        if (this.hasTrailingSlash(uri)) {
	            uri = uri.substr(0, uri.length - 1);
	        }
	        return uri;
	    };
	    SearchEndpoint.prototype.hasTrailingSlash = function (uri) {
	        return uri.charAt(uri.length - 1) == '/';
	    };
	    SearchEndpoint.prototype.isMissingAuthenticationProviderStatus = function (status) {
	        return status == 402;
	    };
	    SearchEndpoint.prototype.isAccessTokenExpiredStatus = function (status) {
	        return status == 419;
	    };
	    return SearchEndpoint;
	}());
	/**
	 * A map of all the initialized endpoint.<br/>
	 * eg : Coveo.SearchEndpoint.endpoints['default'] will return the default endpoint that was created at initialization
	 * @type {{}}
	 */
	SearchEndpoint.endpoints = {};
	__decorate([
	    path('/login/'),
	    accessTokenInUrl()
	], SearchEndpoint.prototype, "getAuthenticationProviderUri", null);
	__decorate([
	    path('/'),
	    method('POST'),
	    responseType('text')
	], SearchEndpoint.prototype, "search", null);
	__decorate([
	    path('/'),
	    accessTokenInUrl()
	], SearchEndpoint.prototype, "getExportToExcelLink", null);
	__decorate([
	    path('/datastream'),
	    accessTokenInUrl(),
	    method('GET'),
	    responseType('arraybuffer')
	], SearchEndpoint.prototype, "getRawDataStream", null);
	__decorate([
	    path('/datastream'),
	    accessTokenInUrl()
	], SearchEndpoint.prototype, "getViewAsDatastreamUri", null);
	__decorate([
	    path('/document'),
	    method('GET'),
	    responseType('text')
	], SearchEndpoint.prototype, "getDocument", null);
	__decorate([
	    path('/text'),
	    method('GET'),
	    responseType('text')
	], SearchEndpoint.prototype, "getDocumentText", null);
	__decorate([
	    path('/html'),
	    method('POST'),
	    responseType('document')
	], SearchEndpoint.prototype, "getDocumentHtml", null);
	__decorate([
	    path('/html'),
	    accessTokenInUrl()
	], SearchEndpoint.prototype, "getViewAsHtmlUri", null);
	__decorate([
	    path('/values'),
	    method('POST'),
	    responseType('text')
	], SearchEndpoint.prototype, "batchFieldValues", null);
	__decorate([
	    path('/values'),
	    method('POST'),
	    responseType('text')
	], SearchEndpoint.prototype, "listFieldValues", null);
	__decorate([
	    path('/fields'),
	    method('GET'),
	    responseType('text')
	], SearchEndpoint.prototype, "listFields", null);
	__decorate([
	    path('/extensions'),
	    method('GET'),
	    responseType('text')
	], SearchEndpoint.prototype, "extensions", null);
	__decorate([
	    path('/rating'),
	    method('POST'),
	    responseType('text')
	], SearchEndpoint.prototype, "rateDocument", null);
	__decorate([
	    path('/tag'),
	    method('POST'),
	    responseType('text')
	], SearchEndpoint.prototype, "tagDocument", null);
	__decorate([
	    path('/querySuggest'),
	    method('GET'),
	    responseType('text')
	], SearchEndpoint.prototype, "getRevealQuerySuggest", null);
	__decorate([
	    alertsPath('/subscriptions'),
	    accessTokenInUrl('accessToken'),
	    method('POST'),
	    requestDataType('application/json'),
	    responseType('text')
	], SearchEndpoint.prototype, "follow", null);
	__decorate([
	    alertsPath('/subscriptions'),
	    accessTokenInUrl('accessToken'),
	    method('GET'),
	    requestDataType('application/json'),
	    responseType('text')
	], SearchEndpoint.prototype, "listSubscriptions", null);
	__decorate([
	    alertsPath('/subscriptions/'),
	    accessTokenInUrl('accessToken'),
	    method('PUT'),
	    requestDataType('application/json'),
	    responseType('text')
	], SearchEndpoint.prototype, "updateSubscription", null);
	__decorate([
	    alertsPath('/subscriptions/'),
	    accessTokenInUrl('accessToken'),
	    method('DELETE'),
	    requestDataType('application/json'),
	    responseType('text')
	], SearchEndpoint.prototype, "deleteSubscription", null);
	__decorate([
	    path('/log'),
	    method('POST')
	], SearchEndpoint.prototype, "logError", null);
	exports.SearchEndpoint = SearchEndpoint;
	// It's taken for granted that methods using decorators have :
	// IEndpointCallOptions as their second to last parameter
	// IEndpointCallParameters as their last parameter
	// The default parameters for each member of the injected {@link IEndpointCallParameters} are the following:
	// url: '',
	// queryString: [],
	// requestData: {},
	// requestDataType: undefined,
	// method: '',
	// responseType: '',
	// errorsAsSuccess: false
	function path(path) {
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var uri = this.buildBaseUri(path);
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].url = uri;
	            }
	            else {
	                var params = {
	                    url: uri,
	                    queryString: [],
	                    requestData: {},
	                    method: '',
	                    responseType: '',
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}
	function alertsPath(path) {
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var uri = this.buildSearchAlertsUri(path);
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].url = uri;
	            }
	            else {
	                var params = {
	                    url: uri,
	                    queryString: [],
	                    requestData: {},
	                    method: '',
	                    responseType: '',
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}
	function requestDataType(type) {
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].requestDataType = type;
	            }
	            else {
	                var params = {
	                    url: '',
	                    queryString: [],
	                    requestData: {},
	                    requestDataType: type,
	                    method: '',
	                    responseType: '',
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}
	function method(met) {
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].method = met;
	            }
	            else {
	                var params = {
	                    url: '',
	                    queryString: [],
	                    requestData: {},
	                    method: met,
	                    responseType: '',
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}
	function responseType(resp) {
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].responseType = resp;
	            }
	            else {
	                var params = {
	                    url: '',
	                    queryString: [],
	                    requestData: {},
	                    method: '',
	                    responseType: resp,
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}
	function accessTokenInUrl(tokenKey) {
	    if (tokenKey === void 0) { tokenKey = 'access_token'; }
	    return function (target, key, descriptor) {
	        var originalMethod = descriptor.value;
	        var nbParams = target[key].prototype.constructor.length;
	        descriptor.value = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var queryString = this.buildAccessToken(tokenKey);
	            if (args[nbParams - 1]) {
	                args[nbParams - 1].queryString = args[nbParams - 1].queryString.concat(queryString);
	            }
	            else {
	                var params = {
	                    url: '',
	                    queryString: queryString,
	                    requestData: {},
	                    method: '',
	                    responseType: '',
	                    errorsAsSuccess: false
	                };
	                args[nbParams - 1] = params;
	            }
	            var result = originalMethod.apply(this, args);
	            return result;
	        };
	        return descriptor;
	    };
	}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var Assert_1 = __webpack_require__(12);
	var TimeSpanUtils_1 = __webpack_require__(15);
	var DeviceUtils_1 = __webpack_require__(16);
	var Utils_1 = __webpack_require__(13);
	var es6_promise_1 = __webpack_require__(4);
	var JQueryutils_1 = __webpack_require__(18);
	var _ = __webpack_require__(14);
	// In ie8, XMLHttpRequest has no status property, so let's use this enum instead
	var XMLHttpRequestStatus;
	(function (XMLHttpRequestStatus) {
	    XMLHttpRequestStatus[XMLHttpRequestStatus["OPENED"] = XMLHttpRequest.OPENED || 1] = "OPENED";
	    XMLHttpRequestStatus[XMLHttpRequestStatus["HEADERS_RECEIVED"] = XMLHttpRequest.HEADERS_RECEIVED || 2] = "HEADERS_RECEIVED";
	    XMLHttpRequestStatus[XMLHttpRequestStatus["DONE"] = XMLHttpRequest.DONE || 4] = "DONE";
	})(XMLHttpRequestStatus || (XMLHttpRequestStatus = {}));
	/**
	 * This class is in charge of calling an endpoint (eg: a {@link SearchEndpoint}).
	 *
	 * This means it's only uses to execute an XMLHttpRequest (for example), massage the response and check if there are errors.
	 *
	 * Will execute the call and return a Promise.
	 *
	 * Call using one of those options :
	 *
	 * * XMLHttpRequest for recent browser that support CORS, or if the endpoint is on the same origin.
	 * * XDomainRequest for older IE browser that do not support CORS.
	 * * Jsonp if all else fails, or is explicitly enabled.
	 */
	var EndpointCaller = (function () {
	    /**
	     * Create a new EndpointCaller.
	     * @param options Specify the authentication that will be used for this endpoint. Not needed if the endpoint is public and has no authentication
	     */
	    function EndpointCaller(options) {
	        if (options === void 0) { options = {}; }
	        this.options = options;
	        /**
	         * Set this property to true to enable Jsonp call to the endpoint.<br/>
	         * Be aware that jsonp is "easier" to setup endpoint wise, but has a lot of drawback and limitation for the client code.<br/>
	         * Default to false.
	         * @type {boolean}
	         */
	        this.useJsonp = false;
	        this.logger = new Logger_1.Logger(this);
	    }
	    /**
	     * Generic call to the endpoint using the provided {@link IEndpointCallParameters}.<br/>
	     * Internally, will decide which method to use to call the endpoint :<br/>
	     * -- XMLHttpRequest for recent browser that support CORS, or if the endpoint is on the same origin.<br/>
	     * -- XDomainRequest for older IE browser that do not support CORS.<br/>
	     * -- Jsonp if all else fails, or is explicitly enabled.
	     * @param params The parameters to use for the call
	     * @returns {any} A promise of the given type
	     */
	    EndpointCaller.prototype.call = function (params) {
	        var requestInfo = {
	            url: params.url,
	            queryString: params.errorsAsSuccess ? params.queryString.concat(['errorsAsSuccess=1']) : params.queryString,
	            requestData: params.requestData,
	            requestDataType: params.requestDataType || 'application/x-www-form-urlencoded; charset="UTF-8"',
	            begun: new Date(),
	            method: params.method
	        };
	        requestInfo.headers = this.buildRequestHeaders(requestInfo);
	        if (_.isFunction(this.options.requestModifier)) {
	            requestInfo = this.options.requestModifier(requestInfo);
	        }
	        this.logger.trace('Performing REST request', requestInfo);
	        var urlObject = this.parseURL(requestInfo.url);
	        // In IE8, hostname and port return "" when we are on the same domain.
	        var isLocalHost = (window.location.hostname === urlObject.hostname) || (urlObject.hostname === '');
	        var currentPort = (window.location.port != '' ? window.location.port : (window.location.protocol == 'https:' ? '443' : '80'));
	        var isSamePort = currentPort == urlObject.port;
	        var isCrossOrigin = !(isLocalHost && isSamePort);
	        if (!this.useJsonp) {
	            if (this.isCORSSupported() || !isCrossOrigin) {
	                return this.callUsingXMLHttpRequest(requestInfo, params.responseType);
	            }
	            else if (this.isXDomainRequestSupported()) {
	                return this.callUsingXDomainRequest(requestInfo);
	            }
	            else {
	                return this.callUsingAjaxJsonP(requestInfo);
	            }
	        }
	        else {
	            return this.callUsingAjaxJsonP(requestInfo);
	        }
	    };
	    /**
	     * Call the endpoint using XMLHttpRequest. Used internally by {@link EndpointCaller.call}.<br/>
	     * Will try internally to handle error if it can.<br/>
	     * Promise will otherwise fail with the error type.
	     * @param requestInfo The info about the request
	     * @param responseType The responseType. Default to text. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
	     * @returns {Promise<T>|Promise}
	     */
	    EndpointCaller.prototype.callUsingXMLHttpRequest = function (requestInfo, responseType) {
	        var _this = this;
	        if (responseType === void 0) { responseType = 'text'; }
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var xmlHttpRequest = _this.getXmlHttpRequest();
	            // Beware, most stuff must be set on the event that says the request is OPENED.
	            // Otherwise it'll bork on some browsers. Gotta love standards.
	            // This sent variable allowed to remove the second call of onreadystatechange with the state OPENED in IE11
	            var sent = false;
	            xmlHttpRequest.onreadystatechange = function (ev) {
	                if (xmlHttpRequest.readyState == XMLHttpRequestStatus.OPENED && !sent) {
	                    sent = true;
	                    xmlHttpRequest.withCredentials = true;
	                    _.each(requestInfo.headers, function (headerValue, headerKey) {
	                        xmlHttpRequest.setRequestHeader(headerKey, headerValue);
	                    });
	                    if (requestInfo.method == 'GET') {
	                        xmlHttpRequest.send();
	                    }
	                    else if (requestInfo.requestDataType.indexOf('application/json') === 0) {
	                        xmlHttpRequest.send(JSON.stringify(requestInfo.requestData));
	                    }
	                    else {
	                        xmlHttpRequest.send(_this.convertJsonToFormBody(requestInfo.requestData));
	                    }
	                    // The "responseType" varies if the request is a success or not.
	                    // Therefore we postpone setting "responseType" until we know if the
	                    // request is a success or not. Doing so, we avoid this potential
	                    // error in Chrome:
	                    //
	                    //   Uncaught InvalidStateError: Failed to read the 'responseText'
	                    //   property from 'XMLHttpRequest': The value is only accessible if
	                    //   the object's 'responseType' is '' or 'text' (was 'document').
	                    //
	                }
	                else if (xmlHttpRequest.readyState == XMLHttpRequestStatus.HEADERS_RECEIVED) {
	                    var status = xmlHttpRequest.status;
	                    if (_this.isSuccessHttpStatus(status)) {
	                        xmlHttpRequest.responseType = responseType;
	                    }
	                    else {
	                        xmlHttpRequest.responseType = 'text';
	                    }
	                }
	                else if (xmlHttpRequest.readyState == XMLHttpRequestStatus.DONE) {
	                    var status = xmlHttpRequest.status;
	                    var data;
	                    switch (responseType) {
	                        case 'json':
	                            data = xmlHttpRequest.response;
	                            // Work around a bug in IE11 where responseType jsonis not supported : the response comes back as a plain string
	                            // Force the json parse manually
	                            if (responseType == 'json' && DeviceUtils_1.DeviceUtils.getDeviceName() == 'IE') {
	                                try {
	                                    data = JSON.parse(data);
	                                }
	                                catch (e) {
	                                    // Do nothing, it probably means the data was JSON already
	                                }
	                            }
	                            break;
	                        case 'text':
	                            data = _this.tryParseResponseText(xmlHttpRequest.responseText, xmlHttpRequest.getResponseHeader('Content-Type'));
	                            break;
	                        default:
	                            data = xmlHttpRequest.response;
	                            break;
	                    }
	                    if (data == undefined) {
	                        data = _this.tryParseResponseText(xmlHttpRequest.responseText, xmlHttpRequest.getResponseHeader('Content-Type'));
	                    }
	                    if (_this.isSuccessHttpStatus(status)) {
	                        _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data, resolve, reject);
	                    }
	                    else {
	                        _this.handleError(requestInfo, xmlHttpRequest.status, data, reject);
	                    }
	                }
	            };
	            var queryString = requestInfo.queryString;
	            if (requestInfo.method == 'GET') {
	                queryString = queryString.concat(_this.convertJsonToQueryString(requestInfo.requestData));
	            }
	            xmlHttpRequest.open(requestInfo.method, _this.combineUrlAndQueryString(requestInfo.url, queryString));
	        });
	    };
	    /**
	     * Call the endpoint using XDomainRequest https://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx<br/>
	     * Used for IE8/9
	     * @param requestInfo The info about the request
	     * @returns {Promise<T>|Promise}
	     */
	    EndpointCaller.prototype.callUsingXDomainRequest = function (requestInfo) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var queryString = requestInfo.queryString.concat([]);
	            // XDomainRequest don't support including stuff in the header, so we must
	            // put the access token in the query string if we have one.
	            if (_this.options.accessToken) {
	                queryString.push('access_token=' + encodeURIComponent(_this.options.accessToken));
	            }
	            var xDomainRequest = new XDomainRequest();
	            if (requestInfo.method == 'GET') {
	                queryString = queryString.concat(_this.convertJsonToQueryString(requestInfo.requestData));
	            }
	            xDomainRequest.open(requestInfo.method, _this.combineUrlAndQueryString(requestInfo.url, queryString));
	            xDomainRequest.onload = function () {
	                var data = _this.tryParseResponseText(xDomainRequest.responseText, xDomainRequest.contentType);
	                _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data, resolve, reject);
	            };
	            xDomainRequest.onerror = function () {
	                var data = _this.tryParseResponseText(xDomainRequest.responseText, xDomainRequest.contentType);
	                _this.handleError(requestInfo, 0, data, reject);
	            };
	            // We must set those functions otherwise it will sometime fail in IE
	            xDomainRequest.ontimeout = function () { return _this.logger.error('Request timeout', xDomainRequest, requestInfo.requestData); };
	            xDomainRequest.onprogress = function () { return _this.logger.trace('Request progress', xDomainRequest, requestInfo.requestData); };
	            // We must open the request in a separate thread, for obscure reasons
	            _.defer(function () {
	                if (requestInfo.method == 'GET') {
	                    xDomainRequest.send();
	                }
	                else {
	                    xDomainRequest.send(_this.convertJsonToFormBody(requestInfo.requestData));
	                }
	            });
	        });
	    };
	    /**
	     * Call the endpoint using Jsonp https://en.wikipedia.org/wiki/JSONP<br/>
	     * Should be used for dev only, or for very special setup as using jsonp has a lot of drawbacks.
	     * @param requestInfo The info about the request
	     * @returns {Promise<T>|Promise}
	     */
	    EndpointCaller.prototype.callUsingAjaxJsonP = function (requestInfo) {
	        var _this = this;
	        var jQuery = JQueryutils_1.JQueryUtils.getJQuery();
	        Assert_1.Assert.check(jQuery, 'Using jsonp without having included jQuery is not supported.');
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var queryString = requestInfo.queryString.concat(_this.convertJsonToQueryString(requestInfo.requestData));
	            // JSONP don't support including stuff in the header, so we must
	            // put the access token in the query string if we have one.
	            if (_this.options.accessToken) {
	                queryString.push('access_token=' + encodeURIComponent(_this.options.accessToken));
	            }
	            queryString.push('callback=?');
	            jQuery.ajax({
	                url: _this.combineUrlAndQueryString(requestInfo.url, queryString),
	                dataType: 'jsonp',
	                success: function (data) { return _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data, resolve, reject); },
	                timeout: EndpointCaller.JSONP_ERROR_TIMEOUT,
	                error: function () { return _this.handleError(requestInfo, 0, undefined, reject); }
	            });
	        });
	    };
	    EndpointCaller.prototype.parseURL = function (url) {
	        var urlObject = document.createElement('a');
	        urlObject.href = url;
	        return urlObject;
	    };
	    EndpointCaller.prototype.getXmlHttpRequest = function () {
	        var newXmlHttpRequest = this.options.xmlHttpRequest || XMLHttpRequest;
	        return new newXmlHttpRequest();
	    };
	    EndpointCaller.prototype.convertJsonToQueryString = function (json) {
	        Assert_1.Assert.exists(json);
	        var result = [];
	        _.each(json, function (value, key) {
	            if (value != null) {
	                if (_.isObject(value)) {
	                    result.push(key + '=' + encodeURIComponent(JSON.stringify(value)));
	                }
	                else {
	                    result.push(key + '=' + encodeURIComponent(value.toString()));
	                }
	            }
	        });
	        return result;
	    };
	    EndpointCaller.prototype.convertJsonToFormBody = function (json) {
	        return this.convertJsonToQueryString(json).join('&');
	    };
	    EndpointCaller.prototype.handleSuccessfulResponseThatMightBeAnError = function (requestInfo, data, success, error) {
	        if (this.isErrorResponseBody(data)) {
	            this.handleError(requestInfo, data.statusCode, data, error);
	        }
	        else {
	            this.handleSuccess(requestInfo, data, success);
	        }
	    };
	    EndpointCaller.prototype.handleSuccess = function (requestInfo, data, success) {
	        var querySuccess = {
	            duration: TimeSpanUtils_1.TimeSpan.fromDates(requestInfo.begun, new Date()).getMilliseconds(),
	            data: data
	        };
	        this.logger.trace('REST request successful', data, requestInfo);
	        success(querySuccess);
	    };
	    EndpointCaller.prototype.handleError = function (requestInfo, status, data, error) {
	        var queryError = {
	            statusCode: status,
	            data: data
	        };
	        this.logger.error('REST request failed', status, data, requestInfo);
	        error(queryError);
	    };
	    EndpointCaller.prototype.combineUrlAndQueryString = function (url, queryString) {
	        var questionMark = '?';
	        if (url.match(/\?$/)) {
	            questionMark = '';
	        }
	        return url + (queryString.length > 0 ? questionMark + queryString.join('&') : '');
	    };
	    EndpointCaller.prototype.isXDomainRequestSupported = function () {
	        return 'XDomainRequest' in window;
	    };
	    EndpointCaller.prototype.isCORSSupported = function () {
	        return 'withCredentials' in this.getXmlHttpRequest();
	    };
	    EndpointCaller.prototype.isSuccessHttpStatus = function (status) {
	        return status >= 200 && status < 300 || status === 304;
	    };
	    EndpointCaller.prototype.tryParseResponseText = function (json, contentType) {
	        if (contentType != null && contentType.indexOf('application/json') != -1) {
	            if (Utils_1.Utils.isNonEmptyString(json)) {
	                try {
	                    return JSON.parse(json);
	                }
	                catch (ex) {
	                    return undefined;
	                }
	            }
	            else {
	                return undefined;
	            }
	        }
	        else {
	            return json;
	        }
	    };
	    EndpointCaller.prototype.isErrorResponseBody = function (data) {
	        if (data && data.statusCode) {
	            return !this.isSuccessHttpStatus(data.statusCode);
	        }
	        else {
	            return false;
	        }
	    };
	    EndpointCaller.prototype.buildRequestHeaders = function (requestInfo) {
	        var headers = {};
	        if (this.options.accessToken) {
	            headers['Authorization'] = "Bearer " + this.options.accessToken;
	        }
	        else if (this.options.username && this.options.password) {
	            headers['Authorization'] = "Basic " + btoa(this.options.username + ':' + this.options.password);
	        }
	        if (requestInfo.method == 'GET') {
	            return headers;
	        }
	        if (requestInfo.requestDataType.indexOf('application/json') === 0) {
	            headers['Content-Type'] = 'application/json; charset="UTF-8"';
	        }
	        else {
	            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset="UTF-8"';
	        }
	        return headers;
	    };
	    return EndpointCaller;
	}());
	EndpointCaller.JSONP_ERROR_TIMEOUT = 10000;
	exports.EndpointCaller = EndpointCaller;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Ensure that we're not going to get console is undefined error in IE8-9
	if (!window['console']) {
	    console = {
	        log: function () {
	        },
	        debug: function () {
	        },
	        info: function () {
	        },
	        warn: function () {
	        },
	        error: function () {
	        },
	        assert: function () {
	        },
	        clear: function () {
	        },
	        count: function () {
	        },
	        dir: function () {
	        },
	        dirxml: function () {
	        },
	        group: function () {
	        },
	        groupCollapsed: function () {
	        },
	        groupEnd: function () {
	        },
	        msIsIndependentlyComposed: function (element) {
	        },
	        profile: function () {
	        },
	        profileEnd: function () {
	        },
	        select: function () {
	        },
	        time: function () {
	        },
	        timeEnd: function () {
	        },
	        trace: function () {
	        }
	    };
	}
	var Logger = (function () {
	    function Logger(owner) {
	        this.owner = owner;
	    }
	    Logger.prototype.trace = function () {
	        var stuff = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            stuff[_i] = arguments[_i];
	        }
	        if (Logger.level <= Logger.TRACE) {
	            this.log('TRACE', stuff);
	        }
	    };
	    Logger.prototype.debug = function () {
	        var stuff = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            stuff[_i] = arguments[_i];
	        }
	        if (Logger.level <= Logger.DEBUG) {
	            this.log('DEBUG', stuff);
	        }
	    };
	    Logger.prototype.info = function () {
	        var stuff = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            stuff[_i] = arguments[_i];
	        }
	        if (Logger.level <= Logger.INFO) {
	            this.log('INFO', stuff);
	        }
	    };
	    Logger.prototype.warn = function () {
	        var stuff = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            stuff[_i] = arguments[_i];
	        }
	        if (Logger.level <= Logger.WARN) {
	            this.log('WARN', stuff);
	        }
	    };
	    Logger.prototype.error = function () {
	        var stuff = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            stuff[_i] = arguments[_i];
	        }
	        if (Logger.level <= Logger.ERROR) {
	            this.log('ERROR', stuff);
	        }
	    };
	    Logger.prototype.log = function (level, stuff) {
	        if (window['console'] && console.log) {
	            console.log([level, this.owner].concat(stuff));
	            if (Logger.executionTime) {
	                console.timeEnd('Execution time');
	                console.time('Execution time');
	            }
	        }
	    };
	    Logger.enable = function () {
	        Logger.level = Logger.TRACE;
	    };
	    Logger.disable = function () {
	        Logger.level = Logger.NOTHING;
	    };
	    return Logger;
	}());
	Logger.TRACE = 1;
	Logger.DEBUG = 2;
	Logger.INFO = 3;
	Logger.WARN = 4;
	Logger.ERROR = 5;
	Logger.NOTHING = 6;
	Logger.level = Logger.INFO;
	Logger.executionTime = false;
	exports.Logger = Logger;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var Assert = (function () {
	    function Assert() {
	    }
	    Assert.fail = function (message) {
	        Assert.failureHandler(message);
	    };
	    Assert.check = function (condition, message) {
	        if (!condition) {
	            Assert.fail(message);
	        }
	    };
	    Assert.isUndefined = function (obj) {
	        Assert.check(Utils_1.Utils.isUndefined(obj), 'Value should be undefined.');
	    };
	    Assert.isNotUndefined = function (obj) {
	        Assert.check(!Utils_1.Utils.isUndefined(obj), 'Value should not be undefined.');
	    };
	    Assert.isNull = function (obj) {
	        Assert.check(Utils_1.Utils.isNull(obj), 'Value should be null.');
	    };
	    Assert.isNotNull = function (obj) {
	        Assert.check(!Utils_1.Utils.isNull(obj), 'Value should not be null.');
	    };
	    Assert.exists = function (obj) {
	        Assert.check(!Utils_1.Utils.isNullOrUndefined(obj), 'Value should not be null or undefined');
	    };
	    Assert.doesNotExists = function (obj) {
	        Assert.check(Utils_1.Utils.isNullOrUndefined(obj), 'Value should be null or undefined');
	    };
	    Assert.isString = function (obj) {
	        Assert.check(_.isString(obj), 'Value should be a string.');
	    };
	    Assert.stringStartsWith = function (str, start) {
	        Assert.isNonEmptyString(str);
	        Assert.isNonEmptyString(start);
	        Assert.check(str.indexOf(start) == 0, 'Value should start with ' + start);
	    };
	    Assert.isNonEmptyString = function (str) {
	        Assert.check(Utils_1.Utils.isNonEmptyString(str), 'Value should be a non-empty string.');
	    };
	    Assert.isNumber = function (obj) {
	        Assert.check(_.isNumber(obj), 'Value should be a number.');
	    };
	    Assert.isLargerThan = function (expected, actual) {
	        Assert.check(actual > expected, 'Value ' + actual + ' should be larger than ' + expected);
	    };
	    Assert.isLargerOrEqualsThan = function (expected, actual) {
	        Assert.check(actual >= expected, 'Value ' + actual + ' should be larger or equal than ' + expected);
	    };
	    Assert.isSmallerThan = function (expected, actual) {
	        Assert.check(actual < expected, 'Value ' + actual + ' should be smaller than ' + expected);
	    };
	    Assert.isSmallerOrEqualsThan = function (expected, actual) {
	        Assert.check(actual <= expected, 'Value ' + actual + ' should be smaller or equal than ' + expected);
	    };
	    return Assert;
	}());
	Assert.logger = new Logger_1.Logger('Assert');
	Assert.failureHandler = function (message) {
	    Assert.logger.error('Assertion Failed!', message);
	    if (window['console'] && console.trace) {
	        console.trace();
	    }
	    if (Utils_1.Utils.isNonEmptyString(message)) {
	        throw new PreconditionFailedException(message);
	    }
	    else {
	        throw new PreconditionFailedException('Assertion Failed!');
	    }
	};
	exports.Assert = Assert;
	var PreconditionFailedException = (function (_super) {
	    __extends(PreconditionFailedException, _super);
	    function PreconditionFailedException(message) {
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        return _this;
	    }
	    PreconditionFailedException.prototype.toString = function () {
	        return this.message;
	    };
	    return PreconditionFailedException;
	}(Error));
	exports.PreconditionFailedException = PreconditionFailedException;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var isCoveoFieldRegex = /^@[a-zA-Z0-9_\.]+$/;
	var Utils = (function () {
	    function Utils() {
	    }
	    Utils.isUndefined = function (obj) {
	        return typeof obj == 'undefined';
	    };
	    Utils.isNull = function (obj) {
	        return obj === null;
	    };
	    Utils.isNullOrUndefined = function (obj) {
	        return Utils.isUndefined(obj) || Utils.isNull(obj);
	    };
	    Utils.exists = function (obj) {
	        return !Utils.isNullOrUndefined(obj);
	    };
	    Utils.toNotNullString = function (str) {
	        return _.isString(str) ? str : '';
	    };
	    Utils.anyTypeToString = function (value) {
	        return value ? value.toString() : '';
	    };
	    Utils.isNullOrEmptyString = function (str) {
	        return Utils.isNullOrUndefined(str) || !Utils.isNonEmptyString(str);
	    };
	    Utils.isNonEmptyString = function (str) {
	        return _.isString(str) && str !== '';
	    };
	    Utils.isEmptyString = function (str) {
	        return !Utils.isNonEmptyString(str);
	    };
	    Utils.stringStartsWith = function (str, startWith) {
	        return str.slice(0, startWith.length) == startWith;
	    };
	    Utils.isNonEmptyArray = function (obj) {
	        return _.isArray(obj) && obj.length > 0;
	    };
	    Utils.isEmptyArray = function (obj) {
	        return !Utils.isNonEmptyArray(obj);
	    };
	    Utils.isHtmlElement = function (obj) {
	        if (window['HTMLElement'] != undefined) {
	            return obj instanceof HTMLElement;
	        }
	        else {
	            return obj && obj.nodeType && obj.nodeType == 1;
	        }
	    };
	    Utils.parseIntIfNotUndefined = function (str) {
	        if (Utils.isNonEmptyString(str)) {
	            return parseInt(str, 10);
	        }
	        else {
	            return undefined;
	        }
	    };
	    Utils.parseFloatIfNotUndefined = function (str) {
	        if (Utils.isNonEmptyString(str)) {
	            return parseFloat(str);
	        }
	        else {
	            return undefined;
	        }
	    };
	    Utils.round = function (num, decimals) {
	        return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);
	    };
	    Utils.parseBooleanIfNotUndefined = function (str) {
	        if (Utils.isNonEmptyString(str)) {
	            switch (str.toLowerCase()) {
	                case 'true':
	                case '1':
	                case 'yes':
	                    return true;
	                case 'false':
	                case '0':
	                case 'no':
	                    return false;
	                default:
	                    return undefined;
	            }
	        }
	        else {
	            return undefined;
	        }
	    };
	    Utils.trim = function (value) {
	        if (value == null) {
	            return null;
	        }
	        return value.replace(/^\s+|\s+$/g, '');
	    };
	    Utils.encodeHTMLEntities = function (rawStr) {
	        var ret = [];
	        for (var i = rawStr.length - 1; i >= 0; i--) {
	            if (/^[a-z0-9]/i.test(rawStr[i])) {
	                ret.unshift(rawStr[i]);
	            }
	            else {
	                ret.unshift(['&#', rawStr.charCodeAt(i), ';'].join(''));
	            }
	        }
	        return ret.join('');
	    };
	    Utils.decodeHTMLEntities = function (rawString) {
	        return rawString.replace(/&#(\d+);/g, function (match, dec) {
	            return String.fromCharCode(dec);
	        });
	    };
	    Utils.arrayEqual = function (array1, array2, sameOrder) {
	        if (sameOrder === void 0) { sameOrder = true; }
	        if (sameOrder) {
	            return _.isEqual(array1, array2);
	        }
	        else {
	            var arrays_1 = [array1, array2];
	            return _.all(arrays_1, function (array) {
	                return array.length == arrays_1[0].length && _.difference(array, arrays_1[0]).length == 0;
	            });
	        }
	    };
	    Utils.objectEqual = function (obj1, obj2) {
	        return _.isEqual(obj1, obj2);
	    };
	    Utils.isCoveoField = function (field) {
	        return isCoveoFieldRegex.test(field);
	    };
	    Utils.escapeRegexCharacter = function (str) {
	        var ret = str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
	        return ret;
	    };
	    Utils.getCaseInsensitiveProperty = function (object, name) {
	        // First try using a fast case-sensitive lookup
	        var value = object[name];
	        // Then try a fast case-sensitive lookup with lowercase name
	        if (value == null) {
	            var lowerCaseName_1 = name.toLowerCase();
	            value = object[lowerCaseName_1];
	            // Then try a slow scanning of all the properties
	            if (value == null) {
	                var matchingKey = _.find(_.keys(object), function (key) { return key.toLowerCase() == lowerCaseName_1; });
	                if (matchingKey != null) {
	                    value = object[matchingKey];
	                }
	            }
	        }
	        return value;
	    };
	    Utils.getFieldValue = function (result, name) {
	        // Be as forgiving as possible about the field name, since we expect
	        // user provided values.
	        if (name == null) {
	            return undefined;
	        }
	        name = Utils.trim(name);
	        if (name[0] == '@') {
	            name = name.substr(1);
	        }
	        if (name == '') {
	            return undefined;
	        }
	        // At this point the name should be well formed
	        if (!Utils.isCoveoField('@' + name)) {
	            throw "Not a valid field : " + name;
	        }
	        // Handle namespace field values of the form sf.Foo.Bar
	        var parts = name.split('.').reverse();
	        var obj = result.raw;
	        while (parts.length > 1) {
	            obj = Utils.getCaseInsensitiveProperty(obj, parts.pop());
	            if (Utils.isUndefined(obj)) {
	                return undefined;
	            }
	        }
	        var value = Utils.getCaseInsensitiveProperty(obj, parts[0]);
	        // If still nothing, look at the root of the result
	        if (value == null) {
	            value = Utils.getCaseInsensitiveProperty(result, name);
	        }
	        return value;
	    };
	    Utils.throttle = function (func, wait, options, context, args) {
	        if (options === void 0) { options = {}; }
	        var result;
	        var timeout = null;
	        var previous = 0;
	        var later = function () {
	            previous = options.leading === false ? 0 : new Date().getTime();
	            timeout = null;
	            result = func.apply(context, args);
	        };
	        return function () {
	            var now = new Date().getTime();
	            if (!previous && options.leading === false) {
	                previous = now;
	            }
	            var remaining = wait - (now - previous);
	            context = this;
	            args = arguments;
	            if (remaining <= 0) {
	                clearTimeout(timeout);
	                timeout = null;
	                previous = now;
	                result = func.apply(context, args);
	            }
	            else if (!timeout && options.trailing !== false) {
	                timeout = setTimeout(later, remaining);
	            }
	            return result;
	        };
	    };
	    Utils.extendDeep = function (target, src) {
	        if (!target) {
	            target = {};
	        }
	        var isArray = _.isArray(src);
	        var toReturn = isArray && [] || {};
	        if (isArray) {
	            target = target || [];
	            toReturn = toReturn['concat'](target);
	            _.each(src, function (e, i, obj) {
	                if (typeof target[i] === 'undefined') {
	                    toReturn[i] = e;
	                }
	                else if (typeof e === 'object') {
	                    toReturn[i] = Utils.extendDeep(target[i], e);
	                }
	                else {
	                    if (target.indexOf(e) === -1) {
	                        toReturn['push'](e);
	                    }
	                }
	            });
	        }
	        else {
	            if (target && typeof target === 'object') {
	                _.each(_.keys(target), function (key) {
	                    toReturn[key] = target[key];
	                });
	            }
	            _.each(_.keys(src), function (key) {
	                if (typeof src[key] !== 'object' || !src[key]) {
	                    toReturn[key] = src[key];
	                }
	                else {
	                    if (!target[key]) {
	                        toReturn[key] = src[key];
	                    }
	                    else {
	                        toReturn[key] = Utils.extendDeep(target[key], src[key]);
	                    }
	                }
	            });
	        }
	        return toReturn;
	    };
	    Utils.getQueryStringValue = function (key, queryString) {
	        if (queryString === void 0) { queryString = window.location.search; }
	        return queryString.replace(new RegExp('^(?:.*[&\\?]' + key.replace(/[\.\+\*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'), '$1');
	    };
	    Utils.isValidUrl = function (str) {
	        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
	        return regexp.test(str);
	    };
	    Utils.debounce = function (func, wait) {
	        var timeout;
	        var stackTraceTimeout;
	        return function () {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (timeout == null) {
	                timeout = setTimeout(function () {
	                    timeout = null;
	                }, wait);
	                stackTraceTimeout = setTimeout(function () {
	                    func.apply(_this, args);
	                    stackTraceTimeout = null;
	                });
	            }
	            else if (stackTraceTimeout == null) {
	                clearTimeout(timeout);
	                timeout = setTimeout(function () {
	                    func.apply(_this, args);
	                    timeout = null;
	                }, wait);
	            }
	        };
	    };
	    Utils.readCookie = function (name) {
	        var nameEQ = name + '=';
	        var ca = document.cookie.split(';');
	        for (var i = 0; i < ca.length; i++) {
	            var c = ca[i];
	            while (c.charAt(0) == ' ') {
	                c = c.substring(1, c.length);
	            }
	            if (c.indexOf(nameEQ) == 0) {
	                return c.substring(nameEQ.length, c.length);
	            }
	        }
	        return null;
	    };
	    Utils.toDashCase = function (camelCased) {
	        return camelCased.replace(/([a-z][A-Z])/g, function (g) { return g[0] + '-' + g[1].toLowerCase(); });
	    };
	    // Based on http://stackoverflow.com/a/8412989
	    Utils.parseXml = function (xml) {
	        if (typeof DOMParser != 'undefined') {
	            return (new DOMParser()).parseFromString(xml, 'text/xml');
	        }
	        else if (typeof ActiveXObject != 'undefined' && new ActiveXObject('Microsoft.XMLDOM')) {
	            var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
	            xmlDoc.async = 'false';
	            xmlDoc.loadXML(xml);
	            return xmlDoc;
	        }
	        else {
	            throw new Error('No XML parser found');
	        }
	    };
	    Utils.copyObject = function (target, src) {
	        var _this = this;
	        _.each(_.keys(src), function (key) {
	            if (typeof src[key] !== 'object' || !src[key]) {
	                target[key] = src[key];
	            }
	            else if (!target[key]) {
	                target[key] = src[key];
	            }
	            else {
	                _this.copyObject(target[key], src[key]);
	            }
	        });
	    };
	    Utils.copyObjectAttributes = function (target, src, attributes) {
	        var _this = this;
	        _.each(_.keys(src), function (key) {
	            if (_.contains(attributes, key)) {
	                if (typeof src[key] !== 'object' || !src[key]) {
	                    target[key] = src[key];
	                }
	                else if (!target[key]) {
	                    target[key] = src[key];
	                }
	                else {
	                    _this.copyObject(target[key], src[key]);
	                }
	            }
	        });
	    };
	    return Utils;
	}());
	exports.Utils = Utils;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var TimeSpan = (function () {
	    function TimeSpan(time, isMilliseconds) {
	        if (isMilliseconds === void 0) { isMilliseconds = true; }
	        if (isMilliseconds) {
	            this.milliseconds = time;
	        }
	        else {
	            this.milliseconds = time * 1000;
	        }
	    }
	    TimeSpan.prototype.getMilliseconds = function () {
	        return this.milliseconds;
	    };
	    TimeSpan.prototype.getSeconds = function () {
	        return this.getMilliseconds() / 1000;
	    };
	    TimeSpan.prototype.getMinutes = function () {
	        return this.getSeconds() / 60;
	    };
	    TimeSpan.prototype.getHours = function () {
	        return this.getMinutes() / 60;
	    };
	    TimeSpan.prototype.getDays = function () {
	        return this.getHours() / 24;
	    };
	    TimeSpan.prototype.getWeeks = function () {
	        return this.getDays() / 7;
	    };
	    TimeSpan.prototype.getHHMMSS = function () {
	        var hours = Math.floor(this.getHours());
	        var minutes = Math.floor(this.getMinutes()) % 60;
	        var seconds = Math.floor(this.getSeconds()) % 60;
	        var hoursString, minutesString, secondsString;
	        if (hours == 0) {
	            hoursString = '';
	        }
	        else {
	            hoursString = hours < 10 ? '0' + hours.toString() : hours.toString();
	        }
	        minutesString = minutes < 10 ? '0' + minutes.toString() : minutes.toString();
	        secondsString = seconds < 10 ? '0' + seconds.toString() : seconds.toString();
	        var hhmmss = (hoursString != '' ? hoursString + ':' : '') + minutesString + ':' + secondsString;
	        return hhmmss;
	    };
	    TimeSpan.fromDates = function (from, to) {
	        Assert_1.Assert.exists(from);
	        Assert_1.Assert.exists(to);
	        return new TimeSpan(to.valueOf() - from.valueOf());
	    };
	    return TimeSpan;
	}());
	exports.TimeSpan = TimeSpan;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Not sure about this : In year 2033 who's to say that this list won't be 50 pages long !
	var ResponsiveComponents_1 = __webpack_require__(17);
	var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	var DeviceUtils = (function () {
	    function DeviceUtils() {
	    }
	    DeviceUtils.getDeviceName = function () {
	        var userAgent = navigator.userAgent;
	        if (userAgent.match(/Android/i)) {
	            return 'Android';
	        }
	        if (userAgent.match(/BlackBerry/i)) {
	            return 'BlackBerry';
	        }
	        if (userAgent.match(/iPhone/i)) {
	            return 'iPhone';
	        }
	        if (userAgent.match(/iPad/i)) {
	            return 'iPad';
	        }
	        if (userAgent.match(/iPod/i)) {
	            return 'iPod';
	        }
	        if (userAgent.match(/Opera Mini/i)) {
	            return 'Opera Mini';
	        }
	        if (userAgent.match(/IEMobile/i)) {
	            return 'IE Mobile';
	        }
	        if (userAgent.match(/Chrome/i)) {
	            return 'Chrome';
	        }
	        if (userAgent.match(/MSIE/i) || userAgent.match(/Trident/i)) {
	            return 'IE';
	        }
	        if (userAgent.match(/Opera/i)) {
	            return 'Opera';
	        }
	        if (userAgent.match(/Firefox/i)) {
	            return 'Firefox';
	        }
	        if (userAgent.match(/Safari/i)) {
	            return 'Safari';
	        }
	        return 'Others';
	    };
	    DeviceUtils.isAndroid = function () {
	        return DeviceUtils.getDeviceName() == 'Android';
	    };
	    DeviceUtils.isIos = function () {
	        var deviceName = DeviceUtils.getDeviceName();
	        return deviceName == 'iPhone' || deviceName == 'iPad' || deviceName == 'iPod';
	    };
	    DeviceUtils.isIE8or9 = function () {
	        var myNav = navigator.userAgent.toLowerCase();
	        if (myNav.indexOf('msie') == -1) {
	            return false;
	        }
	        return parseInt(myNav.split('msie')[1]) < 10;
	    };
	    DeviceUtils.isMobileDevice = function () {
	        return mobile;
	    };
	    /**
	     * @deprecated
	     *
	     * Use ResponsiveComponents.isSmallScreenWidth() instead
	     */
	    DeviceUtils.isSmallScreenWidth = function () {
	        return new ResponsiveComponents_1.ResponsiveComponents().isSmallScreenWidth();
	    };
	    return DeviceUtils;
	}());
	exports.DeviceUtils = DeviceUtils;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	exports.MEDIUM_SCREEN_WIDTH = 800;
	exports.SMALL_SCREEN_WIDTH = 480;
	/**
	 * This class serves as a way to get and set the different screen size breakpoints for the interface.
	 *
	 * By settings those, you can impact, amongst other, the {@link Facet}, {@link Tab} or {@link ResultList} behaviour.
	 *
	 * For example, the {@link Facet} components of your interface will switch to a dropdown menu when the screen size reaches 800px or less.
	 *
	 * You could modify this value using this calls
	 *
	 * Normally, you would interact with this class using the instance bound to {@link SearchInterface.responsiveComponents}
	 */
	var ResponsiveComponents = (function () {
	    function ResponsiveComponents(windoh) {
	        if (windoh === void 0) { windoh = window; }
	        this.windoh = windoh;
	    }
	    /**
	     * Set the breakpoint for small screen size.
	     * @param width
	     */
	    ResponsiveComponents.prototype.setSmallScreenWidth = function (width) {
	        Assert_1.Assert.check(width < this.getMediumScreenWidth(), "Cannot set small screen width (" + width + ") larger or equal to the current medium screen width (" + this.getMediumScreenWidth() + ")");
	        this.smallScreenWidth = width;
	    };
	    /**
	     * Set the breakpoint for medium screen size
	     * @param width
	     */
	    ResponsiveComponents.prototype.setMediumScreenWidth = function (width) {
	        Assert_1.Assert.check(width > this.getSmallScreenWidth(), "Cannot set medium screen width (" + width + ") smaller or equal to the current small screen width (" + this.getSmallScreenWidth() + ")");
	        this.mediumScreenWidth = width;
	    };
	    /**
	     * Get the current breakpoint for small screen size.
	     *
	     * If it was not explicitly set by {@link ResponsiveComponents.setSmallScreenWidth}, the default value is `480`.
	     * @returns {number}
	     */
	    ResponsiveComponents.prototype.getSmallScreenWidth = function () {
	        if (this.smallScreenWidth == null) {
	            return exports.SMALL_SCREEN_WIDTH;
	        }
	        return this.smallScreenWidth;
	    };
	    /**
	     * Get the current breakpoint for medium screen size.
	     *
	     * If it was not explicitly set by {@link ResponsiveComponents.setMediumScreenWidth}, the default value is `800`.
	     * @returns {number}
	     */
	    ResponsiveComponents.prototype.getMediumScreenWidth = function () {
	        if (this.mediumScreenWidth == null) {
	            return exports.MEDIUM_SCREEN_WIDTH;
	        }
	        return this.mediumScreenWidth;
	    };
	    /**
	     * Return true if the current screen size is smaller than the current breakpoint set for small screen width.
	     * @returns {boolean}
	     */
	    ResponsiveComponents.prototype.isSmallScreenWidth = function () {
	        if (this.windoh['clientWidth'] != null) {
	            return this.windoh['clientWidth'] <= this.getSmallScreenWidth();
	        }
	        else {
	            return document.body.clientWidth <= this.getSmallScreenWidth();
	        }
	    };
	    /**
	     * Return true if the current screen size is smaller than the current breakpoint set for medium screen width.
	     * @returns {boolean}
	     */
	    ResponsiveComponents.prototype.isMediumScreenWidth = function () {
	        if (this.isSmallScreenWidth()) {
	            return false;
	        }
	        if (this.windoh['clientWidth'] != null) {
	            return this.windoh['clientWidth'] <= this.getMediumScreenWidth();
	        }
	        return document.body.clientWidth <= this.getMediumScreenWidth();
	    };
	    /**
	     * Return true if the current screen size is larger than the current breakpoint set for medium and small.
	     * @returns {boolean}
	     */
	    ResponsiveComponents.prototype.isLargeScreenWidth = function () {
	        return !this.isSmallScreenWidth() && !this.isMediumScreenWidth();
	    };
	    return ResponsiveComponents;
	}());
	exports.ResponsiveComponents = ResponsiveComponents;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var JQueryUtils = (function () {
	    function JQueryUtils() {
	    }
	    JQueryUtils.getJQuery = function () {
	        if (window && window['Coveo'] && window['Coveo']['$']) {
	            return window['Coveo']['$'];
	        }
	        return false;
	    };
	    JQueryUtils.isInstanceOfJQuery = function (obj) {
	        var jq = this.getJQuery();
	        if (jq) {
	            return obj instanceof jq;
	        }
	        return false;
	    };
	    JQueryUtils.isInstanceOfJqueryEvent = function (obj) {
	        var jq = this.getJQuery();
	        if (jq) {
	            return obj instanceof jq.Event;
	        }
	        return false;
	    };
	    return JQueryUtils;
	}());
	exports.JQueryUtils = JQueryUtils;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var AjaxError = (function () {
	    function AjaxError(message, status) {
	        this.message = message;
	        this.status = status;
	        Assert_1.Assert.exists(message);
	        Assert_1.Assert.exists(status);
	        this.name = this.type = 'Ajax Error (status: ' + status + ')';
	    }
	    return AjaxError;
	}());
	exports.AjaxError = AjaxError;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var MissingAuthenticationError = (function () {
	    function MissingAuthenticationError(provider) {
	        this.provider = provider;
	        this.isMissingAuthentication = true;
	        this.name = this.type = this.message = "Missing Authentication (provider: " + provider + ")";
	    }
	    return MissingAuthenticationError;
	}());
	exports.MissingAuthenticationError = MissingAuthenticationError;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var QueryUtils = (function () {
	    function QueryUtils() {
	    }
	    QueryUtils.createGuid = function () {
	        var guid;
	        var success = false;
	        if ((typeof (crypto) != 'undefined' && typeof (crypto.getRandomValues) != 'undefined')) {
	            try {
	                guid = QueryUtils.generateWithCrypto();
	                success = true;
	            }
	            catch (e) {
	                success = false;
	            }
	        }
	        if (!success) {
	            guid = QueryUtils.generateWithRandom();
	        }
	        return guid;
	    };
	    // This method is a fallback as it's generate a lot of collisions in Chrome.
	    QueryUtils.generateWithRandom = function () {
	        // http://stackoverflow.com/a/2117523
	        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
	            return v.toString(16);
	        });
	    };
	    QueryUtils.generateWithCrypto = function () {
	        var buf = new Uint16Array(8);
	        crypto.getRandomValues(buf);
	        var S4 = function (num) {
	            var ret = num.toString(16);
	            while (ret.length < 4) {
	                ret = '0' + ret;
	            }
	            return ret;
	        };
	        return (S4(buf[0]) + S4(buf[1]) + '-' + S4(buf[2]) + '-' + S4(buf[3]) + '-' + S4(buf[4]) + '-' + S4(buf[5]) + S4(buf[6]) + S4(buf[7]));
	    };
	    QueryUtils.setStateObjectOnQueryResults = function (state, results) {
	        QueryUtils.setPropertyOnResults(results, 'state', state);
	    };
	    QueryUtils.setStateObjectOnQueryResult = function (state, result) {
	        QueryUtils.setPropertyOnResult(result, 'state', state);
	    };
	    QueryUtils.setSearchInterfaceObjectOnQueryResult = function (searchInterface, result) {
	        QueryUtils.setPropertyOnResult(result, 'searchInterface', searchInterface);
	    };
	    QueryUtils.setIndexAndUidOnQueryResults = function (query, results, queryUid, pipeline, splitTestRun) {
	        Assert_1.Assert.exists(query);
	        Assert_1.Assert.exists(results);
	        var index = query.firstResult;
	        QueryUtils.setPropertyOnResults(results, 'queryUid', queryUid);
	        QueryUtils.setPropertyOnResults(results, 'pipeline', pipeline);
	        QueryUtils.setPropertyOnResults(results, 'splitTestRun', splitTestRun);
	        QueryUtils.setPropertyOnResults(results, 'index', index, function () { return ++index; });
	    };
	    QueryUtils.setTermsToHighlightOnQueryResults = function (query, results) {
	        QueryUtils.setPropertyOnResults(results, 'termsToHighlight', results.termsToHighlight);
	        QueryUtils.setPropertyOnResults(results, 'phrasesToHighlight', results.phrasesToHighlight);
	    };
	    QueryUtils.splitFlags = function (flags, delimiter) {
	        if (delimiter === void 0) { delimiter = ';'; }
	        Assert_1.Assert.exists(flags);
	        return flags.split(delimiter);
	    };
	    QueryUtils.isAttachment = function (result) {
	        return _.contains(QueryUtils.splitFlags(result.flags), 'IsAttachment');
	    };
	    QueryUtils.containsAttachment = function (result) {
	        return _.contains(QueryUtils.splitFlags(result.flags), 'ContainsAttachment');
	    };
	    QueryUtils.hasHTMLVersion = function (result) {
	        return _.contains(QueryUtils.splitFlags(result.flags), 'HasHtmlVersion');
	    };
	    QueryUtils.hasThumbnail = function (result) {
	        return _.contains(QueryUtils.splitFlags(result.flags), 'HasThumbnail');
	    };
	    QueryUtils.hasExcerpt = function (result) {
	        return result.excerpt != undefined && result.excerpt != '';
	    };
	    QueryUtils.getAuthor = function (result) {
	        return result.raw['author'];
	    };
	    QueryUtils.getUriHash = function (result) {
	        return result.raw['urihash'];
	    };
	    QueryUtils.getObjectType = function (result) {
	        return result.raw['objecttype'];
	    };
	    QueryUtils.getCollection = function (result) {
	        return result.raw['collection'];
	    };
	    QueryUtils.getSource = function (result) {
	        return result.raw['source'];
	    };
	    QueryUtils.getLanguage = function (result) {
	        return result.raw['language'];
	    };
	    QueryUtils.getPermanentId = function (result) {
	        var fieldValue;
	        var fieldUsed;
	        var permanentId = Utils_1.Utils.getFieldValue(result, 'permanentid');
	        if (permanentId) {
	            fieldUsed = 'permanentid';
	            fieldValue = permanentId;
	        }
	        else {
	            fieldUsed = 'urihash';
	            fieldValue = Utils_1.Utils.getFieldValue(result, 'urihash');
	        }
	        return {
	            fieldValue: fieldValue,
	            fieldUsed: fieldUsed
	        };
	    };
	    QueryUtils.quoteAndEscapeIfNeeded = function (str) {
	        Assert_1.Assert.isString(str);
	        return QueryUtils.isAtomicString(str) || (QueryUtils.isRangeString(str) || QueryUtils.isRangeWithoutOuterBoundsString(str)) ? str : QueryUtils.quoteAndEscape(str);
	    };
	    QueryUtils.quoteAndEscape = function (str) {
	        Assert_1.Assert.isString(str);
	        return "\"" + QueryUtils.escapeString(str) + "\"";
	    };
	    QueryUtils.escapeString = function (str) {
	        Assert_1.Assert.isString(str);
	        return str.replace(/"/g, ' ');
	    };
	    QueryUtils.isAtomicString = function (str) {
	        Assert_1.Assert.isString(str);
	        return /^\d+(\.\d+)?$|^[\d\w]+$/.test(str);
	    };
	    QueryUtils.isRangeString = function (str) {
	        Assert_1.Assert.isString(str);
	        return /^\d+(\.\d+)?\.\.\d+(\.\d+)?$|^\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}\.\.\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}$/.test(str);
	    };
	    QueryUtils.isRangeWithoutOuterBoundsString = function (str) {
	        Assert_1.Assert.isString(str);
	        return /^\d+(\.\d+)?$|^\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}$/.test(str);
	    };
	    QueryUtils.buildFieldExpression = function (field, operator, values) {
	        Assert_1.Assert.isNonEmptyString(field);
	        Assert_1.Assert.stringStartsWith(field, '@');
	        Assert_1.Assert.isNonEmptyString(operator);
	        Assert_1.Assert.isLargerOrEqualsThan(1, values.length);
	        if (values.length == 1) {
	            return field + operator + QueryUtils.quoteAndEscapeIfNeeded(values[0]);
	        }
	        else {
	            return field + operator + '(' + _.map(values, function (str) { return QueryUtils.quoteAndEscapeIfNeeded(str); }).join(',') + ')';
	        }
	    };
	    QueryUtils.buildFieldNotEqualExpression = function (field, values) {
	        Assert_1.Assert.isNonEmptyString(field);
	        Assert_1.Assert.stringStartsWith(field, '@');
	        Assert_1.Assert.isLargerOrEqualsThan(1, values.length);
	        var filter;
	        if (values.length == 1) {
	            filter = field + '==' + QueryUtils.quoteAndEscapeIfNeeded(values[0]);
	        }
	        else {
	            filter = field + '==' + '(' + _.map(values, function (str) { return QueryUtils.quoteAndEscapeIfNeeded(str); }).join(',') + ')';
	        }
	        return '(NOT ' + filter + ')';
	    };
	    QueryUtils.mergeQueryString = function (url, queryString) {
	        var queryStringPosition = url.indexOf('?');
	        if (queryStringPosition != -1) {
	            url += '&' + queryString;
	        }
	        else {
	            url += '?' + queryString;
	        }
	        return url;
	    };
	    QueryUtils.mergePath = function (url, path) {
	        var urlSplit = url.split('?');
	        return urlSplit[0] + path + '?' + (urlSplit[1] || '');
	    };
	    QueryUtils.setPropertyOnResults = function (results, property, value, afterOneLoop) {
	        _.each(results.results, function (result) {
	            QueryUtils.setPropertyOnResult(result, property, value);
	            value = afterOneLoop ? afterOneLoop() : value;
	        });
	    };
	    QueryUtils.setPropertyOnResult = function (result, property, value) {
	        result[property] = value;
	        _.each(result.childResults, function (child) {
	            child[property] = value;
	        });
	        if (!Utils_1.Utils.isNullOrUndefined(result.parentResult)) {
	            result.parentResult[property] = value;
	        }
	    };
	    // http://stackoverflow.com/a/11582513
	    QueryUtils.getUrlParameter = function (name) {
	        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [, ''])[1].replace(/\+/g, '%20')) || null;
	    };
	    QueryUtils.isStratusAgnosticField = function (fieldToVerify, fieldToMatch) {
	        var checkForSystem = /^(@?)(sys)?(.*)/i;
	        var matchFieldToVerify = checkForSystem.exec(fieldToVerify);
	        var matchFieldToMatch = checkForSystem.exec(fieldToMatch);
	        if (matchFieldToVerify && matchFieldToMatch) {
	            return (matchFieldToVerify[1] + matchFieldToVerify[3]).toLowerCase() == (matchFieldToMatch[1] + matchFieldToMatch[3]).toLowerCase();
	        }
	        return false;
	    };
	    return QueryUtils;
	}());
	exports.QueryUtils = QueryUtils;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var QueryError = (function () {
	    function QueryError(errorResponse) {
	        this.status = errorResponse.statusCode;
	        this.message = errorResponse.data.message;
	        this.name = this.type = errorResponse.data.type;
	        this.queryExecutionReport = errorResponse.data.executionReport;
	        Assert_1.Assert.isNumber(this.status);
	        Assert_1.Assert.isNonEmptyString(this.message);
	        Assert_1.Assert.isNonEmptyString(this.type);
	    }
	    return QueryError;
	}());
	exports.QueryError = QueryError;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ModalBox = __webpack_require__(24);
	exports.MagicBox = __webpack_require__(25);
	exports.LocaleString = __webpack_require__(26);


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	var Coveo;!function(e){var o;!function(e){function o(e,o){void 0===o&&(o={});var n=o.body||document.body;n.className?n.className.indexOf("coveo-modalBox-opened")==-1&&(n.className+=" coveo-modalBox-opened"):n.className="coveo-modalBox-opened";var c=document.createElement("div");c.className="coveo-modalBox",n.appendChild(c),o.fullscreen===!0&&(c.className+=" coveo-fullscreen");var d=document.createElement("div");d.className="coveo-overlay",c.appendChild(d);var s=document.createElement("div");if(s.className="coveo-wrapper",c.appendChild(s),null!=o.title){var r=document.createElement("div");r.className="coveo-title",s.appendChild(r),r.innerHTML=o.title,o.titleClose===!0&&r.addEventListener("click",function(){return v()})}e.className+=" coveo-body",s.appendChild(e);var i,v=function(e,t){void 0===e&&(e=0),void 0===t&&(t=!1);var d=null==o.validation||o.validation(e);if(d!==!1||t){c.parentElement&&c.parentElement.removeChild(c);var s=l.indexOf(v);return s>=0&&l.splice(s,1),null==n.querySelector(".coveo-modalBox")&&a(n,"coveo-modalBox-opened"),!0}return!1},u=function(e,o){var n=document.createElement("div");n.className="coveo-button",n.textContent=e,n.addEventListener("click",function(){return v(o)}),i.appendChild(n)};return null!=o.buttons&&(i=document.createElement("div"),i.className="coveo-buttons",s.appendChild(i),o.buttons&t.OK&&u("Ok",t.OK),o.buttons&t.APPLY&&u("Apply",t.APPLY),o.buttons&t.YES&&u("Yes",t.YES),o.buttons&t.NO&&u("No",t.NO),o.buttons&t.CANCEL&&u("Cancel",t.CANCEL)),l.push(v),o.overlayClose===!0&&d.addEventListener("click",function(e){return v()}),null!=o.className&&(c.className+=" "+o.className),{modalBox:c,overlay:d,wrapper:s,buttons:i,content:e,close:v}}function n(e){void 0===e&&(e=!1);for(var o=0;l.length>o;){var n=l[o](0,e);n||o++}}function a(e,o){e.className=e.className.replace(new RegExp("(^|\\s)"+o+"(\\s|\\b)","g"),"$1")}!function(e){e[e.OK=1]="OK",e[e.APPLY=2]="APPLY",e[e.YES=4]="YES",e[e.NO=8]="NO",e[e.CANCEL=16]="CANCEL"}(e.BUTTON||(e.BUTTON={}));var t=e.BUTTON,l=[];e.open=o,e.close=n}(o=e.ModalBox||(e.ModalBox={}))}(Coveo||(Coveo={}));
	
	/*** EXPORTS FROM exports-loader ***/
	module.exports = Coveo.ModalBox;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	var __extends=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e,n){var s=this;this.expression=e,this.input=n,_.isString(t)?this.value=t:_.isArray(t)&&(this.subResults=t,_.forEach(this.subResults,function(t){t.parent=s}))}return e.prototype.isSuccess=function(){return null!=this.value||null!=this.subResults&&_.all(this.subResults,function(t){return t.isSuccess()})},e.prototype.path=function(t){var e=null!=this.parent&&this.parent!=t?this.parent.path(t):[];return e.push(this),e},e.prototype.findParent=function(t){for(var e=this,n=_.isString(t)?function(e){return t==e.expression.id}:t;null!=e&&!n(e);)e=e.parent;return e},e.prototype.find=function(t){var e=_.isString(t)?function(e){return t==e.expression.id}:t;if(e(this))return this;if(this.subResults)for(var n=0;n<this.subResults.length;n++){var s=this.subResults[n].find(e);if(s)return s}return null},e.prototype.findAll=function(t){var e=[],n=_.isString(t)?function(e){return t==e.expression.id}:t;return n(this)&&e.push(this),this.subResults&&(e=_.reduce(this.subResults,function(t,e){return t.concat(e.findAll(n))},e)),e},e.prototype.resultAt=function(t,e){if(t<0||t>this.getLength())return[];if(null!=e){if(_.isString(e)){if(e==this.expression.id)return[this]}else if(e(this))return[this]}else{var n=null==this.value&&null==this.subResults?this.input:this.value;if(null!=n)return[this]}if(null!=this.subResults){for(var s=[],i=0;i<this.subResults.length;i++){var o=this.subResults[i];if(s=s.concat(o.resultAt(t,e)),t-=o.getLength(),t<0)break}return s}return[]},e.prototype.getExpect=function(){return null==this.value&&null==this.subResults?[this]:null!=this.subResults?_.reduce(this.subResults,function(t,e){return t.concat(e.getExpect())},[]):[]},e.prototype.getBestExpect=function(){var t=this.getExpect(),e=_.groupBy(t,function(t){return t.input}),n=_.last(_.keys(e).sort(function(t,e){return e.length-t.length})),s=e[n],e=_.groupBy(s,function(t){return t.expression.id});return _.map(e,function(t){return _.chain(t).map(function(t){return{path:t.path().length,result:t}}).sortBy("path").pluck("result").first().value()})},e.prototype.getHumanReadableExpect=function(){var t=this.getBestExpect(),e=t.length>0?_.last(t).input:"";return"Expected "+_.map(t,function(t){return t.getHumanReadable()}).join(" or ")+" but "+(e.length>0?JSON.stringify(e[0]):"end of input")+" found."},e.prototype.before=function(){if(null==this.parent)return"";var t=_.indexOf(this.parent.subResults,this);return this.parent.before()+_.chain(this.parent.subResults).first(t).map(function(t){return t.toString()}).join("").value()},e.prototype.after=function(){if(null==this.parent)return"";var t=_.indexOf(this.parent.subResults,this);return _.chain(this.parent.subResults).last(this.parent.subResults.length-t-1).map(function(t){return t.toString()}).join("").value()+this.parent.after()},e.prototype.getLength=function(){return null!=this.value?this.value.length:null!=this.subResults?_.reduce(this.subResults,function(t,e){return t+e.getLength()},0):this.input.length},e.prototype.toHtmlElement=function(){var t=document.createElement("span"),e=null!=this.expression?this.expression.id:null;return null!=e&&t.setAttribute("data-id",e),t.setAttribute("data-success",this.isSuccess().toString()),null!=this.value?(t.appendChild(document.createTextNode(this.value)),t.setAttribute("data-value",this.value)):null!=this.subResults?_.each(this.subResults,function(e){t.appendChild(e.toHtmlElement())}):(t.appendChild(document.createTextNode(this.input)),t.setAttribute("data-input",this.input),t.className="magic-box-error"+(this.input.length>0?"":" magic-box-error-empty")),t.result=this,t},e.prototype.clean=function(t){if(null!=t||!this.isSuccess()){t=t||_.last(this.getBestExpect()).path(this);var n=_.first(t);if(null!=n){var s=_.indexOf(this.subResults,n),i=s==-1?[]:_.map(_.first(this.subResults,s),function(t){return t.clean()});return i.push(n.clean(_.rest(t))),new e(i,this.expression,this.input)}return new e(null,this.expression,this.input)}return null!=this.value?new e(this.value,this.expression,this.input):null!=this.subResults?new e(_.map(this.subResults,function(t){return t.clean()}),this.expression,this.input):void 0},e.prototype.clone=function(){return null!=this.value?new e(this.value,this.expression,this.input):null!=this.subResults?new e(_.map(this.subResults,function(t){return t.clone()}),this.expression,this.input):new e(null,this.expression,this.input)},e.prototype.toString=function(){return null!=this.value?this.value:null!=this.subResults?_.map(this.subResults,function(t){return t.toString()}).join(""):this.input},e.prototype.getHumanReadable=function(){return this.expression instanceof t.ExpressionConstant?JSON.stringify(this.expression.value):this.expression.id},e}();t.Result=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(e){function n(n){e.call(this,[n],t.ExpressionEndOfInput,n.input);var s=new t.Result(null,t.ExpressionEndOfInput,n.input.substr(n.getLength()));s.parent=this,this.subResults.push(s)}return __extends(n,e),n}(t.Result);t.EndOfInputResult=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(e){function n(t,n,s,i){var o=this;e.call(this,null!=t?[t]:null,n,s),this.result=t,this.expression=n,this.input=s,this.failAttempt=i,_.forEach(this.failAttempt,function(t){t.parent=o})}return __extends(n,e),n.prototype.getExpect=function(){var t=this,e=[];return null!=this.result&&(e=this.result.getExpect()),e=_.reduce(this.failAttempt,function(t,e){return t.concat(e.getExpect())},e),e.length>0&&_.all(e,function(e){return e.input==t.input})?[this]:e},n.prototype.clean=function(e){if(null!=e||!this.isSuccess()){e=_.rest(e||_.last(this.getBestExpect()).path(this));var n=_.first(e);return null==n?new t.Result(null,this.expression,this.input):new t.Result([n.clean(_.rest(e))],this.expression,this.input)}return new t.Result(_.map(this.result.subResults,function(t){return t.clean()}),this.expression,this.input)},n}(t.Result);t.OptionResult=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(e){function n(t,n,s,i){e.call(this,t,n,s),this.results=t,this.expression=n,this.input=s,_.last(t)!=i&&(this.failAttempt=i,null!=this.failAttempt&&(this.failAttempt.parent=this))}return __extends(n,e),n.prototype.getExpect=function(){var t=e.prototype.getExpect.call(this);return null!=this.failAttempt?t.concat(this.failAttempt.getExpect()):t},n.prototype.clean=function(n){if(null!=this.failAttempt&&(null!=n||!this.isSuccess())){n=n||_.last(this.getBestExpect()).path(this);var s=_.first(n);if(null!=s&&s==this.failAttempt){var i=_.last(this.subResults),o=_.map(null!=i&&i.isSuccess()?this.subResults:_.initial(this.subResults),function(t){return t.clean()});return o.push(s.clean(_.rest(n))),new t.Result(o,this.expression,this.input)}}return e.prototype.clean.call(this,n)},n}(t.Result);t.RefResult=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e){this.value=t,this.id=e}return e.prototype.parse=function(e,n){var s=0==e.indexOf(this.value),i=new t.Result(s?this.value:null,this,e);return s&&n&&e.length>this.value.length?new t.EndOfInputResult(i):i},e.prototype.toString=function(){return this.value},e}();t.ExpressionConstant=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){t.ExpressionEndOfInput={id:"end of input",parse:null}}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function t(t,e,n){this.func=t,this.id=e,this.grammar=n}return t.prototype.parse=function(t,e){return this.func(t,e,this)},t.prototype.toString=function(){return this.id},t}();t.ExpressionFunction=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e){if(this.parts=t,this.id=e,0==t.length)throw JSON.stringify(e)+" should have at least 1 parts"}return e.prototype.parse=function(e,n){for(var s,i=[],o=e,r=0;r<this.parts.length;r++){var u=this.parts[r];if(s=u.parse(o,n&&r==this.parts.length-1),i.push(s),!s.isSuccess())break;o=o.substr(s.getLength())}return new t.Result(i,this,e)},e.prototype.toString=function(){return this.id},e}();t.ExpressionList=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e){this.parts=t,this.id=e}return e.prototype.parse=function(e,n){for(var s=[],i=0;i<this.parts.length;i++){var o=this.parts[i].parse(e,n);if(o.isSuccess())return new t.OptionResult(o,this,e,s);s.push(o)}return new t.OptionResult(null,this,e,s)},e.prototype.toString=function(){return this.id},e}();t.ExpressionOptions=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e,n,s){this.ref=t,this.occurrence=e,this.id=n,this.grammar=s}return e.prototype.parse=function(t,e){var n=this.grammar.getExpression(this.ref);if(null==n)throw"Expression not found:"+this.ref;return"?"==this.occurrence||null==this.occurrence?this.parseOnce(t,e,n):this.parseMany(t,e,n)},e.prototype.parseOnce=function(e,n,s){var i=s.parse(e,n),o=i.isSuccess();return o||"?"!=this.occurrence?new t.RefResult([i],this,e,o?null:i):n?0==e.length?new t.RefResult([],this,e,i):_.all(i.getBestExpect(),function(e){return e.expression==t.ExpressionEndOfInput})?new t.RefResult([new t.Result(null,t.ExpressionEndOfInput,e)],this,e,i):i:new t.RefResult([],this,e,null)},e.prototype.parseMany=function(e,n,s){var i,o,r=[],u=e;do i=s.parse(u,!1),o=i.isSuccess(),o&&(r.push(i),u=u.substr(i.getLength()));while(o&&i.input!=u);var a=_.isNumber(this.occurrence)?this.occurrence:"+"==this.occurrence?1:0;if(r.length<a)r.push(i);else if(n)if(r.length>0){var l=_.last(r);i=s.parse(l.input,!0),i.isSuccess()?r[r.length-1]=i:(r.push(new t.Result(null,t.ExpressionEndOfInput,l.input.substr(l.getLength()))),i=s.parse(l.input.substr(l.getLength()),!0))}else if(0!=e.length){var p=new t.Result(null,t.ExpressionEndOfInput,e);return new t.RefResult([p],this,e,i)}return new t.RefResult(r,this,e,i)},e.prototype.toString=function(){return this.id},e}();t.ExpressionRef=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(t,e,n){this.value=t,this.id=e}return e.prototype.parse=function(e,n){var s=e.match(this.value);null!=s&&0!=s.index&&(s=null);var i=new t.Result(null!=s?s[0]:null,this,e);return i.isSuccess()&&n&&e.length>i.value.length?new t.EndOfInputResult(i):i},e.prototype.toString=function(){return this.id},e}();t.ExpressionRegExp=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(e,n){void 0===n&&(n={}),this.expressions={},this.start=new t.ExpressionRef(e,null,"start",this),this.addExpressions(n)}return e.prototype.addExpressions=function(t){var e=this;_.each(t,function(t,n){e.addExpression(n,t)})},e.prototype.addExpression=function(t,n){if(t in this.expressions)throw"Grammar already contain the id:"+t;this.expressions[t]=e.buildExpression(n,t,this)},e.prototype.getExpression=function(t){return this.expressions[t]},e.prototype.parse=function(t){return this.start.parse(t,!0)},e.buildExpression=function(e,n,s){var i=typeof e;if("undefined"==i)throw"Invalid Expression: "+e;if(_.isString(e))return this.buildStringExpression(e,n,s);if(_.isArray(e))return new t.ExpressionOptions(_.map(e,function(e,i){return new t.ExpressionRef(e,null,n+"_"+i,s)}),n);if(_.isRegExp(e))return new t.ExpressionRegExp(e,n,s);if(_.isFunction(e))return new t.ExpressionFunction(e,n,s);throw"Invalid Expression: "+e},e.buildStringExpression=function(n,s,i){var o=e.stringMatch(n,e.spliter),r=_.map(o,function(e,n){if(e[1]){var o=e[1],r=e[3]?Number(e[3]):e[2]||null;return new t.ExpressionRef(o,r,s+"_"+n,i)}return new t.ExpressionConstant(e[4],s+"_"+n)});if(1==r.length){var u=r[0];return u.id=s,u}return new t.ExpressionList(r,s)},e.stringMatch=function(t,e){for(var n,s=[],i=new RegExp(e.source,"g");null!==(n=i.exec(t));)s.push(n);return s},e.spliter=/\[(\w+)(\*|\+|\?|\{([1-9][0-9]*)\})?\]|(.[^\[]*)/,e}();t.Grammar=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(e,n,s){this.element=e,this.onchange=n,this.magicBox=s,this.hasFocus=!1,this.justPressedTab=!1,this.underlay=document.createElement("div"),this.underlay.className="magic-box-underlay",this.highlightContainer=document.createElement("span"),this.highlightContainer.className="magic-box-highlight-container",this.underlay.appendChild(this.highlightContainer),this.ghostTextContainer=document.createElement("span"),this.ghostTextContainer.className="magic-box-ghost-text",this.underlay.appendChild(this.ghostTextContainer),this.input=t.$$(e).find("input"),this.input?e.insertBefore(this.underlay,this.input):(this.input=document.createElement("input"),e.appendChild(this.underlay),e.appendChild(this.input)),this.input.spellcheck=!1,this.input.setAttribute("form","coveo-dummy-form"),this.input.setAttribute("autocomplete","off"),this.setupHandler()}return e.prototype.updateInput=function(){this.input.value!=this.result.input&&(this.input.value=this.result.input,this.hasFocus&&this.setCursor(this.getValue().length))},e.prototype.updateHighlight=function(){this.highlightContainer.innerHTML="",this.highlightContainer.appendChild(this.result.toHtmlElement())},e.prototype.updateWordCompletion=function(){this.ghostTextContainer.innerHTML="",null!=this.wordCompletion&&this.ghostTextContainer.appendChild(document.createTextNode(this.wordCompletion.substr(this.result.input.length)))},e.prototype.updateScroll=function(e){var n=this;void 0===e&&(e=!0);var s=function(){n.underlay.clientWidth<n.underlay.scrollWidth&&(n.underlay.style.visibility="hidden",n.underlay.scrollLeft=n.input.scrollLeft,n.underlay.scrollTop=n.input.scrollTop,n.underlay.style.visibility="visible"),n.updateScrollDefer=null,n.hasFocus&&n.updateScroll()};e?null==this.updateScrollDefer&&(this.updateScrollDefer=t.requestAnimationFrame(s)):s()},e.prototype.setResult=function(t,e){this.result=t,this.updateInput(),this.updateHighlight(),_.isUndefined(e)&&null!=this.wordCompletion&&0==this.wordCompletion.indexOf(this.result.input)?this.updateWordCompletion():this.setWordCompletion(e),this.updateScroll()},e.prototype.setWordCompletion=function(t){null!=t&&0!=t.toLowerCase().indexOf(this.result.input.toLowerCase())&&(t=null),this.wordCompletion=t,this.updateWordCompletion(),this.updateScroll()},e.prototype.setCursor=function(t){if(this.input.focus(),this.input.createTextRange){var e=this.input.createTextRange();e.move("character",t),e.select()}else null!=this.input.selectionStart&&(this.input.focus(),this.input.setSelectionRange(t,t))},e.prototype.getCursor=function(){return this.input.selectionStart},e.prototype.setupHandler=function(){var t=this;this.input.onblur=function(){t.hasFocus=!1,setTimeout(function(){t.hasFocus||t.onblur&&t.onblur()},300),t.updateScroll()},this.input.onfocus=function(){t.hasFocus||(t.hasFocus=!0,t.updateScroll(),t.onfocus&&t.onfocus())},this.input.onkeydown=function(e){t.keydown(e)},this.input.onkeyup=function(e){t.keyup(e)},this.input.onclick=function(){t.onchangecursor()},this.input.oncut=function(){setTimeout(function(){t.onInputChange()})},this.input.onpaste=function(){setTimeout(function(){t.onInputChange()})}},e.prototype.focus=function(){var t=this;this.hasFocus=!0,setTimeout(function(){t.input.focus(),t.setCursor(t.getValue().length)})},e.prototype.blur=function(){this.hasFocus&&this.input.blur()},e.prototype.keydown=function(e){var n=this;switch(e.keyCode||e.which){case 9:this.justPressedTab?this.blur():this.magicBox.hasSuggestions()&&e.preventDefault(),this.justPressedTab=!0;break;default:e.stopPropagation(),this.justPressedTab=!1,null==this.onkeydown||this.onkeydown(e.keyCode||e.which)?t.requestAnimationFrame(function(){n.onInputChange()}):e.preventDefault()}},e.prototype.keyup=function(t){switch(t.keyCode||t.which){case 9:this.tabPress();break;case 37:case 39:this.onchangecursor();break;default:null==this.onkeydown||this.onkeyup(t.keyCode||t.which)?this.onInputChange():t.preventDefault()}},e.prototype.tabPress=function(){null!=this.wordCompletion&&(this.input.value=this.wordCompletion),this.ontabpress&&this.ontabpress(),this.magicBox.showSuggestion()},e.prototype.onInputChange=function(){this.result.input!=this.input.value&&this.onchange(this.input.value,!1)},e.prototype.getValue=function(){return this.input.value},e.prototype.getWordCompletion=function(){return this.wordCompletion},e}();t.InputManager=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e=function(){function e(e,n){var s=this;this.element=e,this.options=_.defaults(n,{selectableClass:"magic-box-suggestion",selectedClass:"magic-box-selected"}),void 0==this.options.timeout&&(this.options.timeout=500),this.hasSuggestions=!1,t.$$(this.element).on("mouseover",function(t){s.handleMouseOver(t)}),t.$$(this.element).on("mouseout",function(t){s.handleMouseOut(t)})}return e.prototype.handleMouseOver=function(e){var n=t.$$(e.target),s=n.parents(this.options.selectableClass);n.hasClass(this.options.selectableClass)?this.addSelectedClass(n.el):s.length>0&&this.element.contains(s[0])&&this.addSelectedClass(s[0])},e.prototype.handleMouseOut=function(e){var n=t.$$(e.target),s=n.parents(this.options.selectableClass);if(e.relatedTarget){var i=t.$$(e.relatedTarget).parents(this.options.selectableClass);n.hasClass(this.options.selectedClass)&&!t.$$(e.relatedTarget).hasClass(this.options.selectableClass)?n.removeClass(this.options.selectedClass):0==i.length&&s.length>0&&t.$$(s[0]).removeClass(this.options.selectedClass)}else n.hasClass(this.options.selectedClass)?n.removeClass(this.options.selectedClass):s.length>0&&t.$$(s[0]).removeClass(this.options.selectedClass)},e.prototype.moveDown=function(){var e=this.element.getElementsByClassName(this.options.selectedClass).item(0),n=this.element.getElementsByClassName(this.options.selectableClass),s=-1;if(null!=e){t.$$(e).removeClass(this.options.selectedClass);for(var i=0;i<n.length;i++)if(e==n.item(i)){s=i;break}s=s==-1?0:s+1}else s=0;return e=n.item(s),null!=e&&t.$$(e).addClass(this.options.selectedClass),this.returnMoved(e)},e.prototype.moveUp=function(){var e=this.element.getElementsByClassName(this.options.selectedClass).item(0),n=this.element.getElementsByClassName(this.options.selectableClass),s=-1;if(null!=e){t.$$(e).removeClass(this.options.selectedClass);for(var i=0;i<n.length;i++)if(e==n.item(i)){s=i;break}s=s==-1?n.length-1:s-1}else s=n.length-1;return e=n.item(s),null!=e&&t.$$(e).addClass(this.options.selectedClass),this.returnMoved(e)},e.prototype.select=function(){var e=this.element.getElementsByClassName(this.options.selectedClass).item(0);return null!=e&&t.$$(e).trigger("keyboardSelect"),e},e.prototype.mergeSuggestions=function(t,e){var n,s=this,i=[];t=_.compact(t);var o=this.pendingSuggestion=new Promise(function(e,r){_.each(t,function(t){var e=!1;setTimeout(function(){e=!0},s.options.timeout),t.then(function(t){!e&&t&&(i=i.concat(t))})});var u=function(){n&&clearTimeout(n),0==i.length?e([]):o==s.pendingSuggestion||null==s.pendingSuggestion?e(i.sort(function(t,e){return e.index-t.index})):r("new request queued")};0==t.length&&u(),void 0==t&&u(),n=setTimeout(function(){u()},s.options.timeout),Promise.all(t).then(function(){return u()})});o.then(function(t){return e&&e(t),s.updateSuggestions(t),t})["catch"](function(){return null})},e.prototype.updateSuggestions=function(e){var n=this;this.element.innerHTML="",this.element.className="magic-box-suggestions",_.each(e,function(e){var s=e.dom;if(s){t.$$(s).removeClass(n.options.selectedClass);var i=t.$$(s).find("."+n.options.selectableClass);t.$$(i).removeClass(n.options.selectedClass)}else{if(s=document.createElement("div"),s.className="magic-box-suggestion",null!=e.html)s.innerHTML=e.html;else if(null!=e.text)s.appendChild(document.createTextNode(e.text));else if(null!=e.separator){s.className="magic-box-suggestion-seperator";var o=document.createElement("div");o.className="magic-box-suggestion-seperator-label",o.appendChild(document.createTextNode(e.separator)),s.appendChild(o)}t.$$(s).on("click",function(){e.onSelect()}),t.$$(s).on("keyboardSelect",function(){e.onSelect()}),t.$$(s).addClass(n.options.selectableClass)}s.suggestion=e,n.element.appendChild(s)}),e.length>0?(t.$$(this.element).addClass("magic-box-hasSuggestion"),this.hasSuggestions=!0):(t.$$(this.element).removeClass("magic-box-hasSuggestion"),this.hasSuggestions=!1)},e.prototype.returnMoved=function(e){if(null!=e){if(e.suggestion)return e.suggestion;if(e["no-text-suggestion"])return null;if(e instanceof HTMLElement)return{text:t.$$(e).text()}}return null},e.prototype.addSelectedClass=function(e){for(var n=this.element.getElementsByClassName(this.options.selectedClass),s=0;s<n.length;s++){var i=n.item(s);t.$$(i).removeClass(this.options.selectedClass)}t.$$(e).addClass(this.options.selectedClass)},e}();t.SuggestionsManager=e}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(e){function n(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}function s(t,e,s,o,r){if(void 0===s&&(s=!1),void 0===o&&(o="magic-box-hightlight"),void 0===r&&(r=""),0==e.length)return t;var u=n(e),a="("+u+")|(.*?(?="+u+")|.+)",l=new RegExp(a,s?"gi":"g");return t.replace(l,function(t,e,n){return i(null!=e?o:r,t)})}var i=function(t,e){return'<span class="'+t+'">'+_.escape(e)+"</span>"};e.highlightText=s;var o=function(){function e(t){this.el=t}return e.prototype.text=function(t){return t?void(void 0!=this.el.innerText?this.el.innerText=t:void 0!=this.el.textContent&&(this.el.textContent=t)):this.el.innerText||this.el.textContent},e.prototype.nodeListToArray=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t.item(e);return n},e.prototype.empty=function(){for(;this.el.firstChild;)this.el.removeChild(this.el.firstChild)},e.prototype.show=function(){this.el.style.display="visible"},e.prototype.hide=function(){this.el.style.display="none"},e.prototype.toggle=function(t){void 0===t?"visible"==this.el.style.display?this.hide():this.show():t?this.show():this.hide()},e.prototype.find=function(t){return this.el.querySelector(t)},e.prototype.is=function(t){return this.el.tagName.toLowerCase()==t.toLowerCase()||(!("."!=t[0]||!this.hasClass(t.substr(1)))||"#"==t[0]&&this.el.getAttribute("id")==t.substr(1))},e.prototype.closest=function(e){for(var n=this.el,s=!1;!s&&(t.$$(n).hasClass(e)&&(s=!0),"body"!=n.tagName.toLowerCase())&&null!=n.parentElement;)s||(n=n.parentElement);if(s)return n},e.prototype.parent=function(t){if(void 0!=this.el.parentElement)return this.traverseAncestorForClass(this.el.parentElement,t)},e.prototype.parents=function(t){for(var n=[],s=this.parent(t);s;)n.push(s),s=new e(s).parent(t);return n},e.prototype.findAll=function(t){return this.nodeListToArray(this.el.querySelectorAll(t))},e.prototype.findClass=function(t){return"getElementsByClassName"in this.el?this.nodeListToArray(this.el.getElementsByClassName(t)):this.nodeListToArray(this.el.querySelectorAll("."+t))},e.prototype.findId=function(t){return document.getElementById(t)},e.prototype.addClass=function(t){this.hasClass(t)||(this.el.className?this.el.className+=" "+t:this.el.className=t)},e.prototype.removeClass=function(t){this.el.className=this.el.className.replace(new RegExp("(^|\\s)"+t+"(\\s|\\b)","g"),"$1")},e.prototype.toggleClass=function(t,e){e?this.addClass(t):this.removeClass(t)},e.prototype.getClass=function(){return this.el.className.match(e.CLASS_NAME_REGEX)||[]},e.prototype.hasClass=function(t){return _.contains(this.getClass(),t)},e.prototype.detach=function(){this.el.parentElement&&this.el.parentElement.removeChild(this.el)},e.prototype.on=function(t,n){var s=this;if(_.isArray(t))_.each(t,function(t){s.on(t,n)});else{var i=this.getJQuery();if(i)i(this.el).on(t,n);else if(this.el.addEventListener){var o=function(t){n(t,t.detail)};e.handlers.push({eventHandle:n,fn:o}),this.el.addEventListener(t,o,!1)}else this.el.on&&this.el.on("on"+t,n)}},e.prototype.one=function(t,e){var n=this;if(_.isArray(t))_.each(t,function(t){n.one(t,e)});else{var s=function(i){return n.off(t,s),e(i)};this.on(t,s)}},e.prototype.off=function(t,n){var s=this;if(_.isArray(t))_.each(t,function(t){s.off(t,n)});else{var i=this.getJQuery();if(i)i(this.el).off(t,n);else if(this.el.removeEventListener){var o=0,r=_.find(e.handlers,function(t,e){if(t.eventHandle==n)return o=e,!0});r&&(this.el.removeEventListener(t,r.fn,!1),e.handlers.splice(o,1))}else this.el.off&&this.el.off("on"+t,n)}},e.prototype.trigger=function(t,e){var n=this.getJQuery();if(n)n(this.el).trigger(t,e);else if(void 0!==CustomEvent){var s=new CustomEvent(t,{detail:e,bubbles:!0});this.el.dispatchEvent(s)}},e.prototype.isEmpty=function(){return e.ONLY_WHITE_SPACE_REGEX.test(this.el.innerHTML)},e.prototype.isDescendant=function(t){for(var e=this.el.parentNode;null!=e;){if(e==t)return!0;e=e.parentNode}return!1},e.prototype.traverseAncestorForClass=function(e,n){void 0===e&&(e=this.el),0==n.indexOf(".")&&(n=n.substr(1));for(var s=!1;!s&&(t.$$(e).hasClass(n)&&(s=!0),"body"!=e.tagName.toLowerCase())&&null!=e.parentElement;)s||(e=e.parentElement);if(s)return e},e.prototype.getJQuery=function(){return void 0!=window.jQuery&&window.jQuery},e.CLASS_NAME_REGEX=/-?[_a-zA-Z]+[_a-zA-Z0-9-]*/g,e.ONLY_WHITE_SPACE_REGEX=/^\s*$/,e.handlers=[],e}();e.Dom=o}(e=t.Utils||(t.Utils={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){t.$$=function(e){return window.Coveo&&window.Coveo.$$?window.Coveo.$$(e):new t.Utils.Dom(e)}}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(e){function n(t,e,n,s){_.each(s.expressions,function(e){_.contains(t,e)||t.push(e)}),_.each(s.basicExpressions,function(t){_.contains(e,t)||e.push(t)}),_.each(s.grammars,function(t,e){if(e in n){if(!_.isArray(n[e])||!_.isArray(t))throw _.each(t,function(t){n[e].push(t)}),"Can not merge "+e+"("+new String(t)+" => "+new String(n[e])+")";_.each(t,function(t){n[e].push(t)})}else n[e]=t})}function s(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];for(var s=[],i=[],o={Start:["Expressions","Empty"],Expressions:"[OptionalSpaces][Expression][ExpressionsList*][OptionalSpaces]",ExpressionsList:"[Spaces][Expression]",Expression:s,BasicExpression:i,OptionalSpaces:/ */,Spaces:/ +/,Empty:/(?!.)/},r=0;r<t.length;r++)n(s,i,o,t[r]),_.each(t[r].include,function(e){_.contains(t,e)||t.push(e)});return s.push("BasicExpression"),{start:"Start",expressions:o}}function i(){for(var e=[],n=0;n<arguments.length;n++)e[n-0]=arguments[n];var i=s.apply(this,e);return new t.Grammar(i.start,i.expressions)}e.Expressions=s,e.ExpressionsGrammar=i}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(e){e.notWordStart=" ()[],$@'\"",e.notInWord=" ()[],:",e.Basic={basicExpressions:["Word","DoubleQuoted"],grammars:{DoubleQuoted:'"[NotDoubleQuote]"',NotDoubleQuote:/[^"]*/,SingleQuoted:"'[NotSingleQuote]'",NotSingleQuote:/[^']*/,Number:/[0-9]+/,Word:function(n,s,i){var o=new RegExp("[^"+e.notWordStart.replace(/(.)/g,"\\$1")+"][^"+e.notInWord.replace(/(.)/g,"\\$1")+"]*"),r=n.match(o);null!=r&&0!=r.index&&(r=null);var u=new t.Result(null!=r?r[0]:null,i,n);return u.isSuccess()&&s&&n.length>u.value.length?new t.EndOfInputResult(u):u}}}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.SubExpression={basicExpressions:["SubExpression"],grammars:{SubExpression:"([Expressions])"}}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.Date={grammars:{Date:"[DateYear]/[DateMonth]/[DateDay]",DateYear:/([0-9]{4})/,DateMonth:/(1[0-2]|0?[1-9])/,DateDay:/([1-2][0-9]|3[0-1]|0?[1-9])/,DateRange:"[Date][Spaces?]..[Spaces?][Date]",DateRelative:["DateRelativeNegative","DateRelativeTerm"],DateRelativeTerm:/now|today|yesterday/,DateRelativeNegative:"[DateRelativeTerm][DateRelativeNegativeRef]",DateRelativeNegativeRef:/([\-\+][0-9]+(s|m|h|d|mo|y))/},include:[t.Basic]}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.Field={basicExpressions:["FieldSimpleQuery","FieldQuery","Field"],grammars:{FieldQuery:"[Field][OptionalSpaces][FieldQueryOperation]",FieldQueryOperation:["FieldQueryValue","FieldQueryNumeric"],FieldQueryValue:"[FieldOperator][OptionalSpaces][FieldValue]",FieldQueryNumeric:"[FieldOperatorNumeric][OptionalSpaces][FieldValueNumeric]",FieldSimpleQuery:"[FieldName]:[OptionalSpaces][FieldValue]",Field:"@[FieldName]",FieldName:/[a-zA-Z][a-zA-Z0-9\.\_]*/,FieldOperator:/==|=|<>/,FieldOperatorNumeric:/<=|>=|<|>/,FieldValue:["DateRange","NumberRange","DateRelative","Date","Number","FieldValueList","FieldValueString"],FieldValueNumeric:["DateRelative","Date","Number"],FieldValueString:["DoubleQuoted","FieldValueNotQuoted"],FieldValueList:"([FieldValueString][FieldValueStringList*])",FieldValueStringList:"[FieldValueSeparator][FieldValueString]",FieldValueSeparator:/ *, */,FieldValueNotQuoted:/[^ \(\),]+/,NumberRange:"[Number][Spaces?]..[Spaces?][Number]"},include:[t.Date,t.Basic]}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.QueryExtension={basicExpressions:["QueryExtension"],grammars:{QueryExtension:"$[QueryExtensionName]([QueryExtensionArguments])",QueryExtensionName:/\w+/,QueryExtensionArguments:"[QueryExtensionArgumentList*][QueryExtensionArgument]",QueryExtensionArgumentList:"[QueryExtensionArgument][Spaces?],[Spaces?]",QueryExtensionArgument:"[QueryExtensionArgumentName]:[Spaces?][QueryExtensionArgumentValue]",QueryExtensionArgumentName:/\w+/,QueryExtensionArgumentValue:["SingleQuoted","Expressions"]},include:[t.Basic]}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.NestedQuery={basicExpressions:["NestedQuery"],grammars:{NestedQuery:"[[NestedField][OptionalSpaces][Expressions]]",NestedField:"[[Field]]",FieldValue:["NestedQuery"]},include:[t.Field]}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){var e;!function(t){t.Complete={include:[t.NestedQuery,t.QueryExtension,t.SubExpression,t.Field,t.Basic]}}(e=t.Grammars||(t.Grammars={}))}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));var Coveo;!function(t){var e;!function(t){function e(t,e,n){return new s(t,e,n)}function n(t){return"requestAnimationFrame"in window?window.requestAnimationFrame(t):setTimeout(t)}var s=function(){function e(e,n,s){var i=this;void 0===s&&(s={}),this.element=e,this.grammar=n,this.options=s,this.lastSuggestions=[],_.isUndefined(this.options.inline)&&(this.options.inline=!1),t.$$(e).addClass("magic-box"),this.options.inline&&t.$$(e).addClass("magic-box-inline"),this.result=this.grammar.parse(""),this.displayedResult=this.result.clean(),this.clearDom=document.createElement("div"),this.clearDom.className="magic-box-clear";var o=document.createElement("div");o.className="magic-box-icon",this.clearDom.appendChild(o);var r=t.$$(e).find(".magic-box-input");r?e.insertBefore(this.clearDom,r):(r=document.createElement("div"),
	r.className="magic-box-input",e.appendChild(this.clearDom),e.appendChild(r)),this.inputManager=new t.InputManager(r,function(t,e){e?(i.setText(t),i.onselect&&i.onselect(i.getFirstSuggestionText())):(i.setText(t),i.showSuggestion(),i.onchange&&i.onchange())},this),this.inputManager.ontabpress=function(){i.ontabpress&&i.ontabpress()};var u=this.inputManager.getValue();u&&(this.displayedResult.input=u),this.inputManager.setResult(this.displayedResult);var a=document.createElement("div");a.className="magic-box-suggestions",this.element.appendChild(a),this.suggestionsManager=new t.SuggestionsManager(a,{selectableClass:this.options.selectableSuggestionClass,selectedClass:this.options.selectedSuggestionClass,timeout:this.options.suggestionTimeout}),this.setupHandler()}return e.prototype.getResult=function(){return this.result},e.prototype.getDisplayedResult=function(){return this.displayedResult},e.prototype.setText=function(e){t.$$(this.element).toggleClass("magic-box-notEmpty",e.length>0),this.result=this.grammar.parse(e),this.displayedResult=this.result.clean(),this.inputManager.setResult(this.displayedResult)},e.prototype.setCursor=function(t){this.inputManager.setCursor(t)},e.prototype.getCursor=function(){return this.inputManager.getCursor()},e.prototype.resultAtCursor=function(t){return this.displayedResult.resultAt(this.getCursor(),t)},e.prototype.setupHandler=function(){var e=this;this.inputManager.onblur=function(){t.$$(e.element).removeClass("magic-box-hasFocus"),e.onblur&&e.onblur(),e.options.inline||e.clearSuggestion()},this.inputManager.onfocus=function(){t.$$(e.element).addClass("magic-box-hasFocus"),e.showSuggestion(),e.onfocus&&e.onfocus()},this.inputManager.onkeydown=function(t){if(38==t||40==t)return!1;if(13==t){var n=e.suggestionsManager.select();return null==n&&e.onsubmit&&e.onsubmit(),!1}return 27==t&&(e.clearSuggestion(),e.blur()),!0},this.inputManager.onchangecursor=function(){e.showSuggestion()},this.inputManager.onkeyup=function(t){if(38==t)e.onmove&&e.onmove(),e.focusOnSuggestion(e.suggestionsManager.moveUp()),e.onchange&&e.onchange();else{if(40!=t)return!0;e.onmove&&e.onmove(),e.focusOnSuggestion(e.suggestionsManager.moveDown()),e.onchange&&e.onchange()}return!1},this.clearDom.onclick=function(){e.clear()}},e.prototype.showSuggestion=function(){var t=this;this.suggestionsManager.mergeSuggestions(null!=this.getSuggestions?this.getSuggestions():[],function(e){t.updateSuggestion(e)})},e.prototype.updateSuggestion=function(t){var e=this;this.lastSuggestions=t;var n=this.getFirstSuggestionText();this.inputManager.setWordCompletion(n&&n.text),this.onsuggestions&&this.onsuggestions(t),_.each(t,function(t){null==t.onSelect&&null!=t.text&&(t.onSelect=function(){e.setText(t.text),e.onselect&&e.onselect(t)})})},e.prototype.focus=function(){t.$$(this.element).addClass("magic-box-hasFocus"),this.inputManager.focus()},e.prototype.blur=function(){this.inputManager.blur()},e.prototype.clearSuggestion=function(){var t=this;this.suggestionsManager.mergeSuggestions([],function(e){t.updateSuggestion(e)}),this.inputManager.setWordCompletion(null)},e.prototype.focusOnSuggestion=function(t){null==t||null==t.text?(t=this.getFirstSuggestionText(),this.inputManager.setResult(this.displayedResult,t&&t.text)):this.inputManager.setResult(this.grammar.parse(t.text).clean(),t.text)},e.prototype.getFirstSuggestionText=function(){return _.find(this.lastSuggestions,function(t){return null!=t.text})},e.prototype.getText=function(){return this.inputManager.getValue()},e.prototype.getWordCompletion=function(){return this.inputManager.getWordCompletion()},e.prototype.clear=function(){this.setText(""),this.showSuggestion(),this.focus(),this.onclear&&this.onclear()},e.prototype.hasSuggestions=function(){return this.suggestionsManager.hasSuggestions},e}();t.Instance=s,t.create=e,t.requestAnimationFrame=n}(e=t.MagicBox||(t.MagicBox={}))}(Coveo||(Coveo={}));
	
	/*** EXPORTS FROM exports-loader ***/
	module.exports = Coveo.MagicBox;

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	!function(){"use strict";var t,e,n="undefined",r="string",i=self.navigator,o=String,a=Object.prototype.hasOwnProperty,l={},u={},s=!1,f=!0,c=/^\s*application\/(?:vnd\.oftn\.|x-)?l10n\+json\s*(?:$|;)/i,p="locale",g="defaultLocale",h="toLocaleString",y="toLowerCase",v=Array.prototype.indexOf||function(t){for(var e=this.length,n=0;e>n;n++)if(n in this&&this[n]===t)return n;return-1},d=function(e){var n=new t;return n.open("GET",e,s),n.send(null),200!==n.status?(setTimeout(function(){var t=new Error("Unable to load localization data: "+e);throw t.name="Localization Error",t},0),{}):JSON.parse(n.responseText)},m=o[h]=function(t){if(arguments.length>0&&"number"!=typeof t)if(typeof t===r)m(d(t));else if(t===s)u={};else{var e,n,i;for(e in t)if(a.call(t,e)){if(n=t[e],e=e[y](),e in u&&n!==s||(u[e]={}),n===s)continue;if(typeof n===r){if(0!==o[p][y]().indexOf(e)){e in l||(l[e]=[]),l[e].push(n);continue}n=d(n)}for(i in n)a.call(n,i)&&(u[e][i]=n[i])}}return Function.prototype[h].apply(o,arguments)},w=function(t){for(var e,n=l[t],r=0,i=n.length;i>r;r++)e={},e[t]=d(n[r]),m(e);delete l[t]},b=o.prototype[h]=function(){var t,n=e,r=o[n?g:p],i=r[y]().split("-"),a=i.length,c=this.valueOf();e=s;do if(t=i.slice(0,a).join("-"),t in l&&w(t),t in u&&c in u[t])return u[t][c];while(a-->1);return!n&&o[g]?(e=f,b.call(c)):c};if(typeof XMLHttpRequest===n&&typeof ActiveXObject!==n){var L=ActiveXObject;t=function(){try{return new L("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new L("Msxml2.XMLHTTP.3.0")}catch(e){}try{return new L("Msxml2.XMLHTTP")}catch(n){}throw new Error("XMLHttpRequest not supported by this browser.")}}else t=XMLHttpRequest;if(o[g]=o[g]||"",o[p]=i&&(i.language||i.userLanguage)||"",typeof document!==n)for(var T,M=document.getElementsByTagName("link"),O=M.length;O--;){var X=M[O],x=(X.getAttribute("rel")||"")[y]().split(/\s+/);c.test(X.type)&&(-1!==v.call(x,"localizations")?m(X.getAttribute("href")):-1!==v.call(x,"localization")&&(T={},T[(X.getAttribute("hreflang")||"")[y]()]=X.getAttribute("href"),m(T)))}}();
	
	/*** EXPORTS FROM exports-loader ***/
	module.exports = window.String.toLocaleString;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Globalize = __webpack_require__(28);
	var merge = function (obj1, obj2) {
	    var obj3 = {};
	    for (var attrname in obj1) {
	        obj3[attrname] = obj1[attrname];
	    }
	    for (var attrname in obj2) {
	        obj3[attrname] = obj2[attrname];
	    }
	    return obj3;
	};
	var dict = {
	    "Unknown": "Unknown",
	    "And": "AND",
	    "Authenticating": "Authenticating {0}...",
	    "Clear": "Clear {0}",
	    "CompleteQuery": "Complete Query",
	    "Exclude": "Exclude {0}",
	    "EnterTag": "Add Tag",
	    "Next": "Next",
	    "Last": "Last",
	    "Link": "Link",
	    "Or": "OR",
	    "Previous": "Previous",
	    "QueryDidntMatchAnyDocuments": "Your query did not match any documents.",
	    "QueryException": "Your query has an error: {0}.",
	    "Me": "Me",
	    "Remove": "Remove",
	    "Search": "Search",
	    "SearchFor": "Search for {0}",
	    "ShareQuery": "Share Query",
	    "Preferences": "Preferences",
	    "LinkOpeningSettings": "Link Opening Settings",
	    "Reauthenticate": "Reauthenticate {0}",
	    "ResultsFilteringExpression": "Results Filtering Expressions",
	    "FiltersInYourPreferences": "Filters in your preferences",
	    "Create": "Create",
	    "SearchIn": "Search in {0}",
	    "Seconds": "in {0} second<pl>s</pl>",
	    "ShowingResultsOf": "Result<pl>s</pl> {0}<pl>-{1}</pl> of {2}",
	    "SwitchTo": "Switch to {0}",
	    "Unexclude": "Unexclude {0}",
	    "ClearAllFilters": "Clear All Filters",
	    "SkipLogin": "Skip login",
	    "LoginInProgress": "Login in progress, please wait ...",
	    "Login": "Log In",
	    "GetStarted": "Get Started",
	    "More": "More",
	    "NMore": "{0} more...",
	    "Less": "Fewer",
	    "Settings": "Settings",
	    "Score": "Score",
	    "ScoreDescription": "The score is computed from the number of occurrences as well as from the position in the result set.",
	    "Occurrences": "Occurrences",
	    "OccurrencesDescription": "Sort by number of occurrences, with values having the highest number appearing first.",
	    "Label": "Label",
	    "Of": "of",
	    "LabelDescription": "Sort alphabetically on the field values.",
	    "Value": "Value",
	    "ValueDescription": "Sort on the values of the first computed field",
	    "AlphaAscending": "Value Ascending",
	    "AlphaDescending": "Value Descending",
	    "ChiSquare": "Chi Square",
	    "Nosort": "No Sort",
	    "NosortDescription": "Do not sort the values. The values will be returned in a random order.",
	    "RelativeFrequency": "Relative Frequency",
	    "RelativeFrequencyDescription": "Sort based on the relative frequency of values. Less common values will appear higher.",
	    "DateDistribution": "Date distribution",
	    "Custom": "Custom",
	    "CustomDescription": "Sort based on a custom order",
	    "ComputedField": "Computed Field",
	    "Ascending": "Ascending",
	    "Descending": "Descending",
	    "noResultFor": "No results for {0}",
	    "autoCorrectedQueryTo": "Query was automatically corrected to {0}",
	    "didYouMean": "Did you mean: {0}",
	    "SuggestedResults": "Suggested Results",
	    "SuggestedQueries": "Suggested Queries",
	    "MostRelevantItems": "Most relevant items:",
	    "AllItems": "All items:",
	    "ShowLess": "Show less",
	    "ShowMore": "Show more",
	    "HideFacet": "Hide Facet",
	    "ShowFacet": "Show Facet",
	    "AndOthers": "and {0} other<pl>s</pl>",
	    "Others": "{0} other<pl>s</pl>",
	    "MostRelevantPosts": "Most Relevant Posts:",
	    "CompleteThread": "Complete Thread:",
	    "ShowCompleteThread": "Show Complete Thread",
	    "ShowOnlyTopMatchingPosts": "Show Only Top Matching Posts",
	    "MostRelevantReplies": "Most Relevant Replies:",
	    "AllConversation": "All Conversation:",
	    "ShowAllConversation": "Show All Conversation",
	    "ShowAllReplies": "Show All Replies",
	    "ShowOnlyMostRelevantReplies": "Show Only Most Relevant Replies",
	    "Close": "Close",
	    "Open": "Open",
	    "OpenInOutlookWhenPossible": "Open in Outlook (when possible)",
	    "AlwaysOpenInNewWindow": "Always open results in new window",
	    "Quickview": "Quick View",
	    "NoQuickview": "The Quick View for this document is unavailable",
	    "ErrorReport": "Error Report",
	    "OopsError": "Something went wrong.",
	    "ProblemPersists": "If the problem persists contact the administrator.",
	    "GoBack": "Go Back",
	    "Reset": "Reset",
	    "Retry": "Retry",
	    "MoreInfo": "More Information",
	    "Username": "Username",
	    "Password": "Password",
	    "PostedBy": "Posted by",
	    "CannotConnect": "Cannot connect to the server address.",
	    "BadUserPass": "Password does not match with username.",
	    "PleaseEnterYourCredentials": "Please enter your credentials for {0}.",
	    "PleaseEnterYourSearchPage": "Please enter your search page URL",
	    "Collapse": "Collapse",
	    "Collapsable": "Collapsible",
	    "Expand": "Expand",
	    "Today": "Today",
	    "Yesterday": "Yesterday",
	    "Tomorrow": "Tomorrow",
	    "Duration": "Duration: {0}",
	    "IndexDuration": "Index Duration: {0}",
	    "ProxyDuration": "Proxy Duration: {0}",
	    "ClientDuration": "Client Duration: {0}",
	    "Unavailable": "Unavailable",
	    "Reply": "Reply",
	    "ReplyAll": "Reply All",
	    "Forward": "Forward",
	    "From": "From",
	    "Caption": "Caption",
	    "Expression": "Expression",
	    "Tab": "Tab",
	    "Tabs": "Tabs",
	    "EnterExpressionName": "Enter expression name",
	    "EnterExpressionToFilterWith": "Enter expression to filter results with",
	    "SelectTab": "Select Tab",
	    "SelectAll": "Select All",
	    "PageUrl": "Search page URL",
	    "ErrorSavingToDevice": "Error while saving the information to your device",
	    "ErrorReadingFromDevice": "Error while reading the information from your device",
	    "AppIntro": "Speak with a product specialist who can answer your questions about Coveo and help you decide which Coveo solution is right for you. Or, try a live demo !",
	    "TryDemo": "Try the demo",
	    "ContactUs": "Contact us",
	    "NewToCoveo": "New to Coveo?",
	    "LetUsHelpGetStarted": "Let us help you get started",
	    "LikesThis": "{0} like<sn>s</sn> this.",
	    "CannotConnectSearchPage": "Cannot connect to your search page",
	    "AreYouSureDeleteFilter": "Are you sure you want to delete the filter {0} with the expression {1}",
	    "OnlineHelp": "Online Help",
	    "Done": "Done",
	    "SaveFacetState": "Save this facet state",
	    "ClearFacetState": "Clear facet state",
	    "DisplayingTheOnlyMessage": "Displaying the only message in this conversation",
	    "NoNetworkConnection": "No network connection",
	    "UnknownConnection": "Unknown connection",
	    "EthernetConnection": "Ethernet connection",
	    "WiFi": "WiFi connection",
	    "CELL": "Cellular connection",
	    "CELL_2G": "Cellular 2G connection",
	    "CELL_3G": "Cellular 3G connection",
	    "CELL_4G": "Cellular 4G connection",
	    "Relevance": "Relevance",
	    "Date": "Date",
	    "Amount": "Amount",
	    "QueryExceptionNoException": "No exception",
	    "QueryExceptionInvalidSyntax": "Invalid syntax",
	    "QueryExceptionInvalidCustomField": "Invalid custom field",
	    "QueryExceptionInvalidDate": "Invalid date",
	    "QueryExceptionInvalidExactPhrase": "Invalid exact phrase",
	    "QueryExceptionInvalidDateOp": "Invalid date operator",
	    "QueryExceptionInvalidNear": "Invalid NEAR operator",
	    "QueryExceptionInvalidWeightedNear": "Invalid weighted NEAR",
	    "QueryExceptionInvalidTerm": "Invalid term",
	    "QueryExceptionTooManyTerms": "Too many terms",
	    "QueryExceptionWildcardTooGeneral": "Wildcard too general",
	    "QueryExceptionInvalidSortField": "Invalid sort field",
	    "QueryExceptionInvalidSmallStringOp": "Invalid small string operator",
	    "QueryExceptionRequestedResultsMax": "Requested results maximum",
	    "QueryExceptionAggregatedMirrorDead": "Aggregated mirror is offline",
	    "QueryExceptionAggregatedMirrorQueryTimeOut": "Aggregated mirror query timeout",
	    "QueryExceptionAggregatedMirrorInvalidBuildNumber": "Aggregated mirror invalid build number",
	    "QueryExceptionAggregatedMirrorCannotConnect": "Aggregated mirror cannot connect",
	    "QueryExceptionNotEnoughLeadingCharsWildcard": "Not enough leading character wildcard",
	    "QueryExceptionSecurityInverterNotFound": "Security inverter not found",
	    "QueryExceptionSecurityInverterAccessDenied": "Security inverter access denied",
	    "QueryExceptionAggregatedMirrorCannotImpersonate": "Aggregated mirror cannot impersonate",
	    "QueryExceptionUnexpected": "Unexpected",
	    "QueryExceptionAccessDenied": "Access denied",
	    "QueryExceptionSuperUserTokenInvalid": "Super user token invalid",
	    "QueryExceptionSuperUserTokenExpired": "Super user token is expired",
	    "QueryExceptionLicenseQueriesExpired": "Queries license expired",
	    "QueryExceptionLicenseSuperUserTokenNotSupported": "License super user token not supported",
	    "QueryExceptionInvalidSession": "Invalid session",
	    "QueryExceptionInvalidDocument": "Invalid document",
	    "QueryExceptionSearchDisabled": "Search disabled",
	    "FileType": "File type",
	    "ShowAttachment": "Show attachment",
	    "OnFeed": "on {0}'s feed.",
	    "Author": "Author",
	    "NoTitle": "No title",
	    "CurrentSelections": "Current selections",
	    "AllContent": "All content",
	    "CancelLastAction": "Cancel last action",
	    "SearchTips": "Search tips",
	    "CheckSpelling": "Check the spelling of your keywords.",
	    "TryUsingFewerKeywords": "Try using fewer, different or more general keywords.",
	    "SelectFewerFilters": "Select fewer filters to broaden your search.",
	    "Document": "Document",
	    "Time": "Time",
	    "StartDate": "Start Date",
	    "StartTime": "Start Time",
	    "DurationTitle": "Duration",
	    "UserQuery": "User query",
	    "ShowUserActions": "Show User Actions",
	    "NoData": "No data available",
	    "EventType": "Event type",
	    "GoToFullSearch": "Full search",
	    "GoToEdition": "Customize Panel",
	    "RemoveContext": "Remove context",
	    "BoxAttachToCase": "Attach to case",
	    "AttachToCase": "Attach to case",
	    "Attach": "Attach",
	    "Attached": "Attached",
	    "Detach": "Detach",
	    "Details": "Details",
	    "AdditionalFilters": "Additional filters",
	    "SelectNonContextualSearch": "Remove the context from the current record to broaden your search",
	    "CopyPasteToSupport": "Copy paste this message to Coveo Support team for more information.",
	    "FollowQueryDescription": "Alert me for changes to the search results of this query.",
	    "SearchAlerts_Panel": "Manage Alerts",
	    "SearchAlerts_PanelDescription": "View and manage your search alerts.",
	    "SearchAlerts_PanelNoSearchAlerts": "You have no subscriptions.",
	    "SearchAlerts_Fail": "The Search Alerts service is currently unavailable.",
	    "SearchAlerts_Type": "Type",
	    "SearchAlerts_Content": "Content",
	    "SearchAlerts_Actions": "Action",
	    "EmptyQuery": "&lt;empty&gt;",
	    "SearchAlerts_Type_followQuery": "Query",
	    "SearchAlerts_Type_followDocument": "Item",
	    "SearchAlerts_unFollowing": "Stop Following",
	    "SearchAlerts_follow": "Follow",
	    "SearchAlerts_followed": "Followed",
	    "SearchAlerts_followQuery": "Follow Query",
	    "Subscription_StopFollowingQuery": "Stop Following Query",
	    "SearchAlerts_Frequency": "When",
	    "SubscriptionsManageSubscriptions": "Manage Alerts",
	    "SubscriptionsMessageFollowQuery": "You will receive alerts when the query <b>{0}</b> returns new or updated items.",
	    "SubscriptionsMessageFollow": "You will receive alerts for changes to the item <b>{0}</b>.",
	    "Expiration": "Expiration",
	    "Monthly": "Monthly",
	    "Daily": "Daily",
	    "Monday": "Monday",
	    "Tuesday": "Tuesday",
	    "Wednesday": "Wednesday",
	    "Thursday": "Thursday",
	    "Friday": "Friday",
	    "Saturday": "Saturday",
	    "Sunday": "Sunday",
	    "StartTypingCaseForSuggestions": "Describe your problem to see possible solutions",
	    "ExportToExcel": "Export to Excel",
	    "ExportToExcelDescription": "Export search results to Excel",
	    "CaseCreationNoResults": "No recommended solutions were found",
	    "SortBy": "Sort by",
	    "BoxCreateArticle": "Create Article",
	    "Facets": "Facets",
	    "AdvancedSearch": "Advanced Search",
	    "Keywords": "Keywords",
	    "AllTheseWords": "All these words",
	    "ExactPhrase": "This exact phrase",
	    "AnyOfTheseWords": "Any of these words",
	    "NoneOfTheseWords": "None of these words",
	    "Anytime": "Anytime",
	    "InTheLast": "In the last",
	    "Days": "days",
	    "Months": "months",
	    "Between": "Between",
	    "Language": "Language",
	    "Size": "Size",
	    "AtLeast": "at least",
	    "AtMost": "at most",
	    "Contains": "contains",
	    "DoesNotContain": "does not contain",
	    "Matches": "matches",
	    "Bytes": "bytes",
	    "List": "List",
	    "Card": "Card",
	    "Table": "Table",
	    "objecttype_people": "People",
	    "objecttype_message": "Message",
	    "objecttype_feed": "RSS Feed",
	    "objecttype_thread": "Thread",
	    "objecttype_file": "File",
	    "objecttype_board": "Board",
	    "objecttype_category": "Category",
	    "objecttype_account": "Account",
	    "objecttype_annotation": "Note",
	    "objecttype_campaign": "Campaign",
	    "objecttype_case": "Case",
	    "objecttype_contentversion": "Salesforce File",
	    "objecttype_contact": "Contact",
	    "objecttype_contract": "Contract",
	    "objecttype_event": "Event",
	    "objecttype_email": "Email",
	    "objecttype_goal": "Goal",
	    "objecttype_incident": "Case",
	    "objecttype_invoice": "Invoice",
	    "objecttype_lead": "Lead",
	    "objecttype_list": "Marketing List",
	    "objecttype_solution": "Solution",
	    "objecttype_task": "Task",
	    "objecttype_user": "User",
	    "objecttype_attachment": "Attachment",
	    "objecttype_casecomment": "Case Comment",
	    "objecttype_opportunity": "Opportunity",
	    "objecttype_opportunityproduct": "Opportunity Product",
	    "objecttype_feeditem": "Chatter",
	    "objecttype_feedcomment": "Chatter",
	    "objecttype_note": "Note",
	    "objecttype_product": "Product",
	    "objecttype_partner": "Partner",
	    "objecttype_queueitem": "Queue Item",
	    "objecttype_quote": "Quote",
	    "objecttype_salesliterature": "Sales Literature",
	    "objecttype_salesorder": "Sales Order",
	    "objecttype_service": "Service",
	    "objecttype_socialprofile": "Social Profile",
	    "objecttype_kbdocumentation": "Documentation",
	    "objecttype_kbtechnicalarticle": "Documentation",
	    "objecttype_kbsolution": "Solution",
	    "objecttype_kbknowledgearticle": "Knowledge Article",
	    "objecttype_kbattachment": "Attachment",
	    "objecttype_kbarticle": "Article",
	    "objecttype_kbarticlecomment": "Article Comment",
	    "objecttype_knowledgearticle": "Knowledge Article",
	    "filetype_box user": "Box User",
	    "filetype_html": "HTML File",
	    "filetype_wiki": "Wiki",
	    "filetype_webscraperwebpage": "Web Page",
	    "filetype_image": "Image",
	    "filetype_folder": "Folder",
	    "filetype_txt": "Text",
	    "filetype_zip": "Zip File",
	    "filetype_olefile": "OLE file",
	    "filetype_gmailmessage": "Gmail Message",
	    "filetype_pdf": "PDF File",
	    "filetype_swf": "Flash File",
	    "filetype_xml": "XML File",
	    "filetype_vsd": "Visio",
	    "filetype_svg": "SVG",
	    "filetype_svm": "Open Office",
	    "filetype_rssitem": "RSS feed",
	    "filetype_doc": "Document",
	    "filetype_docx": "Microsoft Word Document",
	    "filetype_xls": "Spreadsheet Document",
	    "filetype_ppt": "Presentation Document",
	    "filetype_video": "Video",
	    "filetype_youtube": "YouTube video",
	    "filetype_saleforceitem": "Salesforce",
	    "filetype_dynamicscrmitem": "Dynamics CRM",
	    "filetype_salesforceitem": "Salesforce",
	    "filetype_odt": "Open Text Document",
	    "filetype_cfpage": "Confluence Page",
	    "filetype_cfcomment": "Confluence Comment",
	    "filetype_cfspace": "Confluence Space",
	    "filetype_cfblogentry": "Confluence Blog Entry",
	    "filetype_confluencespace": "Confluence Space",
	    "filetype_exchangemessage": "Message",
	    "filetype_exchangeappointment": "Appointment",
	    "filetype_exchangenote": "Note",
	    "filetype_exchangetask": "Task",
	    "filetype_exchangeperson": "Exchange User",
	    "filetype_activedirperson": "Active Directory User",
	    "filetype_exchangeactivity": "Activity",
	    "filetype_exchangecalendarmessage": "Calendar Message",
	    "filetype_exchangedocument": "Exchange Document",
	    "filetype_exchangedsn": "DSN",
	    "filetype_exchangefreebusy": "Free/Busy",
	    "filetype_exchangegroup": "Group",
	    "filetype_exchangerssfeed": "RSS Feed",
	    "filetype_exchangejunkmessage": "Junk Email",
	    "filetype_exchangeofficecom": "Communications",
	    "filetype_lithiummessage": "Lithium Message",
	    "filetype_lithiumthread": "Lithium Thread",
	    "filetype_lithiumboard": "Lithium Board",
	    "filetype_lithiumcategory": "Lithium Category",
	    "filetype_lithiumcommunity": "Lithium Community",
	    "filetype_spportal": "Portal",
	    "filetype_spsite": "Site",
	    "filetype_spuserprofile": "SharePoint User",
	    "filetype_sparea": "Area",
	    "filetype_spannouncement": "Announcement",
	    "filetype_spannouncementlist": "Announcements",
	    "filetype_spcontact": "Contact",
	    "filetype_spcontactlist": "Contacts",
	    "filetype_spcustomlist": "Custom Lists",
	    "filetype_spdiscussionboard": "Discussion Board",
	    "filetype_spdiscussionboardlist": "Discussion Boards",
	    "filetype_spdocumentlibrarylist": "Document Library",
	    "filetype_spevent": "Event",
	    "filetype_speventlist": "Events",
	    "filetype_spformlibrarylist": "Form Library",
	    "filetype_spissue": "Issue",
	    "filetype_spissuelist": "Issues",
	    "filetype_splink": "Link",
	    "filetype_splinklist": "Links",
	    "filetype_sppicturelibrarylist": "Picture Library",
	    "filetype_spsurvey": "Survey",
	    "filetype_spsurveylist": "Surveys",
	    "filetype_sptask": "Task",
	    "filetype_sptasklist": "Tasks",
	    "filetype_spagenda": "Agenda",
	    "filetype_spagendalist": "Ordres du jour",
	    "filetype_spattendee": "Attendee",
	    "filetype_spattendeelist": "Attendees",
	    "filetype_spcustomgridlist": "Custom Grids",
	    "filetype_spdecision": "Decision",
	    "filetype_spdecisionlist": "Decisions",
	    "filetype_spobjective": "Objective",
	    "filetype_spobjectivelist": "Objectives",
	    "filetype_sptextbox": "Textbox",
	    "filetype_sptextboxlist": "Textbox list",
	    "filetype_spthingstobring": "Thing To Bring",
	    "filetype_spthingstobringlist": "Things To Bring",
	    "filetype_sparealisting": "Area Listing",
	    "filetype_spmeetingserie": "Meeting series",
	    "filetype_spmeetingserielist": "Meeting Series List",
	    "filetype_spsitedirectory": "Site Directory Item",
	    "filetype_spsitedirectorylist": "Site Directory",
	    "filetype_spdatasource": "Data Source",
	    "filetype_spdatasourcelist": "Data Source List",
	    "filetype_splisttemplatecataloglist": "List Template Gallery",
	    "filetype_spwebpartcataloglist": "WebPart Gallery",
	    "filetype_spwebtemplatecataloglist": "Site Template Gallery",
	    "filetype_spworkspacepagelist": "Workspace Pages",
	    "filetype_spunknownlist": "Custom List",
	    "filetype_spadministratortask": "Administrator Task",
	    "filetype_spadministratortasklist": "Administrator Tasks",
	    "filetype_spareadocumentlibrarylist": "Area Document Library",
	    "filetype_spblogcategory": "Blog Category",
	    "filetype_spblogcategorylist": "Blog Categories",
	    "filetype_spblogcomment": "Blog Comment",
	    "filetype_spblogcommentlist": "Blog Comments",
	    "filetype_spblogpost": "Blog Post",
	    "filetype_spblogpostlist": "Blog Posts",
	    "filetype_spdataconnectionlibrarylist": "Data Connection Library",
	    "filetype_spdistributiongroup": "Distribution Group",
	    "filetype_spdistributiongrouplist": "Distribution Groups",
	    "filetype_spipfslist": "InfoPath Forms Servers",
	    "filetype_spkeyperformanceindicator": "Key Performance Indicator",
	    "filetype_spkeyperformanceindicatorlist": "Key Performance Indicators",
	    "filetype_splanguagesandtranslator": "Languages and Translator",
	    "filetype_splanguagesandtranslatorlist": "Languages and Translators",
	    "filetype_spmasterpagescataloglist": "Master Page Gallery",
	    "filetype_spnocodeworkflowlibrarylist": "No-code Workflow Libraries",
	    "filetype_spprojecttask": "Project Task",
	    "filetype_spprojecttasklist": "Project Tasks",
	    "filetype_sppublishingpageslibrarylist": "Page Library",
	    "filetype_spreportdocumentlibrarylist": "Report Document Library",
	    "filetype_spreportlibrarylist": "Report Library",
	    "filetype_spslidelibrarylist": "Slide Library",
	    "filetype_sptab": "Tabs",
	    "filetype_sptablist": "Tabs List",
	    "filetype_sptranslationmanagementlibrarylist": "Translation Management Library",
	    "filetype_spuserinformation": "User Information",
	    "filetype_spuserinformationlist": "User Information List",
	    "filetype_spwikipagelibrarylist": "Wiki Page Library",
	    "filetype_spworkflowhistory": "Workflow History",
	    "filetype_spworkflowhistorylist": "Workflow History List",
	    "filetype_spworkflowprocess": "Custom Workflow Process",
	    "filetype_spworkflowprocesslist": "Custom Workflow Processes",
	    "filetype_sppublishingimageslibrarylist": "Publishing Image Library",
	    "filetype_spcirculation": "Circulation",
	    "filetype_spcirculationlist": "Circulations",
	    "filetype_spdashboardslibrarylist": "Dashboards Library",
	    "filetype_spdataconnectionforperformancepointlibrarylist": "PerformancePoint Data Connection Library",
	    "filetype_sphealthreport": "Health Report",
	    "filetype_sphealthreportlist": "Health Reports",
	    "filetype_sphealthrule": "Health Rule",
	    "filetype_sphealthrulelist": "Health Rules",
	    "filetype_spimedictionary": "IME Dictionary",
	    "filetype_spimedictionarylist": "IME Dictionaries",
	    "filetype_spperformancepointcontent": "PerformancePoint Content",
	    "filetype_spperformancepointcontentlist": "PerformancePoint Contents",
	    "filetype_spphonecallmemo": "Phone Call Memo",
	    "filetype_spphonecallmemolist": "Phone Call Memos",
	    "filetype_sprecordlibrarylist": "Record Library",
	    "filetype_spresource": "Resource",
	    "filetype_spresourcelist": "Resources",
	    "filetype_spprocessdiagramslibrarylist": "Process Diagram Library",
	    "filetype_spsitethemeslibrarylist": "Site Theme Library",
	    "filetype_spsolutionslibrarylist": "Solution Library",
	    "filetype_spwfpublibrarylist": "WFPUB Library",
	    "filetype_spwhereabout": "Whereabout",
	    "filetype_spwhereaboutlist": "Whereabouts",
	    "filetype_spdocumentlink": "Link to a Document",
	    "filetype_spdocumentset": "Document Set",
	    "filetype_spmicrofeedpost": "Microfeed Post",
	    "filetype_spmicrofeedlist": "Microfeed",
	    "filetype_splistfolder": "List Folder",
	    "filetype_youtubevideo": "YouTube video",
	    "filetype_youtubeplaylistitem": "YouTube playlist item",
	};
	function defaultLanguage() {
	    var locales = String["locales"] || (String["locales"] = {});
	    locales["en"] = merge(locales["en"], dict);
	    String["toLocaleString"].call(this, { "en": dict });
	    String["locale"] = "en";
	    String["defaultLocale"] = "en";
	    Globalize.culture("en");
	}
	exports.defaultLanguage = defaultLanguage;
	function setLanguageAfterPageLoaded() {
	    var locales = String["locales"] || (String["locales"] = {});
	    locales["en"] = merge(locales["en"], dict);
	    String["toLocaleString"].call(this, { "en": dict });
	    String["locale"] = "en";
	    String["defaultLocale"] = "en";
	    Globalize.culture("en");
	}
	exports.setLanguageAfterPageLoaded = setLanguageAfterPageLoaded;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Globalize"] = __webpack_require__(29);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/*! globalize - v0.1.1 - 2013-04-30
	* https://github.com/jquery/globalize
	* Copyright 2013 ; Licensed MIT */
	var Globalize = (function(e,r){var t,n,a,s,u,l,i,c,o,f,d,p,h,g,b,m,y,M,v,k,z,F,A,x;t=function(e){return new t.prototype.init(e)}, true?module.exports=t:e.Globalize=t,t.cultures={},t.prototype={constructor:t,init:function(e){return this.cultures=t.cultures,this.cultureSelector=e,this}},t.prototype.init.prototype=t.prototype,t.cultures["default"]={name:"en",englishName:"English",nativeName:"English",isRTL:!1,language:"en",numberFormat:{pattern:["-n"],decimals:2,",":",",".":".",groupSizes:[3],"+":"+","-":"-",NaN:"NaN",negativeInfinity:"-Infinity",positiveInfinity:"Infinity",percent:{pattern:["-n %","n %"],decimals:2,groupSizes:[3],",":",",".":".",symbol:"%"},currency:{pattern:["($n)","$n"],decimals:2,groupSizes:[3],",":",",".":".",symbol:"$"}},calendars:{standard:{name:"Gregorian_USEnglish","/":"/",":":":",firstDay:0,days:{names:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],namesAbbr:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],namesShort:["Su","Mo","Tu","We","Th","Fr","Sa"]},months:{names:["January","February","March","April","May","June","July","August","September","October","November","December",""],namesAbbr:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""]},AM:["AM","am","AM"],PM:["PM","pm","PM"],eras:[{name:"A.D.",start:null,offset:0}],twoDigitYearMax:2029,patterns:{d:"M/d/yyyy",D:"dddd, MMMM dd, yyyy",t:"h:mm tt",T:"h:mm:ss tt",f:"dddd, MMMM dd, yyyy h:mm tt",F:"dddd, MMMM dd, yyyy h:mm:ss tt",M:"MMMM dd",Y:"yyyy MMMM",S:"yyyy'-'MM'-'dd'T'HH':'mm':'ss"}}},messages:{}},t.cultures["default"].calendar=t.cultures["default"].calendars.standard,t.cultures.en=t.cultures["default"],t.cultureSelector="en",n=/^0x[a-f0-9]+$/i,a=/^[+\-]?infinity$/i,s=/^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/,u=/^\s+|\s+$/g,l=function(e,r){if(e.indexOf)return e.indexOf(r);for(var t=0,n=e.length;n>t;t++)if(e[t]===r)return t;return-1},i=function(e,r){return e.substr(e.length-r.length)===r},c=function(){var e,t,n,a,s,u,l=arguments[0]||{},i=1,p=arguments.length,h=!1;for("boolean"==typeof l&&(h=l,l=arguments[1]||{},i=2),"object"==typeof l||f(l)||(l={});p>i;i++)if(null!=(e=arguments[i]))for(t in e)n=l[t],a=e[t],l!==a&&(h&&a&&(d(a)||(s=o(a)))?(s?(s=!1,u=n&&o(n)?n:[]):u=n&&d(n)?n:{},l[t]=c(h,u,a)):a!==r&&(l[t]=a));return l},o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},f=function(e){return"[object Function]"===Object.prototype.toString.call(e)},d=function(e){return"[object Object]"===Object.prototype.toString.call(e)},p=function(e,r){return 0===e.indexOf(r)},h=function(e){return(e+"").replace(u,"")},g=function(e){return isNaN(e)?0/0:Math[0>e?"ceil":"floor"](e)},b=function(e,r,t){var n;for(n=e.length;r>n;n+=1)e=t?"0"+e:e+"0";return e},m=function(e,r){for(var t=0,n=!1,a=0,s=e.length;s>a;a++){var u=e.charAt(a);switch(u){case"'":n?r.push("'"):t++,n=!1;break;case"\\":n&&r.push("\\"),n=!n;break;default:r.push(u),n=!1}}return t},y=function(e,r){r=r||"F";var t,n=e.patterns,a=r.length;if(1===a){if(t=n[r],!t)throw"Invalid date format string '"+r+"'.";r=t}else 2===a&&"%"===r.charAt(0)&&(r=r.charAt(1));return r},M=function(e,r,t){function n(e,r){var t,n=e+"";return r>1&&r>n.length?(t=v[r-2]+n,t.substr(t.length-r,r)):t=n}function a(){return h||g?h:(h=A.test(r),g=!0,h)}function s(e,r){if(b)return b[r];switch(r){case 0:return e.getFullYear();case 1:return e.getMonth();case 2:return e.getDate();default:throw"Invalid part value "+r}}var u,l=t.calendar,i=l.convert;if(!r||!r.length||"i"===r){if(t&&t.name.length)if(i)u=M(e,l.patterns.F,t);else{var c=new Date(e.getTime()),o=z(e,l.eras);c.setFullYear(F(e,l,o)),u=c.toLocaleString()}else u=""+e;return u}var f=l.eras,d="s"===r;r=y(l,r),u=[];var p,h,g,b,v=["0","00","000"],A=/([^d]|^)(d|dd)([^d]|$)/g,x=0,I=k();for(!d&&i&&(b=i.fromGregorian(e));;){var S=I.lastIndex,w=I.exec(r),C=r.slice(S,w?w.index:r.length);if(x+=m(C,u),!w)break;if(x%2)u.push(w[0]);else{var D=w[0],H=D.length;switch(D){case"ddd":case"dddd":var O=3===H?l.days.namesAbbr:l.days.names;u.push(O[e.getDay()]);break;case"d":case"dd":h=!0,u.push(n(s(e,2),H));break;case"MMM":case"MMMM":var N=s(e,1);u.push(l.monthsGenitive&&a()?l.monthsGenitive[3===H?"namesAbbr":"names"][N]:l.months[3===H?"namesAbbr":"names"][N]);break;case"M":case"MM":u.push(n(s(e,1)+1,H));break;case"y":case"yy":case"yyyy":N=b?b[0]:F(e,l,z(e,f),d),4>H&&(N%=100),u.push(n(N,H));break;case"h":case"hh":p=e.getHours()%12,0===p&&(p=12),u.push(n(p,H));break;case"H":case"HH":u.push(n(e.getHours(),H));break;case"m":case"mm":u.push(n(e.getMinutes(),H));break;case"s":case"ss":u.push(n(e.getSeconds(),H));break;case"t":case"tt":N=12>e.getHours()?l.AM?l.AM[0]:" ":l.PM?l.PM[0]:" ",u.push(1===H?N.charAt(0):N);break;case"f":case"ff":case"fff":u.push(n(e.getMilliseconds(),3).substr(0,H));break;case"z":case"zz":p=e.getTimezoneOffset()/60,u.push((0>=p?"+":"-")+n(Math.floor(Math.abs(p)),H));break;case"zzz":p=e.getTimezoneOffset()/60,u.push((0>=p?"+":"-")+n(Math.floor(Math.abs(p)),2)+":"+n(Math.abs(e.getTimezoneOffset()%60),2));break;case"g":case"gg":l.eras&&u.push(l.eras[z(e,f)].name);break;case"/":u.push(l["/"]);break;default:throw"Invalid date format pattern '"+D+"'."}}}return u.join("")},function(){var e;e=function(e,r,t){var n=t.groupSizes,a=n[0],s=1,u=Math.pow(10,r),l=Math.round(e*u)/u;isFinite(l)||(l=e),e=l;var i=e+"",c="",o=i.split(/e/i),f=o.length>1?parseInt(o[1],10):0;i=o[0],o=i.split("."),i=o[0],c=o.length>1?o[1]:"",f>0?(c=b(c,f,!1),i+=c.slice(0,f),c=c.substr(f)):0>f&&(f=-f,i=b(i,f+1,!0),c=i.slice(-f,i.length)+c,i=i.slice(0,-f)),c=r>0?t["."]+(c.length>r?c.slice(0,r):b(c,r)):"";for(var d=i.length-1,p=t[","],h="";d>=0;){if(0===a||a>d)return i.slice(0,d+1)+(h.length?p+h+c:c);h=i.slice(d-a+1,d+1)+(h.length?p+h:""),d-=a,n.length>s&&(a=n[s],s++)}return i.slice(0,d+1)+p+h+c},v=function(r,t,n){if(!isFinite(r))return 1/0===r?n.numberFormat.positiveInfinity:r===-1/0?n.numberFormat.negativeInfinity:n.numberFormat.NaN;if(!t||"i"===t)return n.name.length?r.toLocaleString():""+r;t=t||"D";var a,s=n.numberFormat,u=Math.abs(r),l=-1;t.length>1&&(l=parseInt(t.slice(1),10));var i,c=t.charAt(0).toUpperCase();switch(c){case"D":a="n",u=g(u),-1!==l&&(u=b(""+u,l,!0)),0>r&&(u="-"+u);break;case"N":i=s;case"C":i=i||s.currency;case"P":i=i||s.percent,a=0>r?i.pattern[0]:i.pattern[1]||"n",-1===l&&(l=i.decimals),u=e(u*("P"===c?100:1),l,i);break;default:throw"Bad number format specifier: "+c}for(var o=/n|\$|-|%/g,f="";;){var d=o.lastIndex,p=o.exec(a);if(f+=a.slice(d,p?p.index:a.length),!p)break;switch(p[0]){case"n":f+=u;break;case"$":f+=s.currency.symbol;break;case"-":/[1-9]/.test(u)&&(f+=s["-"]);break;case"%":f+=s.percent.symbol}}return f}}(),k=function(){return/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g},z=function(e,r){if(!r)return 0;for(var t,n=e.getTime(),a=0,s=r.length;s>a;a++)if(t=r[a].start,null===t||n>=t)return a;return 0},F=function(e,r,t,n){var a=e.getFullYear();return!n&&r.eras&&(a-=r.eras[t].offset),a},function(){var e,r,t,n,a,s,u;e=function(e,r){if(100>r){var t=new Date,n=z(t),a=F(t,e,n),s=e.twoDigitYearMax;s="string"==typeof s?(new Date).getFullYear()%100+parseInt(s,10):s,r+=a-a%100,r>s&&(r-=100)}return r},r=function(e,r,t){var n,a=e.days,i=e._upperDays;return i||(e._upperDays=i=[u(a.names),u(a.namesAbbr),u(a.namesShort)]),r=s(r),t?(n=l(i[1],r),-1===n&&(n=l(i[2],r))):n=l(i[0],r),n},t=function(e,r,t){var n=e.months,a=e.monthsGenitive||e.months,i=e._upperMonths,c=e._upperMonthsGen;i||(e._upperMonths=i=[u(n.names),u(n.namesAbbr)],e._upperMonthsGen=c=[u(a.names),u(a.namesAbbr)]),r=s(r);var o=l(t?i[1]:i[0],r);return 0>o&&(o=l(t?c[1]:c[0],r)),o},n=function(e,r){var t=e._parseRegExp;if(t){var n=t[r];if(n)return n}else e._parseRegExp=t={};for(var a,s=y(e,r).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g,"\\\\$1"),u=["^"],l=[],i=0,c=0,o=k();null!==(a=o.exec(s));){var f=s.slice(i,a.index);if(i=o.lastIndex,c+=m(f,u),c%2)u.push(a[0]);else{var d,p=a[0],h=p.length;switch(p){case"dddd":case"ddd":case"MMMM":case"MMM":case"gg":case"g":d="(\\D+)";break;case"tt":case"t":d="(\\D*)";break;case"yyyy":case"fff":case"ff":case"f":d="(\\d{"+h+"})";break;case"dd":case"d":case"MM":case"M":case"yy":case"y":case"HH":case"H":case"hh":case"h":case"mm":case"m":case"ss":case"s":d="(\\d\\d?)";break;case"zzz":d="([+-]?\\d\\d?:\\d{2})";break;case"zz":case"z":d="([+-]?\\d\\d?)";break;case"/":d="(\\/)";break;default:throw"Invalid date format pattern '"+p+"'."}d&&u.push(d),l.push(a[0])}}m(s.slice(i),u),u.push("$");var g=u.join("").replace(/\s+/g,"\\s+"),b={regExp:g,groups:l};return t[r]=b},a=function(e,r,t){return r>e||e>t},s=function(e){return e.split("\u00a0").join(" ").toUpperCase()},u=function(e){for(var r=[],t=0,n=e.length;n>t;t++)r[t]=s(e[t]);return r},A=function(s,u,l){s=h(s);var i=l.calendar,c=n(i,u),o=RegExp(c.regExp).exec(s);if(null===o)return null;for(var f,d=c.groups,g=null,b=null,m=null,y=null,M=null,v=0,k=0,z=0,F=0,A=null,x=!1,I=0,S=d.length;S>I;I++){var w=o[I+1];if(w){var C=d[I],D=C.length,H=parseInt(w,10);switch(C){case"dd":case"d":if(y=H,a(y,1,31))return null;break;case"MMM":case"MMMM":if(m=t(i,w,3===D),a(m,0,11))return null;break;case"M":case"MM":if(m=H-1,a(m,0,11))return null;break;case"y":case"yy":case"yyyy":if(b=4>D?e(i,H):H,a(b,0,9999))return null;break;case"h":case"hh":if(v=H,12===v&&(v=0),a(v,0,11))return null;break;case"H":case"HH":if(v=H,a(v,0,23))return null;break;case"m":case"mm":if(k=H,a(k,0,59))return null;break;case"s":case"ss":if(z=H,a(z,0,59))return null;break;case"tt":case"t":if(x=i.PM&&(w===i.PM[0]||w===i.PM[1]||w===i.PM[2]),!x&&(!i.AM||w!==i.AM[0]&&w!==i.AM[1]&&w!==i.AM[2]))return null;break;case"f":case"ff":case"fff":if(F=H*Math.pow(10,3-D),a(F,0,999))return null;break;case"ddd":case"dddd":if(M=r(i,w,3===D),a(M,0,6))return null;break;case"zzz":var O=w.split(/:/);if(2!==O.length)return null;if(f=parseInt(O[0],10),a(f,-12,13))return null;var N=parseInt(O[1],10);if(a(N,0,59))return null;A=60*f+(p(w,"-")?-N:N);break;case"z":case"zz":if(f=H,a(f,-12,13))return null;A=60*f;break;case"g":case"gg":var T=w;if(!T||!i.eras)return null;T=h(T.toLowerCase());for(var j=0,$=i.eras.length;$>j;j++)if(T===i.eras[j].name.toLowerCase()){g=j;break}if(null===g)return null}}}var P,G=new Date,E=i.convert;if(P=E?E.fromGregorian(G)[0]:G.getFullYear(),null===b?b=P:i.eras&&(b+=i.eras[g||0].offset),null===m&&(m=0),null===y&&(y=1),E){if(G=E.toGregorian(b,m,y),null===G)return null}else{if(G.setFullYear(b,m,y),G.getDate()!==y)return null;if(null!==M&&G.getDay()!==M)return null}if(x&&12>v&&(v+=12),G.setHours(v,k,z,F),null!==A){var Y=G.getMinutes()-(A+G.getTimezoneOffset());G.setHours(G.getHours()+parseInt(Y/60,10),Y%60)}return G}}(),x=function(e,r,t){var n,a=r["-"],s=r["+"];switch(t){case"n -":a=" "+a,s=" "+s;case"n-":i(e,a)?n=["-",e.substr(0,e.length-a.length)]:i(e,s)&&(n=["+",e.substr(0,e.length-s.length)]);break;case"- n":a+=" ",s+=" ";case"-n":p(e,a)?n=["-",e.substr(a.length)]:p(e,s)&&(n=["+",e.substr(s.length)]);break;case"(n)":p(e,"(")&&i(e,")")&&(n=["-",e.substr(1,e.length-2)])}return n||["",e]},t.prototype.findClosestCulture=function(e){return t.findClosestCulture.call(this,e)},t.prototype.format=function(e,r,n){return t.format.call(this,e,r,n)},t.prototype.localize=function(e,r){return t.localize.call(this,e,r)},t.prototype.parseInt=function(e,r,n){return t.parseInt.call(this,e,r,n)},t.prototype.parseFloat=function(e,r,n){return t.parseFloat.call(this,e,r,n)},t.prototype.culture=function(e){return t.culture.call(this,e)},t.addCultureInfo=function(e,r,t){var n={},a=!1;"string"!=typeof e?(t=e,e=this.culture().name,n=this.cultures[e]):"string"!=typeof r?(t=r,a=null==this.cultures[e],n=this.cultures[e]||this.cultures["default"]):(a=!0,n=this.cultures[r]),this.cultures[e]=c(!0,{},n,t),a&&(this.cultures[e].calendar=this.cultures[e].calendars.standard)},t.findClosestCulture=function(e){var r;if(!e)return this.findClosestCulture(this.cultureSelector)||this.cultures["default"];if("string"==typeof e&&(e=e.split(",")),o(e)){var t,n,a=this.cultures,s=e,u=s.length,l=[];for(n=0;u>n;n++){e=h(s[n]);var i,c=e.split(";");t=h(c[0]),1===c.length?i=1:(e=h(c[1]),0===e.indexOf("q=")?(e=e.substr(2),i=parseFloat(e),i=isNaN(i)?0:i):i=1),l.push({lang:t,pri:i})}for(l.sort(function(e,r){return e.pri<r.pri?1:e.pri>r.pri?-1:0}),n=0;u>n;n++)if(t=l[n].lang,r=a[t])return r;for(n=0;u>n;n++)for(t=l[n].lang;;){var f=t.lastIndexOf("-");if(-1===f)break;if(t=t.substr(0,f),r=a[t])return r}for(n=0;u>n;n++){t=l[n].lang;for(var d in a){var p=a[d];if(p.language===t)return p}}}else if("object"==typeof e)return e;return r||null},t.format=function(e,r,t){var n=this.findClosestCulture(t);return e instanceof Date?e=M(e,r,n):"number"==typeof e&&(e=v(e,r,n)),e},t.localize=function(e,r){return this.findClosestCulture(r).messages[e]||this.cultures["default"].messages[e]},t.parseDate=function(e,r,t){t=this.findClosestCulture(t);var n,a,s;if(r){if("string"==typeof r&&(r=[r]),r.length)for(var u=0,l=r.length;l>u;u++){var i=r[u];if(i&&(n=A(e,i,t)))break}}else{s=t.calendar.patterns;for(a in s)if(n=A(e,s[a],t))break}return n||null},t.parseInt=function(e,r,n){return g(t.parseFloat(e,r,n))},t.parseFloat=function(e,r,t){"number"!=typeof r&&(t=r,r=10);var u=this.findClosestCulture(t),l=0/0,i=u.numberFormat;if(e.indexOf(u.numberFormat.currency.symbol)>-1&&(e=e.replace(u.numberFormat.currency.symbol,""),e=e.replace(u.numberFormat.currency["."],u.numberFormat["."])),e.indexOf(u.numberFormat.percent.symbol)>-1&&(e=e.replace(u.numberFormat.percent.symbol,"")),e=e.replace(/ /g,""),a.test(e))l=parseFloat(e);else if(!r&&n.test(e))l=parseInt(e,16);else{var c=x(e,i,i.pattern[0]),o=c[0],f=c[1];""===o&&"(n)"!==i.pattern[0]&&(c=x(e,i,"(n)"),o=c[0],f=c[1]),""===o&&"-n"!==i.pattern[0]&&(c=x(e,i,"-n"),o=c[0],f=c[1]),o=o||"+";var d,p,h=f.indexOf("e");0>h&&(h=f.indexOf("E")),0>h?(p=f,d=null):(p=f.substr(0,h),d=f.substr(h+1));var g,b,m=i["."],y=p.indexOf(m);0>y?(g=p,b=null):(g=p.substr(0,y),b=p.substr(y+m.length));var M=i[","];g=g.split(M).join("");var v=M.replace(/\u00A0/g," ");M!==v&&(g=g.split(v).join(""));var k=o+g;if(null!==b&&(k+="."+b),null!==d){var z=x(d,i,"-n");k+="e"+(z[0]||"+")+z[1]}s.test(k)&&(l=parseFloat(k))}return l},t.culture=function(e){return e!==r&&(this.cultureSelector=e),this.findClosestCulture(e)||this.cultures["default"]}; return Globalize;}(this));

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	exports.Assert = Assert_1.Assert;
	var Cache_1 = __webpack_require__(31);
	exports.Cache = Cache_1.Cache;
	var Defer_1 = __webpack_require__(32);
	exports.Defer = Defer_1.Defer;
	var L10N_1 = __webpack_require__(33);
	exports.L10N = L10N_1.L10N;
	var Logger_1 = __webpack_require__(11);
	exports.Logger = Logger_1.Logger;
	var Options_1 = __webpack_require__(34);
	exports.Options = Options_1.Options;
	var Strings_1 = __webpack_require__(35);
	exports.l = Strings_1.l;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Cache = (function () {
	    function Cache(onEmpty) {
	        this.onEmpty = onEmpty;
	        this.cache = [];
	    }
	    Cache.prototype.get = function () {
	        if (this.cache.length == 0) {
	            return this.onEmpty();
	        }
	        else {
	            return this.cache.pop();
	        }
	    };
	    Cache.prototype.push = function (value) {
	        this.cache.push(value);
	    };
	    return Cache;
	}());
	exports.Cache = Cache;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var Defer = (function () {
	    function Defer() {
	    }
	    Defer.defer = function (code) {
	        Defer.functions.push(code);
	        Defer.arm();
	    };
	    Defer.flush = function () {
	        while (Defer.popOne()) {
	        }
	    };
	    Defer.arm = function () {
	        _.defer(function () {
	            if (Defer.popOne()) {
	                Defer.arm();
	            }
	        });
	    };
	    Defer.popOne = function () {
	        if (Defer.functions.length > 0) {
	            var fun = Defer.functions[0];
	            Defer.functions = _.rest(Defer.functions);
	            fun();
	            return Defer.functions.length > 0;
	        }
	        else {
	            return false;
	        }
	    };
	    return Defer;
	}());
	Defer.functions = [];
	exports.Defer = Defer;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExternalModulesShim_1 = __webpack_require__(23);
	var _ = __webpack_require__(14);
	String.toLocaleString = ExternalModulesShim_1.LocaleString;
	var pluralRegex = /<pl>(((?!<\/pl>).)*)<\/pl>/g;
	var singularRegex = /<sn>(((?!<\/sn>).)*)<\/sn>/g;
	exports.L10N = {
	    format: function (key) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var value = key.toLocaleString();
	        if (args.length > 0) {
	            var last = _.last(args);
	            // Last argument is either the count or a boolean forcing plural (true) or singular (false)
	            if (_.isBoolean(last) || _.isNumber(last)) {
	                args.pop();
	                value = exports.L10N.formatPlSn(value, last);
	            }
	            _.each(args, function (arg, i) { return value = value.replace("{" + i + "}", arg); });
	        }
	        return value;
	    },
	    formatPlSn: function (value, count) {
	        var isPlural = _.isBoolean(count) ? count : count > 1;
	        if (isPlural) {
	            value = value.replace(pluralRegex, '$1').replace(singularRegex, '');
	        }
	        else {
	            value = value.replace(pluralRegex, '').replace(singularRegex, '$1');
	        }
	        return value;
	    }
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var Options = (function () {
	    function Options() {
	    }
	    Options.prototype.merge = function (provided) {
	        return _.extend({}, this, provided);
	    };
	    Options.prototype.mergeDeep = function (provided) {
	        return _.extend({}, Utils_1.Utils.extendDeep(this, provided));
	    };
	    return Options;
	}());
	exports.Options = Options;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var L10N_1 = __webpack_require__(33);
	function l() {
	    var params = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        params[_i] = arguments[_i];
	    }
	    return L10N_1.L10N.format.apply(this, arguments);
	}
	exports.l = l;
	;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var AnalyticsEndpoint_1 = __webpack_require__(37);
	exports.AnalyticsEndpoint = AnalyticsEndpoint_1.AnalyticsEndpoint;
	var EndpointCaller_1 = __webpack_require__(10);
	exports.EndpointCaller = EndpointCaller_1.EndpointCaller;
	var QueryError_1 = __webpack_require__(22);
	exports.QueryError = QueryError_1.QueryError;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var EndpointCaller_1 = __webpack_require__(10);
	var Assert_1 = __webpack_require__(12);
	var QueryUtils_1 = __webpack_require__(21);
	var CookieUtils_1 = __webpack_require__(38);
	var es6_promise_1 = __webpack_require__(4);
	var _ = __webpack_require__(14);
	var AnalyticsEndpoint = (function () {
	    function AnalyticsEndpoint(options) {
	        this.options = options;
	        this.logger = new Logger_1.Logger(this);
	        var endpointCallerOptions = {
	            accessToken: (this.options.token && this.options.token != '') ? this.options.token : null
	        };
	        this.endpointCaller = new EndpointCaller_1.EndpointCaller(endpointCallerOptions);
	        this.organization = options.organization;
	    }
	    AnalyticsEndpoint.prototype.getCurrentVisitId = function () {
	        return this.visitId;
	    };
	    AnalyticsEndpoint.prototype.getCurrentVisitIdPromise = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            if (_this.getCurrentVisitId()) {
	                resolve(_this.getCurrentVisitId());
	            }
	            else {
	                var url = _this.buildAnalyticsUrl('/analytics/visit');
	                _this.getFromService(url, {})
	                    .then(function (response) {
	                    _this.visitId = response.id;
	                    resolve(_this.visitId);
	                })
	                    .catch(function (response) {
	                    reject(response);
	                });
	            }
	        });
	    };
	    AnalyticsEndpoint.prototype.sendSearchEvents = function (searchEvents) {
	        if (searchEvents.length > 0) {
	            this.logger.info('Logging analytics search events', searchEvents);
	            return this.sendToService(searchEvents, 'searches', 'searchEvents');
	        }
	    };
	    AnalyticsEndpoint.prototype.sendDocumentViewEvent = function (documentViewEvent) {
	        Assert_1.Assert.exists(documentViewEvent);
	        this.logger.info('Logging analytics document view', documentViewEvent);
	        return this.sendToService(documentViewEvent, 'click', 'clickEvent');
	    };
	    AnalyticsEndpoint.prototype.sendCustomEvent = function (customEvent) {
	        Assert_1.Assert.exists(customEvent);
	        this.logger.info('Logging analytics custom event', customEvent);
	        return this.sendToService(customEvent, 'custom', 'customEvent');
	    };
	    AnalyticsEndpoint.prototype.getTopQueries = function (params) {
	        var url = this.buildAnalyticsUrl('/stats/topQueries');
	        return this.getFromService(url, params);
	    };
	    AnalyticsEndpoint.prototype.sendToService = function (data, path, paramName) {
	        var _this = this;
	        var url = QueryUtils_1.QueryUtils.mergePath(this.options.serviceUrl, '/rest/' + (AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION || AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION) + '/analytics/' + path);
	        var queryString = [];
	        if (this.organization) {
	            queryString.push('org=' + this.organization);
	        }
	        if (CookieUtils_1.Cookie.get('visitorId')) {
	            queryString.push('visitor=' + encodeURIComponent(CookieUtils_1.Cookie.get('visitorId')));
	        }
	        // We use pendingRequest because we don't want to have 2 request to analytics at the same time.
	        // Otherwise the cookie visitId won't be set correctly.
	        if (AnalyticsEndpoint.pendingRequest == null) {
	            AnalyticsEndpoint.pendingRequest = this.endpointCaller.call({
	                errorsAsSuccess: false,
	                method: 'POST',
	                queryString: queryString,
	                requestData: data,
	                url: url,
	                responseType: 'text',
	                requestDataType: 'application/json'
	            }).then(function (res) {
	                return _this.handleAnalyticsEventResponse(res.data);
	            }).finally(function () {
	                AnalyticsEndpoint.pendingRequest = null;
	            });
	            return AnalyticsEndpoint.pendingRequest;
	        }
	        else {
	            return AnalyticsEndpoint.pendingRequest.finally(function () {
	                return _this.sendToService(data, path, paramName);
	            });
	        }
	    };
	    AnalyticsEndpoint.prototype.getFromService = function (url, params) {
	        var paramsToSend = (this.options.token && this.options.token != '') ? _.extend({ 'access_token': this.options.token }, params) : params;
	        return this.endpointCaller.call({
	            errorsAsSuccess: false,
	            method: 'GET',
	            queryString: this.options.organization ? ['org=' + encodeURIComponent(this.options.organization)] : [],
	            requestData: paramsToSend,
	            responseType: 'json',
	            url: url
	        }).then(function (res) {
	            return res.data;
	        });
	    };
	    AnalyticsEndpoint.prototype.handleAnalyticsEventResponse = function (response) {
	        var visitId;
	        var visitorId;
	        if (response['visitId']) {
	            visitId = response['visitId'];
	            visitorId = response['visitorId'];
	        }
	        else if (response['searchEventResponses']) {
	            visitId = _.first(response['searchEventResponses']).visitId;
	            visitorId = _.first(response['searchEventResponses']).visitorId;
	        }
	        if (visitId) {
	            this.visitId = visitId;
	        }
	        if (visitorId) {
	            CookieUtils_1.Cookie.set('visitorId', visitorId, AnalyticsEndpoint.VISITOR_COOKIE_TIME);
	        }
	        return response;
	    };
	    AnalyticsEndpoint.prototype.buildAnalyticsUrl = function (path) {
	        return this.options.serviceUrl + '/rest/' + (AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION || AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION) + path;
	    };
	    return AnalyticsEndpoint;
	}());
	AnalyticsEndpoint.DEFAULT_ANALYTICS_URI = 'https://usageanalytics.coveo.com';
	AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION = 'v15';
	AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION = undefined;
	AnalyticsEndpoint.VISITOR_COOKIE_TIME = 10000 * 24 * 60 * 60 * 1000;
	exports.AnalyticsEndpoint = AnalyticsEndpoint;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Code originally taken from : https://developers.livechatinc.com/blog/setting-cookies-to-subdomains-in-javascript/
	var Cookie = (function () {
	    function Cookie() {
	    }
	    Cookie.set = function (name, value, expiration) {
	        var domain, domainParts, date, expires, host;
	        if (expiration) {
	            date = new Date();
	            date.setTime(date.getTime() + expiration);
	            expires = '; expires=' + date.toGMTString();
	        }
	        else {
	            expires = '';
	        }
	        host = location.hostname;
	        if (host.split('.').length === 1) {
	            // no '.' in a domain - it's localhost or something similar
	            document.cookie = this.prefix + name + '=' + value + expires + '; path=/';
	        }
	        else {
	            // Remember the cookie on all subdomains.
	            //
	            // Start with trying to set cookie to the top domain.
	            // (example: if user is on foo.com, try to set
	            //  cookie to domain '.com')
	            //
	            // If the cookie will not be set, it means '.com'
	            // is a top level domain and we need to
	            // set the cookie to '.foo.com'
	            domainParts = host.split('.');
	            domainParts.shift();
	            domain = '.' + domainParts.join('.');
	            document.cookie = this.prefix + name + '=' + value + expires + '; path=/; domain=' + domain;
	            // check if cookie was successfuly set to the given domain
	            // (otherwise it was a Top-Level Domain)
	            if (Cookie.get(name) == null || Cookie.get(name) != value) {
	                // append '.' to current domain
	                domain = '.' + host;
	                document.cookie = this.prefix + name + '=' + value + expires + '; path=/; domain=' + domain;
	            }
	        }
	    };
	    Cookie.get = function (name) {
	        var nameEQ = this.prefix + name + '=';
	        var ca = document.cookie.split(';');
	        for (var i = 0; i < ca.length; i++) {
	            var c = ca[i];
	            while (c.charAt(0) == ' ') {
	                c = c.substring(1, c.length);
	            }
	            if (c.indexOf(nameEQ) == 0) {
	                return c.substring(nameEQ.length, c.length);
	            }
	        }
	        return null;
	    };
	    Cookie.erase = function (name) {
	        Cookie.set(name, '', -1);
	    };
	    return Cookie;
	}());
	Cookie.prefix = 'coveo_';
	exports.Cookie = Cookie;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var AdvancedSearchEvents_1 = __webpack_require__(40);
	exports.AdvancedSearchEvents = AdvancedSearchEvents_1.AdvancedSearchEvents;
	var AnalyticsEvents_1 = __webpack_require__(41);
	exports.AnalyticsEvents = AnalyticsEvents_1.AnalyticsEvents;
	var BreadcrumbEvents_1 = __webpack_require__(42);
	exports.BreadcrumbEvents = BreadcrumbEvents_1.BreadcrumbEvents;
	var DebugEvents_1 = __webpack_require__(43);
	exports.DebugEvents = DebugEvents_1.DebugEvents;
	var ImageResultListEvents_1 = __webpack_require__(44);
	exports.ImageResultListEvents = ImageResultListEvents_1.ImageResultListEvents;
	var InitializationEvents_1 = __webpack_require__(45);
	exports.InitializationEvents = InitializationEvents_1.InitializationEvents;
	var OmniboxEvents_1 = __webpack_require__(46);
	exports.OmniboxEvents = OmniboxEvents_1.OmniboxEvents;
	var PreferencesPanelEvents_1 = __webpack_require__(47);
	exports.PreferencesPanelEvents = PreferencesPanelEvents_1.PreferencesPanelEvents;
	var QueryEvents_1 = __webpack_require__(48);
	exports.QueryEvents = QueryEvents_1.QueryEvents;
	var ResultListEvents_1 = __webpack_require__(49);
	exports.ResultListEvents = ResultListEvents_1.ResultListEvents;
	var ResultLayoutEvents_1 = __webpack_require__(50);
	exports.ResultLayoutEvents = ResultLayoutEvents_1.ResultLayoutEvents;
	var SearchAlertEvents_1 = __webpack_require__(51);
	exports.SearchAlertsEvents = SearchAlertEvents_1.SearchAlertsEvents;
	var SettingsEvents_1 = __webpack_require__(52);
	exports.SettingsEvents = SettingsEvents_1.SettingsEvents;
	var SliderEvents_1 = __webpack_require__(53);
	exports.SliderEvents = SliderEvents_1.SliderEvents;
	var StandaloneSearchInterfaceEvents_1 = __webpack_require__(54);
	exports.StandaloneSearchInterfaceEvents = StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This static class is there to contains the different string definition for all the events related to the {@link AdvancedSearch} component.
	 */
	var AdvancedSearchEvents = (function () {
	    function AdvancedSearchEvents() {
	    }
	    return AdvancedSearchEvents;
	}());
	/**
	 * Triggered when the {@link AdvancedSearch} component is being built.
	 *
	 * Allows external code to add new sections in the **Advanced Search** panel.
	 *
	 * All bound handlers receive {@link IBuildingAdvancedSearchEventArgs} as an argument
	 *
	 * @type {string}
	 */
	AdvancedSearchEvents.buildingAdvancedSearch = 'buildingAdvancedSearch';
	AdvancedSearchEvents.executeAdvancedSearch = 'executeAdvancedSearch';
	exports.AdvancedSearchEvents = AdvancedSearchEvents;


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This static class is there to contains the different string definition for all the events related to analytics.
	 */
	var AnalyticsEvents = (function () {
	    function AnalyticsEvents() {
	    }
	    return AnalyticsEvents;
	}());
	AnalyticsEvents.searchEvent = 'analyticsSearchEvent';
	AnalyticsEvents.documentViewEvent = 'analyticsDocumentViewEvent';
	AnalyticsEvents.customEvent = 'analyticsCustomEvent';
	/**
	 * Triggered whenever an analytics event is logged. This event allows external code to modify the analytics data.
	 *
	 * All bound handlers will receive {@link IChangeAnalyticsCustomDataEventArgs} as an argument.
	 *
	 * The string value is `changeAnalyticsCustomData`.
	 */
	AnalyticsEvents.changeAnalyticsCustomData = 'changeAnalyticsCustomData';
	exports.AnalyticsEvents = AnalyticsEvents;


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This static class is there to contains the different string definition for all the events related to {@link Breadcrumb}.
	 */
	var BreadcrumbEvents = (function () {
	    function BreadcrumbEvents() {
	    }
	    return BreadcrumbEvents;
	}());
	/**
	 * Triggered when the breadcrumb needs to update its content. External code can use this event to provide bits of HTML that should be included in the breadcrumb.
	 *
	 * All handlers bound to this event will receive a {@link IPopulateBreadcrumbEventArgs} as an argument.
	 */
	BreadcrumbEvents.populateBreadcrumb = 'populateBreadcrumb';
	/**
	 * Triggered when the user clicks the Clear All button in the breadcrumb. When this event is raised, every filter that is included in the breadcrumb should be removed.
	 *
	 * This event does not provide custom event data.
	 */
	BreadcrumbEvents.clearBreadcrumb = 'clearBreadcrumb';
	BreadcrumbEvents.redrawBreadcrumb = 'redrawBreadcrumb';
	exports.BreadcrumbEvents = BreadcrumbEvents;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DebugEvents = (function () {
	    function DebugEvents() {
	    }
	    return DebugEvents;
	}());
	DebugEvents.showDebugPanel = 'showDebugPanel';
	exports.DebugEvents = DebugEvents;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ImageResultListEvents = (function () {
	    function ImageResultListEvents() {
	    }
	    return ImageResultListEvents;
	}());
	ImageResultListEvents.imageResultsLayoutComplete = 'imageResultsLayoutComplete';
	exports.ImageResultListEvents = ImageResultListEvents;


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This static class is there to contain the different string definitions for all the events related to initialization.
	 *
	 * Note that these events will only be triggered when the {@link init} function is called.
	 *
	 * This means these events are normally called only once when the search interface is initialized.
	 */
	var InitializationEvents = (function () {
	    function InitializationEvents() {
	    }
	    return InitializationEvents;
	}());
	/**
	 * This event is triggered right before each components inside the search interface get initialized (eg: Before the constructor of each component is executed).
	 *
	 * The string value is `beforeInitialization`.
	 * @type {string}
	 */
	InitializationEvents.beforeInitialization = 'beforeInitialization';
	/**
	 * Triggered after the components are initialized (eg: After the constructor of each component is executed)
	 * but before their state is set from the hash portion of the URL (e.g., http://mysearchinterface#q=myQuery ).
	 *
	 * This is also before the first query is launched (if the {@link SearchInterface.options.autoTriggerQuery} is `true`).
	 *
	 * The string value is `afterComponentsInitialization`.
	 * @type {string}
	 */
	InitializationEvents.afterComponentsInitialization = 'afterComponentsInitialization';
	/**
	 * Triggered right before the state from the URL (e.g., http://mysearchinterface#q=myQuery ) gets applied in the interface.
	 *
	 * This will typically only be useful if the {@link SearchInterface.options.enableHistory} is set to `true`.
	 *
	 * The string value is `restoreHistoryState`.
	 * @type {string}
	 */
	InitializationEvents.restoreHistoryState = 'restoreHistoryState';
	/**
	 * Triggered right after the UI is fully initialized.
	 *
	 * Concretely this means that the constructor of each component has been executed, and that the state coming for the URL (e.g., http://mysearchinterface#q=myquery) has been applied.
	 *
	 * It is triggered *before* the first query is launched, and if the {@link SearchInterface.options.autoTriggerQuery} is `true`.
	 *
	 * The string value is `afterInitialization`.
	 * @type {string}
	 */
	InitializationEvents.afterInitialization = 'afterInitialization';
	/**
	 * This is triggered when the UI needs to be dynamically removed so that components can unbind any internal handlers they might have set globally on the window or the document.
	 *
	 * After this event has been executed, the search interface can be dynamically removed and all handlers can be considered cleanly removed.
	 *
	 * The string value is `nuke`.
	 * @type {string}
	 */
	InitializationEvents.nuke = 'nuke';
	exports.InitializationEvents = InitializationEvents;


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	/// <reference path="../../lib/magic-box/index.d.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var OmniboxEvents = (function () {
	    function OmniboxEvents() {
	    }
	    return OmniboxEvents;
	}());
	OmniboxEvents.populateOmnibox = 'populateOmnibox';
	OmniboxEvents.openOmnibox = 'openOmnibox';
	OmniboxEvents.closeOmnibox = 'closeOmnibox';
	OmniboxEvents.populateOmniboxSuggestions = 'populateOmniboxSuggestions';
	OmniboxEvents.omniboxPreprocessResultForQuery = 'omniboxPreprocessResultForQuery';
	exports.OmniboxEvents = OmniboxEvents;


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var PreferencesPanelEvents = (function () {
	    function PreferencesPanelEvents() {
	    }
	    return PreferencesPanelEvents;
	}());
	PreferencesPanelEvents.savePreferences = 'savePreferences';
	PreferencesPanelEvents.exitPreferencesWithoutSave = 'exitPreferencesWithoutSave';
	exports.PreferencesPanelEvents = PreferencesPanelEvents;


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This static class is there to contains the different string definition for all the events related to query.
	 *
	 * Note that these events will only be triggered when the {@link QueryController.executeQuery} method is used, either directly or by using {@link executeQuery}
	 */
	var QueryEvents = (function () {
	    function QueryEvents() {
	    }
	    return QueryEvents;
	}());
	/**
	 * Triggered when a new query is launched.
	 *
	 * All bound handlers will receive {@link INewQueryEventArgs} as an argument.
	 *
	 * The string value is `newQuery`.
	 * @type {string}
	 */
	QueryEvents.newQuery = 'newQuery';
	/**
	 * Triggered when the query is being built.
	 *
	 * This is typically where all components will contribute their part to the {@link IQuery} using the {@link QueryBuilder}.
	 *
	 * All bound handlers will receive {@link IBuildingQueryEventArgs} as an argument.
	 *
	 * The string value is `buildingQuery`.
	 * @type {string}
	 */
	QueryEvents.buildingQuery = 'buildingQuery';
	/**
	 * Triggered when the query is done being built.
	 *
	 * This is typically where the facet will add it's {@link IGroupByRequest} to the {@link IQuery}.
	 *
	 * All bound handlers will receive {@link IDoneBuildingQueryEventArgs} as an argument.
	 *
	 * The string value is `doneBuildingQuery`.
	 * @type {string}
	 */
	QueryEvents.doneBuildingQuery = 'doneBuildingQuery';
	/**
	 * Triggered when the query is being executed on the Search API.
	 *
	 * All bound handlers will receive {@link IDuringQueryEventArgs} as an argument.
	 *
	 * The string value is `duringQuery`.
	 * @type {string}
	 */
	QueryEvents.duringQuery = 'duringQuery';
	/**
	 * Triggered when more results are being fetched on the Search API (think : infinite scrolling, or pager).
	 *
	 * All bound handlers will receive {@link IDuringQueryEventArgs} as an argument.
	 *
	 * The string value is `duringFetchMoreQuery`.
	 * @type {string}
	 */
	QueryEvents.duringFetchMoreQuery = 'duringFetchMoreQuery';
	/**
	 * Triggered when a query successfully returns from the Search API.
	 *
	 * All bound handlers will receive {@link IQuerySuccessEventArgs} as an argument.
	 *
	 * The string value is `querySuccess`.
	 * @type {string}
	 */
	QueryEvents.querySuccess = 'querySuccess';
	/**
	 * Triggered when a more results were successfully returned from the Search API. (think : infinite scrolling, or pager).
	 *
	 * All bound handlers will receive {@link IFetchMoreSuccessEventArgs} as an argument.
	 *
	 * The string value is `fetchMoreSuccess`.
	 * @type {string}
	 */
	QueryEvents.fetchMoreSuccess = 'fetchMoreSuccess';
	/**
	 * Triggered after the main query success event has finished executing.
	 *
	 * This is typically where facets will process the {@link IGroupByResult} and render themselves.
	 *
	 * All bound handlers will receive {@link IQuerySuccessEventArgs} as an argument.
	 *
	 * The string value is `deferredQuerySuccess`.
	 * @type {string}
	 */
	QueryEvents.deferredQuerySuccess = 'deferredQuerySuccess';
	/**
	 * Triggered when there was an error executing a query on the Search API.
	 *
	 * All bound handlers will receive {@link IQueryErrorEventArgs} as an argument.
	 *
	 * The string value is `queryError`.
	 * @type {string}
	 */
	QueryEvents.queryError = 'queryError';
	/**
	 * Triggered before the {@link QueryEvents.querySuccess} event.
	 *
	 * This allows external code to modify the results before rendering them.
	 *
	 * For example, the {@link Folding} component might use this event to construct a coherent parent child relationship between query results.
	 *
	 * All bound handlers will receive {@link IPreprocessResultsEventArgs} as an argument.
	 *
	 * The string value is `preprocessResults`.
	 * @type {string}
	 */
	QueryEvents.preprocessResults = 'preprocessResults';
	/**
	 * Triggered before the {@link QueryEvents.fetchMoreSuccess} event.
	 *
	 * This allows external code to modify the results before rendering them.
	 *
	 * For example, the {@link Folding} component might use this event to construct a coherent parent child relationship between query results.
	 *
	 * All bound handlers will receive {@link IPreprocessResultsEventArgs} as an argument.
	 *
	 * The string value is `preprocessMoreResults`.
	 * @type {string}
	 */
	QueryEvents.preprocessMoreResults = 'preprocessMoreResults';
	/**
	 * Triggered when there is no result for a particular query.
	 *
	 * All bound handlers will receive {@link INoResultsEventArgs} as an argument.
	 *
	 * The string value is `noResults`.
	 * @type {string}
	 */
	QueryEvents.noResults = 'noResults';
	QueryEvents.buildingCallOptions = 'buildingCallOptions';
	exports.QueryEvents = QueryEvents;


/***/ }),
/* 49 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResultListEvents = (function () {
	    function ResultListEvents() {
	    }
	    return ResultListEvents;
	}());
	ResultListEvents.newResultsDisplayed = 'newResultsDisplayed';
	ResultListEvents.newResultDisplayed = 'newResultDisplayed';
	ResultListEvents.openQuickview = 'openQuickview';
	ResultListEvents.changeLayout = 'changeLayout';
	exports.ResultListEvents = ResultListEvents;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResultLayoutEvents = (function () {
	    function ResultLayoutEvents() {
	    }
	    return ResultLayoutEvents;
	}());
	ResultLayoutEvents.populateResultLayout = 'populateResultLayout';
	exports.ResultLayoutEvents = ResultLayoutEvents;


/***/ }),
/* 51 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SearchAlertsEvents = (function () {
	    function SearchAlertsEvents() {
	    }
	    return SearchAlertsEvents;
	}());
	SearchAlertsEvents.searchAlertsCreated = 'searchAlertsCreated';
	SearchAlertsEvents.searchAlertsDeleted = 'searchAlertsDeleted';
	SearchAlertsEvents.searchAlertsFail = 'searchAlertsFail';
	SearchAlertsEvents.searchAlertsPopulateMessage = 'searchAlertsPopulateMessage';
	exports.SearchAlertsEvents = SearchAlertsEvents;


/***/ }),
/* 52 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SettingsEvents = (function () {
	    function SettingsEvents() {
	    }
	    return SettingsEvents;
	}());
	SettingsEvents.settingsPopulateMenu = 'settingsPopulateMenu';
	exports.SettingsEvents = SettingsEvents;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SliderEvents = (function () {
	    function SliderEvents() {
	    }
	    return SliderEvents;
	}());
	SliderEvents.startSlide = 'startSlide';
	SliderEvents.duringSlide = 'duringSlide';
	SliderEvents.endSlide = 'endSlide';
	SliderEvents.graphValueSelected = 'graphValueSelected';
	exports.SliderEvents = SliderEvents;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var StandaloneSearchInterfaceEvents = (function () {
	    function StandaloneSearchInterfaceEvents() {
	    }
	    return StandaloneSearchInterfaceEvents;
	}());
	StandaloneSearchInterfaceEvents.beforeRedirect = 'beforeRedirect';
	exports.StandaloneSearchInterfaceEvents = StandaloneSearchInterfaceEvents;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ColorUtils_1 = __webpack_require__(56);
	exports.ColorUtils = ColorUtils_1.ColorUtils;
	var CookieUtils_1 = __webpack_require__(38);
	exports.Cookie = CookieUtils_1.Cookie;
	var CurrencyUtils_1 = __webpack_require__(57);
	exports.CurrencyUtils = CurrencyUtils_1.CurrencyUtils;
	var DateUtils_1 = __webpack_require__(58);
	exports.DateUtils = DateUtils_1.DateUtils;
	var DeviceUtils_1 = __webpack_require__(16);
	exports.DeviceUtils = DeviceUtils_1.DeviceUtils;
	var Dom_1 = __webpack_require__(59);
	exports.Dom = Dom_1.Dom;
	exports.$$ = Dom_1.$$;
	var DomUtils_1 = __webpack_require__(60);
	exports.DomUtils = DomUtils_1.DomUtils;
	var EmailUtils_1 = __webpack_require__(64);
	exports.EmailUtils = EmailUtils_1.EmailUtils;
	var HashUtils_1 = __webpack_require__(65);
	exports.HashUtils = HashUtils_1.HashUtils;
	var HighlightUtils_1 = __webpack_require__(66);
	exports.HighlightUtils = HighlightUtils_1.HighlightUtils;
	exports.StringAndHoles = HighlightUtils_1.StringAndHoles;
	var HtmlUtils_1 = __webpack_require__(67);
	exports.HTMLUtils = HtmlUtils_1.HTMLUtils;
	var KeyboardUtils_1 = __webpack_require__(68);
	exports.KEYBOARD = KeyboardUtils_1.KEYBOARD;
	exports.KeyboardUtils = KeyboardUtils_1.KeyboardUtils;
	var LocalStorageUtils_1 = __webpack_require__(69);
	exports.LocalStorageUtils = LocalStorageUtils_1.LocalStorageUtils;
	var OSUtils_1 = __webpack_require__(70);
	exports.OSUtils = OSUtils_1.OSUtils;
	exports.OS_NAME = OSUtils_1.OS_NAME;
	var PopupUtils_1 = __webpack_require__(71);
	exports.PopupUtils = PopupUtils_1.PopupUtils;
	var QueryUtils_1 = __webpack_require__(21);
	exports.QueryUtils = QueryUtils_1.QueryUtils;
	var StreamHighlightUtils_1 = __webpack_require__(72);
	exports.StreamHighlightUtils = StreamHighlightUtils_1.StreamHighlightUtils;
	var StringUtils_1 = __webpack_require__(62);
	exports.StringUtils = StringUtils_1.StringUtils;
	var TimeSpanUtils_1 = __webpack_require__(15);
	exports.TimeSpan = TimeSpanUtils_1.TimeSpan;
	var Utils_1 = __webpack_require__(13);
	exports.Utils = Utils_1.Utils;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ColorUtils = (function () {
	    function ColorUtils() {
	    }
	    ColorUtils.hsvToRgb = function (h, s, v) {
	        var r, g, b;
	        var i = Math.floor(h * 6);
	        var f = h * 6 - i;
	        var p = v * (1 - s);
	        var q = v * (1 - f * s);
	        var t = v * (1 - (1 - f) * s);
	        switch (i % 6) {
	            case 0:
	                r = v, g = t, b = p;
	                break;
	            case 1:
	                r = q, g = v, b = p;
	                break;
	            case 2:
	                r = p, g = v, b = t;
	                break;
	            case 3:
	                r = p, g = q, b = v;
	                break;
	            case 4:
	                r = t, g = p, b = v;
	                break;
	            case 5:
	                r = v, g = p, b = q;
	                break;
	        }
	        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
	    };
	    ColorUtils.rgbToHsv = function (r, g, b) {
	        r = r / 255, g = g / 255, b = b / 255;
	        var max = Math.max(r, g, b), min = Math.min(r, g, b);
	        var h, s, v = max;
	        var d = max - min;
	        s = max == 0 ? 0 : d / max;
	        if (max == min) {
	            h = 0; // achromatic
	        }
	        else {
	            switch (max) {
	                case r:
	                    h = (g - b) / d + (g < b ? 6 : 0);
	                    break;
	                case g:
	                    h = (b - r) / d + 2;
	                    break;
	                case b:
	                    h = (r - g) / d + 4;
	                    break;
	            }
	            h /= 6;
	        }
	        return [h, s, v];
	    };
	    return ColorUtils;
	}());
	exports.ColorUtils = ColorUtils;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Options_1 = __webpack_require__(34);
	var Utils_1 = __webpack_require__(13);
	var Globalize = __webpack_require__(28);
	var DefaultCurrencyToStringOptions = (function (_super) {
	    __extends(DefaultCurrencyToStringOptions, _super);
	    function DefaultCurrencyToStringOptions() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.decimals = 0;
	        return _this;
	    }
	    return DefaultCurrencyToStringOptions;
	}(Options_1.Options));
	var CurrencyUtils = (function () {
	    function CurrencyUtils() {
	    }
	    CurrencyUtils.currencyToString = function (value, options) {
	        if (Utils_1.Utils.isNullOrUndefined(value)) {
	            return '';
	        }
	        value = Number(value);
	        Assert_1.Assert.isNumber(value);
	        options = new DefaultCurrencyToStringOptions().merge(options);
	        var currency = Globalize.culture().numberFormat.currency;
	        var backup = currency.symbol;
	        if (Utils_1.Utils.isNonEmptyString(options.symbol)) {
	            currency.symbol = options.symbol;
	        }
	        var str = Globalize.format(value, 'c' + options.decimals.toString());
	        currency.symbol = backup;
	        return str;
	    };
	    return CurrencyUtils;
	}());
	exports.CurrencyUtils = CurrencyUtils;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Options_1 = __webpack_require__(34);
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var TimeSpanUtils_1 = __webpack_require__(15);
	var Globalize = __webpack_require__(28);
	var _ = __webpack_require__(14);
	var DefaultDateToStringOptions = (function (_super) {
	    __extends(DefaultDateToStringOptions, _super);
	    function DefaultDateToStringOptions() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.now = new Date();
	        _this.useTodayYesterdayAndTomorrow = true;
	        _this.useWeekdayIfThisWeek = true;
	        _this.omitYearIfCurrentOne = true;
	        _this.useLongDateFormat = false;
	        _this.includeTimeIfToday = true;
	        _this.includeTimeIfThisWeek = true;
	        _this.alwaysIncludeTime = false;
	        _this.predefinedFormat = undefined;
	        return _this;
	    }
	    return DefaultDateToStringOptions;
	}(Options_1.Options));
	var DateUtils = (function () {
	    function DateUtils() {
	    }
	    DateUtils.convertFromJsonDateIfNeeded = function (date) {
	        if (_.isDate(date)) {
	            return date;
	        }
	        else if (date !== null && !isNaN(Number(date))) {
	            return new Date(Number(date));
	        }
	        else if (_.isString(date)) {
	            return new Date(date.replace('@', ' '));
	        }
	        else {
	            return undefined;
	        }
	    };
	    DateUtils.dateForQuery = function (date) {
	        return date.getFullYear() + '/' + DateUtils.padNumber((date.getMonth() + 1).toString()) + '/' + DateUtils.padNumber(date.getDate().toString());
	    };
	    DateUtils.padNumber = function (num, length) {
	        if (length === void 0) { length = 2; }
	        while (num.length < length) {
	            num = '0' + num;
	        }
	        return num;
	    };
	    DateUtils.keepOnlyDatePart = function (date) {
	        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
	    };
	    DateUtils.offsetDateByDays = function (date, offset) {
	        var newDate = new Date(date.valueOf());
	        newDate.setDate(newDate.getDate() + offset);
	        return newDate;
	    };
	    DateUtils.dateToString = function (d, options) {
	        if (Utils_1.Utils.isNullOrUndefined(d)) {
	            return '';
	        }
	        options = new DefaultDateToStringOptions().merge(options);
	        var dateOnly = DateUtils.keepOnlyDatePart(d);
	        if (options.predefinedFormat) {
	            return Globalize.format(dateOnly, options.predefinedFormat);
	        }
	        var today = DateUtils.keepOnlyDatePart(options.now);
	        if (options.useTodayYesterdayAndTomorrow) {
	            if (dateOnly.valueOf() == today.valueOf()) {
	                return Strings_1.l('Today');
	            }
	            var tomorrow = DateUtils.offsetDateByDays(today, 1);
	            if (dateOnly.valueOf() == tomorrow.valueOf()) {
	                return Strings_1.l('Tomorrow');
	            }
	            var yesterday = DateUtils.offsetDateByDays(today, -1);
	            if (dateOnly.valueOf() == yesterday.valueOf()) {
	                return Strings_1.l('Yesterday');
	            }
	        }
	        var isThisWeek = Math.abs(TimeSpanUtils_1.TimeSpan.fromDates(dateOnly, today).getDays()) < 7;
	        if (options.useWeekdayIfThisWeek && isThisWeek) {
	            if (dateOnly.valueOf() > today.valueOf()) {
	                return Strings_1.l('Next') + ' ' + Globalize.format(dateOnly, 'dddd');
	            }
	            else {
	                return Strings_1.l('Last') + ' ' + Globalize.format(dateOnly, 'dddd');
	            }
	        }
	        if (options.omitYearIfCurrentOne && dateOnly.getFullYear() === today.getFullYear()) {
	            return Globalize.format(dateOnly, 'M');
	        }
	        if (options.useLongDateFormat) {
	            return Globalize.format(dateOnly, 'D');
	        }
	        return Globalize.format(dateOnly, 'd');
	    };
	    DateUtils.timeToString = function (date, options) {
	        if (Utils_1.Utils.isNullOrUndefined(date)) {
	            return '';
	        }
	        return Globalize.format(date, 't');
	    };
	    DateUtils.dateTimeToString = function (date, options) {
	        if (Utils_1.Utils.isNullOrUndefined(date)) {
	            return '';
	        }
	        options = new DefaultDateToStringOptions().merge(options);
	        var today = DateUtils.keepOnlyDatePart(options.now);
	        var isThisWeek = Math.abs(TimeSpanUtils_1.TimeSpan.fromDates(date, today).getDays()) < 7;
	        var datePart = DateUtils.dateToString(date, options);
	        var dateWithoutTime = DateUtils.keepOnlyDatePart(date);
	        if (options.alwaysIncludeTime || (options.includeTimeIfThisWeek && isThisWeek) || (options.includeTimeIfToday && dateWithoutTime.valueOf() == today.valueOf())) {
	            return datePart + ', ' + DateUtils.timeToString(date);
	        }
	        else {
	            return datePart;
	        }
	    };
	    DateUtils.monthToString = function (month) {
	        var date = new Date(1980, month);
	        return Globalize.format(date, 'MMMM');
	    };
	    DateUtils.isValid = function (date) {
	        if (date instanceof Date) {
	            return !isNaN(date.getTime());
	        }
	        return false;
	    };
	    DateUtils.timeBetween = function (from, to) {
	        if (Utils_1.Utils.isNullOrUndefined(from) || Utils_1.Utils.isNullOrUndefined(to)) {
	            return '';
	        }
	        return ('0' + ((to.getTime() - from.getTime()) / (1000 * 60 * 60)).toFixed()).slice(-2) +
	            ':' + ('0' + ((to.getTime() - from.getTime()) % (1000 * 60 * 60) / (1000 * 60)).toFixed()).slice(-2) +
	            ':' + ('0' + ((to.getTime() - from.getTime()) % (1000 * 60) / (1000)).toFixed()).slice(-2);
	    };
	    return DateUtils;
	}());
	exports.DateUtils = DateUtils;
	// Shim for IE8 Date.toISOString
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
	if (!Date.prototype.toISOString) {
	    (function () {
	        function pad(nber) {
	            if (nber < 10) {
	                return '0' + nber;
	            }
	            return nber;
	        }
	        Date.prototype.toISOString = function () {
	            return this.getUTCFullYear() +
	                '-' + pad(this.getUTCMonth() + 1) +
	                '-' + pad(this.getUTCDate()) +
	                'T' + pad(this.getUTCHours()) +
	                ':' + pad(this.getUTCMinutes()) +
	                ':' + pad(this.getUTCSeconds()) +
	                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
	                'Z';
	        };
	    }());
	}


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var JQueryutils_1 = __webpack_require__(18);
	var Assert_1 = __webpack_require__(12);
	var Logger_1 = __webpack_require__(11);
	var _ = __webpack_require__(14);
	/**
	 * This is essentially an helper class for dom manipulation.<br/>
	 * This is intended to provide some basic functionality normally offered by jQuery.<br/>
	 * To minimize the multiple jQuery conflict we have while integrating in various system, we implemented the very small subset that the framework needs.<br/>
	 * See {@link $$}, which is a function that wraps this class constructor, for less verbose code.
	 */
	var Dom = (function () {
	    /**
	     * Create a new Dom object with the given HTMLElement
	     * @param el The HTMLElement to wrap in a Dom object
	     */
	    function Dom(el) {
	        Assert_1.Assert.exists(el);
	        this.el = el;
	    }
	    /**
	     * Helper function to quickly create an HTMLElement
	     * @param type The type of the element (e.g. div, span)
	     * @param props The props (id, className, attributes) of the element<br/>
	     * Can be either specified in dashed-case strings ('my-attribute') or camelCased keys (myAttribute),
	     * the latter of which will automatically get replaced to dash-case.
	     * @param innerHTML The contents of the new HTMLElement, either in string form or as another HTMLElement
	     */
	    Dom.createElement = function (type, props) {
	        var children = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            children[_i - 2] = arguments[_i];
	        }
	        var elem = document.createElement(type);
	        for (var key in props) {
	            if (key === 'className') {
	                elem.className = props['className'];
	            }
	            else {
	                var attr = key.indexOf('-') !== -1 ? key : Utils_1.Utils.toDashCase(key);
	                elem.setAttribute(attr, props[key]);
	            }
	        }
	        _.each(children, function (child) {
	            if (child instanceof HTMLElement) {
	                elem.appendChild(child);
	            }
	            else if (_.isString(child)) {
	                elem.innerHTML += child;
	            }
	            else if (child instanceof Dom) {
	                elem.appendChild(child.el);
	            }
	        });
	        return elem;
	    };
	    /**
	     * Adds the element to the children of the current element
	     * @param element The element to append
	     * @returns {string}
	     */
	    Dom.prototype.append = function (element) {
	        this.el.appendChild(element);
	    };
	    /**
	     * Get the css value of the specified property.<br/>
	     * @param property The property
	     * @returns {string}
	     */
	    Dom.prototype.css = function (property) {
	        if (this.el.style[property]) {
	            return this.el.style[property];
	        }
	        return window.getComputedStyle(this.el).getPropertyValue(property);
	    };
	    /**
	     * Get or set the text content of the HTMLElement.<br/>
	     * @param txt Optional. If given, this will set the text content of the element. If not, will return the text content.
	     * @returns {string}
	     */
	    Dom.prototype.text = function (txt) {
	        if (Utils_1.Utils.isUndefined(txt)) {
	            return this.el.innerText || this.el.textContent;
	        }
	        else {
	            if (this.el.innerText != undefined) {
	                this.el.innerText = txt;
	            }
	            else if (this.el.textContent != undefined) {
	                this.el.textContent = txt;
	            }
	        }
	    };
	    /**
	     * Performant way to transform a NodeList to an array of HTMLElement, for manipulation<br/>
	     * http://jsperf.com/nodelist-to-array/72
	     * @param nodeList a {NodeList} to convert to an array
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.nodeListToArray = function (nodeList) {
	        var i = nodeList.length;
	        var arr = new Array(i);
	        while (i--) {
	            arr[i] = nodeList.item(i);
	        }
	        return arr;
	    };
	    /**
	     * Empty (remove all child) from the element;
	     */
	    Dom.prototype.empty = function () {
	        while (this.el.firstChild) {
	            this.el.removeChild(this.el.firstChild);
	        }
	    };
	    /**
	     * Empty the element and all childs from the dom;
	     */
	    Dom.prototype.remove = function () {
	        this.el.parentNode.removeChild(this.el);
	    };
	    /**
	     * Show the element;
	     */
	    Dom.prototype.show = function () {
	        this.el.style.display = 'block';
	    };
	    /**
	     * Hide the element;
	     */
	    Dom.prototype.hide = function () {
	        this.el.style.display = 'none';
	    };
	    /**
	     * Toggle the element visibility.<br/>
	     * Optional visible parameter, if specified will set the element visibility
	     * @param visible Optional parameter to display or hide the element
	     */
	    Dom.prototype.toggle = function (visible) {
	        if (visible === undefined) {
	            if (this.el.style.display == 'block') {
	                this.hide();
	            }
	            else {
	                this.show();
	            }
	        }
	        else {
	            if (visible) {
	                this.show();
	            }
	            else {
	                this.hide();
	            }
	        }
	    };
	    /**
	     * Returns the value of the specified attribute.
	     * @param name The name of the attribute
	     */
	    Dom.prototype.getAttribute = function (name) {
	        return this.el.getAttribute(name);
	    };
	    /**
	     * Sets the value of the specified attribute.
	     * @param name The name of the attribute
	     * @param value The value to set
	     */
	    Dom.prototype.setAttribute = function (name, value) {
	        this.el.setAttribute(name, value);
	    };
	    /**
	     * Find a child element, given a CSS selector
	     * @param selector A CSS selector, can be a .className or #id
	     * @returns {HTMLElement}
	     */
	    Dom.prototype.find = function (selector) {
	        return this.el.querySelector(selector);
	    };
	    /**
	     * Check if the element match the selector.<br/>
	     * The selector can be a class, an id or a tag.<br/>
	     * Eg : .is('.foo') or .is('#foo') or .is('div').
	     */
	    Dom.prototype.is = function (selector) {
	        if (this.el.tagName.toLowerCase() == selector.toLowerCase()) {
	            return true;
	        }
	        if (selector[0] == '.') {
	            if (this.hasClass(selector.substr(1))) {
	                return true;
	            }
	        }
	        if (selector[0] == '#') {
	            if (this.el.getAttribute('id') == selector.substr(1)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * Get the first element that matches the classname by testing the element itself and traversing up through its ancestors in the DOM tree.
	     *
	     * Stops at the body of the document
	     * @param className A CSS classname
	     */
	    Dom.prototype.closest = function (className) {
	        return this.traverseAncestorForClass(this.el, className);
	    };
	    /**
	     * Get the first element that matches the classname by testing the element itself and traversing up through its ancestors in the DOM tree.
	     *
	     * Stops at the body of the document
	     * @returns {any}
	     */
	    Dom.prototype.parent = function (className) {
	        if (this.el.parentElement == undefined) {
	            return undefined;
	        }
	        return this.traverseAncestorForClass(this.el.parentElement, className);
	    };
	    /**
	     *  Get all the ancestors of the current element that match the given className
	     *
	     *  Return an empty array if none found.
	     * @param className
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.parents = function (className) {
	        var parentsFound = [];
	        var parentFound = this.parent(className);
	        while (parentFound) {
	            parentsFound.push(parentFound);
	            parentFound = new Dom(parentFound).parent(className);
	        }
	        return parentsFound;
	    };
	    /**
	     * Return all children
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.children = function () {
	        return this.nodeListToArray(this.el.children);
	    };
	    /**
	     * Return all siblings
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.siblings = function (selector) {
	        var sibs = [];
	        var currentElement = this.el.parentNode.firstChild;
	        for (; currentElement; currentElement = currentElement.nextSibling) {
	            if (currentElement != this.el) {
	                if (this.matches(currentElement, selector) || !selector) {
	                    sibs.push(currentElement);
	                }
	            }
	        }
	        return sibs;
	    };
	    Dom.prototype.matches = function (element, selector) {
	        var all = document.querySelectorAll(selector);
	        for (var i = 0; i < all.length; i++) {
	            if (all[i] === element) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * Find all children that match the given CSS selector
	     * @param selector A CSS selector, can be a .className
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.findAll = function (selector) {
	        return this.nodeListToArray(this.el.querySelectorAll(selector));
	    };
	    /**
	     * Find the child elements using a className
	     * @param className Class of the childs elements to find
	     * @returns {HTMLElement[]}
	     */
	    Dom.prototype.findClass = function (className) {
	        if ('getElementsByClassName' in this.el) {
	            return this.nodeListToArray(this.el.getElementsByClassName(className));
	        }
	        // For ie 8
	        return this.nodeListToArray(this.el.querySelectorAll('.' + className));
	    };
	    /**
	     * Find an element using an ID
	     * @param id ID of the element to find
	     * @returns {HTMLElement}
	     */
	    Dom.prototype.findId = function (id) {
	        return document.getElementById(id);
	    };
	    Dom.prototype.addClass = function (className) {
	        var _this = this;
	        if (_.isArray(className)) {
	            _.each(className, function (name) {
	                _this.addClass(name);
	            });
	        }
	        else {
	            if (!this.hasClass(className)) {
	                if (this.el.className) {
	                    this.el.className += ' ' + className;
	                }
	                else {
	                    this.el.className = className;
	                }
	            }
	        }
	    };
	    /**
	     * Remove the class on the element. Works even if the element does not possess the class.
	     * @param className Classname to remove on the the element
	     */
	    Dom.prototype.removeClass = function (className) {
	        this.el.className = this.el.className.replace(new RegExp("(^|\\s)" + className + "(\\s|\\b)", 'g'), '$1').trim();
	    };
	    /**
	     * Toggle the class on the element.
	     * @param className Classname to toggle
	     * @swtch If true, add the class regardless and if false, remove the class
	     */
	    Dom.prototype.toggleClass = function (className, swtch) {
	        if (Utils_1.Utils.isNullOrUndefined(swtch)) {
	            if (this.hasClass(className)) {
	                this.removeClass(className);
	            }
	            else {
	                this.addClass(className);
	            }
	        }
	        else {
	            if (swtch) {
	                this.addClass(className);
	            }
	            else {
	                this.removeClass(className);
	            }
	        }
	    };
	    /**
	     * Sets the inner html of the element
	     * @param html The html to set
	     */
	    Dom.prototype.setHtml = function (html) {
	        this.el.innerHTML = html;
	    };
	    /**
	     * Return an array with all the classname on the element. Empty array if the element has not classname
	     * @returns {any|Array}
	     */
	    Dom.prototype.getClass = function () {
	        return this.el.className.match(Dom.CLASS_NAME_REGEX) || [];
	    };
	    /**
	     * Check if the element has the given class name
	     * @param className Classname to verify
	     * @returns {boolean}
	     */
	    Dom.prototype.hasClass = function (className) {
	        return _.contains(this.getClass(), className);
	    };
	    /**
	     * Detach the element from the DOM.
	     */
	    Dom.prototype.detach = function () {
	        this.el.parentElement && this.el.parentElement.removeChild(this.el);
	    };
	    /**
	     * Insert the current node after the given reference node
	     * @param refNode
	     */
	    Dom.prototype.insertAfter = function (refNode) {
	        refNode.parentNode && refNode.parentNode.insertBefore(this.el, refNode.nextSibling);
	    };
	    /**
	     * Insert the current node before the given reference node
	     * @param refNode
	     */
	    Dom.prototype.insertBefore = function (refNode) {
	        refNode.parentNode && refNode.parentNode.insertBefore(this.el, refNode);
	    };
	    /**
	     * Insert the given node as the first child of the current node
	     * @param toPrepend
	     */
	    Dom.prototype.prepend = function (toPrepend) {
	        if (this.el.firstChild) {
	            new Dom(toPrepend).insertBefore(this.el.firstChild);
	        }
	        else {
	            this.el.appendChild(toPrepend);
	        }
	    };
	    Dom.prototype.on = function (type, eventHandle) {
	        var _this = this;
	        if (_.isArray(type)) {
	            _.each(type, function (t) {
	                _this.on(t, eventHandle);
	            });
	        }
	        else {
	            var jq = JQueryutils_1.JQueryUtils.getJQuery();
	            if (jq) {
	                jq(this.el).on(type, eventHandle);
	            }
	            else if (this.el.addEventListener) {
	                var fn = function (e) {
	                    eventHandle(e, e.detail);
	                };
	                Dom.handlers.push({
	                    eventHandle: eventHandle,
	                    fn: fn
	                });
	                this.el.addEventListener(type, fn, false);
	            }
	            else if (this.el['on']) {
	                this.el['on']('on' + type, eventHandle);
	            }
	        }
	    };
	    Dom.prototype.one = function (type, eventHandle) {
	        var _this = this;
	        if (_.isArray(type)) {
	            _.each(type, function (t) {
	                _this.one(t, eventHandle);
	            });
	        }
	        else {
	            var once = function (e, args) {
	                _this.off(type, once);
	                return eventHandle(e, args);
	            };
	            this.on(type, once);
	        }
	    };
	    Dom.prototype.off = function (type, eventHandle) {
	        var _this = this;
	        if (_.isArray(type)) {
	            _.each(type, function (t) {
	                _this.off(t, eventHandle);
	            });
	        }
	        else {
	            var jq = JQueryutils_1.JQueryUtils.getJQuery();
	            if (jq) {
	                jq(this.el).off(type, eventHandle);
	            }
	            else if (this.el.removeEventListener) {
	                var idx = 0;
	                var found = _.find(Dom.handlers, function (handlerObj, i) {
	                    if (handlerObj.eventHandle == eventHandle) {
	                        idx = i;
	                        return true;
	                    }
	                });
	                if (found) {
	                    this.el.removeEventListener(type, found.fn, false);
	                    Dom.handlers.splice(idx, 1);
	                }
	            }
	            else if (this.el['off']) {
	                this.el['off']('on' + type, eventHandle);
	            }
	        }
	    };
	    /**
	     * Trigger an event on the element.
	     * @param type The event type to trigger
	     * @param data
	     */
	    Dom.prototype.trigger = function (type, data) {
	        var jq = JQueryutils_1.JQueryUtils.getJQuery();
	        if (jq) {
	            jq(this.el).trigger(type, data);
	        }
	        else if (CustomEvent !== undefined) {
	            var event = new CustomEvent(type, { detail: data, bubbles: true });
	            this.el.dispatchEvent(event);
	        }
	        else {
	            new Logger_1.Logger(this).error('CANNOT TRIGGER EVENT FOR OLDER BROWSER');
	        }
	    };
	    /**
	     * Check if the element is "empty" (has no innerHTML content). Whitespace is considered empty</br>
	     * @returns {boolean}
	     */
	    Dom.prototype.isEmpty = function () {
	        return Dom.ONLY_WHITE_SPACE_REGEX.test(this.el.innerHTML);
	    };
	    /**
	     * Check if the element is a descendant of parent
	     * @param other
	     */
	    Dom.prototype.isDescendant = function (parent) {
	        var node = this.el.parentNode;
	        while (node != null) {
	            if (node == parent) {
	                return true;
	            }
	            node = node.parentNode;
	        }
	        return false;
	    };
	    /**
	     * Replace the current element with the other element, then detach the current element
	     * @param otherElem
	     */
	    Dom.prototype.replaceWith = function (otherElem) {
	        var parent = this.el.parentNode;
	        if (parent) {
	            new Dom(otherElem).insertAfter(this.el);
	        }
	        this.detach();
	    };
	    // based on http://api.jquery.com/position/
	    /**
	     * Return the position relative to the offset parent.
	     */
	    Dom.prototype.position = function () {
	        var offsetParent = this.offsetParent();
	        var parentOffset = { top: 0, left: 0 };
	        var offset = this.offset();
	        if (!$$(offsetParent).is('html')) {
	            parentOffset = $$(offsetParent).offset();
	        }
	        var borderTopWidth = parseInt($$(offsetParent).css('borderTopWidth'));
	        var borderLeftWidth = parseInt($$(offsetParent).css('borderLeftWidth'));
	        borderTopWidth = isNaN(borderTopWidth) ? 0 : borderTopWidth;
	        borderLeftWidth = isNaN(borderLeftWidth) ? 0 : borderLeftWidth;
	        parentOffset = {
	            top: parentOffset.top + borderTopWidth,
	            left: parentOffset.left + borderLeftWidth
	        };
	        var marginTop = parseInt(this.css('marginTop'));
	        var marginLeft = parseInt(this.css('marginLeft'));
	        marginTop = isNaN(marginTop) ? 0 : marginTop;
	        marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
	        return {
	            top: offset.top - parentOffset.top - marginTop,
	            left: offset.left - parentOffset.left - marginLeft
	        };
	    };
	    // based on https://api.jquery.com/offsetParent/
	    /**
	     * Returns the offset parent. The offset parent is the closest parent that is positioned.
	     * An element is positioned when its position property is not 'static', which is the default.
	     */
	    Dom.prototype.offsetParent = function () {
	        var offsetParent = this.el.offsetParent;
	        while (offsetParent instanceof HTMLElement && $$(offsetParent).css('position') === 'static') {
	            // Will break out if it stumbles upon an non-HTMLElement and return documentElement
	            offsetParent = offsetParent.offsetParent;
	        }
	        if (!(offsetParent instanceof HTMLElement)) {
	            return document.documentElement;
	        }
	        return offsetParent;
	    };
	    // based on http://api.jquery.com/offset/
	    /**
	     * Return the position relative to the document.
	     */
	    Dom.prototype.offset = function () {
	        // In <=IE11, calling getBoundingClientRect on a disconnected node throws an error
	        if (!this.el.getClientRects().length) {
	            return { top: 0, left: 0 };
	        }
	        var rect = this.el.getBoundingClientRect();
	        if (rect.width || rect.height) {
	            var doc = this.el.ownerDocument;
	            var docElem = doc.documentElement;
	            return {
	                top: rect.top + window.pageYOffset - docElem.clientTop,
	                left: rect.left + window.pageXOffset - docElem.clientLeft
	            };
	        }
	        return rect;
	    };
	    /**
	     * Returns the offset width of the element
	     */
	    Dom.prototype.width = function () {
	        return this.el.offsetWidth;
	    };
	    /**
	     * Returns the offset height of the element
	     */
	    Dom.prototype.height = function () {
	        return this.el.offsetHeight;
	    };
	    Dom.prototype.traverseAncestorForClass = function (current, className) {
	        if (current === void 0) { current = this.el; }
	        if (className.indexOf('.') == 0) {
	            className = className.substr(1);
	        }
	        var found = false;
	        while (!found) {
	            if ($$(current).hasClass(className)) {
	                found = true;
	            }
	            if (current.tagName.toLowerCase() == 'body') {
	                break;
	            }
	            if (current.parentElement == null) {
	                break;
	            }
	            if (!found) {
	                current = current.parentElement;
	            }
	        }
	        if (found) {
	            return current;
	        }
	        return undefined;
	    };
	    return Dom;
	}());
	Dom.CLASS_NAME_REGEX = /-?[_a-zA-Z]+[_a-zA-Z0-9-]*/g;
	Dom.ONLY_WHITE_SPACE_REGEX = /^\s*$/;
	Dom.handlers = [];
	exports.Dom = Dom;
	var Win = (function () {
	    function Win(win) {
	        this.win = win;
	    }
	    Win.prototype.height = function () {
	        return this.win.innerHeight;
	    };
	    Win.prototype.width = function () {
	        return this.win.innerWidth;
	    };
	    Win.prototype.scrollY = function () {
	        return this.supportPageOffset() ? this.win.pageYOffset : this.isCSS1Compat() ? this.win.document.documentElement.scrollTop : this.win.document.body.scrollTop;
	    };
	    Win.prototype.scrollX = function () {
	        return this.supportPageOffset() ? window.pageXOffset : this.isCSS1Compat() ? document.documentElement.scrollLeft : document.body.scrollLeft;
	    };
	    Win.prototype.isCSS1Compat = function () {
	        return (this.win.document.compatMode || '') === 'CSS1Compat';
	    };
	    Win.prototype.supportPageOffset = function () {
	        return this.win.pageXOffset !== undefined;
	    };
	    return Win;
	}());
	exports.Win = Win;
	var Doc = (function () {
	    function Doc(doc) {
	        this.doc = doc;
	    }
	    Doc.prototype.height = function () {
	        var body = this.doc.body;
	        return Math.max(body.scrollHeight, body.offsetHeight);
	    };
	    Doc.prototype.width = function () {
	        var body = this.doc.body;
	        return Math.max(body.scrollWidth, body.offsetWidth);
	    };
	    return Doc;
	}());
	exports.Doc = Doc;
	function $$() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    if (args.length === 1 && args[0] instanceof Dom) {
	        return args[0];
	    }
	    else if (args.length === 1 && (!_.isString(args[0]))) {
	        return new Dom(args[0]);
	    }
	    else {
	        return new Dom(Dom.createElement.apply(Dom, args));
	    }
	}
	exports.$$ = $$;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var DateUtils_1 = __webpack_require__(58);
	var FileTypes_1 = __webpack_require__(61);
	var Utils_1 = __webpack_require__(13);
	var StringUtils_1 = __webpack_require__(62);
	var DomUtils = (function () {
	    function DomUtils() {
	    }
	    DomUtils.getPopUpCloseButton = function (captionForClose, captionForReminder) {
	        var container = document.createElement('span');
	        var closeButton = document.createElement('span');
	        Dom_1.$$(closeButton).addClass('coveo-close-button');
	        container.appendChild(closeButton);
	        var iconClose = document.createElement('span');
	        Dom_1.$$(iconClose).addClass('coveo-icon');
	        Dom_1.$$(iconClose).addClass('coveo-sprites-quickview-close');
	        closeButton.appendChild(iconClose);
	        Dom_1.$$(closeButton).text(captionForClose);
	        var closeReminder = document.createElement('span');
	        Dom_1.$$(closeReminder).addClass('coveo-pop-up-reminder');
	        Dom_1.$$(closeReminder).text(captionForReminder);
	        container.appendChild(closeReminder);
	        return container.outerHTML;
	    };
	    DomUtils.getBasicLoadingAnimation = function () {
	        var loadDotClass = 'coveo-loading-dot';
	        var dom = document.createElement('div');
	        dom.className = 'coveo-first-loading-animation';
	        dom.innerHTML = "<div class='coveo-logo' ></div>\n    <div class='coveo-loading-container'>\n      <div class='" + loadDotClass + "'></div>\n      <div class='" + loadDotClass + "'></div>\n      <div class='" + loadDotClass + "'></div>\n      <div class='" + loadDotClass + "'></div>\n    </div>";
	        return dom;
	    };
	    DomUtils.highlightElement = function (initialString, valueToSearch) {
	        var regex = new RegExp(Utils_1.Utils.escapeRegexCharacter(StringUtils_1.StringUtils.latinize(valueToSearch)), 'i');
	        var firstChar = StringUtils_1.StringUtils.latinize(initialString).search(regex);
	        var lastChar = firstChar + valueToSearch.length;
	        return StringUtils_1.StringUtils.htmlEncode(initialString.slice(0, firstChar)) + "<span class='coveo-highlight'>" + StringUtils_1.StringUtils.htmlEncode(initialString.slice(firstChar, lastChar)) + "</span>" + StringUtils_1.StringUtils.htmlEncode(initialString.slice(lastChar));
	    };
	    DomUtils.getLoadingSpinner = function () {
	        var loading = Dom_1.$$('div', {
	            className: 'coveo-loading-spinner'
	        });
	        return loading.el;
	    };
	    DomUtils.getModalBoxHeader = function (title) {
	        var header = Dom_1.$$('div');
	        header.el.innerHTML = "<div class='coveo-modalbox-right-header'>\n        <span class='coveo-modalbox-close-button'>\n          <span class='coveo-icon coveo-sprites-common-clear'></span>\n        </span>\n      </div>\n      <div class='coveo-modalbox-left-header'>\n        <span class='coveo-modalbox-pop-up-reminder'> " + (title || '') + "</span>\n      </div>";
	        return header;
	    };
	    DomUtils.getQuickviewHeader = function (result, options, bindings) {
	        var date = '';
	        if (options.showDate) {
	            date = DateUtils_1.DateUtils.dateTimeToString(new Date(Utils_1.Utils.getFieldValue(result, 'date')));
	        }
	        var fileType = FileTypes_1.FileTypes.get(result);
	        var header = Dom_1.$$('div');
	        header.el.innerHTML = "<div class='coveo-quickview-right-header'>\n        <span class='coveo-quickview-time'>" + date + "</span>\n        <span class='coveo-quickview-close-button'>\n          <span class='coveo-icon coveo-sprites-common-clear'></span>\n        </span>\n      </div>\n      <div class='coveo-quickview-left-header'>\n        <span class='coveo-quickview-icon coveo-small " + fileType.icon + "'></span>\n        <a class='coveo-quickview-pop-up-reminder'> " + (options.title || '') + "</a>\n      </div>";
	        new Coveo[Coveo['Salesforce'] ? 'SalesforceResultLink' : 'ResultLink'](header.find('.coveo-quickview-pop-up-reminder'), undefined, bindings, result);
	        return header;
	    };
	    return DomUtils;
	}());
	exports.DomUtils = DomUtils;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var Assert_1 = __webpack_require__(12);
	var _ = __webpack_require__(14);
	// On-demand mapping of file types to captions. Used by facets, but I don't
	// really like this. Maybe a dedicated filetype facet would be better? Hmm...
	var fileTypeCaptions;
	var FileTypes = (function () {
	    function FileTypes() {
	    }
	    FileTypes.get = function (result) {
	        var objecttype = Utils_1.Utils.getFieldValue(result, 'objecttype');
	        var filetype = Utils_1.Utils.getFieldValue(result, 'filetype');
	        // When @objecttype is File we fallback on @filetype for icons and such
	        if (Utils_1.Utils.isNonEmptyString(objecttype) && objecttype.toLowerCase() != 'file') {
	            return FileTypes.getObjectType(objecttype);
	        }
	        else if (Utils_1.Utils.isNonEmptyString(filetype)) {
	            return FileTypes.getFileType(filetype);
	        }
	        else {
	            return {
	                // This will render a default icon. Really it should not happen.
	                icon: 'coveo-icon filetype',
	                caption: Strings_1.l('Unknown')
	            };
	        }
	    };
	    FileTypes.getObjectType = function (objecttype) {
	        // We must use lowercase filetypes because that's how the CSS classes
	        // are generated (they are case sensitive, alas).
	        objecttype = objecttype.toLowerCase();
	        var variableValue = "objecttype_" + objecttype;
	        // Most object types have a set of localized strings in the main dictionary
	        var localizedString = Strings_1.l(variableValue);
	        return {
	            'icon': 'coveo-icon objecttype ' + objecttype.replace(' ', '-'),
	            caption: localizedString != variableValue ? localizedString : objecttype
	        };
	    };
	    FileTypes.getFileType = function (filetype) {
	        // We must use lowercase filetypes because that's how the CSS classes
	        // are generated (they are case sensitive, alas).
	        filetype = filetype.toLowerCase();
	        // Sometimes, filetype begins with a period (typically means the index has
	        // no idea and uses the file extension as a filetype).
	        if (filetype[0] == '.') {
	            filetype = filetype.substring(1);
	        }
	        var variableValue = "filetype_" + filetype;
	        // Most filetypes have a set of localized strings in the main dictionary
	        var localizedString = Strings_1.l(variableValue);
	        return {
	            'icon': 'coveo-icon filetype ' + filetype.replace(' ', '-'),
	            caption: localizedString != variableValue ? localizedString : filetype
	        };
	    };
	    FileTypes.getFileTypeCaptions = function () {
	        if (fileTypeCaptions == undefined) {
	            fileTypeCaptions = {};
	            var strings = String['locales'][String['locale'].toLowerCase()];
	            Assert_1.Assert.isNotUndefined(strings);
	            _.each(_.keys(strings), function (key) {
	                if (key.indexOf('filetype_') == 0) {
	                    fileTypeCaptions[key.substr('filetype_'.length)] = key.toLocaleString();
	                }
	                else if (key.indexOf('objecttype_') == 0) {
	                    fileTypeCaptions[key.substr('objecttype_'.length)] = key.toLocaleString();
	                }
	            });
	        }
	        return fileTypeCaptions;
	    };
	    return FileTypes;
	}());
	exports.FileTypes = FileTypes;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var latinize = __webpack_require__(63);
	var _ = __webpack_require__(14);
	var StringUtils = (function () {
	    function StringUtils() {
	    }
	    StringUtils.javascriptEncode = function (value) {
	        Assert_1.Assert.isString(value);
	        value = value.replace(/\\/g, '\\\\');
	        value = value.replace(/'/g, '\\\'');
	        value = value.replace(/"/g, '\\"');
	        return value;
	    };
	    StringUtils.htmlEncode = function (value) {
	        Assert_1.Assert.isString(value);
	        var div = Dom_1.$$('div');
	        div.text(value);
	        return div.el.innerHTML;
	    };
	    StringUtils.splice = function (value, index, remove, toAdd) {
	        return value.slice(0, index) + toAdd + value.slice(index + Math.abs(remove));
	    };
	    StringUtils.removeMiddle = function (value, length, toAdd) {
	        if (value.length < length) {
	            return value;
	        }
	        var toRemove = value.length - length;
	        var index = Math.floor(length / 2);
	        return StringUtils.splice(value, index, toRemove, toAdd);
	    };
	    StringUtils.regexEncode = function (value) {
	        Assert_1.Assert.isString(value);
	        return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
	    };
	    StringUtils.stringToRegex = function (value, ignoreAccent) {
	        if (ignoreAccent === void 0) { ignoreAccent = false; }
	        Assert_1.Assert.isString(value);
	        var encoded = StringUtils.regexEncode(value);
	        if (ignoreAccent) {
	            return _.map(encoded, function (char) {
	                var regexp = _.find(StringUtils.accented, function (regexp) { return char.match(regexp) != null; });
	                if (regexp) {
	                    return regexp.source;
	                }
	                return char;
	            }).join('');
	        }
	        return encoded;
	    };
	    StringUtils.wildcardsToRegex = function (value, ignoreAccent) {
	        if (ignoreAccent === void 0) { ignoreAccent = false; }
	        Assert_1.Assert.isString(value);
	        var encoded = StringUtils.stringToRegex(value, ignoreAccent);
	        encoded = encoded.replace(/\\\*/, '.*');
	        encoded = encoded.replace(/\\\?/, '.');
	        return encoded;
	    };
	    StringUtils.getHighlights = function (strToSearch, regexToFind, dataHighlightGroupTerm) {
	        var match, indexes = [];
	        while (match = regexToFind.exec(strToSearch)) {
	            var desiredMatch = match[2];
	            var undesiredMatch = match[1];
	            var offset = match.index + undesiredMatch.length;
	            indexes.push({ offset: offset, length: desiredMatch.length, dataHighlightGroupTerm: dataHighlightGroupTerm });
	            if (!regexToFind.global) {
	                break;
	            }
	        }
	        return _.isEmpty(indexes) ? undefined : indexes;
	    };
	    StringUtils.encodeCarriageReturn = function (strToEncode) {
	        Assert_1.Assert.isString(strToEncode);
	        return strToEncode.replace(/\n/g, '<br/>');
	    };
	    StringUtils.equalsCaseInsensitive = function (str1, str2) {
	        return str1.toLowerCase() == str2.toLowerCase();
	    };
	    StringUtils.match = function (value, regex) {
	        var results = [];
	        var arr;
	        while ((arr = regex.exec(value)) !== null) {
	            results.push(arr);
	        }
	        return results;
	    };
	    StringUtils.hashCode = function (str) {
	        var hash = 0;
	        var len = str.length;
	        for (var i = 0; i < len; i++) {
	            var char = str.charCodeAt(i);
	            hash = ((hash << 5) - hash) + char;
	            hash = hash & hash; // Convert to 32bit integer
	        }
	        return hash.toString(16);
	    };
	    // http://stackoverflow.com/a/25575009
	    StringUtils.latinize = function (str) {
	        return latinize(str);
	    };
	    return StringUtils;
	}());
	StringUtils.accented = {
	    'A': /[Aa\xaa\xc0-\xc5\xe0-\xe5\u0100-\u0105\u01cd\u01ce\u0200-\u0203\u0226\u0227\u1d2c\u1d43\u1e00\u1e01\u1e9a\u1ea0-\u1ea3\u2090\u2100\u2101\u213b\u249c\u24b6\u24d0\u3371-\u3374\u3380-\u3384\u3388\u3389\u33a9-\u33af\u33c2\u33ca\u33df\u33ff\uff21\uff41]/g,
	    'B': /[Bb\u1d2e\u1d47\u1e02-\u1e07\u212c\u249d\u24b7\u24d1\u3374\u3385-\u3387\u33c3\u33c8\u33d4\u33dd\uff22\uff42]/g,
	    'C': /[Cc\xc7\xe7\u0106-\u010d\u1d9c\u2100\u2102\u2103\u2105\u2106\u212d\u216d\u217d\u249e\u24b8\u24d2\u3376\u3388\u3389\u339d\u33a0\u33a4\u33c4-\u33c7\uff23\uff43]/g,
	    'D': /[Dd\u010e\u010f\u01c4-\u01c6\u01f1-\u01f3\u1d30\u1d48\u1e0a-\u1e13\u2145\u2146\u216e\u217e\u249f\u24b9\u24d3\u32cf\u3372\u3377-\u3379\u3397\u33ad-\u33af\u33c5\u33c8\uff24\uff44]/g,
	    'E': /[Ee\xc8-\xcb\xe8-\xeb\u0112-\u011b\u0204-\u0207\u0228\u0229\u1d31\u1d49\u1e18-\u1e1b\u1eb8-\u1ebd\u2091\u2121\u212f\u2130\u2147\u24a0\u24ba\u24d4\u3250\u32cd\u32ce\uff25\uff45]/g,
	    'F': /[Ff\u1da0\u1e1e\u1e1f\u2109\u2131\u213b\u24a1\u24bb\u24d5\u338a-\u338c\u3399\ufb00-\ufb04\uff26\uff46]/g,
	    'G': /[Gg\u011c-\u0123\u01e6\u01e7\u01f4\u01f5\u1d33\u1d4d\u1e20\u1e21\u210a\u24a2\u24bc\u24d6\u32cc\u32cd\u3387\u338d-\u338f\u3393\u33ac\u33c6\u33c9\u33d2\u33ff\uff27\uff47]/g,
	    'H': /[Hh\u0124\u0125\u021e\u021f\u02b0\u1d34\u1e22-\u1e2b\u1e96\u210b-\u210e\u24a3\u24bd\u24d7\u32cc\u3371\u3390-\u3394\u33ca\u33cb\u33d7\uff28\uff48]/g,
	    'I': /[Ii\xcc-\xcf\xec-\xef\u0128-\u0130\u0132\u0133\u01cf\u01d0\u0208-\u020b\u1d35\u1d62\u1e2c\u1e2d\u1ec8-\u1ecb\u2071\u2110\u2111\u2139\u2148\u2160-\u2163\u2165-\u2168\u216a\u216b\u2170-\u2173\u2175-\u2178\u217a\u217b\u24a4\u24be\u24d8\u337a\u33cc\u33d5\ufb01\ufb03\uff29\uff49]/g,
	    'J': /[Jj\u0132-\u0135\u01c7-\u01cc\u01f0\u02b2\u1d36\u2149\u24a5\u24bf\u24d9\u2c7c\uff2a\uff4a]/g,
	    'K': /[Kk\u0136\u0137\u01e8\u01e9\u1d37\u1d4f\u1e30-\u1e35\u212a\u24a6\u24c0\u24da\u3384\u3385\u3389\u338f\u3391\u3398\u339e\u33a2\u33a6\u33aa\u33b8\u33be\u33c0\u33c6\u33cd-\u33cf\uff2b\uff4b]/g,
	    'L': /[Ll\u0139-\u0140\u01c7-\u01c9\u02e1\u1d38\u1e36\u1e37\u1e3a-\u1e3d\u2112\u2113\u2121\u216c\u217c\u24a7\u24c1\u24db\u32cf\u3388\u3389\u33d0-\u33d3\u33d5\u33d6\u33ff\ufb02\ufb04\uff2c\uff4c]/g,
	    'M': /[Mm\u1d39\u1d50\u1e3e-\u1e43\u2120\u2122\u2133\u216f\u217f\u24a8\u24c2\u24dc\u3377-\u3379\u3383\u3386\u338e\u3392\u3396\u3399-\u33a8\u33ab\u33b3\u33b7\u33b9\u33bd\u33bf\u33c1\u33c2\u33ce\u33d0\u33d4-\u33d6\u33d8\u33d9\u33de\u33df\uff2d\uff4d]/g,
	    'N': /[Nn\xd1\xf1\u0143-\u0149\u01ca-\u01cc\u01f8\u01f9\u1d3a\u1e44-\u1e4b\u207f\u2115\u2116\u24a9\u24c3\u24dd\u3381\u338b\u339a\u33b1\u33b5\u33bb\u33cc\u33d1\uff2e\uff4e]/g,
	    'O': /[Oo\xba\xd2-\xd6\xf2-\xf6\u014c-\u0151\u01a0\u01a1\u01d1\u01d2\u01ea\u01eb\u020c-\u020f\u022e\u022f\u1d3c\u1d52\u1ecc-\u1ecf\u2092\u2105\u2116\u2134\u24aa\u24c4\u24de\u3375\u33c7\u33d2\u33d6\uff2f\uff4f]/g,
	    'P': /[Pp\u1d3e\u1d56\u1e54-\u1e57\u2119\u24ab\u24c5\u24df\u3250\u3371\u3376\u3380\u338a\u33a9-\u33ac\u33b0\u33b4\u33ba\u33cb\u33d7-\u33da\uff30\uff50]/g,
	    'Q': /[Qq\u211a\u24ac\u24c6\u24e0\u33c3\uff31\uff51]/g,
	    'R': /[Rr\u0154-\u0159\u0210-\u0213\u02b3\u1d3f\u1d63\u1e58-\u1e5b\u1e5e\u1e5f\u20a8\u211b-\u211d\u24ad\u24c7\u24e1\u32cd\u3374\u33ad-\u33af\u33da\u33db\uff32\uff52]/g,
	    'S': /[Ss\u015a-\u0161\u017f\u0218\u0219\u02e2\u1e60-\u1e63\u20a8\u2101\u2120\u24ae\u24c8\u24e2\u33a7\u33a8\u33ae-\u33b3\u33db\u33dc\ufb06\uff33\uff53]/g,
	    'T': /[Tt\u0162-\u0165\u021a\u021b\u1d40\u1d57\u1e6a-\u1e71\u1e97\u2121\u2122\u24af\u24c9\u24e3\u3250\u32cf\u3394\u33cf\ufb05\ufb06\uff34\uff54]/g,
	    'U': /[Uu\xd9-\xdc\xf9-\xfc\u0168-\u0173\u01af\u01b0\u01d3\u01d4\u0214-\u0217\u1d41\u1d58\u1d64\u1e72-\u1e77\u1ee4-\u1ee7\u2106\u24b0\u24ca\u24e4\u3373\u337a\uff35\uff55]/g,
	    'V': /[Vv\u1d5b\u1d65\u1e7c-\u1e7f\u2163-\u2167\u2173-\u2177\u24b1\u24cb\u24e5\u2c7d\u32ce\u3375\u33b4-\u33b9\u33dc\u33de\uff36\uff56]/g,
	    'W': /[Ww\u0174\u0175\u02b7\u1d42\u1e80-\u1e89\u1e98\u24b2\u24cc\u24e6\u33ba-\u33bf\u33dd\uff37\uff57]/g,
	    'X': /[Xx\u02e3\u1e8a-\u1e8d\u2093\u213b\u2168-\u216b\u2178-\u217b\u24b3\u24cd\u24e7\u33d3\uff38\uff58]/g,
	    'Y': /[Yy\xdd\xfd\xff\u0176-\u0178\u0232\u0233\u02b8\u1e8e\u1e8f\u1e99\u1ef2-\u1ef9\u24b4\u24ce\u24e8\u33c9\uff39\uff59]/g,
	    'Z': /[Zz\u0179-\u017e\u01f1-\u01f3\u1dbb\u1e90-\u1e95\u2124\u2128\u24b5\u24cf\u24e9\u3390-\u3394\uff3a\uff5a]/g
	};
	exports.StringUtils = StringUtils;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // CommonJS
	    module.exports = factory();
	  } else {
	    // running in browser
	    root.latinize = factory();
	  }
	})(this, function() {
	
	  function latinize(str) {
	    if (typeof str === 'string') {
	      return str.replace(/[^A-Za-z0-9]/g, function(x) {
	        return latinize.characters[x] || x;
	      });
	    } else {
	      return str;
	    }
	  }
	
	  latinize.characters = {
	    'Á': 'A',
	    'Ă': 'A',
	    'Ắ': 'A',
	    'Ặ': 'A',
	    'Ằ': 'A',
	    'Ẳ': 'A',
	    'Ẵ': 'A',
	    'Ǎ': 'A',
	    'Â': 'A',
	    'Ấ': 'A',
	    'Ậ': 'A',
	    'Ầ': 'A',
	    'Ẩ': 'A',
	    'Ẫ': 'A',
	    'Ä': 'A',
	    'Ǟ': 'A',
	    'Ȧ': 'A',
	    'Ǡ': 'A',
	    'Ạ': 'A',
	    'Ȁ': 'A',
	    'À': 'A',
	    'Ả': 'A',
	    'Ȃ': 'A',
	    'Ā': 'A',
	    'Ą': 'A',
	    'Å': 'A',
	    'Ǻ': 'A',
	    'Ḁ': 'A',
	    'Ⱥ': 'A',
	    'Ã': 'A',
	    'Ꜳ': 'AA',
	    'Æ': 'AE',
	    'Ǽ': 'AE',
	    'Ǣ': 'AE',
	    'Ꜵ': 'AO',
	    'Ꜷ': 'AU',
	    'Ꜹ': 'AV',
	    'Ꜻ': 'AV',
	    'Ꜽ': 'AY',
	    'Ḃ': 'B',
	    'Ḅ': 'B',
	    'Ɓ': 'B',
	    'Ḇ': 'B',
	    'Ƀ': 'B',
	    'Ƃ': 'B',
	    'Ć': 'C',
	    'Č': 'C',
	    'Ç': 'C',
	    'Ḉ': 'C',
	    'Ĉ': 'C',
	    'Ċ': 'C',
	    'Ƈ': 'C',
	    'Ȼ': 'C',
	    'Ď': 'D',
	    'Ḑ': 'D',
	    'Ḓ': 'D',
	    'Ḋ': 'D',
	    'Ḍ': 'D',
	    'Ɗ': 'D',
	    'Ḏ': 'D',
	    'ǲ': 'D',
	    'ǅ': 'D',
	    'Đ': 'D',
	    'Ƌ': 'D',
	    'Ǳ': 'DZ',
	    'Ǆ': 'DZ',
	    'É': 'E',
	    'Ĕ': 'E',
	    'Ě': 'E',
	    'Ȩ': 'E',
	    'Ḝ': 'E',
	    'Ê': 'E',
	    'Ế': 'E',
	    'Ệ': 'E',
	    'Ề': 'E',
	    'Ể': 'E',
	    'Ễ': 'E',
	    'Ḙ': 'E',
	    'Ë': 'E',
	    'Ė': 'E',
	    'Ẹ': 'E',
	    'Ȅ': 'E',
	    'È': 'E',
	    'Ẻ': 'E',
	    'Ȇ': 'E',
	    'Ē': 'E',
	    'Ḗ': 'E',
	    'Ḕ': 'E',
	    'Ę': 'E',
	    'Ɇ': 'E',
	    'Ẽ': 'E',
	    'Ḛ': 'E',
	    'Ꝫ': 'ET',
	    'Ḟ': 'F',
	    'Ƒ': 'F',
	    'Ǵ': 'G',
	    'Ğ': 'G',
	    'Ǧ': 'G',
	    'Ģ': 'G',
	    'Ĝ': 'G',
	    'Ġ': 'G',
	    'Ɠ': 'G',
	    'Ḡ': 'G',
	    'Ǥ': 'G',
	    'Ḫ': 'H',
	    'Ȟ': 'H',
	    'Ḩ': 'H',
	    'Ĥ': 'H',
	    'Ⱨ': 'H',
	    'Ḧ': 'H',
	    'Ḣ': 'H',
	    'Ḥ': 'H',
	    'Ħ': 'H',
	    'Í': 'I',
	    'Ĭ': 'I',
	    'Ǐ': 'I',
	    'Î': 'I',
	    'Ï': 'I',
	    'Ḯ': 'I',
	    'İ': 'I',
	    'Ị': 'I',
	    'Ȉ': 'I',
	    'Ì': 'I',
	    'Ỉ': 'I',
	    'Ȋ': 'I',
	    'Ī': 'I',
	    'Į': 'I',
	    'Ɨ': 'I',
	    'Ĩ': 'I',
	    'Ḭ': 'I',
	    'Ꝺ': 'D',
	    'Ꝼ': 'F',
	    'Ᵹ': 'G',
	    'Ꞃ': 'R',
	    'Ꞅ': 'S',
	    'Ꞇ': 'T',
	    'Ꝭ': 'IS',
	    'Ĵ': 'J',
	    'Ɉ': 'J',
	    'Ḱ': 'K',
	    'Ǩ': 'K',
	    'Ķ': 'K',
	    'Ⱪ': 'K',
	    'Ꝃ': 'K',
	    'Ḳ': 'K',
	    'Ƙ': 'K',
	    'Ḵ': 'K',
	    'Ꝁ': 'K',
	    'Ꝅ': 'K',
	    'Ĺ': 'L',
	    'Ƚ': 'L',
	    'Ľ': 'L',
	    'Ļ': 'L',
	    'Ḽ': 'L',
	    'Ḷ': 'L',
	    'Ḹ': 'L',
	    'Ⱡ': 'L',
	    'Ꝉ': 'L',
	    'Ḻ': 'L',
	    'Ŀ': 'L',
	    'Ɫ': 'L',
	    'ǈ': 'L',
	    'Ł': 'L',
	    'Ǉ': 'LJ',
	    'Ḿ': 'M',
	    'Ṁ': 'M',
	    'Ṃ': 'M',
	    'Ɱ': 'M',
	    'Ń': 'N',
	    'Ň': 'N',
	    'Ņ': 'N',
	    'Ṋ': 'N',
	    'Ṅ': 'N',
	    'Ṇ': 'N',
	    'Ǹ': 'N',
	    'Ɲ': 'N',
	    'Ṉ': 'N',
	    'Ƞ': 'N',
	    'ǋ': 'N',
	    'Ñ': 'N',
	    'Ǌ': 'NJ',
	    'Ó': 'O',
	    'Ŏ': 'O',
	    'Ǒ': 'O',
	    'Ô': 'O',
	    'Ố': 'O',
	    'Ộ': 'O',
	    'Ồ': 'O',
	    'Ổ': 'O',
	    'Ỗ': 'O',
	    'Ö': 'O',
	    'Ȫ': 'O',
	    'Ȯ': 'O',
	    'Ȱ': 'O',
	    'Ọ': 'O',
	    'Ő': 'O',
	    'Ȍ': 'O',
	    'Ò': 'O',
	    'Ỏ': 'O',
	    'Ơ': 'O',
	    'Ớ': 'O',
	    'Ợ': 'O',
	    'Ờ': 'O',
	    'Ở': 'O',
	    'Ỡ': 'O',
	    'Ȏ': 'O',
	    'Ꝋ': 'O',
	    'Ꝍ': 'O',
	    'Ō': 'O',
	    'Ṓ': 'O',
	    'Ṑ': 'O',
	    'Ɵ': 'O',
	    'Ǫ': 'O',
	    'Ǭ': 'O',
	    'Ø': 'O',
	    'Ǿ': 'O',
	    'Õ': 'O',
	    'Ṍ': 'O',
	    'Ṏ': 'O',
	    'Ȭ': 'O',
	    'Ƣ': 'OI',
	    'Ꝏ': 'OO',
	    'Ɛ': 'E',
	    'Ɔ': 'O',
	    'Ȣ': 'OU',
	    'Ṕ': 'P',
	    'Ṗ': 'P',
	    'Ꝓ': 'P',
	    'Ƥ': 'P',
	    'Ꝕ': 'P',
	    'Ᵽ': 'P',
	    'Ꝑ': 'P',
	    'Ꝙ': 'Q',
	    'Ꝗ': 'Q',
	    'Ŕ': 'R',
	    'Ř': 'R',
	    'Ŗ': 'R',
	    'Ṙ': 'R',
	    'Ṛ': 'R',
	    'Ṝ': 'R',
	    'Ȑ': 'R',
	    'Ȓ': 'R',
	    'Ṟ': 'R',
	    'Ɍ': 'R',
	    'Ɽ': 'R',
	    'Ꜿ': 'C',
	    'Ǝ': 'E',
	    'Ś': 'S',
	    'Ṥ': 'S',
	    'Š': 'S',
	    'Ṧ': 'S',
	    'Ş': 'S',
	    'Ŝ': 'S',
	    'Ș': 'S',
	    'Ṡ': 'S',
	    'Ṣ': 'S',
	    'Ṩ': 'S',
	    'ß': 'ss',
	    'Ť': 'T',
	    'Ţ': 'T',
	    'Ṱ': 'T',
	    'Ț': 'T',
	    'Ⱦ': 'T',
	    'Ṫ': 'T',
	    'Ṭ': 'T',
	    'Ƭ': 'T',
	    'Ṯ': 'T',
	    'Ʈ': 'T',
	    'Ŧ': 'T',
	    'Ɐ': 'A',
	    'Ꞁ': 'L',
	    'Ɯ': 'M',
	    'Ʌ': 'V',
	    'Ꜩ': 'TZ',
	    'Ú': 'U',
	    'Ŭ': 'U',
	    'Ǔ': 'U',
	    'Û': 'U',
	    'Ṷ': 'U',
	    'Ü': 'U',
	    'Ǘ': 'U',
	    'Ǚ': 'U',
	    'Ǜ': 'U',
	    'Ǖ': 'U',
	    'Ṳ': 'U',
	    'Ụ': 'U',
	    'Ű': 'U',
	    'Ȕ': 'U',
	    'Ù': 'U',
	    'Ủ': 'U',
	    'Ư': 'U',
	    'Ứ': 'U',
	    'Ự': 'U',
	    'Ừ': 'U',
	    'Ử': 'U',
	    'Ữ': 'U',
	    'Ȗ': 'U',
	    'Ū': 'U',
	    'Ṻ': 'U',
	    'Ų': 'U',
	    'Ů': 'U',
	    'Ũ': 'U',
	    'Ṹ': 'U',
	    'Ṵ': 'U',
	    'Ꝟ': 'V',
	    'Ṿ': 'V',
	    'Ʋ': 'V',
	    'Ṽ': 'V',
	    'Ꝡ': 'VY',
	    'Ẃ': 'W',
	    'Ŵ': 'W',
	    'Ẅ': 'W',
	    'Ẇ': 'W',
	    'Ẉ': 'W',
	    'Ẁ': 'W',
	    'Ⱳ': 'W',
	    'Ẍ': 'X',
	    'Ẋ': 'X',
	    'Ý': 'Y',
	    'Ŷ': 'Y',
	    'Ÿ': 'Y',
	    'Ẏ': 'Y',
	    'Ỵ': 'Y',
	    'Ỳ': 'Y',
	    'Ƴ': 'Y',
	    'Ỷ': 'Y',
	    'Ỿ': 'Y',
	    'Ȳ': 'Y',
	    'Ɏ': 'Y',
	    'Ỹ': 'Y',
	    'Ź': 'Z',
	    'Ž': 'Z',
	    'Ẑ': 'Z',
	    'Ⱬ': 'Z',
	    'Ż': 'Z',
	    'Ẓ': 'Z',
	    'Ȥ': 'Z',
	    'Ẕ': 'Z',
	    'Ƶ': 'Z',
	    'Ĳ': 'IJ',
	    'Œ': 'OE',
	    'ᴀ': 'A',
	    'ᴁ': 'AE',
	    'ʙ': 'B',
	    'ᴃ': 'B',
	    'ᴄ': 'C',
	    'ᴅ': 'D',
	    'ᴇ': 'E',
	    'ꜰ': 'F',
	    'ɢ': 'G',
	    'ʛ': 'G',
	    'ʜ': 'H',
	    'ɪ': 'I',
	    'ʁ': 'R',
	    'ᴊ': 'J',
	    'ᴋ': 'K',
	    'ʟ': 'L',
	    'ᴌ': 'L',
	    'ᴍ': 'M',
	    'ɴ': 'N',
	    'ᴏ': 'O',
	    'ɶ': 'OE',
	    'ᴐ': 'O',
	    'ᴕ': 'OU',
	    'ᴘ': 'P',
	    'ʀ': 'R',
	    'ᴎ': 'N',
	    'ᴙ': 'R',
	    'ꜱ': 'S',
	    'ᴛ': 'T',
	    'ⱻ': 'E',
	    'ᴚ': 'R',
	    'ᴜ': 'U',
	    'ᴠ': 'V',
	    'ᴡ': 'W',
	    'ʏ': 'Y',
	    'ᴢ': 'Z',
	    'á': 'a',
	    'ă': 'a',
	    'ắ': 'a',
	    'ặ': 'a',
	    'ằ': 'a',
	    'ẳ': 'a',
	    'ẵ': 'a',
	    'ǎ': 'a',
	    'â': 'a',
	    'ấ': 'a',
	    'ậ': 'a',
	    'ầ': 'a',
	    'ẩ': 'a',
	    'ẫ': 'a',
	    'ä': 'a',
	    'ǟ': 'a',
	    'ȧ': 'a',
	    'ǡ': 'a',
	    'ạ': 'a',
	    'ȁ': 'a',
	    'à': 'a',
	    'ả': 'a',
	    'ȃ': 'a',
	    'ā': 'a',
	    'ą': 'a',
	    'ᶏ': 'a',
	    'ẚ': 'a',
	    'å': 'a',
	    'ǻ': 'a',
	    'ḁ': 'a',
	    'ⱥ': 'a',
	    'ã': 'a',
	    'ꜳ': 'aa',
	    'æ': 'ae',
	    'ǽ': 'ae',
	    'ǣ': 'ae',
	    'ꜵ': 'ao',
	    'ꜷ': 'au',
	    'ꜹ': 'av',
	    'ꜻ': 'av',
	    'ꜽ': 'ay',
	    'ḃ': 'b',
	    'ḅ': 'b',
	    'ɓ': 'b',
	    'ḇ': 'b',
	    'ᵬ': 'b',
	    'ᶀ': 'b',
	    'ƀ': 'b',
	    'ƃ': 'b',
	    'ɵ': 'o',
	    'ć': 'c',
	    'č': 'c',
	    'ç': 'c',
	    'ḉ': 'c',
	    'ĉ': 'c',
	    'ɕ': 'c',
	    'ċ': 'c',
	    'ƈ': 'c',
	    'ȼ': 'c',
	    'ď': 'd',
	    'ḑ': 'd',
	    'ḓ': 'd',
	    'ȡ': 'd',
	    'ḋ': 'd',
	    'ḍ': 'd',
	    'ɗ': 'd',
	    'ᶑ': 'd',
	    'ḏ': 'd',
	    'ᵭ': 'd',
	    'ᶁ': 'd',
	    'đ': 'd',
	    'ɖ': 'd',
	    'ƌ': 'd',
	    'ı': 'i',
	    'ȷ': 'j',
	    'ɟ': 'j',
	    'ʄ': 'j',
	    'ǳ': 'dz',
	    'ǆ': 'dz',
	    'é': 'e',
	    'ĕ': 'e',
	    'ě': 'e',
	    'ȩ': 'e',
	    'ḝ': 'e',
	    'ê': 'e',
	    'ế': 'e',
	    'ệ': 'e',
	    'ề': 'e',
	    'ể': 'e',
	    'ễ': 'e',
	    'ḙ': 'e',
	    'ë': 'e',
	    'ė': 'e',
	    'ẹ': 'e',
	    'ȅ': 'e',
	    'è': 'e',
	    'ẻ': 'e',
	    'ȇ': 'e',
	    'ē': 'e',
	    'ḗ': 'e',
	    'ḕ': 'e',
	    'ⱸ': 'e',
	    'ę': 'e',
	    'ᶒ': 'e',
	    'ɇ': 'e',
	    'ẽ': 'e',
	    'ḛ': 'e',
	    'ꝫ': 'et',
	    'ḟ': 'f',
	    'ƒ': 'f',
	    'ᵮ': 'f',
	    'ᶂ': 'f',
	    'ǵ': 'g',
	    'ğ': 'g',
	    'ǧ': 'g',
	    'ģ': 'g',
	    'ĝ': 'g',
	    'ġ': 'g',
	    'ɠ': 'g',
	    'ḡ': 'g',
	    'ᶃ': 'g',
	    'ǥ': 'g',
	    'ḫ': 'h',
	    'ȟ': 'h',
	    'ḩ': 'h',
	    'ĥ': 'h',
	    'ⱨ': 'h',
	    'ḧ': 'h',
	    'ḣ': 'h',
	    'ḥ': 'h',
	    'ɦ': 'h',
	    'ẖ': 'h',
	    'ħ': 'h',
	    'ƕ': 'hv',
	    'í': 'i',
	    'ĭ': 'i',
	    'ǐ': 'i',
	    'î': 'i',
	    'ï': 'i',
	    'ḯ': 'i',
	    'ị': 'i',
	    'ȉ': 'i',
	    'ì': 'i',
	    'ỉ': 'i',
	    'ȋ': 'i',
	    'ī': 'i',
	    'į': 'i',
	    'ᶖ': 'i',
	    'ɨ': 'i',
	    'ĩ': 'i',
	    'ḭ': 'i',
	    'ꝺ': 'd',
	    'ꝼ': 'f',
	    'ᵹ': 'g',
	    'ꞃ': 'r',
	    'ꞅ': 's',
	    'ꞇ': 't',
	    'ꝭ': 'is',
	    'ǰ': 'j',
	    'ĵ': 'j',
	    'ʝ': 'j',
	    'ɉ': 'j',
	    'ḱ': 'k',
	    'ǩ': 'k',
	    'ķ': 'k',
	    'ⱪ': 'k',
	    'ꝃ': 'k',
	    'ḳ': 'k',
	    'ƙ': 'k',
	    'ḵ': 'k',
	    'ᶄ': 'k',
	    'ꝁ': 'k',
	    'ꝅ': 'k',
	    'ĺ': 'l',
	    'ƚ': 'l',
	    'ɬ': 'l',
	    'ľ': 'l',
	    'ļ': 'l',
	    'ḽ': 'l',
	    'ȴ': 'l',
	    'ḷ': 'l',
	    'ḹ': 'l',
	    'ⱡ': 'l',
	    'ꝉ': 'l',
	    'ḻ': 'l',
	    'ŀ': 'l',
	    'ɫ': 'l',
	    'ᶅ': 'l',
	    'ɭ': 'l',
	    'ł': 'l',
	    'ǉ': 'lj',
	    'ſ': 's',
	    'ẜ': 's',
	    'ẛ': 's',
	    'ẝ': 's',
	    'ḿ': 'm',
	    'ṁ': 'm',
	    'ṃ': 'm',
	    'ɱ': 'm',
	    'ᵯ': 'm',
	    'ᶆ': 'm',
	    'ń': 'n',
	    'ň': 'n',
	    'ņ': 'n',
	    'ṋ': 'n',
	    'ȵ': 'n',
	    'ṅ': 'n',
	    'ṇ': 'n',
	    'ǹ': 'n',
	    'ɲ': 'n',
	    'ṉ': 'n',
	    'ƞ': 'n',
	    'ᵰ': 'n',
	    'ᶇ': 'n',
	    'ɳ': 'n',
	    'ñ': 'n',
	    'ǌ': 'nj',
	    'ó': 'o',
	    'ŏ': 'o',
	    'ǒ': 'o',
	    'ô': 'o',
	    'ố': 'o',
	    'ộ': 'o',
	    'ồ': 'o',
	    'ổ': 'o',
	    'ỗ': 'o',
	    'ö': 'o',
	    'ȫ': 'o',
	    'ȯ': 'o',
	    'ȱ': 'o',
	    'ọ': 'o',
	    'ő': 'o',
	    'ȍ': 'o',
	    'ò': 'o',
	    'ỏ': 'o',
	    'ơ': 'o',
	    'ớ': 'o',
	    'ợ': 'o',
	    'ờ': 'o',
	    'ở': 'o',
	    'ỡ': 'o',
	    'ȏ': 'o',
	    'ꝋ': 'o',
	    'ꝍ': 'o',
	    'ⱺ': 'o',
	    'ō': 'o',
	    'ṓ': 'o',
	    'ṑ': 'o',
	    'ǫ': 'o',
	    'ǭ': 'o',
	    'ø': 'o',
	    'ǿ': 'o',
	    'õ': 'o',
	    'ṍ': 'o',
	    'ṏ': 'o',
	    'ȭ': 'o',
	    'ƣ': 'oi',
	    'ꝏ': 'oo',
	    'ɛ': 'e',
	    'ᶓ': 'e',
	    'ɔ': 'o',
	    'ᶗ': 'o',
	    'ȣ': 'ou',
	    'ṕ': 'p',
	    'ṗ': 'p',
	    'ꝓ': 'p',
	    'ƥ': 'p',
	    'ᵱ': 'p',
	    'ᶈ': 'p',
	    'ꝕ': 'p',
	    'ᵽ': 'p',
	    'ꝑ': 'p',
	    'ꝙ': 'q',
	    'ʠ': 'q',
	    'ɋ': 'q',
	    'ꝗ': 'q',
	    'ŕ': 'r',
	    'ř': 'r',
	    'ŗ': 'r',
	    'ṙ': 'r',
	    'ṛ': 'r',
	    'ṝ': 'r',
	    'ȑ': 'r',
	    'ɾ': 'r',
	    'ᵳ': 'r',
	    'ȓ': 'r',
	    'ṟ': 'r',
	    'ɼ': 'r',
	    'ᵲ': 'r',
	    'ᶉ': 'r',
	    'ɍ': 'r',
	    'ɽ': 'r',
	    'ↄ': 'c',
	    'ꜿ': 'c',
	    'ɘ': 'e',
	    'ɿ': 'r',
	    'ś': 's',
	    'ṥ': 's',
	    'š': 's',
	    'ṧ': 's',
	    'ş': 's',
	    'ŝ': 's',
	    'ș': 's',
	    'ṡ': 's',
	    'ṣ': 's',
	    'ṩ': 's',
	    'ʂ': 's',
	    'ᵴ': 's',
	    'ᶊ': 's',
	    'ȿ': 's',
	    'ɡ': 'g',
	    'ᴑ': 'o',
	    'ᴓ': 'o',
	    'ᴝ': 'u',
	    'ť': 't',
	    'ţ': 't',
	    'ṱ': 't',
	    'ț': 't',
	    'ȶ': 't',
	    'ẗ': 't',
	    'ⱦ': 't',
	    'ṫ': 't',
	    'ṭ': 't',
	    'ƭ': 't',
	    'ṯ': 't',
	    'ᵵ': 't',
	    'ƫ': 't',
	    'ʈ': 't',
	    'ŧ': 't',
	    'ᵺ': 'th',
	    'ɐ': 'a',
	    'ᴂ': 'ae',
	    'ǝ': 'e',
	    'ᵷ': 'g',
	    'ɥ': 'h',
	    'ʮ': 'h',
	    'ʯ': 'h',
	    'ᴉ': 'i',
	    'ʞ': 'k',
	    'ꞁ': 'l',
	    'ɯ': 'm',
	    'ɰ': 'm',
	    'ᴔ': 'oe',
	    'ɹ': 'r',
	    'ɻ': 'r',
	    'ɺ': 'r',
	    'ⱹ': 'r',
	    'ʇ': 't',
	    'ʌ': 'v',
	    'ʍ': 'w',
	    'ʎ': 'y',
	    'ꜩ': 'tz',
	    'ú': 'u',
	    'ŭ': 'u',
	    'ǔ': 'u',
	    'û': 'u',
	    'ṷ': 'u',
	    'ü': 'u',
	    'ǘ': 'u',
	    'ǚ': 'u',
	    'ǜ': 'u',
	    'ǖ': 'u',
	    'ṳ': 'u',
	    'ụ': 'u',
	    'ű': 'u',
	    'ȕ': 'u',
	    'ù': 'u',
	    'ủ': 'u',
	    'ư': 'u',
	    'ứ': 'u',
	    'ự': 'u',
	    'ừ': 'u',
	    'ử': 'u',
	    'ữ': 'u',
	    'ȗ': 'u',
	    'ū': 'u',
	    'ṻ': 'u',
	    'ų': 'u',
	    'ᶙ': 'u',
	    'ů': 'u',
	    'ũ': 'u',
	    'ṹ': 'u',
	    'ṵ': 'u',
	    'ᵫ': 'ue',
	    'ꝸ': 'um',
	    'ⱴ': 'v',
	    'ꝟ': 'v',
	    'ṿ': 'v',
	    'ʋ': 'v',
	    'ᶌ': 'v',
	    'ⱱ': 'v',
	    'ṽ': 'v',
	    'ꝡ': 'vy',
	    'ẃ': 'w',
	    'ŵ': 'w',
	    'ẅ': 'w',
	    'ẇ': 'w',
	    'ẉ': 'w',
	    'ẁ': 'w',
	    'ⱳ': 'w',
	    'ẘ': 'w',
	    'ẍ': 'x',
	    'ẋ': 'x',
	    'ᶍ': 'x',
	    'ý': 'y',
	    'ŷ': 'y',
	    'ÿ': 'y',
	    'ẏ': 'y',
	    'ỵ': 'y',
	    'ỳ': 'y',
	    'ƴ': 'y',
	    'ỷ': 'y',
	    'ỿ': 'y',
	    'ȳ': 'y',
	    'ẙ': 'y',
	    'ɏ': 'y',
	    'ỹ': 'y',
	    'ź': 'z',
	    'ž': 'z',
	    'ẑ': 'z',
	    'ʑ': 'z',
	    'ⱬ': 'z',
	    'ż': 'z',
	    'ẓ': 'z',
	    'ȥ': 'z',
	    'ẕ': 'z',
	    'ᵶ': 'z',
	    'ᶎ': 'z',
	    'ʐ': 'z',
	    'ƶ': 'z',
	    'ɀ': 'z',
	    'ﬀ': 'ff',
	    'ﬃ': 'ffi',
	    'ﬄ': 'ffl',
	    'ﬁ': 'fi',
	    'ﬂ': 'fl',
	    'ĳ': 'ij',
	    'œ': 'oe',
	    'ﬆ': 'st',
	    'ₐ': 'a',
	    'ₑ': 'e',
	    'ᵢ': 'i',
	    'ⱼ': 'j',
	    'ₒ': 'o',
	    'ᵣ': 'r',
	    'ᵤ': 'u',
	    'ᵥ': 'v',
	    'ₓ': 'x',
	    'Ё': 'YO',
	    'Й': 'I',
	    'Ц': 'TS',
	    'У': 'U',
	    'К': 'K',
	    'Е': 'E',
	    'Н': 'N',
	    'Г': 'G',
	    'Ш': 'SH',
	    'Щ': 'SCH',
	    'З': 'Z',
	    'Х': 'H',
	    'Ъ': "'",
	    'ё': 'yo',
	    'й': 'i',
	    'ц': 'ts',
	    'у': 'u',
	    'к': 'k',
	    'е': 'e',
	    'н': 'n',
	    'г': 'g',
	    'ш': 'sh',
	    'щ': 'sch',
	    'з': 'z',
	    'х': 'h',
	    'ъ': "'",
	    'Ф': 'F',
	    'Ы': 'I',
	    'В': 'V',
	    'А': 'a',
	    'П': 'P',
	    'Р': 'R',
	    'О': 'O',
	    'Л': 'L',
	    'Д': 'D',
	    'Ж': 'ZH',
	    'Э': 'E',
	    'ф': 'f',
	    'ы': 'i',
	    'в': 'v',
	    'а': 'a',
	    'п': 'p',
	    'р': 'r',
	    'о': 'o',
	    'л': 'l',
	    'д': 'd',
	    'ж': 'zh',
	    'э': 'e',
	    'Я': 'Ya',
	    'Ч': 'CH',
	    'С': 'S',
	    'М': 'M',
	    'И': 'I',
	    'Т': 'T',
	    'Ь': "'",
	    'Б': 'B',
	    'Ю': 'YU',
	    'я': 'ya',
	    'ч': 'ch',
	    'с': 's',
	    'м': 'm',
	    'и': 'i',
	    'т': 't',
	    'ь': "'",
	    'б': 'b',
	    'ю': 'yu'
	  };
	
	  return latinize;
	});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var _ = __webpack_require__(14);
	var EmailUtils = (function () {
	    function EmailUtils() {
	    }
	    EmailUtils.splitSemicolonSeparatedListOfEmailAddresses = function (addresses) {
	        var addressesAsList = addresses.split(/\s*;\s*/);
	        return _.filter(addressesAsList, function (s) {
	            return Utils_1.Utils.exists(s) && Utils_1.Utils.isNonEmptyString(Utils_1.Utils.trim(s));
	        });
	    };
	    EmailUtils.emailAddressesToHyperlinks = function (addresses, companyDomain, me, lengthLimit, truncateName) {
	        if (lengthLimit === void 0) { lengthLimit = 2; }
	        if (truncateName === void 0) { truncateName = false; }
	        addresses = _.filter(addresses, function (s) {
	            return Utils_1.Utils.exists(s) && Utils_1.Utils.isNonEmptyString(Utils_1.Utils.trim(s));
	        });
	        var hyperlinks = _.map(addresses, function (item) {
	            var emailArray = EmailUtils.parseEmail(item);
	            var email = emailArray[1];
	            var name = emailArray[0];
	            if (Utils_1.Utils.exists(me) && email == me) {
	                name = Strings_1.l('Me');
	            }
	            if (truncateName) {
	                var split = name.split(' ');
	                if (!Utils_1.Utils.isNullOrUndefined(split[1])) {
	                    name = split[0] + ' ' + split[1].substring(0, 1) + '.';
	                }
	            }
	            var domainIndex = email.indexOf('@') >= 0 ? email.indexOf('@') + 1 : 0;
	            var domain = email.substr(domainIndex);
	            if (Utils_1.Utils.exists(companyDomain) && domain != companyDomain) {
	                name += ' (' + domain + ')';
	            }
	            return '<a title="' + item.replace(/'/g, '&quot;') + '" href="mailto:' + encodeURI(email) + '">' + name + '</a>';
	        });
	        var excess = hyperlinks.length - lengthLimit;
	        var andOthers = excess > 0 ? EmailUtils.buildEmailAddressesAndOthers(_.last(hyperlinks, excess)) : '';
	        return _.first(hyperlinks, lengthLimit).join(', ') + andOthers;
	    };
	    EmailUtils.buildEmailAddressesAndOthers = function (excessHyperLinks) {
	        return '<span class="coveo-emails-excess-collapsed coveo-active" onclick="Coveo.TemplateHelpers.getHelper(\'excessEmailToggle\')(this);"> ' + Strings_1.l('AndOthers', excessHyperLinks.length.toString(), excessHyperLinks.length) + '</span>' +
	            '<span class="coveo-emails-excess-expanded"> , ' + excessHyperLinks.join(' , ') + '</span>';
	    };
	    EmailUtils.parseEmail = function (email) {
	        var name;
	        var match = email.match(/^\s*(.*)\s+<(.*)>$/);
	        if (match != null) {
	            name = match[1];
	            if (/^'.*'|'.*'$/.test(name)) {
	                name = name.substr(1, name.length - 2);
	            }
	            email = match[2];
	        }
	        else {
	            name = email;
	            email = email;
	        }
	        return [name, email];
	    };
	    return EmailUtils;
	}());
	exports.EmailUtils = EmailUtils;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var HashUtils = (function () {
	    function HashUtils() {
	    }
	    HashUtils.getHash = function (w) {
	        if (w === void 0) { w = window; }
	        Assert_1.Assert.exists(w);
	        // window.location.hash returns the DECODED hash on Firefox (it's a well known bug),
	        // so any & in values will be already unescaped. This breaks our value splitting.
	        // The following trick works on all browsers.
	        var ret = '#' + (w.location.href.split('#')[1] || '');
	        return HashUtils.getAjaxcrawlableHash(ret);
	    };
	    HashUtils.getValue = function (key, toParse) {
	        Assert_1.Assert.isNonEmptyString(key);
	        Assert_1.Assert.exists(toParse);
	        toParse = HashUtils.getAjaxcrawlableHash(toParse);
	        var paramValue = HashUtils.getRawValue(key, toParse);
	        if (paramValue != undefined) {
	            paramValue = HashUtils.getValueDependingOnType(key, paramValue);
	        }
	        return paramValue;
	    };
	    HashUtils.encodeValues = function (values) {
	        var hash = [];
	        _.each(values, function (valueToEncode, key, obj) {
	            var encodedValue = '';
	            if (Utils_1.Utils.isNonEmptyArray(valueToEncode)) {
	                encodedValue = HashUtils.encodeArray(valueToEncode);
	            }
	            else if (_.isObject(valueToEncode) && Utils_1.Utils.isNonEmptyArray(_.keys(valueToEncode))) {
	                encodedValue = HashUtils.encodeObject(valueToEncode);
	            }
	            else if (!Utils_1.Utils.isNullOrUndefined(valueToEncode)) {
	                encodedValue = encodeURIComponent(valueToEncode.toString());
	            }
	            if (encodedValue != '') {
	                hash.push(key + '=' + encodedValue);
	            }
	        });
	        return hash.join('&');
	    };
	    HashUtils.getAjaxcrawlableHash = function (hash) {
	        if (hash[1] != undefined && hash[1] == '!') {
	            return hash.substring(0, 1) + hash.substring(2);
	        }
	        else {
	            return hash;
	        }
	    };
	    HashUtils.getRawValue = function (key, toParse) {
	        Assert_1.Assert.exists(key);
	        Assert_1.Assert.exists(toParse);
	        Assert_1.Assert.check(toParse.indexOf('#') == 0 || toParse == '');
	        var toParseArray = toParse.substr(1).split('&');
	        var paramPos = 0;
	        var loop = true;
	        var paramValue = undefined;
	        while (loop) {
	            var paramValuePair = toParseArray[paramPos].split('=');
	            if (paramValuePair[0] == key) {
	                loop = false;
	                paramValue = paramValuePair[1];
	            }
	            else {
	                paramPos++;
	                if (paramPos >= toParseArray.length) {
	                    paramPos = undefined;
	                    loop = false;
	                }
	            }
	        }
	        return paramValue;
	    };
	    HashUtils.getValueDependingOnType = function (key, paramValue) {
	        var type = HashUtils.getValueType(key, paramValue);
	        var returnValue;
	        if (type == 'object') {
	            returnValue = HashUtils.decodeObject(paramValue);
	        }
	        else if (type == 'array') {
	            returnValue = HashUtils.decodeArray(paramValue);
	        }
	        else {
	            returnValue = decodeURIComponent(paramValue);
	        }
	        return returnValue;
	    };
	    HashUtils.getValueType = function (key, paramValue) {
	        if (key == 'q') {
	            return 'other';
	        }
	        else if (HashUtils.isObject(paramValue)) {
	            return 'object';
	        }
	        else if (HashUtils.isArray(paramValue)) {
	            return 'array';
	        }
	        else {
	            return 'other';
	        }
	    };
	    HashUtils.isArrayStartNotEncoded = function (value) {
	        return value.substr(0, 1) == HashUtils.DELIMITER.arrayStart;
	    };
	    HashUtils.isArrayStartEncoded = function (value) {
	        return value.indexOf(encodeURIComponent(HashUtils.DELIMITER.arrayStart)) == 0;
	    };
	    HashUtils.isArrayEndNotEncoded = function (value) {
	        return value.substr(value.length - 1);
	    };
	    HashUtils.isArrayEndEncoded = function (value) {
	        return value.indexOf(encodeURIComponent(HashUtils.DELIMITER.arrayEnd)) == value.length - encodeURIComponent(HashUtils.DELIMITER.arrayEnd).length;
	    };
	    HashUtils.isObjectStartNotEncoded = function (value) {
	        return value.substr(0, 1) == HashUtils.DELIMITER.objectStart;
	    };
	    HashUtils.isObjectStartEncoded = function (value) {
	        return value.indexOf(encodeURIComponent(HashUtils.DELIMITER.objectStart)) == 0;
	    };
	    HashUtils.isObjectEndNotEncoded = function (value) {
	        return value.substr(value.length - 1) == HashUtils.DELIMITER.objectEnd;
	    };
	    HashUtils.isObjectEndEncoded = function (value) {
	        return value.indexOf(encodeURIComponent(HashUtils.DELIMITER.objectEnd)) == value.length - encodeURIComponent(HashUtils.DELIMITER.objectEnd).length;
	    };
	    HashUtils.isObject = function (value) {
	        var isObjectStart = HashUtils.isObjectStartNotEncoded(value) || HashUtils.isObjectStartEncoded(value);
	        var isObjectEnd = HashUtils.isObjectEndNotEncoded(value) || HashUtils.isObjectEndEncoded(value);
	        return isObjectStart && isObjectEnd;
	    };
	    HashUtils.isArray = function (value) {
	        var isArrayStart = HashUtils.isArrayStartNotEncoded(value) || HashUtils.isArrayStartEncoded(value);
	        var isArrayEnd = HashUtils.isArrayEndNotEncoded(value) || HashUtils.isArrayEndEncoded(value);
	        return isArrayStart && isArrayEnd;
	    };
	    HashUtils.encodeArray = function (array) {
	        var arrayReturn = _.map(array, function (value) {
	            return encodeURIComponent(value);
	        });
	        return HashUtils.DELIMITER.arrayStart + arrayReturn.join(',') + HashUtils.DELIMITER.arrayEnd;
	    };
	    HashUtils.encodeObject = function (obj) {
	        var _this = this;
	        var retArray = _.map(obj, function (val, key, obj) {
	            return "\"" + encodeURIComponent(key) + "\":" + _this.encodeValue(val);
	        });
	        return HashUtils.DELIMITER.objectStart + retArray.join(' , ') + HashUtils.DELIMITER.objectEnd;
	    };
	    HashUtils.encodeValue = function (val) {
	        var encodedValue = '';
	        if (_.isArray(val)) {
	            encodedValue = HashUtils.encodeArray(val);
	        }
	        else if (_.isObject(val)) {
	            encodedValue = HashUtils.encodeObject(val);
	        }
	        else if (_.isNumber(val) || _.isBoolean(val)) {
	            encodedValue = encodeURIComponent(val.toString());
	        }
	        else {
	            encodedValue = '"' + encodeURIComponent(val) + '"';
	        }
	        return encodedValue;
	    };
	    HashUtils.decodeObject = function (obj) {
	        if (HashUtils.isObjectStartEncoded(obj) && HashUtils.isObjectEndEncoded(obj)) {
	            obj = obj.replace(/encodeURIComponent(HashUtils.Delimiter.objectStart)/, HashUtils.DELIMITER.objectStart);
	            obj = obj.replace(encodeURIComponent(HashUtils.DELIMITER.objectEnd), HashUtils.DELIMITER.objectEnd);
	        }
	        return JSON.parse(decodeURIComponent(obj));
	    };
	    HashUtils.decodeArray = function (value) {
	        if (HashUtils.isArrayStartEncoded(value) && HashUtils.isArrayEndEncoded(value)) {
	            value = value.replace(encodeURIComponent(HashUtils.DELIMITER.arrayStart), HashUtils.DELIMITER.arrayStart);
	            value = value.replace(encodeURIComponent(HashUtils.DELIMITER.arrayEnd), HashUtils.DELIMITER.arrayEnd);
	        }
	        value = value.substr(1);
	        value = value.substr(0, value.length - 1);
	        var array = value.split(',');
	        return _.map(array, function (val) {
	            return decodeURIComponent(val);
	        });
	    };
	    return HashUtils;
	}());
	HashUtils.DELIMITER = {
	    'objectStart': '{',
	    'objectEnd': '}',
	    'arrayStart': '[',
	    'arrayEnd': ']',
	    'objectStartRegExp': '^{',
	    'objectEndRegExp': '}+$',
	    'arrayStartRegExp': '^[',
	    'arrayEndRegExp': ']+$'
	};
	exports.HashUtils = HashUtils;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var Assert_1 = __webpack_require__(12);
	var _ = __webpack_require__(14);
	var StringAndHoles = (function () {
	    function StringAndHoles() {
	    }
	    StringAndHoles.replace = function (str, find, replace) {
	        var strAndHoles = new StringAndHoles();
	        if (Utils_1.Utils.isNullOrEmptyString(str)) {
	            return strAndHoles;
	        }
	        var index = str.lastIndexOf(find);
	        if (index == -1) {
	            strAndHoles.value = str;
	            return strAndHoles;
	        }
	        var holes = [];
	        while (index >= 0) {
	            var hole = {
	                begin: index,
	                size: find.length,
	                replacementSize: replace.length
	            };
	            holes.push(hole);
	            str = str.slice(0, index) + replace + str.slice(index + find.length);
	            index = str.lastIndexOf(find);
	        }
	        strAndHoles.holes = holes;
	        strAndHoles.value = str;
	        return strAndHoles;
	    };
	    /**
	     * Shorten the passed path intelligently (path-aware).
	     * Works with *local paths* and *network paths*
	     * @param uriOrig The path to shorten
	     * @param length The length to which the path will be shortened.
	     */
	    StringAndHoles.shortenPath = function (uriOrig, length) {
	        var uri = uriOrig;
	        var strAndHoles = new StringAndHoles();
	        if (Utils_1.Utils.isNullOrEmptyString(uri) || (uri.length <= length)) {
	            strAndHoles.value = uri;
	            return strAndHoles;
	        }
	        var holes = [];
	        var first = -1;
	        if (Utils_1.Utils.stringStartsWith(uri, '\\\\')) {
	            first = uri.indexOf('\\', first + 2);
	        }
	        else {
	            first = uri.indexOf('\\');
	        }
	        if (first !== -1) {
	            var removed = 0;
	            var next = uri.indexOf('\\', first + 1);
	            while (next !== -1 && uri.length - removed + StringAndHoles.SHORTEN_END.length > length) {
	                removed = next - first - 1;
	                next = uri.indexOf('\\', next + 1);
	            }
	            if (removed > 0) {
	                uri = uri.slice(0, first + 1) + StringAndHoles.SHORTEN_END + uri.slice(removed);
	                var hole = {
	                    begin: first + 1,
	                    size: removed - StringAndHoles.SHORTEN_END.length,
	                    replacementSize: StringAndHoles.SHORTEN_END.length
	                };
	                holes.push(hole);
	            }
	        }
	        if (uri.length > length) {
	            var over = uri.length - length + StringAndHoles.SHORTEN_END.length;
	            var start = uri.length - over;
	            uri = uri.slice(0, start) + StringAndHoles.SHORTEN_END;
	            var hole = {
	                begin: start,
	                size: over,
	                replacementSize: StringAndHoles.SHORTEN_END.length
	            };
	            holes.push(hole);
	        }
	        strAndHoles.holes = holes;
	        strAndHoles.value = uri;
	        return strAndHoles;
	    };
	    /**
	     * Shorten the passed string.
	     * @param toShortenOrig The string to shorten
	     * @param length The length to which the string will be shortened.
	     * @param toAppend The string to append at the end (usually, it is set to '...')
	     */
	    StringAndHoles.shortenString = function (toShortenOrig, length, toAppend) {
	        if (length === void 0) { length = 200; }
	        var toShorten = toShortenOrig;
	        toAppend = Utils_1.Utils.toNotNullString(toAppend);
	        var strAndHoles = new StringAndHoles();
	        if (Utils_1.Utils.isNullOrEmptyString(toShorten) || length <= toAppend.length) {
	            strAndHoles.value = toShorten;
	            return strAndHoles;
	        }
	        if (toShorten.length <= length) {
	            strAndHoles.value = toShorten;
	            return strAndHoles;
	        }
	        var str = toShorten;
	        length = length - toAppend.length;
	        str = str.slice(0, length);
	        if (toShorten.charAt(str.length) !== ' ') {
	            var pos = str.lastIndexOf(' ');
	            if (pos !== -1 && str.length - pos < StringAndHoles.WORD_SHORTER) {
	                str = str.slice(0, pos);
	            }
	        }
	        var holes = [];
	        holes[0] = {
	            begin: str.length,
	            size: toShorten.length - str.length,
	            replacementSize: toAppend.length
	        };
	        str += toAppend;
	        strAndHoles.value = str;
	        strAndHoles.holes = holes;
	        return strAndHoles;
	    };
	    /**
	     * Shorten the passed URI intelligently (path-aware).
	     * @param toShortenOrig The URI to shorten
	     * @param length The length to which the URI will be shortened.
	     */
	    StringAndHoles.shortenUri = function (uri, length) {
	        var strAndHoles = new StringAndHoles();
	        if (Utils_1.Utils.isNullOrEmptyString(uri) || (uri.length <= length)) {
	            strAndHoles.value = uri;
	            return strAndHoles;
	        }
	        var holes = [];
	        var first = uri.indexOf('//');
	        if (first !== -1) {
	            first = uri.indexOf('/', first + 2);
	        }
	        if (first !== -1) {
	            var removed = 0;
	            var next = uri.indexOf('/', first + 1);
	            while (next !== -1 && uri.length - removed + StringAndHoles.SHORTEN_END.length > length) {
	                removed = next - first - 1;
	                next = uri.indexOf('/', next + 1);
	            }
	            if (removed > 0) {
	                uri = uri.slice(0, first + 1) + StringAndHoles.SHORTEN_END + uri.slice(first + 1 + removed);
	                var hole = {
	                    begin: first + 1,
	                    size: removed,
	                    replacementSize: StringAndHoles.SHORTEN_END.length
	                };
	                holes.push(hole);
	            }
	        }
	        if (uri.length > length) {
	            var over = uri.length - length + StringAndHoles.SHORTEN_END.length;
	            var start = uri.length - over;
	            uri = uri.slice(0, start) + StringAndHoles.SHORTEN_END;
	            var hole = {
	                begin: start,
	                size: over,
	                replacementSize: StringAndHoles.SHORTEN_END.length
	            };
	            holes.push(hole);
	        }
	        strAndHoles.holes = holes;
	        strAndHoles.value = uri;
	        return strAndHoles;
	    };
	    return StringAndHoles;
	}());
	StringAndHoles.SHORTEN_END = '...';
	StringAndHoles.WORD_SHORTER = 10;
	exports.StringAndHoles = StringAndHoles;
	var HighlightUtils = (function () {
	    function HighlightUtils() {
	    }
	    /**
	     * Highlight the passed string using specified highlights and holes.
	     * @param content The string to highlight items in.
	     * @param highlights The highlighted positions to highlight in the string.
	     * @param holes Possible holes which are used to skip highlighting.
	     * @param cssClass The css class to use on the highlighting `span`.
	     */
	    HighlightUtils.highlightString = function (content, highlights, holes, cssClass) {
	        Assert_1.Assert.isNotUndefined(highlights);
	        Assert_1.Assert.isNotNull(highlights);
	        Assert_1.Assert.isNonEmptyString(cssClass);
	        if (Utils_1.Utils.isNullOrEmptyString(content)) {
	            return content;
	        }
	        var last = 0;
	        var maxIndex = content.length;
	        var highlighted = '';
	        for (var i = 0; i < highlights.length; i++) {
	            var highlight = highlights[i];
	            var start = highlight.offset;
	            var end = start + highlight.length;
	            if (holes !== null) {
	                var skip = false;
	                for (var j = 0; j < holes.length; j++) {
	                    var hole = holes[j];
	                    var holeBegin = hole.begin;
	                    var holeEnd = holeBegin + hole.size;
	                    if (start < holeBegin && end >= holeBegin && end < holeEnd) {
	                        end = holeBegin;
	                    }
	                    else if (start >= holeBegin && end < holeEnd) {
	                        skip = true;
	                        break;
	                    }
	                    else if (start >= holeBegin && start < holeEnd && end >= holeEnd) {
	                        start = holeBegin + hole.replacementSize;
	                        end -= hole.size - hole.replacementSize;
	                    }
	                    else if (start < holeBegin && end >= holeEnd) {
	                        end -= hole.size - hole.replacementSize;
	                    }
	                    else if (start >= holeEnd) {
	                        var offset = hole.size - hole.replacementSize;
	                        start -= offset;
	                        end -= offset;
	                    }
	                }
	                if (skip || start === end) {
	                    continue;
	                }
	            }
	            if (end > maxIndex) {
	                break;
	            }
	            highlighted += _.escape(content.slice(last, start));
	            highlighted += "<span class=\"" + cssClass + "\"";
	            if (highlight.dataHighlightGroup) {
	                highlighted += " data-highlight-group=\"" + highlight.dataHighlightGroup.toString() + "\"";
	            }
	            if (highlight.dataHighlightGroupTerm) {
	                highlighted += " data-highlight-group-term=\"" + highlight.dataHighlightGroupTerm + "\"";
	            }
	            highlighted += '>';
	            highlighted += _.escape(content.slice(start, end));
	            highlighted += '</span>';
	            last = end;
	        }
	        if (last != maxIndex) {
	            highlighted += _.escape(content.slice(last));
	        }
	        return highlighted;
	    };
	    return HighlightUtils;
	}());
	exports.HighlightUtils = HighlightUtils;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DeviceUtils_1 = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var HTMLUtils = (function () {
	    function HTMLUtils() {
	    }
	    HTMLUtils.buildAttributeString = function (options) {
	        var ret = [];
	        _.each(options, function (val, key, obj) {
	            if (val != undefined) {
	                ret.push(key + '=' + JSON.stringify(val.toString()));
	            }
	        });
	        return ret.join(' ');
	    };
	    return HTMLUtils;
	}());
	exports.HTMLUtils = HTMLUtils;
	var AnchorUtils = (function () {
	    function AnchorUtils() {
	    }
	    AnchorUtils.buildAnchor = function (href, options) {
	        var text;
	        if (!options || !options.text) {
	            text = href;
	        }
	        else {
	            text = options.text;
	            options.text = undefined;
	        }
	        return "<a href='" + href + "' " + HTMLUtils.buildAttributeString(options) + ">" + text + "</a>";
	    };
	    return AnchorUtils;
	}());
	exports.AnchorUtils = AnchorUtils;
	var ImageUtils = (function () {
	    function ImageUtils() {
	    }
	    ImageUtils.buildImage = function (src, options) {
	        var ret = '<img ';
	        ret += src ? "src='" + src + "' " : '';
	        ret += HTMLUtils.buildAttributeString(options) + '/>';
	        return ret;
	    };
	    ImageUtils.selectImageFromResult = function (result) {
	        return document.querySelector("img[data-coveo-uri-hash=" + result.raw['urihash'] + "]");
	    };
	    ImageUtils.buildImageWithDirectSrcAttribute = function (endpoint, result) {
	        var image = new Image();
	        var dataStreamUri = endpoint.getViewAsDatastreamUri(result.uniqueId, '$Thumbnail$', { contentType: 'image/png' });
	        image.onload = function () {
	            ImageUtils.selectImageFromResult(result).setAttribute('src', dataStreamUri);
	        };
	        image.src = dataStreamUri;
	    };
	    ImageUtils.buildImageWithBase64SrcAttribute = function (endpoint, result) {
	        endpoint.getRawDataStream(result.uniqueId, '$Thumbnail$')
	            .then(function (response) {
	            var rawBinary = String.fromCharCode.apply(null, new Uint8Array(response));
	            ImageUtils.selectImageFromResult(result).setAttribute('src', 'data:image/png;base64, ' + btoa(rawBinary));
	        })
	            .catch(function () {
	            ImageUtils.selectImageFromResult(result).remove();
	        });
	    };
	    ImageUtils.buildImageFromResult = function (result, endpoint, options) {
	        options = options ? options : {};
	        var img = ImageUtils.buildImage(undefined, _.extend(options, { 'data-coveo-uri-hash': result.raw['urihash'] }));
	        if (endpoint.isJsonp() || DeviceUtils_1.DeviceUtils.isIE8or9()) {
	            // For jsonp and IE8-9 (XDomain) we can't GET/POST for binary data. We are limited to only setting the src attribute directly on the img.
	            ImageUtils.buildImageWithDirectSrcAttribute(endpoint, result);
	        }
	        else {
	            // Base 64 img allows us to GET/POST the image as raw binary, so that we can also pass the credential of the user
	            // Useful for phonegap.
	            ImageUtils.buildImageWithBase64SrcAttribute(endpoint, result);
	        }
	        return img;
	    };
	    return ImageUtils;
	}());
	exports.ImageUtils = ImageUtils;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var KEYBOARD;
	(function (KEYBOARD) {
	    KEYBOARD[KEYBOARD["BACKSPACE"] = 8] = "BACKSPACE";
	    KEYBOARD[KEYBOARD["TAB"] = 9] = "TAB";
	    KEYBOARD[KEYBOARD["ENTER"] = 13] = "ENTER";
	    KEYBOARD[KEYBOARD["SHIFT"] = 16] = "SHIFT";
	    KEYBOARD[KEYBOARD["CTRL"] = 17] = "CTRL";
	    KEYBOARD[KEYBOARD["ALT"] = 18] = "ALT";
	    KEYBOARD[KEYBOARD["ESCAPE"] = 27] = "ESCAPE";
	    KEYBOARD[KEYBOARD["SPACEBAR"] = 32] = "SPACEBAR";
	    KEYBOARD[KEYBOARD["PAGE_UP"] = 33] = "PAGE_UP";
	    KEYBOARD[KEYBOARD["PAGE_DOWN"] = 34] = "PAGE_DOWN";
	    KEYBOARD[KEYBOARD["HOME"] = 36] = "HOME";
	    KEYBOARD[KEYBOARD["LEFT_ARROW"] = 37] = "LEFT_ARROW";
	    KEYBOARD[KEYBOARD["UP_ARROW"] = 38] = "UP_ARROW";
	    KEYBOARD[KEYBOARD["RIGHT_ARROW"] = 39] = "RIGHT_ARROW";
	    KEYBOARD[KEYBOARD["DOWN_ARROW"] = 40] = "DOWN_ARROW";
	    KEYBOARD[KEYBOARD["INSERT"] = 45] = "INSERT";
	    KEYBOARD[KEYBOARD["DELETE"] = 46] = "DELETE";
	})(KEYBOARD = exports.KEYBOARD || (exports.KEYBOARD = {}));
	var KeyboardUtils = (function () {
	    function KeyboardUtils() {
	    }
	    KeyboardUtils.keysEqual = function (key, code) {
	        if (!Utils_1.Utils.isNullOrUndefined(key.keyCode)) {
	            return key.keyCode == code;
	        }
	        else if (!Utils_1.Utils.isNullOrUndefined(key.which)) {
	            return key.which == code;
	        }
	        return false;
	    };
	    KeyboardUtils.isAllowedKeyForOmnibox = function (e) {
	        var keycode = e.keyCode;
	        var valid = (KeyboardUtils.isNumberKeyPushed(keycode)) ||
	            (keycode == 32 || keycode == 13) ||
	            (KeyboardUtils.isLetterKeyPushed(keycode)) ||
	            (keycode > 95 && keycode < 112) ||
	            (keycode > 185 && keycode < 193) ||
	            (keycode > 218 && keycode < 223) ||
	            (keycode == KEYBOARD.BACKSPACE || keycode == KEYBOARD.DELETE) ||
	            (KeyboardUtils.isArrowKeyPushed(keycode));
	        return valid;
	    };
	    KeyboardUtils.isAllowedKeyForSearchAsYouType = function (e) {
	        return KeyboardUtils.isAllowedKeyForOmnibox(e) && !KeyboardUtils.isArrowKeyPushed(e.keyCode);
	    };
	    KeyboardUtils.isDeleteOrBackspace = function (e) {
	        return KeyboardUtils.keysEqual(e, KEYBOARD.BACKSPACE) || KeyboardUtils.keysEqual(e, KEYBOARD.DELETE);
	    };
	    KeyboardUtils.isArrowKeyPushed = function (keycode) {
	        return keycode == KEYBOARD.LEFT_ARROW ||
	            keycode == KEYBOARD.UP_ARROW ||
	            keycode == KEYBOARD.RIGHT_ARROW ||
	            keycode == KEYBOARD.DOWN_ARROW;
	    };
	    KeyboardUtils.isNumberKeyPushed = function (keycode) {
	        return keycode > 47 && keycode < 58;
	    };
	    KeyboardUtils.isLetterKeyPushed = function (keycode) {
	        return keycode > 64 && keycode < 91;
	    };
	    // Return a keyboard event listener that only executes the function if certain keys are pressed.
	    KeyboardUtils.keypressAction = function (keyCode, action) {
	        return function (e) {
	            var data = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                data[_i - 1] = arguments[_i];
	            }
	            if (e) {
	                var eventCode = e.charCode || e.keyCode;
	                if (eventCode) {
	                    if (_.isArray(keyCode) && _.contains(keyCode, eventCode)) {
	                        action(e);
	                    }
	                    else if (eventCode === keyCode) {
	                        action(e);
	                    }
	                }
	            }
	            return false;
	        };
	    };
	    return KeyboardUtils;
	}());
	exports.KeyboardUtils = KeyboardUtils;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var localStorage = window.localStorage;
	var LocalStorageUtils = (function () {
	    function LocalStorageUtils(id) {
	        this.id = id;
	    }
	    LocalStorageUtils.prototype.save = function (data) {
	        try {
	            if (localStorage != null) {
	                localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(data));
	            }
	        }
	        catch (error) {
	        }
	    };
	    LocalStorageUtils.prototype.load = function () {
	        try {
	            if (localStorage == null) {
	                return null;
	            }
	            var value = localStorage.getItem(this.getLocalStorageKey());
	            return value && JSON.parse(value);
	        }
	        catch (error) {
	            return null;
	        }
	    };
	    LocalStorageUtils.prototype.remove = function (key) {
	        try {
	            if (localStorage != null) {
	                if (key == undefined) {
	                    localStorage.removeItem(this.getLocalStorageKey());
	                }
	                else {
	                    var oldObj = this.load();
	                    delete oldObj[key];
	                    this.save(oldObj);
	                }
	            }
	        }
	        catch (error) {
	        }
	    };
	    LocalStorageUtils.prototype.getLocalStorageKey = function () {
	        return 'coveo-' + this.id;
	    };
	    return LocalStorageUtils;
	}());
	exports.LocalStorageUtils = LocalStorageUtils;


/***/ }),
/* 70 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var OS_NAME;
	(function (OS_NAME) {
	    OS_NAME[OS_NAME["WINDOWS"] = 0] = "WINDOWS";
	    OS_NAME[OS_NAME["MACOSX"] = 1] = "MACOSX";
	    OS_NAME[OS_NAME["UNIX"] = 2] = "UNIX";
	    OS_NAME[OS_NAME["LINUX"] = 3] = "LINUX";
	    OS_NAME[OS_NAME["UNKNOWN"] = 4] = "UNKNOWN";
	})(OS_NAME = exports.OS_NAME || (exports.OS_NAME = {}));
	var OSUtils = (function () {
	    function OSUtils() {
	    }
	    OSUtils.get = function (nav) {
	        if (nav === void 0) { nav = navigator; }
	        var osName;
	        if (nav.appVersion.indexOf('Win') != -1) {
	            osName = OS_NAME.WINDOWS;
	        }
	        else if (nav.appVersion.indexOf('Mac') != -1) {
	            osName = OS_NAME.MACOSX;
	        }
	        else if (nav.appVersion.indexOf('X11') != -1) {
	            osName = OS_NAME.UNIX;
	        }
	        else if (nav.appVersion.indexOf('Linux') != -1) {
	            osName = OS_NAME.LINUX;
	        }
	        else {
	            osName = OS_NAME.UNKNOWN;
	        }
	        return osName;
	    };
	    return OSUtils;
	}());
	exports.OSUtils = OSUtils;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var VerticalAlignment;
	(function (VerticalAlignment) {
	    VerticalAlignment[VerticalAlignment["TOP"] = 0] = "TOP";
	    VerticalAlignment[VerticalAlignment["MIDDLE"] = 1] = "MIDDLE";
	    VerticalAlignment[VerticalAlignment["BOTTOM"] = 2] = "BOTTOM";
	    VerticalAlignment[VerticalAlignment["INNERTOP"] = 3] = "INNERTOP";
	    VerticalAlignment[VerticalAlignment["INNERBOTTOM"] = 4] = "INNERBOTTOM";
	})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
	var HorizontalAlignment;
	(function (HorizontalAlignment) {
	    HorizontalAlignment[HorizontalAlignment["LEFT"] = 0] = "LEFT";
	    HorizontalAlignment[HorizontalAlignment["CENTER"] = 1] = "CENTER";
	    HorizontalAlignment[HorizontalAlignment["RIGHT"] = 2] = "RIGHT";
	    HorizontalAlignment[HorizontalAlignment["INNERLEFT"] = 3] = "INNERLEFT";
	    HorizontalAlignment[HorizontalAlignment["INNERRIGHT"] = 4] = "INNERRIGHT";
	})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
	var PopupUtils = (function () {
	    function PopupUtils() {
	    }
	    PopupUtils.positionPopup = function (popUp, nextTo, boundary, desiredPosition, appendTo, checkForBoundary) {
	        if (checkForBoundary === void 0) { checkForBoundary = 0; }
	        popUp.style.position = 'absolute';
	        if (appendTo) {
	            Dom_1.$$(appendTo).append(popUp);
	        }
	        desiredPosition.verticalOffset = desiredPosition.verticalOffset ? desiredPosition.verticalOffset : 0;
	        desiredPosition.horizontalOffset = desiredPosition.horizontalOffset ? desiredPosition.horizontalOffset : 0;
	        var popUpPosition = Dom_1.$$(nextTo).offset();
	        PopupUtils.basicVerticalAlignment(popUpPosition, popUp, nextTo, desiredPosition);
	        PopupUtils.basicHorizontalAlignment(popUpPosition, popUp, nextTo, desiredPosition);
	        PopupUtils.finalAdjustement(Dom_1.$$(popUp).offset(), popUpPosition, popUp, desiredPosition);
	        var popUpBoundary = PopupUtils.getBoundary(popUp);
	        var boundaryPosition = PopupUtils.getBoundary(boundary);
	        if (checkForBoundary < 2) {
	            var checkBoundary = PopupUtils.checkForOutOfBoundary(popUpBoundary, boundaryPosition);
	            if (checkBoundary.horizontal != 'ok' && desiredPosition.horizontalClip === true) {
	                var width = popUp.offsetWidth;
	                if (popUpBoundary.left < boundaryPosition.left) {
	                    width -= boundaryPosition.left - popUpBoundary.left;
	                }
	                if (popUpBoundary.right > boundaryPosition.right) {
	                    width -= popUpBoundary.right - boundaryPosition.right;
	                }
	                popUp.style.width = width + 'px';
	                checkBoundary.horizontal = 'ok';
	            }
	            if (checkBoundary.vertical != 'ok' || checkBoundary.horizontal != 'ok') {
	                var newDesiredPosition = PopupUtils.alignInsideBoundary(desiredPosition, checkBoundary);
	                PopupUtils.positionPopup(popUp, nextTo, boundary, newDesiredPosition, appendTo, checkForBoundary + 1);
	            }
	        }
	    };
	    PopupUtils.finalAdjustement = function (popUpOffSet, popUpPosition, popUp, desiredPosition) {
	        var position = Dom_1.$$(popUp).position();
	        popUp.style.top = (position.top + desiredPosition.verticalOffset) - (popUpOffSet.top - popUpPosition.top) + 'px';
	        popUp.style.left = (position.left + desiredPosition.horizontalOffset) - (popUpOffSet.left - popUpPosition.left) + 'px';
	    };
	    PopupUtils.basicVerticalAlignment = function (popUpPosition, popUp, nextTo, desiredPosition) {
	        switch (desiredPosition.vertical) {
	            case VerticalAlignment.TOP:
	                popUpPosition.top -= popUp.offsetHeight;
	                break;
	            case VerticalAlignment.BOTTOM:
	                popUpPosition.top += nextTo.offsetHeight;
	                break;
	            case VerticalAlignment.MIDDLE:
	                popUpPosition.top -= popUp.offsetHeight / 3;
	            case VerticalAlignment.INNERTOP:
	                break; // Nothing to do, it's the default alignment normally
	            case VerticalAlignment.INNERBOTTOM:
	                popUpPosition.top -= popUp.offsetHeight - nextTo.offsetHeight;
	                break;
	            default:
	                break;
	        }
	    };
	    PopupUtils.basicHorizontalAlignment = function (popUpPosition, popUp, nextTo, desiredPosition) {
	        switch (desiredPosition.horizontal) {
	            case HorizontalAlignment.LEFT:
	                popUpPosition.left -= popUp.offsetWidth;
	                break;
	            case HorizontalAlignment.RIGHT:
	                popUpPosition.left += nextTo.offsetWidth;
	                break;
	            case HorizontalAlignment.CENTER:
	                popUpPosition.left += PopupUtils.offSetToAlignCenter(popUp, nextTo);
	                break;
	            case HorizontalAlignment.INNERLEFT:
	                break; // Nothing to do, it's the default alignment normally
	            case HorizontalAlignment.INNERRIGHT:
	                popUpPosition.left -= popUp.offsetWidth - nextTo.offsetWidth;
	                break;
	            default:
	                break;
	        }
	    };
	    PopupUtils.alignInsideBoundary = function (oldPosition, checkBoundary) {
	        var newDesiredPosition = oldPosition;
	        if (checkBoundary.horizontal == 'left') {
	            newDesiredPosition.horizontal = HorizontalAlignment.RIGHT;
	        }
	        if (checkBoundary.horizontal == 'right') {
	            newDesiredPosition.horizontal = HorizontalAlignment.LEFT;
	        }
	        if (checkBoundary.vertical == 'top') {
	            newDesiredPosition.vertical = VerticalAlignment.BOTTOM;
	        }
	        if (checkBoundary.vertical == 'bottom') {
	            newDesiredPosition.vertical = VerticalAlignment.TOP;
	        }
	        return newDesiredPosition;
	    };
	    PopupUtils.offSetToAlignCenter = function (popUp, nextTo) {
	        return (nextTo.offsetWidth - popUp.offsetWidth) / 2;
	    };
	    PopupUtils.getBoundary = function (element) {
	        var boundaryOffset = Dom_1.$$(element).offset();
	        var toAddVertically;
	        if (element.tagName.toLowerCase() == 'body') {
	            toAddVertically = Math.max(element.scrollHeight, element.offsetHeight);
	        }
	        else if (element.tagName.toLowerCase() == 'html') {
	            toAddVertically = Math.max(element.clientHeight, element.scrollHeight, element.offsetHeight);
	        }
	        else {
	            toAddVertically = element.offsetHeight;
	        }
	        return {
	            top: boundaryOffset.top,
	            left: boundaryOffset.left,
	            right: boundaryOffset.left + element.offsetWidth,
	            bottom: boundaryOffset.top + toAddVertically
	        };
	    };
	    PopupUtils.checkForOutOfBoundary = function (popUpBoundary, boundary) {
	        var ret = {
	            vertical: 'ok',
	            horizontal: 'ok'
	        };
	        if (popUpBoundary.top < boundary.top) {
	            ret.vertical = 'top';
	        }
	        if (popUpBoundary.bottom > boundary.bottom) {
	            ret.vertical = 'bottom';
	        }
	        if (popUpBoundary.left < boundary.left) {
	            ret.horizontal = 'left';
	        }
	        if (popUpBoundary.right > boundary.right) {
	            ret.horizontal = 'right';
	        }
	        return ret;
	    };
	    return PopupUtils;
	}());
	exports.PopupUtils = PopupUtils;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Options_1 = __webpack_require__(34);
	var HighlightUtils_1 = __webpack_require__(66);
	var StringUtils_1 = __webpack_require__(62);
	var Utils_1 = __webpack_require__(13);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	// \u2011: http://graphemica.com/%E2%80%91
	var nonWordBoundary = '[\\.\\-\\u2011\\s~=,.\\|\\/:\'`’;_()!?]';
	var regexStart = '(' + nonWordBoundary + '|^)(';
	var DefaultStreamHighlightOptions = (function (_super) {
	    __extends(DefaultStreamHighlightOptions, _super);
	    function DefaultStreamHighlightOptions(cssClass, shorten, regexFlags) {
	        if (cssClass === void 0) { cssClass = 'coveo-highlight'; }
	        if (shorten === void 0) { shorten = 0; }
	        if (regexFlags === void 0) { regexFlags = 'gi'; }
	        var _this = _super.call(this) || this;
	        _this.cssClass = cssClass;
	        _this.shorten = shorten;
	        _this.regexFlags = regexFlags;
	        return _this;
	    }
	    return DefaultStreamHighlightOptions;
	}(Options_1.Options));
	var StreamHighlightUtils = (function () {
	    function StreamHighlightUtils() {
	    }
	    StreamHighlightUtils.highlightStreamHTML = function (stream, termsToHighlight, phrasesToHighlight, options) {
	        var opts = new DefaultStreamHighlightOptions().merge(options);
	        var container = createStreamHTMLContainer(stream);
	        var allElements = Dom_1.$$(container).findAll('*');
	        if (allElements.length > 0) {
	            _.each(allElements, function (elem, i) {
	                var text = Dom_1.$$(elem).text();
	                elem.innerHTML = HighlightUtils_1.HighlightUtils.highlightString(text, getRestHighlightsForAllTerms(text, termsToHighlight, phrasesToHighlight, opts), [], opts.cssClass);
	            });
	        }
	        else {
	            return StreamHighlightUtils.highlightStreamText(stream, termsToHighlight, phrasesToHighlight, options);
	        }
	        return container.innerHTML;
	    };
	    StreamHighlightUtils.highlightStreamText = function (stream, termsToHighlight, phrasesToHighlight, options) {
	        var opts = new DefaultStreamHighlightOptions().merge(options);
	        return HighlightUtils_1.HighlightUtils.highlightString(stream, getRestHighlightsForAllTerms(stream, termsToHighlight, phrasesToHighlight, opts), [], opts.cssClass);
	    };
	    return StreamHighlightUtils;
	}());
	exports.StreamHighlightUtils = StreamHighlightUtils;
	function getRestHighlightsForAllTerms(toHighlight, termsToHighlight, phrasesToHighlight, opts) {
	    var indexes = [];
	    var sortedTerms = _.keys(termsToHighlight).sort(termsSorting);
	    _.each(sortedTerms, function (term) {
	        var termsToIterate = _.compact([term].concat(termsToHighlight[term]).sort(termsSorting));
	        termsToIterate = _.map(termsToIterate, function (term) { return Utils_1.Utils.escapeRegexCharacter(term); });
	        var regex = regexStart;
	        regex += termsToIterate.join('|') + ')(?=(?:' + nonWordBoundary + '|$)+)';
	        var indexesFound = StringUtils_1.StringUtils.getHighlights(toHighlight, new RegExp(regex, opts.regexFlags), term);
	        if (indexesFound != undefined && Utils_1.Utils.isNonEmptyArray(indexesFound)) {
	            indexes.push(indexesFound);
	        }
	    });
	    _.each(phrasesToHighlight, function (phrase, origPhrase) {
	        var split = origPhrase.split(' ');
	        var regex = regexStart;
	        _.each(split, function (origWord, i) {
	            regex += '(?:' + [origWord].concat(phrase[origWord]).join('|') + ')';
	            if (i == split.length - 1) {
	                regex += '(?=';
	            }
	            regex += nonWordBoundary;
	            if (i == split.length - 1) {
	                regex += ')';
	            }
	            if (i != split.length - 1) {
	                regex += '+';
	            }
	        });
	        regex += ')';
	        var indexesFound = StringUtils_1.StringUtils.getHighlights(toHighlight, new RegExp(regex, opts.regexFlags), origPhrase);
	        if (indexesFound != undefined && Utils_1.Utils.isNonEmptyArray(indexesFound)) {
	            indexes.push(indexesFound);
	        }
	    });
	    return _.chain(indexes)
	        .flatten()
	        .compact()
	        .uniq(function (highlight) {
	        return highlight.offset;
	    })
	        .sortBy(function (highlight) {
	        return highlight.offset;
	    })
	        .map(function (highlight) {
	        var keysFromTerms = _.keys(termsToHighlight);
	        var keysFromPhrases = _.keys(phrasesToHighlight);
	        var keys = keysFromTerms.concat(keysFromPhrases);
	        var group = _.indexOf(keys, highlight.dataHighlightGroupTerm) + 1;
	        return _.extend(highlight, { dataHighlightGroup: group });
	    })
	        .value();
	}
	function termsSorting(first, second) {
	    return first.length - second.length;
	}
	function createStreamHTMLContainer(stream) {
	    var container = Dom_1.$$('div').el;
	    container.innerHTML = stream;
	    return container;
	}


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var QueryController_1 = __webpack_require__(74);
	exports.QueryController = QueryController_1.QueryController;
	var FacetQueryController_1 = __webpack_require__(91);
	exports.FacetQueryController = FacetQueryController_1.FacetQueryController;
	var FacetRangeQueryController_1 = __webpack_require__(94);
	exports.FacetRangeQueryController = FacetRangeQueryController_1.FacetRangeQueryController;
	var FacetSliderQueryController_1 = __webpack_require__(95);
	exports.FacetSliderQueryController = FacetSliderQueryController_1.FacetSliderQueryController;
	var HierarchicalFacetQueryController_1 = __webpack_require__(96);
	exports.HierarchicalFacetQueryController = HierarchicalFacetQueryController_1.HierarchicalFacetQueryController;
	var HistoryController_1 = __webpack_require__(97);
	exports.HistoryController = HistoryController_1.HistoryController;
	var LocalStorageHistoryController_1 = __webpack_require__(99);
	exports.LocalStorageHistoryController = LocalStorageHistoryController_1.LocalStorageHistoryController;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var RootComponent_1 = __webpack_require__(75);
	var QueryBuilder_1 = __webpack_require__(77);
	var LocalStorageUtils_1 = __webpack_require__(69);
	var Assert_1 = __webpack_require__(12);
	var SearchEndpointWithDefaultCallOptions_1 = __webpack_require__(79);
	var QueryEvents_1 = __webpack_require__(48);
	var QueryUtils_1 = __webpack_require__(21);
	var Defer_1 = __webpack_require__(32);
	var Dom_1 = __webpack_require__(59);
	var Utils_1 = __webpack_require__(13);
	var es6_promise_1 = __webpack_require__(4);
	var BaseComponent_1 = __webpack_require__(76);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var coveo_analytics_1 = __webpack_require__(80);
	var _ = __webpack_require__(14);
	var DefaultQueryOptions = (function () {
	    function DefaultQueryOptions() {
	        this.searchAsYouType = false;
	        this.closeModalBox = true;
	        this.cancel = false;
	        this.logInActionsHistory = false;
	    }
	    return DefaultQueryOptions;
	}());
	/**
	 * This class is automatically instantiated and bound to the root of your search interface when you initialize the framework.<br/>
	 * It is essentially a singleton that wraps the access to the {@link SearchEndpoint} endpoint to execute query, and is in charge of triggering the different query events.<br/>
	 * This is what every component of the framework uses internally to execute query or access the endpoint.<br/>
	 * When calling <code>Coveo.executeQuery</code> this class is used.
	 */
	var QueryController = (function (_super) {
	    __extends(QueryController, _super);
	    /**
	     * Create a new query controller
	     * @param element
	     * @param options
	     */
	    function QueryController(element, options, usageAnalytics, searchInterface) {
	        var _this = _super.call(this, element, QueryController.ID) || this;
	        _this.options = options;
	        _this.usageAnalytics = usageAnalytics;
	        _this.searchInterface = searchInterface;
	        _this.showingExecutingQueryAnimation = false;
	        _this.localStorage = new LocalStorageUtils_1.LocalStorageUtils('lastQueryHash');
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(options);
	        _this.firstQuery = true;
	        _this.historyStore = new coveo_analytics_1.history.HistoryStore();
	        return _this;
	    }
	    /**
	     * Set the {@link SearchEndpoint} that the query controller should use to execute query
	     * @param endpoint
	     */
	    QueryController.prototype.setEndpoint = function (endpoint) {
	        this.overrideEndpoint = endpoint;
	        this.logger.debug('Endpoint set', endpoint);
	    };
	    /**
	     * Get the {@link SearchEndpoint} that is currently used by the query controller to execute query
	     * @returns {SearchEndpoint}
	     */
	    QueryController.prototype.getEndpoint = function () {
	        var endpoint = this.overrideEndpoint || this.options.endpoint;
	        // We must wrap the endpoint in a decorator that'll add the call options
	        // we obtain by firing the proper event. Those are used for authentication
	        // providers, and I guess other stuff later on.
	        return new SearchEndpointWithDefaultCallOptions_1.SearchEndpointWithDefaultCallOptions(endpoint, this.getCallOptions());
	    };
	    /**
	     * Return the last query that was performed by the query controller
	     * @returns {IQuery|Query}
	     */
	    QueryController.prototype.getLastQuery = function () {
	        return this.lastQuery || new QueryBuilder_1.QueryBuilder().build();
	    };
	    /**
	     * Return the last query results set.
	     * @returns {IQueryResults}
	     */
	    QueryController.prototype.getLastResults = function () {
	        return this.lastQueryResults;
	    };
	    /**
	     * Execute a query and return a Promise of IQueryResults.<br/>
	     * This will execute the normal query flow, triggering all the necessary query events (newQuery <br/>
	     * All components present in the interface will act accordingly (modify the query and render results if needed).
	     * @param options
	     * @returns {Promise<IQueryResults>}
	     */
	    QueryController.prototype.executeQuery = function (options) {
	        var _this = this;
	        options = _.extend(new DefaultQueryOptions(), options);
	        if (options.closeModalBox) {
	            ExternalModulesShim_1.ModalBox.close(true);
	        }
	        this.logger.debug('Executing new query');
	        this.cancelAnyCurrentPendingQuery();
	        if (options.beforeExecuteQuery != null) {
	            options.beforeExecuteQuery();
	        }
	        if (!options.ignoreWarningSearchEvent) {
	            this.usageAnalytics.warnAboutSearchEvent();
	        }
	        this.showExecutingQueryAnimation();
	        var dataToSendOnNewQuery = {
	            searchAsYouType: options.searchAsYouType,
	            cancel: options.cancel,
	            origin: options.origin
	        };
	        this.newQueryEvent(dataToSendOnNewQuery);
	        if (dataToSendOnNewQuery.cancel) {
	            this.cancelQuery();
	            return;
	        }
	        var queryBuilder = this.createQueryBuilder(options);
	        // The query was canceled
	        if (!queryBuilder) {
	            return;
	        }
	        var query = queryBuilder.build();
	        if (options.logInActionsHistory) {
	            this.logQueryInActionsHistory(query, options.isFirstQuery);
	        }
	        var endpointToUse = this.getEndpoint();
	        var promise = this.currentPendingQuery = endpointToUse.search(query);
	        promise.then(function (queryResults) {
	            Assert_1.Assert.exists(queryResults);
	            var firstQuery = _this.firstQuery;
	            if (_this.firstQuery) {
	                _this.firstQuery = false;
	            }
	            // If our promise is no longer the current one, then the query
	            // has been cancel. We should do nothing here.
	            if (promise !== _this.currentPendingQuery) {
	                return;
	            }
	            _this.logger.debug('Query results received', query, queryResults);
	            var enableHistory = _this.searchInterface && _this.searchInterface.options && _this.searchInterface.options.enableHistory;
	            if ((!firstQuery || enableHistory) && _this.keepLastSearchUid(query, queryResults)) {
	                queryResults.searchUid = _this.getLastSearchUid();
	                queryResults._reusedSearchUid = true;
	                QueryUtils_1.QueryUtils.setPropertyOnResults(queryResults, 'queryUid', _this.getLastSearchUid());
	            }
	            else {
	                _this.lastQueryHash = _this.queryHash(query, queryResults);
	                _this.lastSearchUid = queryResults.searchUid;
	            }
	            _this.lastQuery = query;
	            _this.lastQueryResults = queryResults;
	            _this.currentError = null;
	            var dataToSendOnPreprocessResult = {
	                queryBuilder: queryBuilder,
	                query: query,
	                results: queryResults,
	                searchAsYouType: options.searchAsYouType
	            };
	            _this.preprocessResultsEvent(dataToSendOnPreprocessResult);
	            var dataToSendOnNoResult = {
	                queryBuilder: queryBuilder,
	                query: query,
	                results: queryResults,
	                searchAsYouType: options.searchAsYouType,
	                retryTheQuery: false
	            };
	            if (queryResults.results.length == 0) {
	                _this.noResultEvent(dataToSendOnNoResult);
	            }
	            if (dataToSendOnNoResult.retryTheQuery) {
	                // When retrying the query, we must forward the results to the deferred we
	                // initially returned, in case someone is listening on it.
	                return _this.executeQuery();
	            }
	            else {
	                _this.lastQueryBuilder = queryBuilder;
	                _this.currentPendingQuery = undefined;
	                var dataToSendOnSuccess_1 = {
	                    queryBuilder: queryBuilder,
	                    query: query,
	                    results: queryResults,
	                    searchAsYouType: options.searchAsYouType
	                };
	                _this.querySuccessEvent(dataToSendOnSuccess_1);
	                Defer_1.Defer.defer(function () {
	                    _this.deferredQuerySuccessEvent(dataToSendOnSuccess_1);
	                    _this.hideExecutingQueryAnimation();
	                });
	                return queryResults;
	            }
	        }).catch(function (error) {
	            // If our deferred is no longer the current one, then the query
	            // has been cancel. We should do nothing here.
	            if (promise !== _this.currentPendingQuery) {
	                return;
	            }
	            _this.logger.error('Query triggered an error', query, error);
	            // this.currentPendingQuery.reject(error);
	            _this.currentPendingQuery = undefined;
	            var dataToSendOnError = {
	                queryBuilder: queryBuilder,
	                endpoint: endpointToUse,
	                query: query,
	                error: error,
	                searchAsYouType: options.searchAsYouType
	            };
	            _this.lastQuery = query;
	            _this.lastQueryResults = null;
	            _this.currentError = error;
	            _this.queryError(dataToSendOnError);
	            _this.hideExecutingQueryAnimation();
	        });
	        var dataToSendDuringQuery = {
	            queryBuilder: queryBuilder,
	            query: query,
	            searchAsYouType: options.searchAsYouType,
	            promise: promise
	        };
	        this.duringQueryEvent(dataToSendDuringQuery);
	        return this.currentPendingQuery;
	    };
	    /**
	     * Using the same parameters as the last successful query, fetch another batch of results. Particularly useful for infinite scrolling, for example.
	     * @param count
	     * @returns {any}
	     */
	    QueryController.prototype.fetchMore = function (count) {
	        var _this = this;
	        if (this.currentPendingQuery != undefined) {
	            return undefined;
	        }
	        // Send all pending events (think : search as you type)
	        // This allows us to get the real search id for the results when the query returns
	        this.usageAnalytics.sendAllPendingEvents();
	        var queryBuilder = new QueryBuilder_1.QueryBuilder();
	        this.continueLastQueryBuilder(queryBuilder, count);
	        var query = queryBuilder.build();
	        var endpointToUse = this.getEndpoint();
	        var promise = this.currentPendingQuery = endpointToUse.search(query);
	        var dataToSendDuringQuery = {
	            queryBuilder: queryBuilder,
	            query: query,
	            searchAsYouType: false,
	            promise: promise
	        };
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.duringFetchMoreQuery, dataToSendDuringQuery);
	        this.lastQueryBuilder = queryBuilder;
	        this.lastQuery = query;
	        promise.then(function (results) {
	            // We re-use the search id from the initial search here, even though the
	            // server provided us with a new one. 'Fetch mores' are considered to be
	            // the same query from an analytics point of view.
	            _this.currentPendingQuery = undefined;
	            if (_this.lastQueryResults == null) {
	                _this.lastQueryResults = results;
	            }
	            else {
	                _.forEach(results.results, function (result) {
	                    _this.lastQueryResults.results.push(result);
	                });
	            }
	            var dataToSendOnPreprocessResult = {
	                queryBuilder: queryBuilder,
	                query: query,
	                results: results,
	                searchAsYouType: false
	            };
	            _this.preprocessResultsEvent(dataToSendOnPreprocessResult);
	            QueryUtils_1.QueryUtils.setIndexAndUidOnQueryResults(query, results, _this.getLastSearchUid(), results.pipeline, results.splitTestRun);
	            var dataToSendOnFetchMoreSuccess = {
	                query: query,
	                results: results,
	                queryBuilder: queryBuilder,
	                searchAsYouType: false
	            };
	            _this.fetchMoreSuccessEvent(dataToSendOnFetchMoreSuccess);
	        });
	        return this.currentPendingQuery;
	    };
	    /**
	     * Cancel any pending query
	     */
	    QueryController.prototype.cancelQuery = function () {
	        this.cancelAnyCurrentPendingQuery();
	        this.hideExecutingQueryAnimation();
	    };
	    QueryController.prototype.deferExecuteQuery = function (options) {
	        var _this = this;
	        this.showExecutingQueryAnimation();
	        Defer_1.Defer.defer(function () { return _this.executeQuery(options); });
	    };
	    QueryController.prototype.ensureCreatedQueryBuilder = function () {
	        if (!this.createdOneQueryBuilder) {
	            this.createQueryBuilder(new DefaultQueryOptions());
	        }
	    };
	    QueryController.prototype.createQueryBuilder = function (options) {
	        Assert_1.Assert.exists(options);
	        this.createdOneQueryBuilder = true;
	        var queryBuilder = new QueryBuilder_1.QueryBuilder();
	        // Default values, components will probably override them if they exists
	        queryBuilder.language = String['locale'];
	        queryBuilder.firstResult = queryBuilder.firstResult || 0;
	        // Allow outside code to customize the query builder. We provide two events,
	        // to allow someone to have a peep at the query builder after the first phase
	        // and add some stuff depending on what was put in there. The facets are using
	        // this mechanism to generate query overrides.
	        var dataToSendDuringBuildingQuery = {
	            queryBuilder: queryBuilder,
	            searchAsYouType: options.searchAsYouType,
	            cancel: options.cancel
	        };
	        this.buildingQueryEvent(dataToSendDuringBuildingQuery);
	        var dataToSendDuringDoneBuildingQuery = {
	            queryBuilder: queryBuilder,
	            searchAsYouType: options.searchAsYouType,
	            cancel: options.cancel
	        };
	        this.doneBuildingQueryEvent(dataToSendDuringDoneBuildingQuery);
	        if (dataToSendDuringBuildingQuery.cancel || dataToSendDuringDoneBuildingQuery.cancel) {
	            this.cancelQuery();
	            return;
	        }
	        var pipeline = this.getPipelineInUrl();
	        if (pipeline) {
	            queryBuilder.pipeline = pipeline;
	        }
	        return queryBuilder;
	    };
	    QueryController.prototype.isStandaloneSearchbox = function () {
	        return Utils_1.Utils.isNonEmptyString(this.options.searchPageUri);
	    };
	    QueryController.prototype.saveLastQuery = function () {
	        this.localStorage.save({
	            expire: new Date().getTime() + 1000 * 60 * 30,
	            hash: this.lastQueryHash,
	            uid: this.lastSearchUid
	        });
	    };
	    // This field is exposed for components rendered in the results or on-demand which
	    // need access to the entire query. For example, the QuickviewDocument need to pass
	    // the entire query to the Search API. For other components, QueryStateModel or
	    // listening to events like 'doneBuildingQuery' is the way to go.
	    QueryController.prototype.getLastQueryHash = function () {
	        if (this.lastQueryHash != null) {
	            return this.lastQueryHash;
	        }
	        this.loadLastQueryHash();
	        return this.lastQueryHash || this.queryHash(new QueryBuilder_1.QueryBuilder().build());
	    };
	    QueryController.prototype.getLastSearchUid = function () {
	        if (this.lastSearchUid != null) {
	            return this.lastSearchUid;
	        }
	        this.loadLastQueryHash();
	        return this.lastSearchUid;
	    };
	    QueryController.prototype.loadLastQueryHash = function () {
	        var lastQuery = this.localStorage.load();
	        if (lastQuery != null && new Date().getTime() <= lastQuery.expire) {
	            this.lastQueryHash = lastQuery.hash;
	            this.lastSearchUid = lastQuery.uid;
	            this.localStorage.remove();
	        }
	    };
	    QueryController.prototype.continueLastQueryBuilder = function (queryBuilder, count) {
	        _.extend(queryBuilder, this.lastQueryBuilder);
	        queryBuilder.firstResult = queryBuilder.firstResult + queryBuilder.numberOfResults;
	        queryBuilder.numberOfResults = count;
	    };
	    QueryController.prototype.getPipelineInUrl = function () {
	        return QueryUtils_1.QueryUtils.getUrlParameter('pipeline');
	    };
	    QueryController.prototype.cancelAnyCurrentPendingQuery = function () {
	        if (Utils_1.Utils.exists(this.currentPendingQuery)) {
	            this.logger.debug('Cancelling current pending query');
	            es6_promise_1.Promise.reject(this.currentPendingQuery);
	            this.currentPendingQuery = undefined;
	            return true;
	        }
	        return false;
	    };
	    QueryController.prototype.showExecutingQueryAnimation = function () {
	        if (!this.showingExecutingQueryAnimation) {
	            Dom_1.$$(this.element).addClass('coveo-executing-query');
	            this.showingExecutingQueryAnimation = true;
	        }
	    };
	    QueryController.prototype.hideExecutingQueryAnimation = function () {
	        if (this.showingExecutingQueryAnimation) {
	            Dom_1.$$(this.element).removeClass('coveo-executing-query');
	            this.showingExecutingQueryAnimation = false;
	        }
	    };
	    QueryController.prototype.keepLastSearchUid = function (query, queryResults) {
	        return this.getLastQueryHash() == this.queryHash(query, queryResults);
	    };
	    QueryController.prototype.queryHash = function (query, queryResults) {
	        var queryHash = JSON.stringify(_.omit(query, 'firstResult', 'groupBy', 'debug'));
	        if (queryResults != null) {
	            queryHash += queryResults.pipeline;
	        }
	        return queryHash;
	    };
	    QueryController.prototype.getCallOptions = function () {
	        var args = {
	            options: {
	                authentication: []
	            }
	        };
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.buildingCallOptions, args);
	        return args.options;
	    };
	    QueryController.prototype.newQueryEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.newQuery, args);
	    };
	    QueryController.prototype.buildingQueryEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.buildingQuery, args);
	    };
	    QueryController.prototype.doneBuildingQueryEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.doneBuildingQuery, args);
	    };
	    QueryController.prototype.duringQueryEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.duringQuery, args);
	    };
	    QueryController.prototype.querySuccessEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.querySuccess, args);
	    };
	    QueryController.prototype.fetchMoreSuccessEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.fetchMoreSuccess, args);
	    };
	    QueryController.prototype.deferredQuerySuccessEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.deferredQuerySuccess, args);
	    };
	    QueryController.prototype.queryError = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.queryError, args);
	    };
	    QueryController.prototype.preprocessResultsEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.preprocessResults, args);
	    };
	    QueryController.prototype.noResultEvent = function (args) {
	        Dom_1.$$(this.element).trigger(QueryEvents_1.QueryEvents.noResults, args);
	    };
	    QueryController.prototype.debugInfo = function () {
	        var _this = this;
	        var info = {
	            'query': this.lastQuery,
	        };
	        if (this.lastQueryResults != null) {
	            info.queryDuration = function () { return _this.buildQueryDurationSection(_this.lastQueryResults); };
	            info.results = function () { return _.omit(_this.lastQueryResults, 'results'); };
	        }
	        if (this.currentError != null) {
	            info.error = function () { return _this.currentError; };
	        }
	        return info;
	    };
	    QueryController.prototype.buildQueryDurationSection = function (queryResults) {
	        var dom = Dom_1.Dom.createElement('div', { className: 'coveo-debug-queryDuration' });
	        var graph = Dom_1.Dom.createElement('div', { className: 'coveo-debug-durations' });
	        var debugRef = BaseComponent_1.BaseComponent.getComponentRef('Debug');
	        dom.appendChild(graph);
	        _.forEach(debugRef.durationKeys, function (key) {
	            var duration = queryResults[key];
	            if (duration != null) {
	                graph.appendChild(Dom_1.Dom.createElement('div', {
	                    className: 'coveo-debug-duration',
	                    style: "width:" + duration + "px",
	                    'data-id': key
	                }));
	                var legend = Dom_1.Dom.createElement('div', { className: 'coveo-debug-duration-legend', 'data-id': key });
	                dom.appendChild(legend);
	                var keyDom = Dom_1.Dom.createElement('span', { className: 'coveo-debug-duration-label' });
	                keyDom.appendChild(document.createTextNode(key));
	                legend.appendChild(keyDom);
	                var durationDom = Dom_1.Dom.createElement('span', { className: 'coveo-debug-duration-value' });
	                durationDom.appendChild(document.createTextNode(duration));
	                legend.appendChild(durationDom);
	            }
	        });
	        return dom;
	    };
	    QueryController.prototype.logQueryInActionsHistory = function (query, isFirstQuery) {
	        var queryElement = {
	            name: 'Query',
	            value: query.q,
	            time: JSON.stringify(new Date())
	        };
	        this.historyStore.addElement(queryElement);
	    };
	    return QueryController;
	}(RootComponent_1.RootComponent));
	QueryController.ID = 'QueryController';
	exports.QueryController = QueryController;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var BaseComponent_1 = __webpack_require__(76);
	var RootComponent = (function (_super) {
	    __extends(RootComponent, _super);
	    function RootComponent(element, type) {
	        var _this = _super.call(this, element, type) || this;
	        _this.element = element;
	        _this.type = type;
	        return _this;
	    }
	    return RootComponent;
	}(BaseComponent_1.BaseComponent));
	exports.RootComponent = RootComponent;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var Logger_1 = __webpack_require__(11);
	/**
	 * Every component in the framework ultimately inherits from this base component class.
	 */
	var BaseComponent = (function () {
	    function BaseComponent(element, type) {
	        this.element = element;
	        this.type = type;
	        /**
	         * A disabled component will not participate in the query, or listen to {@link ComponentEvents}.
	         * @type {boolean}
	         */
	        this.disabled = false;
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.isNonEmptyString(type);
	        this.logger = new Logger_1.Logger(this);
	        BaseComponent.bindComponentToElement(element, this);
	    }
	    /**
	     * Return the debug info about this component.
	     * @returns {any}
	     */
	    BaseComponent.prototype.debugInfo = function () {
	        var info = {};
	        info[this['constructor']['ID']] = this;
	        return info;
	    };
	    /**
	     * Disable the component.
	     * Normally this means that the component will not execute handlers for the framework events (query events, for example).
	     * Component are enabled by default on creation.
	     */
	    BaseComponent.prototype.disable = function () {
	        this.disabled = true;
	    };
	    /**
	     * Enable the component.
	     * Normally this means that the component will execute handlers for the framework events (query events, for example).
	     * Components are enabled by default on creation.
	     */
	    BaseComponent.prototype.enable = function () {
	        this.disabled = false;
	    };
	    BaseComponent.bindComponentToElement = function (element, component) {
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(component);
	        Assert_1.Assert.isNonEmptyString(component.type);
	        element[BaseComponent.computeCssClassNameForType(component.type)] = component;
	        Dom_1.$$(element).addClass(BaseComponent.computeCssClassNameForType(component.type));
	        BaseComponent.getBoundComponentsForElement(element).push(component);
	    };
	    BaseComponent.computeCssClassName = function (componentClass) {
	        return BaseComponent.computeCssClassNameForType(componentClass['ID']);
	    };
	    BaseComponent.computeCssClassNameForType = function (type) {
	        Assert_1.Assert.isNonEmptyString(type);
	        return 'Coveo' + type;
	    };
	    BaseComponent.computeSelectorForType = function (type) {
	        Assert_1.Assert.isNonEmptyString(type);
	        return '.' + BaseComponent.computeCssClassNameForType(type);
	    };
	    BaseComponent.getBoundComponentsForElement = function (element) {
	        Assert_1.Assert.exists(element);
	        if (element.CoveoBoundComponents == null) {
	            element.CoveoBoundComponents = [];
	        }
	        return element.CoveoBoundComponents;
	    };
	    BaseComponent.getComponentRef = function (component) {
	        return Coveo[component];
	    };
	    return BaseComponent;
	}());
	exports.BaseComponent = BaseComponent;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExpressionBuilder_1 = __webpack_require__(78);
	var _ = __webpack_require__(14);
	/**
	 * The QueryBuilder is used to build a {@link IQuery} that will be able to be executed using the Search API.<br/>
	 * The class exposes several members and methods that help components and external code to build up the final query that is sent to the Search API.<br/>
	 */
	var QueryBuilder = (function () {
	    function QueryBuilder() {
	        /**
	         * Used to build the basic part of the query expression.<br/>
	         * This part typically consists of user-entered content such as query keywords, etc.
	         * @type {Coveo.ExpressionBuilder}
	         */
	        this.expression = new ExpressionBuilder_1.ExpressionBuilder();
	        /**
	         * Used to build the advanced part of the query expression.<br/>
	         * This part is typically formed of filter expressions generated by components such as facets, external code, etc.
	         * @type {Coveo.ExpressionBuilder}
	         */
	        this.advancedExpression = new ExpressionBuilder_1.ExpressionBuilder();
	        /**
	         * Used to build the advanced part of the query expression.<br/>
	         * This part is similar to `advancedExpression`, but its content is interpreted as a constant expression by the index and it takes advantage of special caching features.
	         * @type {Coveo.ExpressionBuilder}
	         */
	        this.constantExpression = new ExpressionBuilder_1.ExpressionBuilder();
	        /**
	         * The contextual text.<br/>
	         * This is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from the text and add them to the basic expression.
	         * This field is mainly used to pass context such a case description, long textual query or any other form of text that might help in
	         * refining the query.
	         */
	        this.longQueryExpression = new ExpressionBuilder_1.ExpressionBuilder();
	        /**
	         * Used to build the disjunctive part of the query expression.<br/>
	         * When present, this part is evaluated separately from the other expressions and the matching results are merged to those matching expressions, `advancedExpression` and `constantExpression`.<br/>
	         * The final boolean expression for the query is thus (basic advanced constant) OR (disjunction).
	         * @type {Coveo.ExpressionBuilder}
	         */
	        this.disjunctionExpression = new ExpressionBuilder_1.ExpressionBuilder();
	        /**
	         * Whether to disable the special query syntax such as field references for the basic query expression (parameter q).
	         * It is equivalent to a No syntax block applied to the basic query expression.
	         * If not specified, the parameter defaults to false.
	         */
	        this.disableQuerySyntax = false;
	        /**
	         * This is the 0-based index of the first result to return.<br/>
	         * If not specified, this parameter defaults to 0.
	         */
	        this.firstResult = 0;
	        /**
	         * This is the number of results to return, starting from {@link IQuery.firstResult}.<br/>
	         * If not specified, this parameter defaults to 10.
	         */
	        this.numberOfResults = 10;
	        this.requiredFields = [];
	        this.includeRequiredFields = false;
	        /**
	         * Whether to enable query corrections on this query (see {@link DidYouMean}).
	         */
	        this.enableDidYouMean = false;
	        /**
	         * Whether to enable debug info on the query.<br/>
	         * This will return additional information on the resulting JSON response from the Search API.<br/>
	         * Mostly: execution report (a detailed breakdown of the parsed and executed query).
	         */
	        this.enableDebug = false;
	        /**
	         * This specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to relevancy.<br/>
	         * Possible values are : <br/>
	         * -- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>
	         * -- dateascending / datedescending Sort using the value of the `@date` field, which is typically the last modification date of an item in the index.<br/>
	         * -- qre : Sort using only the weights applied through ranking expressions. This is much like using `relevancy` except that automatic weights based on keyword proximity etc, are not computed.<br/>
	         * -- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>
	         * -- @field ascending / @field descending Sort using the value of a custom field.
	         */
	        this.sortCriteria = 'relevancy';
	        this.retrieveFirstSentences = true;
	        /**
	         * This specifies an array of Query Function operation that will be executed on the results.
	         */
	        this.queryFunctions = [];
	        /**
	         * This specifies an array of Ranking Function operations that will be executed on the results.
	         */
	        this.rankingFunctions = [];
	        /**
	         * This specifies an array of Group By operations that can be performed on the query results to extract facets.
	         */
	        this.groupByRequests = [];
	        this.enableDuplicateFiltering = false;
	    }
	    /**
	     * Build the current content or state of the query builder and return a {@link IQuery}.<br/>
	     * build can be called multiple times on the same QueryBuilder.
	     * @returns {IQuery}
	     */
	    QueryBuilder.prototype.build = function () {
	        var query = {
	            q: this.expression.build(),
	            aq: this.advancedExpression.build(),
	            cq: this.constantExpression.build(),
	            lq: this.longQueryExpression.build(),
	            dq: this.disjunctionExpression.build(),
	            searchHub: this.searchHub,
	            tab: this.tab,
	            language: this.language,
	            pipeline: this.pipeline,
	            maximumAge: this.maximumAge,
	            wildcards: this.enableWildcards,
	            questionMark: this.enableQuestionMarks,
	            lowercaseOperators: this.enableLowercaseOperators,
	            partialMatch: this.enablePartialMatch,
	            partialMatchKeywords: this.partialMatchKeywords,
	            partialMatchThreshold: this.partialMatchThreshold,
	            firstResult: this.firstResult,
	            numberOfResults: this.numberOfResults,
	            excerptLength: this.excerptLength,
	            filterField: this.filterField,
	            filterFieldRange: this.filterFieldRange,
	            parentField: this.parentField,
	            childField: this.childField,
	            fieldsToInclude: this.computeFieldsToInclude(),
	            fieldsToExclude: this.fieldsToExclude,
	            enableDidYouMean: this.enableDidYouMean,
	            sortCriteria: this.sortCriteria,
	            sortField: this.sortField,
	            queryFunctions: this.queryFunctions,
	            rankingFunctions: this.rankingFunctions,
	            groupBy: this.groupByRequests,
	            retrieveFirstSentences: this.retrieveFirstSentences,
	            timezone: this.timezone,
	            disableQuerySyntax: this.disableQuerySyntax,
	            enableDuplicateFiltering: this.enableDuplicateFiltering,
	            enableCollaborativeRating: this.enableCollaborativeRating,
	            debug: this.enableDebug,
	            context: this.context,
	            actionsHistory: this.actionsHistory,
	            recommendation: this.recommendation
	        };
	        return query;
	    };
	    /**
	     * Return only the expression(s) part(s) of the query, as a string.<br/>
	     * This means the basic, advanced and constant part in a complete expression {@link IQuery.q}, {@link IQuery.aq}, {@link IQuery.cq}.
	     * @returns {string}
	     */
	    QueryBuilder.prototype.computeCompleteExpression = function () {
	        return this.computeCompleteExpressionParts().full;
	    };
	    /**
	     * Return only the expression(s) part(s) of the query, as an object.
	     * @returns {{full: string, withoutConstant: string, constant: string}}
	     */
	    QueryBuilder.prototype.computeCompleteExpressionParts = function () {
	        var withoutConstant = ExpressionBuilder_1.ExpressionBuilder.merge(this.expression, this.advancedExpression);
	        return {
	            full: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(ExpressionBuilder_1.ExpressionBuilder.merge(withoutConstant, this.constantExpression), this.disjunctionExpression).build(),
	            withoutConstant: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(withoutConstant, this.disjunctionExpression).build(),
	            basic: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(this.expression, this.disjunctionExpression).build(),
	            advanced: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(this.advancedExpression, this.disjunctionExpression).build(),
	            constant: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(this.constantExpression, this.disjunctionExpression).build()
	        };
	    };
	    /**
	     * Return only the expression(s) part(s) of the query, as a string, except the given expression.<br/>
	     * This is used by {@link Facet}, to build their group by request with query override.
	     * @param except
	     * @returns {string}
	     */
	    QueryBuilder.prototype.computeCompleteExpressionExcept = function (except) {
	        return this.computeCompleteExpressionPartsExcept(except).full;
	    };
	    /**
	     * Return only the expression(s) part(s) of the query, as an object, except the given expression.<br/>
	     * This is used by {@link Facet}, to build their group by request with query override.
	     * @param except
	     * @returns {{full: string, withoutConstant: string, constant: string}}
	     */
	    QueryBuilder.prototype.computeCompleteExpressionPartsExcept = function (except) {
	        var withoutConstantAndExcept = ExpressionBuilder_1.ExpressionBuilder.merge(this.expression, this.advancedExpression);
	        withoutConstantAndExcept.remove(except);
	        var basicAndExcept = new ExpressionBuilder_1.ExpressionBuilder();
	        basicAndExcept.fromExpressionBuilder(this.expression);
	        basicAndExcept.remove(except);
	        var advancedAndExcept = new ExpressionBuilder_1.ExpressionBuilder();
	        advancedAndExcept.fromExpressionBuilder(this.advancedExpression);
	        advancedAndExcept.remove(except);
	        return {
	            full: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(ExpressionBuilder_1.ExpressionBuilder.merge(withoutConstantAndExcept, this.constantExpression), this.disjunctionExpression).build(),
	            withoutConstant: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(withoutConstantAndExcept, this.disjunctionExpression).build(),
	            basic: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(basicAndExcept, this.disjunctionExpression).build(),
	            advanced: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(advancedAndExcept, this.disjunctionExpression).build(),
	            constant: ExpressionBuilder_1.ExpressionBuilder.mergeUsingOr(this.constantExpression, this.disjunctionExpression).build()
	        };
	    };
	    /**
	     * Add fields to specifically include when the results return.<br/>
	     * This can be used to accelerate the execution time of every query, as there is much less data to process if you whitelist specific fields.
	     * @param fields
	     */
	    QueryBuilder.prototype.addFieldsToInclude = function (fields) {
	        this.fieldsToInclude = _.uniq((this.fieldsToInclude || []).concat(fields));
	    };
	    QueryBuilder.prototype.addRequiredFields = function (fields) {
	        this.requiredFields = _.uniq(this.requiredFields.concat(fields));
	    };
	    /**
	     * Add fields to specifically exclude when the results return.<br/>
	     * This can be used to accelerate the execution time of every query, as there is much less data to process if you blacklist specific fields.
	     * @param fields
	     */
	    QueryBuilder.prototype.addFieldsToExclude = function (fields) {
	        this.fieldsToExclude = _.uniq((this.fieldsToInclude || []).concat(fields));
	    };
	    QueryBuilder.prototype.computeFieldsToInclude = function () {
	        if (this.includeRequiredFields || this.fieldsToInclude != null) {
	            return this.requiredFields.concat(this.fieldsToInclude || []);
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Add a single context key->value pair to the query.<br/>
	     * This is used by the Query pipeline in the Coveo platform.
	     * @param key
	     * @param value
	     */
	    QueryBuilder.prototype.addContextValue = function (key, value) {
	        if (this.context == null) {
	            this.context = {};
	        }
	        this.context[key] = value;
	    };
	    /**
	     * Add a context object to the query.<br/>
	     * This can contain multiple key->value.<br/>
	     * This is used by the Query pipeline in the Coveo platform.
	     * @param values
	     */
	    QueryBuilder.prototype.addContext = function (values) {
	        if (this.context == null) {
	            this.context = {};
	        }
	        _.extend(this.context, values);
	    };
	    return QueryBuilder;
	}());
	exports.QueryBuilder = QueryBuilder;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var QueryUtils_1 = __webpack_require__(21);
	var _ = __webpack_require__(14);
	/**
	 * An `ExpressionBuilder` that is mostly used by the {@link QueryBuilder}.<br/>
	 * It is used to build a single query expression.<br/>
	 * It allows combining multiple expression parts into a single string and provides utilities to generate common expression parts.
	 */
	var ExpressionBuilder = (function () {
	    function ExpressionBuilder() {
	        this.parts = []; // he he he
	        this.wrapParts = true;
	    }
	    /**
	     * Add a new part to the expression.
	     * @param expression
	     */
	    ExpressionBuilder.prototype.add = function (expression) {
	        Assert_1.Assert.isNonEmptyString(expression);
	        this.parts.push(expression);
	    };
	    /**
	     * Take another `ExpressionBuilder`, and copy it.
	     * @param expression
	     */
	    ExpressionBuilder.prototype.fromExpressionBuilder = function (expression) {
	        this.parts = this.parts.concat(expression.parts);
	    };
	    /**
	     * Add a new part to the expression, but specific for field values<br/>
	     * eg @field=(value1,value2,value3).
	     * @param field The field for which to create an expression (e.g.: @foo).
	     * @param operator The operator to use e.g.: = (equal) == (strict equal) <> (not equal).
	     * @param values The values to put in the expression.
	     */
	    ExpressionBuilder.prototype.addFieldExpression = function (field, operator, values) {
	        Assert_1.Assert.isNonEmptyString(field);
	        Assert_1.Assert.stringStartsWith(field, '@');
	        Assert_1.Assert.isNonEmptyString(operator);
	        Assert_1.Assert.isLargerOrEqualsThan(1, values.length);
	        this.add(QueryUtils_1.QueryUtils.buildFieldExpression(field, operator, values));
	    };
	    /**
	     * Add a new part to the expression, but specific for field values<br/>
	     * eg : NOT @field==(value1, value2, value3).
	     * @param field The field for which to create an expression (e.g.: @foo)
	     * @param values The values to put in the expression.
	     */
	    ExpressionBuilder.prototype.addFieldNotEqualExpression = function (field, values) {
	        Assert_1.Assert.isNonEmptyString(field);
	        Assert_1.Assert.stringStartsWith(field, '@');
	        Assert_1.Assert.isLargerOrEqualsThan(1, values.length);
	        this.add(QueryUtils_1.QueryUtils.buildFieldNotEqualExpression(field, values));
	    };
	    /**
	     * Removes an expression from the builder.
	     * @param expression
	     */
	    ExpressionBuilder.prototype.remove = function (expression) {
	        Assert_1.Assert.isNonEmptyString(expression);
	        var index = _.indexOf(this.parts, expression);
	        if (index != -1) {
	            this.parts.splice(_.indexOf(this.parts, expression), 1);
	        }
	    };
	    /**
	     * Checks if the builder is currently empty.
	     * @returns {boolean}
	     */
	    ExpressionBuilder.prototype.isEmpty = function () {
	        return this.parts.length == 0;
	    };
	    /**
	     * Builds the expression string by combining all the parts together.<br/>
	     * @param exp expression to join the different parts, default to a space.
	     * @returns {any}
	     */
	    ExpressionBuilder.prototype.build = function (exp) {
	        if (exp === void 0) { exp = ' '; }
	        if (this.parts.length == 0) {
	            return undefined;
	        }
	        else if (this.parts.length == 1) {
	            return this.parts[0];
	        }
	        else if (this.wrapParts) {
	            return '(' + this.parts.join(')' + exp + '(') + ')';
	        }
	        else {
	            return this.parts.join(exp);
	        }
	    };
	    /**
	     * Merges several `ExpressionBuilder` together.
	     * @param builders Builders that should be merged.
	     * @returns {Coveo.ExpressionBuilder}
	     */
	    ExpressionBuilder.merge = function () {
	        var builders = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            builders[_i] = arguments[_i];
	        }
	        var merged = new ExpressionBuilder();
	        _.each(builders, function (builder) {
	            merged.parts = merged.parts.concat(builder.parts);
	        });
	        return merged;
	    };
	    /**
	     * Merges several `ExpressionBuilder` together, using the OR operator.
	     * @param builders Builders that should be merged.
	     * @returns {Coveo.ExpressionBuilder}
	     */
	    ExpressionBuilder.mergeUsingOr = function () {
	        var builders = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            builders[_i] = arguments[_i];
	        }
	        var nonEmpty = _.filter(builders, function (b) { return !b.isEmpty(); });
	        var merged = new ExpressionBuilder();
	        if (nonEmpty.length == 1) {
	            merged.parts = [].concat(nonEmpty[0].parts);
	        }
	        else if (nonEmpty.length > 1) {
	            var parts = _.map(nonEmpty, function (b) { return b.build(); });
	            merged.add('(' + parts.join(') OR (') + ')');
	        }
	        return merged;
	    };
	    return ExpressionBuilder;
	}());
	exports.ExpressionBuilder = ExpressionBuilder;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var SearchEndpointWithDefaultCallOptions = (function () {
	    function SearchEndpointWithDefaultCallOptions(endpoint, callOptions) {
	        this.endpoint = endpoint;
	        this.callOptions = callOptions;
	        this.options = endpoint.options;
	    }
	    SearchEndpointWithDefaultCallOptions.prototype.getBaseUri = function () {
	        return this.endpoint.getBaseUri();
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getBaseAlertsUri = function () {
	        return this.endpoint.getBaseAlertsUri();
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getAuthenticationProviderUri = function (provider, returnUri, message) {
	        return this.endpoint.getAuthenticationProviderUri(provider, returnUri, message);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.isJsonp = function () {
	        return this.endpoint.isJsonp();
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.search = function (query, callOptions) {
	        return this.endpoint.search(query, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getExportToExcelLink = function (query, numberOfResults, callOptions) {
	        return this.endpoint.getExportToExcelLink(query, numberOfResults, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.tagDocument = function (taggingRequest, callOptions) {
	        return this.endpoint.tagDocument(taggingRequest, this.enrichCallOptions(taggingRequest));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getRevealQuerySuggest = function (request, callOptions) {
	        return this.endpoint.getRevealQuerySuggest(request, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.rateDocument = function (ratingRequest, callOptions) {
	        return this.endpoint.rateDocument(ratingRequest, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getRawDataStream = function (documentUniqueId, dataStreamType, callOptions) {
	        return this.endpoint.getRawDataStream(documentUniqueId, dataStreamType, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getDocument = function (documentUniqueId, callOptions) {
	        return this.endpoint.getDocument(documentUniqueId, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getDocumentText = function (documentUniqueID, callOptions) {
	        return this.endpoint.getDocumentText(documentUniqueID, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getDocumentHtml = function (documentUniqueID, callOptions) {
	        return this.endpoint.getDocumentHtml(documentUniqueID, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getViewAsHtmlUri = function (documentUniqueID, callOptions) {
	        return this.endpoint.getViewAsHtmlUri(documentUniqueID, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.getViewAsDatastreamUri = function (documentUniqueID, dataStreamType, callOptions) {
	        return this.endpoint.getViewAsDatastreamUri(documentUniqueID, dataStreamType, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.listFieldValues = function (request, callOptions) {
	        return this.endpoint.listFieldValues(request, this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.listFields = function (callOptions) {
	        return this.endpoint.listFields(this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.extensions = function (callOptions) {
	        return this.endpoint.extensions(this.enrichCallOptions(callOptions));
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.follow = function (request) {
	        return this.endpoint.follow(request);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.listSubscriptions = function (page) {
	        return this.endpoint.listSubscriptions(page);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.updateSubscription = function (subscription) {
	        return this.endpoint.updateSubscription(subscription);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.deleteSubscription = function (subscription) {
	        return this.endpoint.deleteSubscription(subscription);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.logError = function (sentryLog) {
	        return this.endpoint.logError(sentryLog);
	    };
	    SearchEndpointWithDefaultCallOptions.prototype.enrichCallOptions = function (callOptions) {
	        return _.extend({}, callOptions, this.callOptions);
	    };
	    return SearchEndpointWithDefaultCallOptions;
	}());
	exports.SearchEndpointWithDefaultCallOptions = SearchEndpointWithDefaultCallOptions;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var analytics = __webpack_require__(81);
	exports.analytics = analytics;
	var SimpleAnalytics = __webpack_require__(87);
	exports.SimpleAnalytics = SimpleAnalytics;
	var history = __webpack_require__(82);
	exports.history = history;
	var donottrack = __webpack_require__(90);
	exports.donottrack = donottrack;
	var storage = __webpack_require__(83);
	exports.storage = storage;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var history_1 = __webpack_require__(82);
	var detector_1 = __webpack_require__(84);
	__webpack_require__(86);
	exports.Version = 'v15';
	exports.Endpoints = {
	    default: 'https://usageanalytics.coveo.com',
	    production: 'https://usageanalytics.coveo.com',
	    dev: 'https://usageanalyticsdev.coveo.com',
	    staging: 'https://usageanalyticsstaging.coveo.com'
	};
	;
	function defaultResponseTransformer(response) {
	    return response.json().then(function (data) {
	        data.raw = response;
	        return data;
	    });
	}
	var Client = (function () {
	    function Client(opts) {
	        if (typeof opts === 'undefined') {
	            throw new Error('You have to pass options to this constructor');
	        }
	        this.endpoint = opts.endpoint || exports.Endpoints.default;
	        this.token = opts.token;
	        this.version = opts.version || exports.Version;
	    }
	    Client.prototype.sendEvent = function (eventType, request) {
	        return fetch(this.getRestEndpoint() + "/analytics/" + eventType, {
	            method: 'POST',
	            headers: this.getHeaders(),
	            mode: 'cors',
	            body: JSON.stringify(request),
	            credentials: 'include'
	        });
	    };
	    Client.prototype.sendSearchEvent = function (request) {
	        return this.sendEvent('search', request).then(defaultResponseTransformer);
	    };
	    Client.prototype.sendClickEvent = function (request) {
	        return this.sendEvent('click', request).then(defaultResponseTransformer);
	    };
	    Client.prototype.sendCustomEvent = function (request) {
	        return this.sendEvent('custom', request).then(defaultResponseTransformer);
	    };
	    Client.prototype.sendViewEvent = function (request) {
	        if (request.referrer === '') {
	            delete request.referrer;
	        }
	        if (detector_1.hasDocumentLocation()) {
	            var store = new history_1.HistoryStore();
	            var historyElement = {
	                name: 'PageView',
	                value: document.location.toString(),
	                time: JSON.stringify(new Date()),
	                title: document.title
	            };
	            store.addElement(historyElement);
	        }
	        return this.sendEvent('view', request).then(defaultResponseTransformer);
	    };
	    Client.prototype.getVisit = function () {
	        return fetch(this.getRestEndpoint() + "/analytics/visit")
	            .then(defaultResponseTransformer);
	    };
	    Client.prototype.getHealth = function () {
	        return fetch(this.getRestEndpoint() + "/analytics/monitoring/health")
	            .then(defaultResponseTransformer);
	    };
	    Client.prototype.getRestEndpoint = function () {
	        return this.endpoint + "/rest/" + this.version;
	    };
	    Client.prototype.getHeaders = function () {
	        var headers = {
	            'Content-Type': "application/json"
	        };
	        if (this.token) {
	            headers['Authorization'] = "Bearer " + this.token;
	        }
	        return headers;
	    };
	    return Client;
	}());
	exports.Client = Client;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Client;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var storage_1 = __webpack_require__(83);
	var detector = __webpack_require__(84);
	exports.STORE_KEY = '__coveo.analytics.history';
	exports.MAX_NUMBER_OF_HISTORY_ELEMENTS = 20;
	exports.MIN_THRESHOLD_FOR_DUPLICATE_VALUE = 1000 * 60;
	exports.MAX_VALUE_SIZE = 75;
	var HistoryStore = (function () {
	    function HistoryStore(store) {
	        this.store = store || storage_1.getAvailableStorage();
	        if (!(this.store instanceof storage_1.CookieStorage) && detector.hasCookieStorage()) {
	            new storage_1.CookieStorage().removeItem(exports.STORE_KEY);
	        }
	    }
	    ;
	    HistoryStore.prototype.addElement = function (elem) {
	        elem.internalTime = new Date().getTime();
	        this.cropQueryElement(elem);
	        var currentHistory = this.getHistory();
	        if (currentHistory != null) {
	            if (this.isValidEntry(elem)) {
	                this.setHistory([elem].concat(currentHistory));
	            }
	        }
	        else {
	            this.setHistory([elem]);
	        }
	    };
	    HistoryStore.prototype.getHistory = function () {
	        try {
	            return JSON.parse(this.store.getItem(exports.STORE_KEY));
	        }
	        catch (e) {
	            return [];
	        }
	    };
	    HistoryStore.prototype.setHistory = function (history) {
	        try {
	            this.store.setItem(exports.STORE_KEY, JSON.stringify(history.slice(0, exports.MAX_NUMBER_OF_HISTORY_ELEMENTS)));
	        }
	        catch (e) { }
	    };
	    HistoryStore.prototype.clear = function () {
	        try {
	            this.store.removeItem(exports.STORE_KEY);
	        }
	        catch (e) { }
	    };
	    HistoryStore.prototype.getMostRecentElement = function () {
	        var currentHistory = this.getHistory();
	        if (currentHistory != null) {
	            var sorted = currentHistory.sort(function (first, second) {
	                if (first.internalTime == null && second.internalTime == null) {
	                    return 0;
	                }
	                if (first.internalTime == null && second.internalTime != null) {
	                    return 1;
	                }
	                if (first.internalTime != null && second.internalTime == null) {
	                    return -1;
	                }
	                return second.internalTime - first.internalTime;
	            });
	            return sorted[0];
	        }
	        return null;
	    };
	    HistoryStore.prototype.cropQueryElement = function (elem) {
	        if (elem.name && elem.name.toLowerCase() == 'query' && elem.value != null) {
	            elem.value = elem.value.slice(0, exports.MAX_VALUE_SIZE);
	        }
	    };
	    HistoryStore.prototype.isValidEntry = function (elem) {
	        var lastEntry = this.getMostRecentElement();
	        if (lastEntry && lastEntry.value == elem.value) {
	            return elem.internalTime - lastEntry.internalTime > exports.MIN_THRESHOLD_FOR_DUPLICATE_VALUE;
	        }
	        return true;
	    };
	    return HistoryStore;
	}());
	exports.HistoryStore = HistoryStore;
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = HistoryStore;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var detector = __webpack_require__(84);
	var cookieutils_1 = __webpack_require__(85);
	exports.preferredStorage = null;
	function getAvailableStorage() {
	    if (exports.preferredStorage) {
	        return exports.preferredStorage;
	    }
	    if (detector.hasLocalStorage()) {
	        return localStorage;
	    }
	    if (detector.hasCookieStorage()) {
	        return new CookieStorage();
	    }
	    if (detector.hasSessionStorage()) {
	        return sessionStorage;
	    }
	    return new NullStorage();
	}
	exports.getAvailableStorage = getAvailableStorage;
	var CookieStorage = (function () {
	    function CookieStorage() {
	    }
	    CookieStorage.prototype.getItem = function (key) {
	        return cookieutils_1.Cookie.get(key);
	    };
	    CookieStorage.prototype.removeItem = function (key) {
	        cookieutils_1.Cookie.erase(key);
	    };
	    CookieStorage.prototype.setItem = function (key, data) {
	        cookieutils_1.Cookie.set(key, data);
	    };
	    return CookieStorage;
	}());
	exports.CookieStorage = CookieStorage;
	var NullStorage = (function () {
	    function NullStorage() {
	    }
	    NullStorage.prototype.getItem = function (key) { return null; };
	    NullStorage.prototype.removeItem = function (key) { };
	    NullStorage.prototype.setItem = function (key, data) { };
	    return NullStorage;
	}());
	exports.NullStorage = NullStorage;


/***/ }),
/* 84 */
/***/ (function(module, exports) {

	"use strict";
	function hasLocalStorage() {
	    try {
	        return 'localStorage' in window && window['localStorage'] !== null;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.hasLocalStorage = hasLocalStorage;
	;
	function hasSessionStorage() {
	    try {
	        return 'sessionStorage' in window && window['sessionStorage'] !== null;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.hasSessionStorage = hasSessionStorage;
	;
	function hasCookieStorage() {
	    return navigator.cookieEnabled;
	}
	exports.hasCookieStorage = hasCookieStorage;
	;
	function hasDocument() {
	    return document !== null;
	}
	exports.hasDocument = hasDocument;
	;
	function hasDocumentLocation() {
	    return hasDocument() && document.location !== null;
	}
	exports.hasDocumentLocation = hasDocumentLocation;
	;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	"use strict";
	var Cookie = (function () {
	    function Cookie() {
	    }
	    Cookie.set = function (name, value, expiration) {
	        var domain, domainParts, date, expires, host;
	        if (expiration) {
	            date = new Date();
	            date.setTime(date.getTime() + expiration);
	            expires = '; expires=' + date.toGMTString();
	        }
	        else {
	            expires = '';
	        }
	        host = location.hostname;
	        if (host.indexOf('.') === -1) {
	            document.cookie = name + '=' + value + expires + '; path=/';
	        }
	        else {
	            domainParts = host.split('.');
	            domainParts.shift();
	            domain = '.' + domainParts.join('.');
	            document.cookie = name + '=' + value + expires + '; path=/; domain=' + domain;
	            if (Cookie.get(name) == null || Cookie.get(name) != value) {
	                domain = '.' + host;
	                document.cookie = name + '=' + value + expires + '; path=/; domain=' + domain;
	            }
	        }
	    };
	    Cookie.get = function (name) {
	        var cookiePrefix = name + '=';
	        var cookieArray = document.cookie.split(';');
	        for (var i = 0; i < cookieArray.length; i++) {
	            var cookie = cookieArray[i];
	            cookie = cookie.replace(/^\s+/, '');
	            if (cookie.indexOf(cookiePrefix) == 0) {
	                return cookie.substring(cookiePrefix.length, cookie.length);
	            }
	        }
	        return null;
	    };
	    Cookie.erase = function (name) {
	        Cookie.set(name, '', -1);
	    };
	    return Cookie;
	}());
	exports.Cookie = Cookie;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]
	
	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }
	
	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1])
	      }, this)
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }
	
	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)
	
	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }
	
	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }
	
	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }
	
	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	
	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var analytics = __webpack_require__(81);
	var objectassign_1 = __webpack_require__(88);
	var utils_1 = __webpack_require__(89);
	var SimpleAPI = (function () {
	    function SimpleAPI() {
	    }
	    SimpleAPI.prototype.init = function (token, endpoint) {
	        if (typeof token === 'undefined') {
	            throw new Error("You must pass your token when you call 'init'");
	        }
	        if (typeof token === 'string') {
	            endpoint = endpoint || analytics.Endpoints.default;
	            this.client = new analytics.Client({
	                token: token,
	                endpoint: endpoint
	            });
	        }
	        else if (typeof token === 'object' && typeof token.sendEvent !== 'undefined') {
	            this.client = token;
	        }
	        else {
	            throw new Error("You must pass either your token or a valid object when you call 'init'");
	        }
	    };
	    SimpleAPI.prototype.send = function (event, customData) {
	        if (typeof this.client == 'undefined') {
	            throw new Error("You must call init before sending an event");
	        }
	        customData = objectassign_1.default({}, {
	            hash: window.location.hash
	        }, customData);
	        switch (event) {
	            case 'pageview':
	                this.client.sendViewEvent({
	                    location: window.location.toString(),
	                    referrer: document.referrer,
	                    language: document.documentElement.lang,
	                    title: document.title,
	                    contentIdKey: utils_1.popFromObject(customData, 'contentIdKey'),
	                    contentIdValue: utils_1.popFromObject(customData, 'contentIdValue'),
	                    contentType: utils_1.popFromObject(customData, 'contentType'),
	                    customData: customData
	                });
	                return;
	            default:
	                throw new Error("Event type: '" + event + "' not implemented");
	        }
	    };
	    SimpleAPI.prototype.onLoad = function (callback) {
	        if (typeof callback == 'undefined') {
	            throw new Error("You must pass a function when you call 'onLoad'");
	        }
	        callback();
	    };
	    return SimpleAPI;
	}());
	exports.SimpleAPI = SimpleAPI;
	var simpleAPI = new SimpleAPI();
	exports.SimpleAnalytics = function (action) {
	    var params = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        params[_i - 1] = arguments[_i];
	    }
	    var actionFunction = simpleAPI[action];
	    if (actionFunction) {
	        return actionFunction.apply(simpleAPI, params);
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.SimpleAnalytics;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	"use strict";
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	var objectAssignPonyfill = function (target) {
	    var sources = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        sources[_i - 1] = arguments[_i];
	    }
	    if (target === undefined || target === null) {
	        throw new TypeError('Cannot convert undefined or null to object');
	    }
	    var output = Object(target);
	    sources.forEach(function (source) {
	        var from = Object(source);
	        for (var key in from) {
	            if (hasOwnProperty.call(from, key)) {
	                output[key] = from[key];
	            }
	        }
	        if (getOwnPropertySymbols) {
	            var symbols = getOwnPropertySymbols(from);
	            symbols.forEach(function (symbol) {
	                if (propIsEnumerable.call(from, symbol)) {
	                    output[symbol] = from[symbol];
	                }
	            });
	        }
	    });
	    return output;
	};
	exports.ponyfill = objectAssignPonyfill;
	exports.assign = typeof Object.assign === 'function' ? Object.assign : objectAssignPonyfill;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.assign;


/***/ }),
/* 89 */
/***/ (function(module, exports) {

	"use strict";
	function popFromObject(object, key) {
	    if (object) {
	        var value = object[key];
	        delete object[key];
	        return value;
	    }
	}
	exports.popFromObject = popFromObject;


/***/ }),
/* 90 */
/***/ (function(module, exports) {

	"use strict";
	exports.doNotTrack = [true, 'yes', '1'].indexOf(navigator.doNotTrack || navigator.msDoNotTrack || window.doNotTrack);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.doNotTrack;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path='../ui/Facet/Facet.ts' />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExpressionBuilder_1 = __webpack_require__(78);
	var Utils_1 = __webpack_require__(13);
	var FacetSearchParameters_1 = __webpack_require__(92);
	var Assert_1 = __webpack_require__(12);
	var FacetUtils_1 = __webpack_require__(93);
	var _ = __webpack_require__(14);
	var FacetQueryController = (function () {
	    function FacetQueryController(facet) {
	        this.facet = facet;
	    }
	    /**
	     * Reset the expression for the facet search, used when a new query is triggered
	     */
	    FacetQueryController.prototype.prepareForNewQuery = function () {
	        this.lastGroupByRequestIndex = undefined;
	        this.expressionToUseForFacetSearch = undefined;
	        this.constantExpressionToUseForFacetSearch = undefined;
	    };
	    /**
	     * Compute the filter expression that the facet need to output for the query
	     * @returns {string}
	     */
	    FacetQueryController.prototype.computeOurFilterExpression = function () {
	        var _this = this;
	        var builder = new ExpressionBuilder_1.ExpressionBuilder();
	        var selected = this.facet.values.getSelected();
	        if (selected.length > 0) {
	            if (this.facet.options.useAnd) {
	                _.each(selected, function (value) {
	                    builder.addFieldExpression(_this.facet.options.field, '==', [value.value]);
	                });
	            }
	            else {
	                builder.addFieldExpression(this.facet.options.field, '==', _.map(selected, function (value) { return value.value; }));
	            }
	        }
	        var excluded = this.facet.values.getExcluded();
	        if (excluded.length > 0) {
	            builder.addFieldNotEqualExpression(this.facet.options.field, _.map(excluded, function (value) { return value.value; }));
	        }
	        if (Utils_1.Utils.isNonEmptyString(this.facet.options.additionalFilter)) {
	            builder.add(this.facet.options.additionalFilter);
	        }
	        return builder.build();
	    };
	    /**
	     * Build the group by request for the facet, and insert it in the query builder
	     * @param queryBuilder
	     */
	    FacetQueryController.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {
	        Assert_1.Assert.exists(queryBuilder);
	        var allowedValues = this.createGroupByAllowedValues();
	        var groupByRequest = this.createBasicGroupByRequest(allowedValues);
	        var queryOverrideObject = this.createGroupByQueryOverride(queryBuilder);
	        if (!Utils_1.Utils.isNullOrUndefined(queryOverrideObject)) {
	            groupByRequest.queryOverride = queryOverrideObject.basic;
	            groupByRequest.advancedQueryOverride = queryOverrideObject.advanced;
	            groupByRequest.constantQueryOverride = queryOverrideObject.constant;
	            this.expressionToUseForFacetSearch = queryOverrideObject.withoutConstant;
	            this.basicExpressionToUseForFacetSearch = queryOverrideObject.basic;
	            this.advancedExpressionToUseForFacetSearch = queryOverrideObject.advanced;
	            this.constantExpressionToUseForFacetSearch = queryOverrideObject.constant;
	        }
	        else {
	            var parts = queryBuilder.computeCompleteExpressionParts();
	            this.expressionToUseForFacetSearch = parts.withoutConstant == null ? '@uri' : parts.withoutConstant;
	            this.basicExpressionToUseForFacetSearch = parts.basic == null ? '@uri' : parts.basic;
	            this.advancedExpressionToUseForFacetSearch = parts.advanced;
	            this.constantExpressionToUseForFacetSearch = parts.constant;
	        }
	        this.lastGroupByRequestIndex = queryBuilder.groupByRequests.length;
	        this.lastGroupByRequest = groupByRequest;
	        queryBuilder.groupByRequests.push(groupByRequest);
	    };
	    /**
	     * Search inside the facet, using a group by request
	     * @param params
	     * @param oldLength Optional params, used by the search method to call itself recursively to fetch all required values
	     * @returns {Promise|Promise<T>}
	     */
	    FacetQueryController.prototype.search = function (params, oldLength) {
	        var _this = this;
	        if (oldLength === void 0) { oldLength = params.nbResults; }
	        return new Promise(function (resolve, reject) {
	            var onResult = function (fieldValues) {
	                var newLength = fieldValues.length;
	                fieldValues = _this.checkForFacetSearchValuesToRemove(fieldValues, params.valueToSearch);
	                if (FacetUtils_1.FacetUtils.needAnotherFacetSearch(fieldValues.length, newLength, oldLength, 5)) {
	                    // This means that we removed enough values from the returned one that we need to perform a new search with more values requested.
	                    params.nbResults += 5;
	                    return _this.search(params, fieldValues.length);
	                }
	                else {
	                    resolve(fieldValues);
	                }
	            };
	            var searchPromise = _this.facet.getEndpoint().search(params.getQuery());
	            _this.currentSearchPromise = searchPromise;
	            searchPromise.then(function (queryResults) {
	                if (_this.currentSearchPromise == searchPromise) {
	                    // params.getQuery() will generate a query for all excluded values + some new values
	                    // there is no clean way to do a group by and remove some values
	                    // so instead we request more values than we need, and crop all the one we don't want
	                    var valuesCropped_1 = [];
	                    if (queryResults.groupByResults && queryResults.groupByResults[0]) {
	                        _.each(queryResults.groupByResults[0].values, function (v) {
	                            if (v.lookupValue) {
	                                if (!_.contains(params.alwaysExclude, v.lookupValue.toLowerCase())) {
	                                    valuesCropped_1.push(v);
	                                }
	                            }
	                            else {
	                                if (!_.contains(params.alwaysExclude, v.value.toLowerCase())) {
	                                    valuesCropped_1.push(v);
	                                }
	                            }
	                        });
	                    }
	                    onResult(_.first(valuesCropped_1, params.nbResults));
	                }
	                else {
	                    reject();
	                }
	            })
	                .catch(function (error) {
	                reject(error);
	            });
	        });
	    };
	    FacetQueryController.prototype.fetchMore = function (numberOfValuesToFetch) {
	        var params = new FacetSearchParameters_1.FacetSearchParameters(this.facet);
	        params.alwaysInclude = this.facet.options.allowedValues || _.pluck(this.facet.values.getAll(), 'value');
	        params.nbResults = numberOfValuesToFetch;
	        return this.facet.getEndpoint().search(params.getQuery());
	    };
	    FacetQueryController.prototype.searchInFacetToUpdateDelta = function (facetValues) {
	        var params = new FacetSearchParameters_1.FacetSearchParameters(this.facet);
	        var query = params.getQuery();
	        query.aq = this.computeOurFilterExpression();
	        _.each(facetValues, function (facetValue) {
	            facetValue.waitingForDelta = true;
	        });
	        query.groupBy = [this.createBasicGroupByRequest(_.map(facetValues, function (facetValue) { return facetValue.value; }))];
	        query.groupBy[0].completeFacetWithStandardValues = false;
	        return this.facet.getEndpoint().search(query);
	    };
	    FacetQueryController.prototype.createGroupByAllowedValues = function () {
	        // if you want to keep displayed values next time, take all current values as allowed values
	        // otherwise take only the selected value
	        if (this.facet.options.allowedValues != undefined) {
	            return this.facet.options.allowedValues;
	        }
	        else if (this.facet.options.customSort != undefined) {
	            // If there is a custom sort, we still need to add selectedValues to the group by
	            // Filter out duplicates with a lower case comparison on the value
	            return this.getUnionWithCustomSortLowercase(this.facet.options.customSort, this.getAllowedValuesFromSelected());
	        }
	        else {
	            return _.map(this.getAllowedValuesFromSelected(), function (facetValue) { return facetValue.value; });
	        }
	    };
	    FacetQueryController.prototype.getUnionWithCustomSortLowercase = function (customSort, facetValues) {
	        // This will take the custom sort, compare it against the passed in facetValues
	        // The comparison is lowercase.
	        // The union of the 2 arrays with duplicated filtered out is returned.
	        var toCompare = _.map(customSort, function (val) {
	            return val.toLowerCase();
	        });
	        var filtered = _.chain(facetValues)
	            .filter(function (facetValue) {
	            return !_.contains(toCompare, facetValue.value.toLowerCase());
	        })
	            .map(function (facetValue) {
	            return facetValue.value;
	        })
	            .value();
	        return _.compact(customSort.concat(filtered));
	    };
	    FacetQueryController.prototype.getAllowedValuesFromSelected = function () {
	        var facetValues = [];
	        if (this.facet.options.useAnd || !this.facet.keepDisplayedValuesNextTime) {
	            var selected = this.facet.values.getSelected();
	            if (selected.length == 0) {
	                return undefined;
	            }
	            facetValues = this.facet.values.getSelected();
	        }
	        else {
	            facetValues = this.facet.values.getAll();
	        }
	        return facetValues;
	    };
	    FacetQueryController.prototype.createGroupByQueryOverride = function (queryBuilder) {
	        var additionalFilter = this.facet.options.additionalFilter ? this.facet.options.additionalFilter : '';
	        var queryOverrideObject = undefined;
	        if (this.facet.options.useAnd) {
	            if (Utils_1.Utils.isNonEmptyString(additionalFilter)) {
	                queryOverrideObject = queryBuilder.computeCompleteExpressionParts();
	                if (Utils_1.Utils.isEmptyString(queryOverrideObject.basic)) {
	                    queryOverrideObject.basic = '@uri';
	                }
	            }
	        }
	        else {
	            if (this.facet.values.hasSelectedOrExcludedValues()) {
	                queryOverrideObject = queryBuilder.computeCompleteExpressionPartsExcept(this.computeOurFilterExpression());
	                if (Utils_1.Utils.isEmptyString(queryOverrideObject.basic)) {
	                    queryOverrideObject.basic = '@uri';
	                }
	            }
	            else {
	                if (Utils_1.Utils.isNonEmptyString(additionalFilter)) {
	                    queryOverrideObject = queryBuilder.computeCompleteExpressionParts();
	                    if (Utils_1.Utils.isEmptyString(queryOverrideObject.basic)) {
	                        queryOverrideObject.basic = '@uri';
	                    }
	                }
	            }
	        }
	        if (queryOverrideObject) {
	            if (Utils_1.Utils.isNonEmptyString(additionalFilter)) {
	                queryOverrideObject.constant = queryOverrideObject.constant ? queryOverrideObject.constant + ' ' + additionalFilter : additionalFilter;
	            }
	        }
	        _.each(_.keys(queryOverrideObject), function (k) {
	            if (Utils_1.Utils.isEmptyString(queryOverrideObject[k]) || Utils_1.Utils.isNullOrUndefined(queryOverrideObject[k])) {
	                delete queryOverrideObject[k];
	            }
	        });
	        if (_.keys(queryOverrideObject).length == 0) {
	            queryOverrideObject = undefined;
	        }
	        return queryOverrideObject;
	    };
	    FacetQueryController.prototype.createBasicGroupByRequest = function (allowedValues, addComputedField) {
	        if (addComputedField === void 0) { addComputedField = true; }
	        var nbOfRequestedValues = this.facet.numberOfValues;
	        if (this.facet.options.customSort != null) {
	            // If we have a custom sort, we need to make sure that we always request at least enough values to always receive them
	            var usedValues = this.getUnionWithCustomSortLowercase(this.facet.options.customSort, this.facet.values.getSelected().concat(this.facet.values.getExcluded()));
	            nbOfRequestedValues = Math.max(nbOfRequestedValues, usedValues.length);
	        }
	        var groupByRequest = {
	            field: this.facet.options.field,
	            maximumNumberOfValues: nbOfRequestedValues + (this.facet.options.enableMoreLess ? 1 : 0),
	            sortCriteria: this.facet.options.sortCriteria,
	            injectionDepth: this.facet.options.injectionDepth,
	            completeFacetWithStandardValues: this.facet.options.allowedValues == undefined ? true : false
	        };
	        if (this.facet.options.lookupField) {
	            groupByRequest.lookupField = this.facet.options.lookupField;
	        }
	        if (allowedValues != null) {
	            groupByRequest.allowedValues = allowedValues;
	        }
	        if (addComputedField && Utils_1.Utils.isNonEmptyString(this.facet.options.computedField)) {
	            groupByRequest.computedFields = [{
	                    field: this.facet.options.computedField,
	                    operation: this.facet.options.computedFieldOperation
	                }];
	        }
	        return groupByRequest;
	    };
	    FacetQueryController.prototype.checkForFacetSearchValuesToRemove = function (fieldValues, valueToCheckAgainst) {
	        var _this = this;
	        var regex = FacetUtils_1.FacetUtils.getRegexToUseForFacetSearch(valueToCheckAgainst, this.facet.options.facetSearchIgnoreAccents);
	        return _.filter(fieldValues, function (fieldValue) {
	            var isAllowed = _.isEmpty(_this.facet.options.allowedValues) ||
	                _.contains(_this.facet.options.allowedValues, fieldValue.value);
	            var value = _this.facet.getValueCaption(fieldValue);
	            return isAllowed && regex.test(value);
	        });
	    };
	    return FacetQueryController;
	}());
	exports.FacetQueryController = FacetQueryController;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var FacetUtils_1 = __webpack_require__(93);
	var QueryBuilder_1 = __webpack_require__(77);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	var FacetSearchParameters = (function () {
	    function FacetSearchParameters(facet) {
	        this.facet = facet;
	        this.valueToSearch = '';
	        this.alwaysInclude = [];
	        this.alwaysExclude = [];
	        this.sortCriteria = 'occurrences';
	        this.fetchMore = false;
	        this.nbResults = facet.options.numberOfValuesInFacetSearch;
	        this.ignoreAccents = facet.options.facetSearchIgnoreAccents;
	        this.searchEvenIfEmpty = facet.searchInterface.isNewDesign();
	    }
	    FacetSearchParameters.prototype.setValueToSearch = function (value) {
	        this.valueToSearch = value;
	        if (Utils_1.Utils.isNonEmptyString(value)) {
	            this.valueToSearch = this.valueToSearch.trim();
	            this.alwaysInclude = this.alwaysInclude.concat(FacetUtils_1.FacetUtils.getValuesToUseForSearchInFacet(this.valueToSearch, this.facet));
	        }
	        return this;
	    };
	    FacetSearchParameters.prototype.excludeCurrentlyDisplayedValuesInSearch = function (searchResults) {
	        var _this = this;
	        _.each(this.getCurrentlyShowedValueInSearch(searchResults), function (v) {
	            var expandedValues = FacetUtils_1.FacetUtils.getValuesToUseForSearchInFacet(v, _this.facet);
	            _.each(expandedValues, function (expanded) {
	                _this.alwaysExclude.push(expanded);
	            });
	        });
	        _.each(this.facet.getDisplayedFacetValues(), function (v) {
	            var expandedValues = FacetUtils_1.FacetUtils.getValuesToUseForSearchInFacet(v.value, _this.facet);
	            _.each(expandedValues, function (expanded) {
	                _this.alwaysExclude.push(expanded);
	            });
	        });
	    };
	    FacetSearchParameters.prototype.getGroupByRequest = function () {
	        this.lowerCaseAll();
	        var nbResults = this.nbResults;
	        if (this.facet.searchInterface.isNewDesign()) {
	            nbResults += this.alwaysExclude.length;
	        }
	        var typedByUser = [];
	        if (this.valueToSearch) {
	            typedByUser = ['*' + this.valueToSearch + '*'];
	        }
	        var request = {
	            allowedValues: typedByUser.concat(this.alwaysInclude).concat(this.alwaysExclude),
	            maximumNumberOfValues: nbResults,
	            completeFacetWithStandardValues: this.facet.options.lookupField ? false : true,
	            field: this.facet.options.field,
	            sortCriteria: this.facet.options.sortCriteria || this.sortCriteria,
	            injectionDepth: this.facet.options.injectionDepth,
	        };
	        if (this.facet.options.lookupField) {
	            request.lookupField = this.facet.options.lookupField;
	        }
	        if (this.facet.options.computedField) {
	            request.computedFields = [{
	                    field: this.facet.options.computedField,
	                    operation: this.facet.options.computedFieldOperation
	                }];
	        }
	        return request;
	    };
	    FacetSearchParameters.prototype.getQuery = function () {
	        var lastQuery = _.clone(this.facet.queryController.getLastQuery());
	        if (!lastQuery) {
	            // There should normally always be a last query available
	            // If not, just create an empty one.
	            lastQuery = new QueryBuilder_1.QueryBuilder().build();
	        }
	        lastQuery.q = this.facet.facetQueryController.basicExpressionToUseForFacetSearch;
	        lastQuery.cq = this.facet.facetQueryController.constantExpressionToUseForFacetSearch;
	        lastQuery.aq = this.facet.facetQueryController.advancedExpressionToUseForFacetSearch;
	        lastQuery.enableDidYouMean = false;
	        lastQuery.firstResult = 0;
	        lastQuery.numberOfResults = 0;
	        lastQuery.fieldsToInclude = [];
	        lastQuery.groupBy = [this.getGroupByRequest()];
	        return lastQuery;
	    };
	    FacetSearchParameters.prototype.getCurrentlyShowedValueInSearch = function (searchResults) {
	        return _.map(Dom_1.$$(searchResults).findAll('.coveo-facet-value-caption'), function (val) {
	            return Dom_1.$$(val).text();
	        });
	    };
	    FacetSearchParameters.prototype.lowerCaseAll = function () {
	        this.alwaysExclude = _.chain(this.alwaysExclude)
	            .map(function (v) {
	            return v.toLowerCase();
	        })
	            .uniq()
	            .value();
	        this.alwaysInclude = _.chain(this.alwaysInclude)
	            .map(function (v) {
	            return v.toLowerCase();
	        })
	            .uniq()
	            .value();
	    };
	    return FacetSearchParameters;
	}());
	exports.FacetSearchParameters = FacetSearchParameters;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var StringUtils_1 = __webpack_require__(62);
	var QueryUtils_1 = __webpack_require__(21);
	var FileTypes_1 = __webpack_require__(61);
	var DateUtils_1 = __webpack_require__(58);
	var Utils_1 = __webpack_require__(13);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	var FacetUtils = (function () {
	    function FacetUtils() {
	    }
	    FacetUtils.getRegexToUseForFacetSearch = function (value, ignoreAccent) {
	        return new RegExp(StringUtils_1.StringUtils.stringToRegex(value, ignoreAccent), 'i');
	    };
	    FacetUtils.getValuesToUseForSearchInFacet = function (original, facet) {
	        var ret = [original];
	        var regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);
	        if (facet.options.valueCaption) {
	            _.chain(facet.options.valueCaption)
	                .pairs()
	                .filter(function (pair) {
	                return regex.test(pair[1]);
	            })
	                .each(function (match) {
	                ret.push(match[0]);
	            });
	            if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') || QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {
	                _.each(FileTypes_1.FileTypes.getFileTypeCaptions(), function (value, key) {
	                    if (!(key in facet.options.valueCaption) && regex.test(value)) {
	                        ret.push(key);
	                    }
	                });
	            }
	        }
	        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') || QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {
	            _.each(_.filter(_.pairs(FileTypes_1.FileTypes.getFileTypeCaptions()), function (pair) {
	                return regex.test(pair[1]);
	            }), function (match) {
	                ret.push(match[0]);
	            });
	        }
	        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@month')) {
	            _.each(_.range(1, 13), function (month) {
	                if (regex.test(DateUtils_1.DateUtils.monthToString(month - 1))) {
	                    ret.push(('0' + month.toString()).substr(-2));
	                }
	            });
	        }
	        return ret;
	    };
	    FacetUtils.buildFacetSearchPattern = function (values) {
	        values = _.map(values, function (value) {
	            return Utils_1.Utils.escapeRegexCharacter(value);
	        });
	        values[0] = '.*' + values[0] + '.*';
	        return values.join('|');
	    };
	    FacetUtils.needAnotherFacetSearch = function (currentSearchLength, newSearchLength, oldSearchLength, desiredSearchLength) {
	        // Something was removed (currentSearch < newSearch)
	        // && we might want to display more facet search result(currentSearch < desiredSearch)
	        // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)
	        return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;
	    };
	    FacetUtils.addNoStateCssClassToFacetValues = function (facet, container) {
	        // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet
	        if (facet.values.getSelected().length != 0) {
	            var noStates = Dom_1.$$(container).findAll('li:not(.coveo-selected)');
	            _.each(noStates, function (noState) {
	                Dom_1.$$(noState).addClass('coveo-no-state');
	            });
	        }
	    };
	    FacetUtils.tryToGetTranslatedCaption = function (field, value) {
	        var found;
	        if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {
	            found = FileTypes_1.FileTypes.getFileType(value.toLowerCase()).caption;
	        }
	        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {
	            try {
	                var month = parseInt(value);
	                found = DateUtils_1.DateUtils.monthToString(month - 1);
	            }
	            catch (ex) {
	                // Do nothing
	            }
	        }
	        return found != undefined && Utils_1.Utils.isNonEmptyString(found) ? found : value;
	    };
	    FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer = function (facet, forceClip) {
	        // in new design, we don't need this : use flexbox instead (sorry IE user)
	        if (facet.getBindings && facet.getBindings().searchInterface && facet.getBindings().searchInterface.isNewDesign()) {
	            return;
	        }
	        if (!(Coveo.HierarchicalFacet && facet instanceof Coveo.HierarchicalFacet) || forceClip) {
	            facet.logger.trace('Clipping captions');
	            // force facet to show to calculate width
	            Dom_1.$$(facet.element).show();
	            var element = facet.element;
	            var captions = Dom_1.$$(element).findAll('.coveo-facet-value-caption');
	            for (var i = 0; i < captions.length; i++) {
	                if (captions[i].style.width != '') {
	                    captions[i].style.width = '';
	                }
	            }
	            var labels = Dom_1.$$(element).findAll('.coveo-facet-value-label-wrapper');
	            var labelsMaxWidth = [];
	            for (var i = 0; i < labels.length; i++) {
	                var label = labels[i];
	                var caption = Dom_1.$$(label).find('.coveo-facet-value-caption');
	                var labelWidth = label.scrollWidth;
	                var labelVisibleWidth = label.clientWidth;
	                var captionWidth = caption.scrollWidth;
	                var crop = Math.max(0, labelWidth - labelVisibleWidth);
	                if (crop) {
	                    labelsMaxWidth.push({
	                        element: caption,
	                        width: captionWidth,
	                        crop: crop,
	                        label: label
	                    });
	                }
	            }
	            // remove the specific css class
	            element.style.display = '';
	            for (var i = 0; i < labelsMaxWidth.length; i++) {
	                var labelMaxWidth = labelsMaxWidth[i];
	                labelMaxWidth.element.style.width = labelMaxWidth.width - labelMaxWidth.crop + 'px';
	                if (labelMaxWidth.crop > 0) {
	                    labelMaxWidth.label.setAttribute('title', Dom_1.$$(labelMaxWidth.element).text());
	                }
	                else {
	                    labelMaxWidth.label.setAttribute('title', null);
	                }
	            }
	        }
	    };
	    return FacetUtils;
	}());
	exports.FacetUtils = FacetUtils;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="../ui/FacetRange/FacetRange.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var FacetQueryController_1 = __webpack_require__(91);
	var Utils_1 = __webpack_require__(13);
	var FacetRangeQueryController = (function (_super) {
	    __extends(FacetRangeQueryController, _super);
	    function FacetRangeQueryController(facet) {
	        var _this = _super.call(this, facet) || this;
	        _this.facet = facet;
	        return _this;
	    }
	    FacetRangeQueryController.prototype.createBasicGroupByRequest = function (allowedValues, addComputedField) {
	        if (addComputedField === void 0) { addComputedField = true; }
	        var groupByQuery = _super.prototype.createBasicGroupByRequest.call(this, null, addComputedField);
	        groupByQuery.allowedValues = undefined;
	        if (Utils_1.Utils.isNonEmptyArray(this.facet.options.ranges)) {
	            groupByQuery = this.buildGroupByQueryForPredefinedRanges(groupByQuery);
	        }
	        else {
	            groupByQuery = this.buildGroupByQueryForAutomaticRanges(groupByQuery);
	        }
	        return groupByQuery;
	    };
	    FacetRangeQueryController.prototype.createGroupByAllowedValues = function () {
	        return undefined;
	    };
	    FacetRangeQueryController.prototype.buildGroupByQueryForAutomaticRanges = function (groupByQuery) {
	        groupByQuery.generateAutomaticRanges = true;
	        return groupByQuery;
	    };
	    FacetRangeQueryController.prototype.buildGroupByQueryForPredefinedRanges = function (groupByQuery) {
	        groupByQuery.rangeValues = this.facet.options.ranges;
	        groupByQuery.maximumNumberOfValues = this.facet.options.ranges.length;
	        return groupByQuery;
	    };
	    return FacetRangeQueryController;
	}(FacetQueryController_1.FacetQueryController));
	exports.FacetRangeQueryController = FacetRangeQueryController;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="../ui/FacetSlider/FacetSlider.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var QueryEvents_1 = __webpack_require__(48);
	var ExpressionBuilder_1 = __webpack_require__(78);
	var DateUtils_1 = __webpack_require__(58);
	var Logger_1 = __webpack_require__(11);
	var QueryUtils_1 = __webpack_require__(21);
	var _ = __webpack_require__(14);
	var FacetSliderQueryController = (function () {
	    function FacetSliderQueryController(facet) {
	        var _this = this;
	        this.facet = facet;
	        this.facet.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function (args) { return _this.handleQuerySuccess(args); });
	    }
	    FacetSliderQueryController.prototype.prepareForNewQuery = function () {
	        this.lastGroupByRequestIndex = undefined;
	    };
	    FacetSliderQueryController.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {
	        if (this.facet.options.graph) {
	            this.putGroupByForGraphIntoQueryBuilder(queryBuilder);
	        }
	        this.putGroupByForSliderIntoQueryBuilder(queryBuilder);
	    };
	    FacetSliderQueryController.prototype.createBasicGroupByRequest = function () {
	        var groupByQuery = {
	            field: this.facet.options.field,
	            completeFacetWithStandardValues: true,
	            allowedValues: undefined
	        };
	        return groupByQuery;
	    };
	    FacetSliderQueryController.prototype.computeOurFilterExpression = function (boundary) {
	        if (boundary === void 0) { boundary = [this.facet.startOfSlider, this.facet.endOfSlider]; }
	        var builder = new ExpressionBuilder_1.ExpressionBuilder();
	        if (boundary[0] != undefined && boundary[1] != undefined) {
	            if (this.facet.options.excludeOuterBounds) {
	                this.addFilterExpressionWithOuterBoundsExcluded(boundary[0], boundary[1], builder);
	            }
	            else {
	                this.addFilterExpressionWithOuterBoundsIncluded(boundary[0], boundary[1], builder);
	            }
	        }
	        return builder.build();
	    };
	    FacetSliderQueryController.prototype.handleQuerySuccess = function (args) {
	        var _this = this;
	        if (!this.isAValidRangeResponse(args)) {
	            var logger = new Logger_1.Logger(this);
	            logger.error("Cannot instantiate FacetSlider for this field : " + this.facet.options.field + ". It needs to be configured as a numerical field in the index");
	            logger.error("Disabling the FacetSlider", this.facet);
	            this.facet.disable();
	            return;
	        }
	        if (this.facet.options && this.facet.options.graph && this.rangeValuesForGraphToUse == undefined) {
	            this.rangeValuesForGraphToUse = [];
	            var rawValues = args.results.groupByResults[this.graphGroupByQueriesIndex].values;
	            _.each(rawValues, function (rawValue) {
	                var rawSplit = rawValue.value.split('..');
	                _this.rangeValuesForGraphToUse.push({
	                    start: _this.facet.options.dateField ? _this.getISOFormat(rawSplit[0].replace('@', ' ')) : parseInt(rawSplit[0], 10),
	                    end: _this.facet.options.dateField ? _this.getISOFormat(rawSplit[1].replace('@', ' ')) : parseInt(rawSplit[1], 10)
	                });
	            });
	        }
	    };
	    FacetSliderQueryController.prototype.isAValidRangeResponse = function (args) {
	        if (this.lastGroupByRequestIndex != undefined && args.results.groupByResults[this.lastGroupByRequestIndex]) {
	            var firstValue = args.results.groupByResults[this.lastGroupByRequestIndex].values[0];
	            if (firstValue && !QueryUtils_1.QueryUtils.isRangeString(firstValue.value)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    FacetSliderQueryController.prototype.addFilterExpressionWithOuterBoundsIncluded = function (start, end, builder) {
	        if (start != this.facet.options.start || end != this.facet.options.end) {
	            if (this.facet.options.dateField) {
	                start = this.getFilterDateFormat(start);
	                end = this.getFilterDateFormat(end);
	            }
	            builder.addFieldExpression(this.facet.options.field, '==', [start + '..' + end]);
	        }
	    };
	    FacetSliderQueryController.prototype.addFilterExpressionWithOuterBoundsExcluded = function (start, end, builder) {
	        var startCompare = this.facet.options.start;
	        var endCompare = this.facet.options.end;
	        var startCompared = start;
	        var endCompared = end;
	        if (this.facet.options.dateField) {
	            startCompared = this.getFilterDateFormat(start);
	            endCompared = this.getFilterDateFormat(end);
	            startCompare = this.getFilterDateFormat(startCompare);
	            endCompare = this.getFilterDateFormat(endCompare);
	        }
	        else {
	            startCompared += '';
	            endCompared += '';
	            startCompare += '';
	            endCompare += '';
	        }
	        if (startCompared != startCompare && endCompared == endCompare) {
	            builder.addFieldExpression(this.facet.options.field, '>=', [startCompared]);
	        }
	        else if (startCompared == startCompare && endCompared != endCompare) {
	            builder.addFieldExpression(this.facet.options.field, '<=', [endCompared]);
	        }
	        else {
	            this.addFilterExpressionWithOuterBoundsIncluded(start, end, builder);
	        }
	    };
	    FacetSliderQueryController.prototype.putGroupByForGraphIntoQueryBuilder = function (queryBuilder) {
	        this.graphGroupByQueriesIndex = queryBuilder.groupByRequests.length;
	        var basicGroupByRequestForGraph = this.createBasicGroupByRequest();
	        if (this.facet.isSimpleSliderConfig()) {
	            basicGroupByRequestForGraph.rangeValues = this.createRangeValuesForGraphUsingStartAndEnd();
	            basicGroupByRequestForGraph.generateAutomaticRanges = false;
	        }
	        else {
	            basicGroupByRequestForGraph.generateAutomaticRanges = true;
	        }
	        var filter = this.computeOurFilterExpression(this.facet.getSliderBoundaryForQuery());
	        if (filter != undefined) {
	            var queryOverrideObject = queryBuilder.computeCompleteExpressionPartsExcept(filter);
	            basicGroupByRequestForGraph.queryOverride = queryOverrideObject.basic;
	            basicGroupByRequestForGraph.advancedQueryOverride = queryOverrideObject.advanced;
	            basicGroupByRequestForGraph.constantQueryOverride = queryOverrideObject.constant;
	            if (basicGroupByRequestForGraph.queryOverride == undefined) {
	                basicGroupByRequestForGraph.queryOverride = this.facet.options.queryOverride || '@uri';
	            }
	            else {
	                basicGroupByRequestForGraph.queryOverride += (this.facet.options.queryOverride ? ' ' + this.facet.options.queryOverride : '');
	            }
	        }
	        else if (this.facet.options.queryOverride != null) {
	            var completeExpression = queryBuilder.computeCompleteExpression();
	            basicGroupByRequestForGraph.queryOverride = (completeExpression != null ? completeExpression + ' ' : '') + this.facet.options.queryOverride;
	        }
	        basicGroupByRequestForGraph.sortCriteria = 'nosort';
	        basicGroupByRequestForGraph.maximumNumberOfValues = this.facet.options.graph.steps;
	        queryBuilder.groupByRequests.push(basicGroupByRequestForGraph);
	    };
	    FacetSliderQueryController.prototype.putGroupByForSliderIntoQueryBuilder = function (queryBuilder) {
	        this.lastGroupByRequestIndex = queryBuilder.groupByRequests.length;
	        var maximumNumberOfValues = 1;
	        if (this.facet.hasAGraph()) {
	            maximumNumberOfValues = this.facet.options.graph.steps;
	        }
	        var rangeValues = undefined;
	        if (this.facet.isSimpleSliderConfig()) {
	            rangeValues = [{
	                    start: this.facet.options.start,
	                    end: this.facet.options.end,
	                    label: 'slider',
	                    endInclusive: false
	                }];
	        }
	        var basicGroupByRequestForSlider = this.createBasicGroupByRequest();
	        basicGroupByRequestForSlider.maximumNumberOfValues = maximumNumberOfValues;
	        basicGroupByRequestForSlider.queryOverride = this.facet.options.queryOverride || '@uri';
	        basicGroupByRequestForSlider.sortCriteria = 'nosort';
	        basicGroupByRequestForSlider.generateAutomaticRanges = !this.facet.isSimpleSliderConfig();
	        basicGroupByRequestForSlider.rangeValues = rangeValues;
	        queryBuilder.groupByRequests.push(basicGroupByRequestForSlider);
	    };
	    FacetSliderQueryController.prototype.createRangeValuesForGraphUsingStartAndEnd = function () {
	        var start = this.facet.options.start;
	        var end = this.facet.options.end;
	        if (this.facet.options.dateField) {
	            start = this.getISOFormat(start);
	            end = this.getISOFormat(end);
	        }
	        var oneRange = {
	            start: start,
	            end: end,
	            endInclusive: true,
	            label: 'Slider'
	        };
	        if (this.facet.options.graph.steps == undefined) {
	            this.facet.options.graph.steps = 10;
	        }
	        if (this.facet.options.dateField && isNaN(this.facet.options.start)) {
	            this.facet.options.start = new Date(this.facet.options.start).getTime();
	        }
	        if (this.facet.options.dateField && isNaN(this.facet.options.end)) {
	            this.facet.options.end = new Date(this.facet.options.end).getTime();
	        }
	        if (this.rangeValuesForGraphToUse != undefined) {
	            return this.usePrebuiltRange(oneRange);
	        }
	        else {
	            return this.buildRange(oneRange);
	        }
	    };
	    FacetSliderQueryController.prototype.usePrebuiltRange = function (basicRangeRequest) {
	        return _.map(this.rangeValuesForGraphToUse, function (value) {
	            return {
	                start: value.start,
	                end: value.end,
	                endInclusive: basicRangeRequest.endInclusive,
	                label: basicRangeRequest.label
	            };
	        });
	    };
	    FacetSliderQueryController.prototype.buildRange = function (basicRangeRequest) {
	        var _this = this;
	        var start = this.facet.options.start;
	        var oneStep = (this.facet.options.end - this.facet.options.start) / this.facet.options.graph.steps;
	        return _.map(_.range(0, this.facet.options.graph.steps, 1), function (step) {
	            var newStart = start + (step * oneStep);
	            var newEnd = start + ((step + 1) * oneStep);
	            if (_this.facet.options.dateField) {
	                newStart = _this.getISOFormat(newStart);
	                newEnd = _this.getISOFormat(newEnd);
	            }
	            return {
	                endInclusive: basicRangeRequest.endInclusive,
	                label: basicRangeRequest.label,
	                start: newStart,
	                end: newEnd
	            };
	        });
	    };
	    FacetSliderQueryController.prototype.getISOFormat = function (value) {
	        if (value) {
	            if (!isNaN(value)) {
	                value = Number(value);
	            }
	            var date = new Date(value);
	            if (!DateUtils_1.DateUtils.isValid(date)) {
	                date = new Date(this.getBrowserCompatibleFormat(value));
	                if (!DateUtils_1.DateUtils.isValid(date)) {
	                    // If we get here, we'll probably get an error further down the line when querying the index anyway ...
	                    this.facet.logger.error('Cannot parse this date format.', value, new Date(value));
	                    return undefined;
	                }
	            }
	            return date.toISOString();
	        }
	        else {
	            return undefined;
	        }
	    };
	    FacetSliderQueryController.prototype.getFilterDateFormat = function (rawValue) {
	        if (rawValue) {
	            return this.getISOFormat(rawValue).replace('T', '@').replace('.000Z', '').replace(/-/g, '/');
	        }
	        else {
	            return undefined;
	        }
	    };
	    FacetSliderQueryController.prototype.getBrowserCompatibleFormat = function (value) {
	        return value.replace('@', 'T').replace(/\//g, '-');
	    };
	    return FacetSliderQueryController;
	}());
	exports.FacetSliderQueryController = FacetSliderQueryController;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="../ui/HierarchicalFacet/HierarchicalFacet.ts" />
	/// <reference path="./FacetQueryController.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var FacetQueryController_1 = __webpack_require__(91);
	var FacetUtils_1 = __webpack_require__(93);
	var _ = __webpack_require__(14);
	var HierarchicalFacetQueryController = (function (_super) {
	    __extends(HierarchicalFacetQueryController, _super);
	    function HierarchicalFacetQueryController(facet) {
	        var _this = _super.call(this, facet) || this;
	        _this.facet = facet;
	        return _this;
	    }
	    HierarchicalFacetQueryController.prototype.search = function (params, oldLength) {
	        var _this = this;
	        if (oldLength === void 0) { oldLength = params.nbResults; }
	        // Do a client side search, since HierarchicalFacet should normally have all value client side
	        var regex = FacetUtils_1.FacetUtils.getRegexToUseForFacetSearch(this.facet.facetSearch.getValueInInputForFacetSearch(), this.facet.options.facetSearchIgnoreAccents);
	        return new Promise(function (resolve) {
	            var match = _.chain(_this.facet.getAllValueHierarchy())
	                .toArray()
	                .filter(function (v) {
	                return _this.facet.getValueCaption(v.facetValue).match(regex) != null;
	            })
	                .first(_this.facet.options.numberOfValuesInFacetSearch)
	                .value();
	            resolve(_.map(match, function (v) {
	                return v.facetValue;
	            }));
	        });
	    };
	    HierarchicalFacetQueryController.prototype.getAllowedValuesFromSelected = function () {
	        return [];
	    };
	    return HierarchicalFacetQueryController;
	}(FacetQueryController_1.FacetQueryController));
	exports.HierarchicalFacetQueryController = HierarchicalFacetQueryController;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Model_1 = __webpack_require__(98);
	var InitializationEvents_1 = __webpack_require__(45);
	var Dom_1 = __webpack_require__(59);
	var HashUtils_1 = __webpack_require__(65);
	var Defer_1 = __webpack_require__(32);
	var RootComponent_1 = __webpack_require__(75);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	/**
	 * This component is instantiated automatically by the framework on the root if the {@link SearchInterface}.<br/>
	 * When the {@link SearchInterface.options.enableHistory} option is set to true, this component is instantiated.<br/>
	 * It's only job is to apply changes in the {@link QueryStateModel} to the hash in the URL, and vice versa.<br/>
	 * This component does *not* hold the state of the interface, it only represent it in the URL.
	 */
	var HistoryController = (function (_super) {
	    __extends(HistoryController, _super);
	    /**
	     * Create a new history controller
	     * @param element
	     * @param windoh For mock / test purposes.
	     * @param model
	     * @param queryController
	     * @param hashUtilsModule For mock / test purposes.
	     */
	    function HistoryController(element, windoh, model, queryController, hashUtils) {
	        if (hashUtils === void 0) { hashUtils = HashUtils_1.HashUtils; }
	        var _this = _super.call(this, element, HistoryController.ID) || this;
	        _this.windoh = windoh;
	        _this.model = model;
	        _this.queryController = queryController;
	        _this.hashUtils = hashUtils;
	        _this.ignoreNextHashChange = false;
	        _this.initialHashChange = false;
	        _this.willUpdateHash = false;
	        _this.windoh = _this.windoh || window;
	        Assert_1.Assert.exists(_this.model);
	        Assert_1.Assert.exists(_this.queryController);
	        Dom_1.$$(_this.element).on(InitializationEvents_1.InitializationEvents.restoreHistoryState, function () {
	            _this.logger.trace('Restore history state. Update model');
	            _this.updateModelFromHash();
	        });
	        Dom_1.$$(_this.element).on(_this.model.getEventName(Model_1.Model.eventTypes.all), function () {
	            _this.logger.trace('Query model changed. Update hash');
	            _this.updateHashFromModel();
	        });
	        _this.hashchange = function () {
	            _this.handleHashChange();
	        };
	        _this.windoh.addEventListener('hashchange', _this.hashchange);
	        Dom_1.$$(_this.element).on(InitializationEvents_1.InitializationEvents.nuke, function () { return _this.handleNuke(); });
	        return _this;
	    }
	    /**
	     * Set the given map of key value in the hash of the URL
	     * @param values
	     */
	    HistoryController.prototype.setHashValues = function (values) {
	        this.logger.trace('Update history hash');
	        var hash = '#' + this.hashUtils.encodeValues(values);
	        this.ignoreNextHashChange = this.windoh.location.hash != hash;
	        this.logger.trace('ignoreNextHashChange', this.ignoreNextHashChange);
	        this.logger.trace('initialHashChange', this.initialHashChange);
	        this.logger.trace('from', this.windoh.location.hash, 'to', hash);
	        if (this.initialHashChange) {
	            this.initialHashChange = false;
	            this.windoh.location.replace(hash);
	            this.logger.trace('History hash modified', hash);
	        }
	        else if (this.ignoreNextHashChange) {
	            this.windoh.location.hash = hash;
	            this.logger.trace('History hash created', hash);
	        }
	    };
	    HistoryController.prototype.handleNuke = function () {
	        this.windoh.removeEventListener('hashchange', this.hashchange);
	    };
	    HistoryController.prototype.handleHashChange = function () {
	        this.logger.trace('History hash changed');
	        if (this.ignoreNextHashChange) {
	            this.logger.trace('History hash change ignored');
	            this.ignoreNextHashChange = false;
	            return;
	        }
	        var diff = this.updateModelFromHash();
	        if (_.difference(diff, HistoryController.attributesThatDoNotTriggerQuery).length > 0) {
	            this.queryController.executeQuery();
	        }
	    };
	    HistoryController.prototype.updateHashFromModel = function () {
	        var _this = this;
	        this.logger.trace('Model -> history hash');
	        if (!this.willUpdateHash) {
	            Defer_1.Defer.defer(function () {
	                var attributes = _this.model.getAttributes();
	                _this.setHashValues(attributes);
	                _this.logger.debug('Saving state to hash', attributes);
	                _this.willUpdateHash = false;
	            });
	            this.willUpdateHash = true;
	        }
	    };
	    HistoryController.prototype.updateModelFromHash = function () {
	        var _this = this;
	        this.logger.trace('History hash -> model');
	        var toSet = {};
	        var diff = [];
	        _.each(this.model.attributes, function (value, key, obj) {
	            var valToSet = _this.getHashValue(key);
	            toSet[key] = valToSet;
	            if (_this.model.get(key) != valToSet) {
	                diff.push(key);
	            }
	        });
	        this.initialHashChange = true;
	        this.model.setMultiple(toSet);
	        return diff;
	    };
	    HistoryController.prototype.getHashValue = function (key) {
	        Assert_1.Assert.isNonEmptyString(key);
	        var value;
	        try {
	            value = this.hashUtils.getValue(key, this.hashUtils.getHash(this.windoh));
	        }
	        catch (error) {
	            this.logger.error("Could not parse parameter " + key + " from URI");
	        }
	        if (Utils_1.Utils.isUndefined(value)) {
	            value = this.model.defaultAttributes[key];
	        }
	        return value;
	    };
	    HistoryController.prototype.debugInfo = function () {
	        return {
	            'state': this.model.getAttributes()
	        };
	    };
	    return HistoryController;
	}(RootComponent_1.RootComponent));
	HistoryController.ID = 'HistoryController';
	HistoryController.attributesThatDoNotTriggerQuery = ['quickview'];
	exports.HistoryController = HistoryController;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var BaseComponent_1 = __webpack_require__(76);
	var _ = __webpack_require__(14);
	exports.MODEL_EVENTS = {
	    PREPROCESS: 'preprocess',
	    CHANGE_ONE: 'change:',
	    CHANGE: 'change',
	    RESET: 'reset',
	    ALL: 'all'
	};
	/**
	 * A *model* is a key-value store that triggers various JavaScript events when any value associated to one of its key changes.<br/>
	 * This class is meant to be extended, one of the most important extension being the {@link QueryStateModel} class.<br/>
	 * Components set values in this key-value store and listen to triggered events in order to update themselves accordingly.<br/>
	 */
	var Model = (function (_super) {
	    __extends(Model, _super);
	    function Model(element, id, attributes) {
	        var _this = _super.call(this, element, id) || this;
	        _this.eventNameSpace = id;
	        _this.defaultAttributes = Utils_1.Utils.extendDeep(_this.defaultAttributes, attributes);
	        _this.attributes = attributes;
	        _this.logger.debug('Creating model');
	        return _this;
	    }
	    /**
	     * Sets the value of a single specific attribute.</br>
	     * Note: this method calls the `setMultiple` method.
	     * @param attribute
	     * the specific attribute whose value is to be set.
	     * @param value
	     * the value to set the attribute to.
	     * @param options
	     * the options (see {@link setMultiple}).
	     */
	    Model.prototype.set = function (attribute, value, options) {
	        var toSet = {};
	        toSet[attribute] = value;
	        this.setMultiple(toSet, options);
	    };
	    /**
	     * Gets an object containing all *active* registered attribute key-values.</br>
	     * An attribute is considered active when its value is not in its default state.
	     * @returns {{object}}
	     */
	    Model.prototype.getAttributes = function () {
	        var _this = this;
	        var attributes = {};
	        _.each(this.attributes, function (attribute, key) {
	            if (_.isObject(attribute)) {
	                if (!Utils_1.Utils.objectEqual(attribute, _this.defaultAttributes[key])) {
	                    attributes[key] = attribute;
	                }
	            }
	            else if (attribute != _this.defaultAttributes[key]) {
	                attributes[key] = attribute;
	            }
	        });
	        return attributes;
	    };
	    /**
	     * Sets the values of one or many attributes.</br>
	     * This method may trigger the following events (in order):</br>
	     * • `preprocess`</br>
	     * • `changeOne`</br>
	     * • `change`</br>
	     * • `all`
	     * @param toSet
	     * the key-value list of attributes with their new intended values.
	     * @param options
	     * if the `customAttribute` option is set to `true`, the method will not validate whether an attribute is registered or not.</br>
	     * If the `validateType` option is set to `true`, the method will ensure that each value type is correct.</br>
	     * If the `silent` option is set to `true`, then the `changeOne`, `change` and `all` events will not be triggered.
	     */
	    Model.prototype.setMultiple = function (toSet, options) {
	        var _this = this;
	        var anythingChanged = false;
	        this.preprocessEvent(toSet);
	        _.each(toSet, function (value, attribute) {
	            if (!options || !options.customAttribute) {
	                _this.checkIfAttributeExists(attribute);
	            }
	            value = _this.parseToCorrectType(attribute, value);
	            if (!options || options.validateType) {
	                if (!_this.typeIsValid(attribute, value)) {
	                    return;
	                }
	            }
	            if (_this.checkIfAttributeChanged(attribute, value)) {
	                _this.attributes[attribute] = value;
	                anythingChanged = true;
	                if (options == null || !options.silent) {
	                    _this.attributeHasChangedEvent(attribute);
	                }
	            }
	        });
	        if (anythingChanged && (options == null || !options.silent)) {
	            this.attributesHasChangedEvent();
	            this.anyEvent();
	        }
	    };
	    /**
	     * Sets a new default value to a single specific attribute.</br>
	     * Note: specifying a new attribute default value does not set the attribute to that value. This can be done using the {@link setDefault} method.
	     * @param attribute
	     * the specific attribute whose default value is to be changed.
	     * @param value
	     * the new intended default value.
	     * @param options
	     * if the `customAttribute` option is set to `true`, the method will not validate whether the attribute is registered or not.
	     */
	    Model.prototype.setNewDefault = function (attribute, value, options) {
	        if (!options || !options.customAttribute) {
	            this.checkIfAttributeExists(attribute);
	        }
	        this.defaultAttributes[attribute] = value;
	    };
	    /**
	     * Sets a single specific attribute to its default value.</br>
	     * Note: this method calls the {@link setMultiple} method without specifying any option.
	     * @param attribute
	     * the specific attribute whose value is to be set to its default value.
	     */
	    Model.prototype.setDefault = function (attribute) {
	        this.set(attribute, this.defaultAttributes[attribute]);
	    };
	    /**
	     * Gets the value of a single specific attribute.</br>
	     * If no attribute is specified, the method instead returns an object containing all registered attribute key-values.
	     * @param attribute
	     * the specific attribute whose value should be returned.
	     * @returns {any}
	     */
	    Model.prototype.get = function (attribute) {
	        if (attribute == undefined) {
	            return this.attributes;
	        }
	        else {
	            return this.attributes[attribute];
	        }
	    };
	    /**
	     * Gets the default value of a single specific attribute.</br>
	     * If no attribute is specified, the method instead returns an object containing all registered attribute key-default values.
	     * @param attribute
	     * the specific attribute whose default value should be returned.
	     * @returns {any}
	     */
	    Model.prototype.getDefault = function (attribute) {
	        if (attribute == undefined) {
	            return this.defaultAttributes;
	        }
	        else {
	            return this.defaultAttributes[attribute];
	        }
	    };
	    /**
	     * Resets each registered attribute to its default value.</br>
	     * Note: this method calls the {@link setMultiple} method without specifying any options.</br>
	     * After the `setMultiple` call has returned, this method triggers the `reset` event.
	     */
	    Model.prototype.reset = function () {
	        this.setMultiple(this.defaultAttributes);
	        this.modelWasResetEvent();
	    };
	    /**
	     * Registers a new attribute key-value.
	     * @param attribute
	     * the name of the new attribute to register.
	     * @param defaultValue
	     * the newly registered attribute default value.
	     */
	    Model.prototype.registerNewAttribute = function (attribute, defaultValue) {
	        this.defaultAttributes[attribute] = defaultValue;
	        this.attributes[attribute] = defaultValue;
	    };
	    /**
	     * Gets a string displaying the event namespace followed by the specific event name. The returned string is formatted thus:</br>
	     * `[eventNameSpace]:[eventName]`
	     * @example `getEventName("reset");` could return `"state:reset"`.
	     * @param event
	     * the event name.
	     * @returns {string}
	     */
	    Model.prototype.getEventName = function (event) {
	        return this.eventNameSpace + ':' + event;
	    };
	    Model.prototype.attributesHasChangedEvent = function () {
	        Dom_1.$$(this.element).trigger(this.getEventName(Model.eventTypes.change), this.createAttributesChangedArgument());
	    };
	    Model.prototype.attributeHasChangedEvent = function (attr) {
	        Dom_1.$$(this.element).trigger(this.getEventName(Model.eventTypes.changeOne) + attr, this.createAttributeChangedArgument(attr));
	    };
	    Model.prototype.preprocessEvent = function (attributes) {
	        Dom_1.$$(this.element).trigger(this.getEventName(Model.eventTypes.preprocess), attributes);
	    };
	    Model.prototype.modelWasResetEvent = function () {
	        Dom_1.$$(this.element).trigger(this.getEventName(Model.eventTypes.reset), this.createModelChangedArgument());
	    };
	    Model.prototype.anyEvent = function () {
	        Dom_1.$$(this.element).trigger(this.getEventName(Model.eventTypes.all), this.createModelChangedArgument());
	    };
	    Model.prototype.createAttributeChangedArgument = function (attribute) {
	        return { attribute: attribute, value: this.attributes[attribute] };
	    };
	    Model.prototype.createAttributesChangedArgument = function () {
	        return { attributes: this.attributes };
	    };
	    Model.prototype.createModelChangedArgument = function () {
	        return { model: this };
	    };
	    Model.prototype.checkIfAttributeExists = function (attribute) {
	        Assert_1.Assert.check(_.has(this.attributes, attribute));
	    };
	    Model.prototype.typeIsValid = function (attribute, value) {
	        if (!Utils_1.Utils.isNullOrUndefined(this.attributes[attribute]) && !Utils_1.Utils.isUndefined(value)) {
	            if (_.isNumber(this.attributes[attribute])) {
	                return this.validateNumber(attribute, value);
	            }
	            else if (_.isBoolean(this.attributes[attribute])) {
	                return this.validateBoolean(attribute, value);
	            }
	            else {
	                return this.validateOther(attribute, value);
	            }
	        }
	        return true;
	    };
	    Model.prototype.validateNumber = function (attribute, value) {
	        if (!_.isNumber(value) || isNaN(value)) {
	            this.logger.error("Non-matching type for " + attribute + ". Expected number and got " + value);
	            return false;
	        }
	        return true;
	    };
	    Model.prototype.validateBoolean = function (attribute, value) {
	        if (!_.isBoolean(value) && !Utils_1.Utils.parseBooleanIfNotUndefined(value) !== undefined) {
	            this.logger.error("Non matching type for " + attribute + ". Expected boolean and got " + value);
	            return false;
	        }
	        return true;
	    };
	    Model.prototype.validateOther = function (attribute, value) {
	        if (!Utils_1.Utils.isNullOrUndefined(this.defaultAttributes[attribute])) {
	            if (typeof value !== typeof this.defaultAttributes[attribute]) {
	                this.logger.error("Non-matching type for " + attribute + ". Expected " + typeof this.defaultAttributes[attribute] + " and got " + value);
	                return false;
	            }
	        }
	        return true;
	    };
	    Model.prototype.parseToCorrectType = function (attribute, value) {
	        if (_.isNumber(this.attributes[attribute])) {
	            return parseInt(value, 10);
	        }
	        else if (_.isBoolean(this.attributes[attribute])) {
	            if (_.isBoolean(value)) {
	                return value;
	            }
	            else {
	                return Utils_1.Utils.parseBooleanIfNotUndefined(value);
	            }
	        }
	        return value;
	    };
	    Model.prototype.checkIfAttributeChanged = function (attribute, newValue) {
	        var oldValue = this.attributes[attribute];
	        if (_.isNumber(oldValue) || _.isString(oldValue) || _.isBoolean(oldValue)) {
	            return oldValue !== newValue;
	        }
	        if (_.isArray(oldValue)) {
	            return !Utils_1.Utils.arrayEqual(oldValue, newValue);
	        }
	        if (_.isObject(oldValue)) {
	            return !Utils_1.Utils.objectEqual(oldValue, newValue);
	        }
	        return true;
	    };
	    Model.prototype.debugInfo = function () {
	        return null;
	    };
	    return Model;
	}(BaseComponent_1.BaseComponent));
	/**
	 * The event types that can be triggered:<br/>
	 * • `preprocess`: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>
	 * • `changeOne`: triggered when a single value changes.</br>
	 * • `change`: triggered when one or many values change.</br>
	 * • `reset`: triggered when all attributes are reset to their default values. </br>
	 * • `all`: triggered after the `change` event.</br>
	 * @type {{preprocess: string, changeOne: string, change: string, reset: string, all: string}}
	 */
	Model.eventTypes = {
	    preprocess: 'preprocess',
	    changeOne: 'change:',
	    change: 'change',
	    reset: 'reset',
	    all: 'all'
	};
	exports.Model = Model;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var LocalStorageUtils_1 = __webpack_require__(69);
	var Model_1 = __webpack_require__(98);
	var Logger_1 = __webpack_require__(11);
	var Assert_1 = __webpack_require__(12);
	var InitializationEvents_1 = __webpack_require__(45);
	var RootComponent_1 = __webpack_require__(75);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	/**
	 * This component acts like the {@link HistoryController} excepts that is saves the {@link QueryStateModel} in the local storage.<br/>
	 * This will not allow 'back' and 'forward' navigation in the history, like the standard {@link HistoryController} allows. Instead, it load the query state only on page load.<br/>
	 * To enable this component, you should set the {@link SearchInterface.options.useLocalStorageForHistory} as well as the {@link SearchInterface.options.enableHistory} options to true.
	 */
	var LocalStorageHistoryController = (function (_super) {
	    __extends(LocalStorageHistoryController, _super);
	    /**
	     * Create a new LocalStorageHistoryController instance
	     * @param element
	     * @param windoh For mock purpose
	     * @param model
	     * @param queryController
	     */
	    function LocalStorageHistoryController(element, windoh, model, queryController) {
	        var _this = _super.call(this, element, LocalStorageHistoryController.ID) || this;
	        _this.windoh = windoh;
	        _this.model = model;
	        _this.queryController = queryController;
	        _this.omit = [];
	        if (!windoh['localStorage']) {
	            new Logger_1.Logger(element).info('No local storage available in current browser. LocalStorageHistoryController cannot initialize itself', _this);
	        }
	        else {
	            _this.storage = new LocalStorageUtils_1.LocalStorageUtils(LocalStorageHistoryController.ID);
	            Assert_1.Assert.exists(_this.model);
	            Assert_1.Assert.exists(_this.queryController);
	            Dom_1.$$(_this.element).on(InitializationEvents_1.InitializationEvents.restoreHistoryState, function () { return _this.updateModelFromLocalStorage(); });
	            Dom_1.$$(_this.element).on(_this.model.getEventName(Model_1.Model.eventTypes.all), function () { return _this.updateLocalStorageFromModel(); });
	        }
	        return _this;
	    }
	    /**
	     * Specifies an array of attributes from the query state model that should not be persisted in the local storage
	     * @param attributes
	     */
	    LocalStorageHistoryController.prototype.withoutThoseAttribute = function (attributes) {
	        this.omit = attributes;
	    };
	    LocalStorageHistoryController.prototype.updateLocalStorageFromModel = function () {
	        var attributes = _.omit(this.model.getAttributes(), this.omit);
	        this.setStorageValues(attributes);
	        this.logger.debug('Saving state to localstorage', attributes);
	    };
	    LocalStorageHistoryController.prototype.updateModelFromLocalStorage = function () {
	        var _this = this;
	        var toSet = {};
	        var loadedFromStorage = this.storage.load();
	        _.each(this.model.attributes, function (value, key, obj) {
	            var valToSet = loadedFromStorage ? loadedFromStorage[key] : undefined;
	            if (valToSet == undefined) {
	                valToSet = _this.model.defaultAttributes[key];
	            }
	            toSet[key] = valToSet;
	        });
	        this.model.setMultiple(toSet);
	    };
	    LocalStorageHistoryController.prototype.setStorageValues = function (values) {
	        this.storage.save(values);
	    };
	    return LocalStorageHistoryController;
	}(RootComponent_1.RootComponent));
	LocalStorageHistoryController.ID = 'LocalStorageHistoryController';
	exports.LocalStorageHistoryController = LocalStorageHistoryController;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Model_1 = __webpack_require__(98);
	exports.Model = Model_1.Model;
	var QueryStateModel_1 = __webpack_require__(101);
	exports.QueryStateModel = QueryStateModel_1.QueryStateModel;
	var ComponentOptionsModel_1 = __webpack_require__(102);
	exports.ComponentOptionsModel = ComponentOptionsModel_1.ComponentOptionsModel;
	var ComponentStateModel_1 = __webpack_require__(103);
	exports.ComponentStateModel = ComponentStateModel_1.ComponentStateModel;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Model_1 = __webpack_require__(98);
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	exports.QUERY_STATE_ATTRIBUTES = {
	    Q: 'q',
	    FIRST: 'first',
	    T: 't',
	    TG: 'tg',
	    SORT: 'sort',
	    LAYOUT: 'layout',
	    HD: 'hd',
	    HQ: 'hq',
	    QUICKVIEW: 'quickview'
	};
	/**
	 * The QueryStateModel is a key->value store of the state of every component that can affect a query.<br/>
	 * Component set values in this key -> value store, and listen to event triggered to react accordingly.<br/>
	 * For example, when a query is launched, the searchbox will set the 'q' attribute, the pager will set the 'first' attribute, etc.<br/>
	 * At the same time, this class will trigger the associated event when a value is modified.<br/>
	 * eg : The user change the content of the searchbox, and submit a query. This will trigger the following events :<br/>
	 * -- state:change:q (because the value of 'q' changed)</br>
	 * -- state:change (because at least one value changed in the query state)<br/>
	 * Component or external code could hook handler on those events : document.addEventListener('state:change:q', handler);<br/>
	 * See : {@link Model}, as all the relevant method are exposed in the base class.<br/>
	 * Optionally, the state can be persisted to the query string to allow browser history management : See {@link HistoryController}
	 */
	var QueryStateModel = (function (_super) {
	    __extends(QueryStateModel, _super);
	    /**
	     * Create a new QueryState
	     * @param element
	     * @param attributes
	     * @param bindings
	     */
	    function QueryStateModel(element, attributes) {
	        var _this = this;
	        var merged = _.extend({}, QueryStateModel.defaultAttributes, attributes);
	        _this = _super.call(this, element, QueryStateModel.ID, merged) || this;
	        return _this;
	    }
	    QueryStateModel.getFacetId = function (id, include) {
	        if (include === void 0) { include = true; }
	        return 'f:' + id + (include ? '' : ':not');
	    };
	    QueryStateModel.getFacetOperator = function (id) {
	        return 'f:' + id + ':operator';
	    };
	    QueryStateModel.getFacetLookupValue = function (id) {
	        return QueryStateModel.getFacetId(id) + ':lookupvalues';
	    };
	    /**
	     * Determine if at least one facet is currently active in the interface (this means that a facet has selected or excluded values)
	     * @returns {boolean}
	     */
	    QueryStateModel.prototype.atLeastOneFacetIsActive = function () {
	        return !_.isUndefined(_.find(this.attributes, function (value, key) {
	            return key.indexOf('f:') == 0 && Utils_1.Utils.isNonEmptyArray(value);
	        }));
	    };
	    QueryStateModel.prototype.set = function (attribute, value, options) {
	        this.validate(attribute, value);
	        _super.prototype.set.call(this, attribute, value, options);
	    };
	    QueryStateModel.prototype.validate = function (attribute, value) {
	        if (attribute == QueryStateModel.attributesEnum.first) {
	            Assert_1.Assert.isNumber(value);
	            Assert_1.Assert.isLargerOrEqualsThan(0, value);
	        }
	    };
	    return QueryStateModel;
	}(Model_1.Model));
	QueryStateModel.ID = 'state';
	QueryStateModel.defaultAttributes = {
	    q: '',
	    first: 0,
	    t: '',
	    hd: '',
	    hq: '',
	    sort: '',
	    layout: 'list',
	    tg: '',
	    quickview: ''
	};
	QueryStateModel.attributesEnum = {
	    q: 'q',
	    first: 'first',
	    t: 't',
	    sort: 'sort',
	    layout: 'layout',
	    hd: 'hd',
	    hq: 'hq',
	    tg: 'tg',
	    quickview: 'quickview'
	};
	exports.QueryStateModel = QueryStateModel;
	function setState(model, args) {
	    Assert_1.Assert.exists(model);
	    if (args.length == 0 || args[0] == undefined) {
	        // No args means return the model
	        return model;
	    }
	    else if (args.length == 1 && Utils_1.Utils.isNonEmptyString(args[0])) {
	        // One string arg means retrieve value from model
	        return model.get(args[0]);
	    }
	    else if (_.isObject(args[0])) {
	        // One dictionary means set multiple values
	        var toSet = args[0];
	        var options = _.extend({ customAttribute: true }, args[1]);
	        return model.setMultiple(toSet, options);
	    }
	    else if (args.length > 1) {
	        // Otherwise we're setting a value
	        var name_1 = args[0];
	        var value = args[1];
	        var options = _.extend({ customAttribute: true }, args[2]);
	        Assert_1.Assert.isNonEmptyString(name_1);
	        return model.set(name_1, value, options);
	    }
	}
	exports.setState = setState;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Model_1 = __webpack_require__(98);
	var _ = __webpack_require__(14);
	var ComponentOptionsModel = (function (_super) {
	    __extends(ComponentOptionsModel, _super);
	    function ComponentOptionsModel(element, attributes) {
	        var _this = this;
	        var merged = _.extend({}, ComponentOptionsModel.defaultAttributes, attributes);
	        _this = _super.call(this, element, ComponentOptionsModel.ID, merged) || this;
	        return _this;
	    }
	    return ComponentOptionsModel;
	}(Model_1.Model));
	ComponentOptionsModel.ID = 'ComponentOptions';
	ComponentOptionsModel.defaultAttributes = {
	    resultLink: undefined,
	    searchHub: undefined
	};
	ComponentOptionsModel.attributesEnum = {
	    resultLink: 'resultLink',
	    searchHub: 'searchHub'
	};
	exports.ComponentOptionsModel = ComponentOptionsModel;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Model_1 = __webpack_require__(98);
	var ComponentStateModel = (function (_super) {
	    __extends(ComponentStateModel, _super);
	    function ComponentStateModel(element) {
	        return _super.call(this, element, ComponentStateModel.ID, {}) || this;
	    }
	    ComponentStateModel.prototype.registerComponent = function (componentId, component) {
	        var currentAttribute = this.attributes[componentId];
	        if (currentAttribute == undefined) {
	            this.attributes[componentId] = [component];
	        }
	        else {
	            this.attributes[componentId].push(component);
	        }
	    };
	    return ComponentStateModel;
	}(Model_1.Model));
	ComponentStateModel.ID = 'ComponentState';
	exports.ComponentStateModel = ComponentStateModel;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(105));
	var ComponentOptions_1 = __webpack_require__(109);
	exports.ComponentOptions = ComponentOptions_1.ComponentOptions;
	exports.ComponentOptionsType = ComponentOptions_1.ComponentOptionsType;
	var Component_1 = __webpack_require__(107);
	exports.Component = Component_1.Component;
	var BaseComponent_1 = __webpack_require__(76);
	exports.BaseComponent = BaseComponent_1.BaseComponent;
	var RootComponent_1 = __webpack_require__(75);
	exports.RootComponent = RootComponent_1.RootComponent;
	var QueryBuilder_1 = __webpack_require__(77);
	exports.QueryBuilder = QueryBuilder_1.QueryBuilder;
	var ExpressionBuilder_1 = __webpack_require__(78);
	exports.ExpressionBuilder = ExpressionBuilder_1.ExpressionBuilder;
	// Export Initialization under both name, for legacy reason and old code in the wild that
	// reference the old CoveoJQuery module
	var Initialization_1 = __webpack_require__(106);
	exports.Initialization = Initialization_1.Initialization;
	var Initialization_2 = __webpack_require__(106);
	exports.CoveoJQuery = Initialization_2.Initialization;
	var CoveoJQuery_1 = __webpack_require__(174);
	exports.initCoveoJQuery = CoveoJQuery_1.initCoveoJQuery;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Initialization_1 = __webpack_require__(106);
	var Assert_1 = __webpack_require__(12);
	var QueryController_1 = __webpack_require__(74);
	var QueryStateModel_1 = __webpack_require__(101);
	var Analytics_1 = __webpack_require__(127);
	var InitializationEvents_1 = __webpack_require__(45);
	var Dom_1 = __webpack_require__(59);
	var Component_1 = __webpack_require__(107);
	var _ = __webpack_require__(14);
	/**
	 * Initialize the framework with a basic search interface. Calls {@link Initialization.initSearchInterface}.<br/>
	 * If using the jQuery extension, this is called using <code>$('#root').coveo('init');</code>.
	 * @param element The root of the interface to initialize.
	 * @param options JSON options for the framework (e.g.: <code>{Searchbox : {enableSearchAsYouType : true}}</code>).
	 */
	function init(element, options) {
	    if (options === void 0) { options = {}; }
	    Initialization_1.Initialization.initializeFramework(element, options, function () {
	        Initialization_1.Initialization.initSearchInterface(element, options);
	    });
	}
	exports.init = init;
	Initialization_1.Initialization.registerNamedMethod('init', function (element, options) {
	    if (options === void 0) { options = {}; }
	    init(element, options);
	});
	/**
	 * Initialize the framework with a standalone search box. Calls {@link Initialize.initStandaloneSearchInterface}.<br/>
	 * If using the jQuery extension, this is called using <code>$('#root').coveo('initSearchbox');</code>.
	 * @param element The root of the interface to initialize.
	 * @param searchPageUri The search page on which to redirect when there is a query.
	 * @param options JSON options for the framework (e.g.: <code>{Searchbox : {enableSearchAsYouType : true}}</code>).
	 */
	function initSearchbox(element, searchPageUri, options) {
	    if (options === void 0) { options = {}; }
	    Assert_1.Assert.isNonEmptyString(searchPageUri);
	    var searchInterfaceOptions = {};
	    searchInterfaceOptions.searchPageUri = searchPageUri;
	    searchInterfaceOptions.autoTriggerQuery = false;
	    searchInterfaceOptions.hideUntilFirstQuery = false;
	    searchInterfaceOptions.enableHistory = false;
	    options = _.extend({}, options, { StandaloneSearchInterface: searchInterfaceOptions });
	    Initialization_1.Initialization.initializeFramework(element, options, function () {
	        Initialization_1.Initialization.initStandaloneSearchInterface(element, options);
	    });
	}
	exports.initSearchbox = initSearchbox;
	Initialization_1.Initialization.registerNamedMethod('initSearchbox', function (element, searchPageUri, options) {
	    if (options === void 0) { options = {}; }
	    initSearchbox(element, searchPageUri, options);
	});
	/**
	 * Initialize the framework with a recommendation interface. Calls {@link Initialization.initRecommendationInterface}.<br/>
	 * If using the jQuery extension, this is called using <code>$('#root').coveo('initRecommendation');</code>.
	 * @param element The root of the interface to initialize.
	 * @param mainSearchInterface The search interface to link with the recommendation interface (see {@link Recommendation}).
	 * @param userContext The user context to pass with the query generated in the recommendation interface (see {@link Recommendation}).
	 * @param options JSON options for the framework (e.g.: <code>{Searchbox : {enableSearchAsYouType: true}}</code>).
	 */
	function initRecommendation(element, mainSearchInterface, userContext, options) {
	    if (options === void 0) { options = {}; }
	    var recommendationOptions = {};
	    recommendationOptions.mainSearchInterface = mainSearchInterface;
	    recommendationOptions.userContext = JSON.stringify(userContext);
	    recommendationOptions.enableHistory = false;
	    options = _.extend({}, options, { Recommendation: recommendationOptions });
	    Initialization_1.Initialization.initializeFramework(element, options, function () {
	        Initialization_1.Initialization.initRecommendationInterface(element, options);
	    });
	}
	exports.initRecommendation = initRecommendation;
	Initialization_1.Initialization.registerNamedMethod('initRecommendation', function (element, mainSearchInterface, userContext, options) {
	    if (userContext === void 0) { userContext = {}; }
	    if (options === void 0) { options = {}; }
	    initRecommendation(element, mainSearchInterface, userContext, options);
	});
	/**
	 * Execute a standard query. Active component in the interface will react to events/ push data in the query / handle the query success or failure as needed.<br/>
	 * It triggers a standard query flow for which the standard component will perform their expected behavior.<br/>
	 * If you wish to only perform a query on the index to retrieve results (without the component reacting), look into {@link SearchInterface} instead.<br/>
	 * Calling this method is the same as calling {@link QueryController.executeQuery}.
	 * @param element The root of the interface to initialize.
	 */
	function executeQuery(element) {
	    Assert_1.Assert.exists(element);
	    var queryController = Component_1.Component.resolveBinding(element, QueryController_1.QueryController);
	    Assert_1.Assert.exists(queryController);
	    return queryController.executeQuery();
	}
	exports.executeQuery = executeQuery;
	Initialization_1.Initialization.registerNamedMethod('executeQuery', function (element) {
	    return executeQuery(element);
	});
	/**
	 * Perform operation on the state ({@link QueryStateModel} of the interface.<br/>
	 * Get the complete {@link QueryStateModel} object: <code>Coveo.state(element)</code><br/>.
	 * Get an attribute from the {@link QueryStateModel}: <code>Coveo.state(element, 'q')</code> Can be any attribute.<br/>
	 * Set an attribute on the {@link QueryStateModel}: <code>Coveo.state(element, 'q', 'foobar')</code>. Can be any attribute.<br/>
	 * Set multiple attribute on the {@link QueryStateModel}: <code>Coveo.state(element, {'q' : 'foobar' , sort : 'relevancy'})</code>. Can be any attribute.<br/>
	 * If using the jQuery extension, this is called using <code>$('#root').coveo('state');</code>.
	 * @param element The root of the interface for which to access the {@link QueryStateModel}.
	 * @param args
	 * @returns {any}
	 */
	function state(element) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    Assert_1.Assert.exists(element);
	    var model = Component_1.Component.resolveBinding(element, QueryStateModel_1.QueryStateModel);
	    return QueryStateModel_1.setState(model, args);
	}
	exports.state = state;
	Initialization_1.Initialization.registerNamedMethod('state', function (element) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    if (args.length != 0) {
	        return state.apply(undefined, [element].concat(args));
	    }
	    else {
	        return state.apply(undefined, [element]);
	    }
	});
	/**
	 * Get the component bound on the given `HTMLElement`.
	 * @param element The `HTMLElement` for which to get the component instance.
	 * @param componentClass If multiple components are bound to a single `HTMLElement`, you need to specify which components you wish to get.
	 * @param noThrow By default, the GET method will throw if there is no component bound, or if there are multiple component and no `componentClass` is specified. This deletes the error if set to true.
	 * @returns {Component}
	 */
	function get(element, componentClass, noThrow) {
	    Assert_1.Assert.exists(element);
	    return Component_1.Component.get(element, componentClass, noThrow);
	}
	exports.get = get;
	Initialization_1.Initialization.registerNamedMethod('get', function (element, componentClass, noThrow) {
	    return get(element, componentClass, noThrow);
	});
	function result(element, noThrow) {
	    Assert_1.Assert.exists(element);
	    return Component_1.Component.getResult(element, noThrow);
	}
	exports.result = result;
	Initialization_1.Initialization.registerNamedMethod('result', function (element, noThrow) {
	    return result(element, noThrow);
	});
	function getCoveoAnalyticsClient(element) {
	    var analytics = getCoveoAnalytics(element);
	    if (analytics) {
	        return analytics.client;
	    }
	    else {
	        return undefined;
	    }
	}
	function getCoveoAnalytics(element) {
	    var analyticsElement = Dom_1.$$(element).find('.' + Component_1.Component.computeCssClassName(Analytics_1.Analytics));
	    if (analyticsElement) {
	        return Component_1.Component.get(analyticsElement);
	    }
	    else {
	        return undefined;
	    }
	}
	/**
	 * Log a custom event on the Coveo Usage Analytics service.
	 * @param element The root of the interface for which to log analytics events.
	 * @param customEventCause The cause of the event.
	 * @param metadata The metadata associated with the event (JSON key value).
	 */
	function logCustomEvent(element, customEventCause, metadata) {
	    var client = getCoveoAnalyticsClient(element);
	    if (client) {
	        client.logCustomEvent(customEventCause, metadata, element);
	    }
	}
	exports.logCustomEvent = logCustomEvent;
	Initialization_1.Initialization.registerNamedMethod('logCustomEvent', function (element, customEventCause, metadata) {
	    logCustomEvent(element, customEventCause, metadata);
	});
	/**
	 * Log a `SearchEvent` on the Coveo Usage Analytics service.
	 * @param element The root of the interface for which to log analytics events.
	 * @param searchEventCause The cause of the event.
	 * @param metadata The metadata associated with the event (JSON key value).
	 */
	function logSearchEvent(element, searchEventCause, metadata) {
	    var client = getCoveoAnalyticsClient(element);
	    if (client) {
	        client.logSearchEvent(searchEventCause, metadata);
	    }
	}
	exports.logSearchEvent = logSearchEvent;
	Initialization_1.Initialization.registerNamedMethod('logSearchEvent', function (element, searchEventCause, metadata) {
	    logSearchEvent(element, searchEventCause, metadata);
	});
	/**
	 * Log a `SearchAsYouTypeEvent` on the Coveo Usage Analytics service.<br/>
	 * It is a bit different from a standard search event, as it will wait 5 seconds before sending the final `SearchAsYouType` event.
	 * @param element The root of the interface for which to log analytics events.
	 * @param searchAsYouTypeEventCause The cause of the event.
	 * @param metadata The metadata associated with the event (JSON key value).
	 */
	function logSearchAsYouTypeEvent(element, searchAsYouTypeEventCause, metadata) {
	    var client = getCoveoAnalyticsClient(element);
	    if (client) {
	        client.logSearchAsYouType(searchAsYouTypeEventCause, metadata);
	    }
	}
	exports.logSearchAsYouTypeEvent = logSearchAsYouTypeEvent;
	Initialization_1.Initialization.registerNamedMethod('logSearchAsYouTypeEvent', function (element, searchAsYouTypeEventCause, metadata) {
	    logSearchAsYouTypeEvent(element, searchAsYouTypeEventCause, metadata);
	});
	/**
	 * Log a `ClickEvent` on the Coveo Usage Analytics service.
	 * @param element The root of the interface for which to log analytics events.
	 * @param clickEventCause The cause of the event.
	 * @param metadata The metadata associated with the event (JSON key value).
	 * @param result The result that was clicked.
	 */
	function logClickEvent(element, clickEventCause, metadata, result) {
	    var client = getCoveoAnalyticsClient(element);
	    if (client) {
	        client.logClickEvent(clickEventCause, metadata, result, element);
	    }
	}
	exports.logClickEvent = logClickEvent;
	Initialization_1.Initialization.registerNamedMethod('logClickEvent', function (element, clickEventCause, metadata, result) {
	    logClickEvent(element, clickEventCause, metadata, result);
	});
	/**
	 * Pass options to the framework, before it is initialized ({@link init}).<br/>
	 * All the options passed with this calls will be merged together on initialization.
	 * @param element The root of the interface for which you wish to set options.
	 * @param optionsToSet JSON options for the framework (e.g.: <code>{Searchbox : {enableSearchAsYouType: true}}</code>).
	 */
	function options(element, optionsToSet) {
	    if (optionsToSet === void 0) { optionsToSet = {}; }
	    Initialization_1.Initialization.registerDefaultOptions(element, optionsToSet);
	}
	exports.options = options;
	Initialization_1.Initialization.registerNamedMethod('options', function (element, optionsToSet) {
	    if (optionsToSet === void 0) { optionsToSet = {}; }
	    options(element, optionsToSet);
	});
	/**
	 * Patch the given `methodName` on an instance of a component bound to an `HTMLElement` with a new handler.
	 * @param element
	 * @param methodName
	 * @param handler
	 */
	function patch(element, methodName, handler) {
	    Initialization_1.Initialization.monkeyPatchComponentMethod(methodName, element, handler);
	}
	exports.patch = patch;
	Initialization_1.Initialization.registerNamedMethod('patch', function (element, methodName, handler) {
	    patch(element, methodName, handler);
	});
	function initBox(element) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    var type, options = {}, injectMarkup;
	    // This means : initBox, no type (no injection) and no options
	    if (args.length == 0) {
	        type = 'Standard';
	        injectMarkup = false;
	    }
	    else if (args.length == 1) {
	        // This mean a type (with injection) and no options
	        if (typeof args[0] == 'string') {
	            type = args[0];
	            injectMarkup = true;
	        }
	        else if (typeof args[0] == 'object') {
	            type = 'Standard';
	            injectMarkup = false;
	            options = args[0];
	        }
	        else {
	            Assert_1.Assert.fail('Invalid parameters to init a box');
	        }
	    }
	    else if (args.length == 2) {
	        type = args[0];
	        options = args[1];
	        injectMarkup = true;
	    }
	    var merged = {};
	    merged[type || 'Container'] = _.extend({}, options.SearchInterface, options[type]);
	    options = _.extend({}, options, merged);
	    Initialization_1.Initialization.initializeFramework(element, options, function () {
	        Initialization_1.Initialization.initBoxInterface(element, options, type, injectMarkup);
	    });
	}
	exports.initBox = initBox;
	Initialization_1.Initialization.registerNamedMethod('initBox', function (element) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    initBox(element, args);
	});
	function nuke(element) {
	    Dom_1.$$(element).trigger(InitializationEvents_1.InitializationEvents.nuke);
	}
	exports.nuke = nuke;
	Initialization_1.Initialization.registerNamedMethod('nuke', function (element) {
	    nuke(element);
	});


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var Component_1 = __webpack_require__(107);
	var Utils_1 = __webpack_require__(13);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var InitializationEvents_1 = __webpack_require__(45);
	var SearchInterface_1 = __webpack_require__(108);
	var QueryController_1 = __webpack_require__(74);
	var HashUtils_1 = __webpack_require__(65);
	var QueryStateModel_1 = __webpack_require__(101);
	var ComponentStateModel_1 = __webpack_require__(103);
	var ComponentOptionsModel_1 = __webpack_require__(102);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var JQueryutils_1 = __webpack_require__(18);
	var _ = __webpack_require__(14);
	/**
	 * The main purpose of this class is to initialize the framework (a.k.a the code executed when calling `Coveo.init`).<br/>
	 * It's also in charge or registering the available components, as well as the method that we expost to the global Coveo scope.<br/>
	 * For example, the `Coveo.executeQuery` function will be registed in this class by the {@link QueryController}.
	 */
	var Initialization = (function () {
	    function Initialization() {
	    }
	    /**
	     * Register a new set of options for a given element.<br/>
	     * When the element is eventually initialized as a component, those options will be used / merged to create the final option set to use for this component.<br/>
	     * Note that this function should not normally be called directly, but instead using the global `Coveo.options` function
	     * @param element
	     * @param options
	     */
	    Initialization.registerDefaultOptions = function (element, options) {
	        var existing = element['CoveoDefaultOptions'] || {};
	        var updated = Utils_1.Utils.extendDeep(existing, options);
	        element['CoveoDefaultOptions'] = updated;
	    };
	    Initialization.resolveDefaultOptions = function (element, options) {
	        var optionsForThisElement = element['CoveoDefaultOptions'];
	        var optionsSoFar;
	        if (Utils_1.Utils.exists(optionsForThisElement)) {
	            optionsSoFar = Utils_1.Utils.extendDeep(optionsForThisElement, options);
	        }
	        else {
	            optionsSoFar = options;
	        }
	        if (element.parentElement) {
	            return Initialization.resolveDefaultOptions(element.parentElement, optionsSoFar);
	        }
	        else {
	            return optionsSoFar;
	        }
	    };
	    /**
	     * Register a new Component to be recognized by the framework.<br/>
	     * This essentially mean that when we call `Coveo.init`, the Initialization class will scan the DOM for known component (which have registed themselves with this call) and create a new component on each element.
	     * @param componentClass
	     */
	    Initialization.registerAutoCreateComponent = function (componentClass) {
	        Assert_1.Assert.exists(componentClass);
	        Assert_1.Assert.exists(componentClass.ID);
	        Assert_1.Assert.doesNotExists(Initialization.autoCreateComponents[componentClass.ID]);
	        Assert_1.Assert.doesNotExists(Initialization.namedMethods[componentClass.ID]);
	        Initialization.autoCreateComponents[componentClass.ID] = componentClass;
	    };
	    /**
	     * Check if a component is already registed, using it's ID (e.g. : 'Facet').
	     * @param componentClassId
	     * @returns {boolean}
	     */
	    Initialization.isComponentClassIdRegistered = function (componentClassId) {
	        return Utils_1.Utils.exists(Initialization.autoCreateComponents[componentClassId]);
	    };
	    /**
	     * Return the list of all known components (the list of ID for each component).
	     * @returns {string[]}
	     */
	    Initialization.getListOfRegisteredComponents = function () {
	        return _.keys(Initialization.autoCreateComponents);
	    };
	    /**
	     * Return the component class definition, using it's ID (e.g. : 'CoveoFacet').
	     * @param name
	     * @returns {IComponentDefinition}
	     */
	    Initialization.getRegisteredComponent = function (name) {
	        return Initialization.autoCreateComponents[name];
	    };
	    /**
	     * Initialize the framework. Note that this function should not normally be called directly, but instead using a globally registered function (e.g.: Coveo.init), or {@link Initialization.initSearchInterface} or {@link Initialization.initStandaloneSearchInterface} <br/>
	     * (e.g. : `Coveo.init` or `Coveo.initSearchbox`).
	     * @param element The element on which to initialize the interface.
	     * @param options The options for all components (eg: {Searchbox : {enableSearchAsYouType : true}}).
	     * @param initSearchInterfaceFunction The function to execute to create the {@link SearchInterface} component. Different init call will create different {@link SearchInterface}.
	     */
	    Initialization.initializeFramework = function (element, options, initSearchInterfaceFunction) {
	        Assert_1.Assert.exists(element);
	        var alreadyInitialized = Component_1.Component.get(element, QueryController_1.QueryController, true);
	        if (alreadyInitialized) {
	            this.logger.error('This DOM element has already been initialized as a search interface, skipping initialization', element);
	            return;
	        }
	        options = Initialization.resolveDefaultOptions(element, options);
	        Initialization.performInitFunctionsOption(options, InitializationEvents_1.InitializationEvents.beforeInitialization);
	        Dom_1.$$(element).trigger(InitializationEvents_1.InitializationEvents.beforeInitialization);
	        initSearchInterfaceFunction(element, options);
	        Initialization.initExternalComponents(element, options);
	        Initialization.performInitFunctionsOption(options, InitializationEvents_1.InitializationEvents.afterComponentsInitialization);
	        Dom_1.$$(element).trigger(InitializationEvents_1.InitializationEvents.afterComponentsInitialization);
	        Dom_1.$$(element).trigger(InitializationEvents_1.InitializationEvents.restoreHistoryState);
	        Initialization.performInitFunctionsOption(options, InitializationEvents_1.InitializationEvents.afterInitialization);
	        Dom_1.$$(element).trigger(InitializationEvents_1.InitializationEvents.afterInitialization);
	        var searchInterface = Component_1.Component.get(element, SearchInterface_1.SearchInterface);
	        // Elements that have the coveo-hide-until-loaded class are hidden by default.
	        // Now that we're loaded (and before the first query returns), we can remove
	        // the class. Also, we add a class that gives the opportunity for an animation
	        // to apply at startup, such as a fade-in that comes in by default.
	        var elemsHidden = Dom_1.$$(element).findAll('.coveo-hide-until-loaded');
	        _.each(elemsHidden, function (e) {
	            Dom_1.$$(e).removeClass('coveo-hide-until-loaded');
	            Dom_1.$$(e).addClass('coveo-show-after-loaded');
	        });
	        if (searchInterface.options.autoTriggerQuery) {
	            Initialization.logFirstQueryCause(searchInterface);
	            var shouldLogInActionHistory = true;
	            // We should not log an action history if the interface is a standalone recommendation component.
	            if (Coveo['Recommendation']) {
	                shouldLogInActionHistory = !(searchInterface instanceof Coveo['Recommendation']);
	            }
	            Component_1.Component.get(element, QueryController_1.QueryController).executeQuery({
	                logInActionsHistory: shouldLogInActionHistory,
	                isFirstQuery: true
	            });
	        }
	    };
	    /**
	     * Create a new standard search interface. This is the function executed when calling `Coveo.init`.
	     * @param element
	     * @param options
	     */
	    Initialization.initSearchInterface = function (element, options) {
	        if (options === void 0) { options = {}; }
	        options = Initialization.resolveDefaultOptions(element, options);
	        var searchInterface = new SearchInterface_1.SearchInterface(element, options.SearchInterface, options.Analytics);
	        searchInterface.options.originalOptionsObject = options;
	        var initParameters = { options: options, bindings: searchInterface.getBindings() };
	        Initialization.automaticallyCreateComponentsInside(element, initParameters, ['Recommendation']);
	    };
	    /**
	     * Create a new standalone search interface (standalone search box). This is the function executed when calling `Coveo.initSearchbox`.
	     * @param element
	     * @param options
	     */
	    Initialization.initStandaloneSearchInterface = function (element, options) {
	        if (options === void 0) { options = {}; }
	        options = Initialization.resolveDefaultOptions(element, options);
	        // Set trigger query on clear to false for standalone search interface automatically
	        // Take care of not overriding any options that could have been set by external code.
	        if (!options.Querybox) {
	            options.Querybox = {};
	        }
	        if (!options.Omnibox) {
	            options.Omnibox = {};
	        }
	        if (!options.Searchbox) {
	            options.Searchbox = {};
	        }
	        if (!options.Querybox.triggerQueryOnClear || !options.Omnibox.triggerQueryOnClear || !options.Searchbox.triggerOnQueryClear) {
	            options.Querybox.triggerQueryOnClear = false;
	            options.Omnibox.triggerQueryOnClear = false;
	            options.Searchbox.triggerQueryOnClear = false;
	        }
	        var searchInterface = new SearchInterface_1.StandaloneSearchInterface(element, options.StandaloneSearchInterface, options.Analytics);
	        searchInterface.options.originalOptionsObject = options;
	        var initParameters = { options: options, bindings: searchInterface.getBindings() };
	        Initialization.automaticallyCreateComponentsInside(element, initParameters);
	    };
	    /**
	     * Create a new recommendation search interface. This is the function executed when calling `Coveo.initRecommendation`.
	     * @param element
	     * @param options
	     */
	    Initialization.initRecommendationInterface = function (element, options) {
	        if (options === void 0) { options = {}; }
	        options = Initialization.resolveDefaultOptions(element, options);
	        // Since a recommendation interface inherits from a search interface, we need to merge those if passed on init
	        var optionsForRecommendation = _.extend({}, options.SearchInterface, options.Recommendation);
	        // If there is a main search interface, modify the loading animation for the recommendation interface to a "noop" element
	        // We don't want 2 animation overlapping
	        if (optionsForRecommendation.mainSearchInterface) {
	            optionsForRecommendation.firstLoadingAnimation = Dom_1.$$('span').el;
	        }
	        var recommendation = new window['Coveo']['Recommendation'](element, optionsForRecommendation, options.Analytics);
	        recommendation.options.originalOptionsObject = options;
	        var initParameters = { options: options, bindings: recommendation.getBindings() };
	        Initialization.automaticallyCreateComponentsInside(element, initParameters);
	    };
	    /**
	     * Scan the element and all its children for known components. Initialize every known component found.
	     * @param element The element for which to scan it's children.
	     * @param initParameters Needed parameters to initialize all the children components.
	     * @param ignore An optional list of component ID to ignore and skip when scanning for known components.
	     */
	    Initialization.automaticallyCreateComponentsInside = function (element, initParameters, ignore) {
	        Assert_1.Assert.exists(element);
	        var codeToExecute = [];
	        var htmlElementsToIgnore = [];
	        // Scan for elements to ignore which can be a container component (with other component inside)
	        // When a component is ignored, all it's children component should be ignored too.
	        // Add them to the array of html elements that should be skipped.
	        _.each(ignore, function (toIgnore) {
	            var rootToIgnore = Dom_1.$$(element).find("." + Component_1.Component.computeCssClassNameForType(toIgnore));
	            if (rootToIgnore) {
	                var childsElementsToIgnore = Dom_1.$$(rootToIgnore).findAll('*');
	                htmlElementsToIgnore = htmlElementsToIgnore.concat(childsElementsToIgnore);
	            }
	        });
	        for (var componentClassId in Initialization.autoCreateComponents) {
	            if (!_.contains(ignore, componentClassId)) {
	                var componentClass = Initialization.autoCreateComponents[componentClassId];
	                var classname = Component_1.Component.computeCssClassName(componentClass);
	                var elements = Dom_1.$$(element).findAll('.' + classname);
	                // From all the component we found which match the current className, remove those that should be ignored
	                elements = _.difference(elements, htmlElementsToIgnore);
	                if (Dom_1.$$(element).hasClass(classname) && !_.contains(htmlElementsToIgnore, element)) {
	                    elements.push(element);
	                }
	                if (elements.length != 0) {
	                    // Queue the code that will scan the now resolved selector to after we've
	                    // finished evaluating all selectors. This ensures that if a component
	                    // constructor adds child components under his tags, those won't get auto-
	                    // initialize by this invocation of this method. Components inserting child
	                    // components are responsible of invoking this method again if they want
	                    // child components to be auto-initialized.
	                    //
	                    // Explanation: If we don't do that, child components for which selector have
	                    // already been evaluated won't be initialized, whereas those that are next
	                    // in the list will be.
	                    codeToExecute.push(Initialization.createFunctionThatInitializesComponentOnElements(elements, componentClassId, componentClass, initParameters));
	                }
	            }
	        }
	        // Now that all selectors are executed, let's really initialize the components.
	        _.each(codeToExecute, function (code) { return code(); });
	    };
	    /**
	     * Create a new component on the given element.
	     * @param componentClassId The ID of the component to initialize (e.g. : 'CoveoFacet').
	     * @param element The HTMLElement on which to initialize.
	     * @param initParameters Needed parameters to initialize the component.
	     * @returns {Component}
	     */
	    Initialization.createComponentOfThisClassOnElement = function (componentClassId, element, initParameters) {
	        Assert_1.Assert.isNonEmptyString(componentClassId);
	        Assert_1.Assert.exists(element);
	        var componentClass = Initialization.autoCreateComponents[componentClassId];
	        Assert_1.Assert.exists(componentClass);
	        var bindings = {};
	        var options = {};
	        var result = undefined;
	        if (initParameters != undefined) {
	            _.each(initParameters.bindings, function (value, key) {
	                bindings[key] = value;
	            });
	            options = initParameters.options;
	            result = initParameters.result;
	        }
	        Initialization.logger.trace('Creating component of class ' + componentClassId, element, options);
	        return new componentClass(element, options, bindings, result);
	    };
	    /**
	     * Register a new globally available method in the Coveo namespace (e.g.: `Coveo.init`).
	     * @param methodName The method name to register.
	     * @param handler The function to execute when the method is called.
	     */
	    Initialization.registerNamedMethod = function (methodName, handler) {
	        Assert_1.Assert.isNonEmptyString(methodName);
	        Assert_1.Assert.doesNotExists(Initialization.autoCreateComponents[methodName]);
	        Assert_1.Assert.doesNotExists(Initialization.namedMethods[methodName]);
	        Assert_1.Assert.exists(handler);
	        Initialization.namedMethods[methodName] = handler;
	    };
	    /**
	     * Check if the method is already registed.
	     * @param methodName
	     * @returns {boolean}
	     */
	    Initialization.isNamedMethodRegistered = function (methodName) {
	        return Utils_1.Utils.exists(Initialization.namedMethods[methodName]);
	    };
	    /**
	     * 'Monkey patch' (replace the function with a new one) a given method on a component instance.
	     * @param methodName
	     * @param element
	     * @param handler
	     */
	    Initialization.monkeyPatchComponentMethod = function (methodName, element, handler) {
	        Assert_1.Assert.isNonEmptyString(methodName);
	        Assert_1.Assert.exists(handler);
	        var componentClass;
	        if (methodName.indexOf('.') > 0) {
	            var splitArg = methodName.split('.');
	            Assert_1.Assert.check(splitArg.length == 2, 'Invalid method name, correct syntax is CoveoComponent.methodName.');
	            componentClass = splitArg[0];
	            methodName = splitArg[1];
	        }
	        var boundComponent = Component_1.Component.get(element, componentClass);
	        Assert_1.Assert.exists(boundComponent);
	        Assert_1.Assert.exists(boundComponent[methodName]);
	        var originalMethodName = '__' + methodName;
	        if (!Utils_1.Utils.exists(boundComponent[originalMethodName])) {
	            boundComponent[originalMethodName] = boundComponent[methodName];
	        }
	        boundComponent[methodName] = handler;
	    };
	    Initialization.initBoxInterface = function (element, options, type, injectMarkup) {
	        if (options === void 0) { options = {}; }
	        if (type === void 0) { type = 'Standard'; }
	        if (injectMarkup === void 0) { injectMarkup = true; }
	        options = Initialization.resolveDefaultOptions(element, options);
	        var fromInitTypeToBoxReference = 'Box';
	        if (type != 'Standard') {
	            fromInitTypeToBoxReference += 'For' + type;
	        }
	        var boxRef = Component_1.Component.getComponentRef(fromInitTypeToBoxReference);
	        if (boxRef) {
	            new Logger_1.Logger(element).info('Initializing box of type ' + fromInitTypeToBoxReference);
	            var injectFunction = injectMarkup ? boxRef.getInjection : function () {
	            };
	            var box = new boxRef(element, options[fromInitTypeToBoxReference], options.Analytics, injectFunction, options);
	            box.options.originalOptionsObject = options;
	            var initParameters = { options: options, bindings: box.getBindings() };
	            Initialization.automaticallyCreateComponentsInside(element, initParameters);
	        }
	        else {
	            new Logger_1.Logger(element).error('Trying to initialize box of type : ' + fromInitTypeToBoxReference + ' but not found in code (not compiled)!');
	            Assert_1.Assert.fail('Cannot initialize unknown type of box');
	        }
	    };
	    Initialization.dispatchNamedMethodCall = function (methodName, element, args) {
	        Assert_1.Assert.isNonEmptyString(methodName);
	        Assert_1.Assert.exists(element);
	        var namedMethodHandler = Initialization.namedMethods[methodName];
	        Assert_1.Assert.exists(namedMethodHandler);
	        Initialization.logger.trace('Dispatching named method call of ' + methodName, element, args);
	        if (args.length != 0) {
	            return namedMethodHandler.apply(null, [element].concat(args));
	        }
	        else {
	            return namedMethodHandler.apply(null, [element]);
	        }
	    };
	    Initialization.dispatchNamedMethodCallOrComponentCreation = function (token, element, args) {
	        Assert_1.Assert.isNonEmptyString(token);
	        Assert_1.Assert.exists(element);
	        if (Initialization.isNamedMethodRegistered(token)) {
	            return Initialization.dispatchNamedMethodCall(token, element, args);
	        }
	        else if (Initialization.isComponentClassIdRegistered(token)) {
	            return Initialization.createComponentOfThisClassOnElement(token, element, args[0]);
	        }
	        else if (Initialization.isThereASingleComponentBoundToThisElement(element)) {
	            return Initialization.dispatchMethodCallOnBoundComponent(token, element, args);
	        }
	        else {
	            Assert_1.Assert.fail('No method or component named ' + token + ' are registered.');
	        }
	    };
	    Initialization.isSearchFromLink = function (searchInterface) {
	        return Utils_1.Utils.isNonEmptyString(searchInterface.getBindings().queryStateModel.get('q'));
	    };
	    Initialization.isThereASingleComponentBoundToThisElement = function (element) {
	        Assert_1.Assert.exists(element);
	        return Utils_1.Utils.exists(Component_1.Component.get(element));
	    };
	    Initialization.dispatchMethodCallOnBoundComponent = function (methodName, element, args) {
	        Assert_1.Assert.isNonEmptyString(methodName);
	        Assert_1.Assert.exists(element);
	        var boundComponent = Component_1.Component.get(element);
	        Assert_1.Assert.exists(boundComponent);
	        var method = boundComponent[methodName];
	        if (Utils_1.Utils.exists(method)) {
	            return method.apply(boundComponent, args);
	        }
	        else {
	            Assert_1.Assert.fail('No method named ' + methodName + ' exist on component ' + boundComponent.type);
	        }
	    };
	    Initialization.logFirstQueryCause = function (searchInterface) {
	        var firstQueryCause = HashUtils_1.HashUtils.getValue('firstQueryCause', HashUtils_1.HashUtils.getHash());
	        if (firstQueryCause != null) {
	            var meta = HashUtils_1.HashUtils.getValue('firstQueryMeta', HashUtils_1.HashUtils.getHash()) || {};
	            searchInterface.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList[firstQueryCause], meta);
	        }
	        else {
	            if (Initialization.isSearchFromLink(searchInterface)) {
	                searchInterface.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchFromLink, {});
	            }
	            else {
	                searchInterface.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.interfaceLoad, {});
	            }
	        }
	    };
	    Initialization.performInitFunctionsOption = function (options, event) {
	        if (Utils_1.Utils.exists(options)) {
	            Initialization.performFunctions(options[event]);
	        }
	    };
	    Initialization.performFunctions = function (option) {
	        if (Utils_1.Utils.exists(option)) {
	            _.each(option, function (func) {
	                if (typeof func == 'function') {
	                    func();
	                }
	            });
	        }
	    };
	    Initialization.initExternalComponents = function (element, options) {
	        if (options && options['externalComponents']) {
	            var searchInterface = Component_1.Component.get(element, SearchInterface_1.SearchInterface);
	            var queryStateModel = Component_1.Component.get(element, QueryStateModel_1.QueryStateModel);
	            var componentStateModel = Component_1.Component.get(element, ComponentStateModel_1.ComponentStateModel);
	            var queryController = Component_1.Component.get(element, QueryController_1.QueryController);
	            var componentOptionsModel = Component_1.Component.get(element, ComponentOptionsModel_1.ComponentOptionsModel);
	            var usageAnalytics = searchInterface.usageAnalytics;
	            Assert_1.Assert.exists(searchInterface);
	            Assert_1.Assert.exists(queryStateModel);
	            Assert_1.Assert.exists(queryController);
	            Assert_1.Assert.exists(componentStateModel);
	            Assert_1.Assert.exists(usageAnalytics);
	            var initParameters_1 = {
	                options: options,
	                bindings: {
	                    searchInterface: searchInterface,
	                    queryStateModel: queryStateModel,
	                    queryController: queryController,
	                    usageAnalytics: usageAnalytics,
	                    componentStateModel: componentStateModel,
	                    componentOptionsModel: componentOptionsModel,
	                    root: element
	                }
	            };
	            _.each(options['externalComponents'], function (externalComponent) {
	                var elementToInstantiate = externalComponent;
	                if (Utils_1.Utils.isHtmlElement(elementToInstantiate)) {
	                    Initialization.automaticallyCreateComponentsInside(elementToInstantiate, initParameters_1);
	                }
	                else if (JQueryutils_1.JQueryUtils.isInstanceOfJQuery(elementToInstantiate)) {
	                    Initialization.automaticallyCreateComponentsInside((elementToInstantiate.get(0)), initParameters_1);
	                }
	            });
	        }
	    };
	    Initialization.createFunctionThatInitializesComponentOnElements = function (elements, componentClassId, componentClass, initParameters) {
	        return function () {
	            _.each(elements, function (matchingElement) {
	                if (Component_1.Component.get(matchingElement, componentClassId) == null) {
	                    // If options were provided, lookup options for this component class and
	                    // also for the element id. Merge them and pass those to the factory method.
	                    var optionsToUse = undefined;
	                    if (Utils_1.Utils.exists(initParameters.options)) {
	                        var optionsForComponentClass = initParameters.options[componentClassId];
	                        var optionsForElementId = initParameters.options[matchingElement.id];
	                        var initOptions = initParameters.options['initOptions'] ? initParameters.options['initOptions'][componentClassId] : {};
	                        optionsToUse = Utils_1.Utils.extendDeep(optionsForElementId, initOptions);
	                        optionsToUse = Utils_1.Utils.extendDeep(optionsForComponentClass, optionsToUse);
	                    }
	                    var initParamToUse = _.extend({}, initParameters, { options: optionsToUse });
	                    Initialization.createComponentOfThisClassOnElement(componentClass['ID'], matchingElement, initParamToUse);
	                }
	            });
	        };
	    };
	    return Initialization;
	}());
	Initialization.logger = new Logger_1.Logger('Initialization');
	Initialization.autoCreateComponents = {};
	Initialization.namedMethods = {};
	exports.Initialization = Initialization;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var JQueryutils_1 = __webpack_require__(18);
	var Dom_1 = __webpack_require__(59);
	var QueryStateModel_1 = __webpack_require__(101);
	var ComponentStateModel_1 = __webpack_require__(103);
	var ComponentOptionsModel_1 = __webpack_require__(102);
	var QueryController_1 = __webpack_require__(74);
	var SearchInterface_1 = __webpack_require__(108);
	var NoopAnalyticsClient_1 = __webpack_require__(119);
	var BaseComponent_1 = __webpack_require__(76);
	var DebugEvents_1 = __webpack_require__(43);
	var _ = __webpack_require__(14);
	/**
	 * The base class for every component in the framework.
	 */
	var Component = (function (_super) {
	    __extends(Component, _super);
	    /**
	     * Create a new Component. Resolve all {@link IComponentBindings} if not provided.<br/>
	     * Create a new Logger for this component.
	     * Attach the component to the {@link SearchInterface}.<br/>
	     * @param element The HTMLElement on which to create the component. Used to bind data on the element.
	     * @param type The unique identifier for this component. See : {@link IComponentDefinition.ID}. Used to generate the unique Coveo CSS class associated with every component.
	     * @param bindings The environment for every component. Optional, but omitting to provide one will impact performance.
	     */
	    function Component(element, type, bindings) {
	        if (bindings === void 0) { bindings = {}; }
	        var _this = _super.call(this, element, type) || this;
	        _this.element = element;
	        _this.type = type;
	        /**
	         * Allows the component to bind events and execute them only when it is enabled.
	         * @type {Coveo.ComponentEvents}
	         */
	        _this.bind = new ComponentEvents(_this);
	        _this.root = bindings.root || _this.resolveRoot();
	        _this.queryStateModel = bindings.queryStateModel || _this.resolveQueryStateModel();
	        _this.componentStateModel = bindings.componentStateModel || _this.resolveComponentStateModel();
	        _this.queryController = bindings.queryController || _this.resolveQueryController();
	        _this.searchInterface = bindings.searchInterface || _this.resolveSearchInterface();
	        _this.usageAnalytics = bindings.usageAnalytics || _this.resolveUA();
	        _this.componentOptionsModel = bindings.componentOptionsModel || _this.resolveComponentOptionsModel();
	        _this.ensureDom = _.once(function () { return _this.createDom(); });
	        if (_this.searchInterface != null) {
	            _this.searchInterface.attachComponent(type, _this);
	        }
	        _this.initDebugInfo();
	        return _this;
	    }
	    /**
	     * Return the bindings, or environment, for the current component.
	     * @returns {IComponentBindings}
	     */
	    Component.prototype.getBindings = function () {
	        return {
	            root: this.root,
	            queryStateModel: this.queryStateModel,
	            queryController: this.queryController,
	            searchInterface: this.searchInterface,
	            componentStateModel: this.componentStateModel,
	            componentOptionsModel: this.componentOptionsModel,
	            usageAnalytics: this.usageAnalytics
	        };
	    };
	    Component.prototype.createDom = function () {
	        // By default we do nothing
	    };
	    Component.prototype.resolveSearchInterface = function () {
	        return Component.resolveBinding(this.element, SearchInterface_1.SearchInterface);
	    };
	    Component.prototype.resolveRoot = function () {
	        var resolvedSearchInterface = Component.resolveBinding(this.element, SearchInterface_1.SearchInterface);
	        return resolvedSearchInterface ? resolvedSearchInterface.element : undefined;
	    };
	    Component.prototype.resolveQueryController = function () {
	        return Component.resolveBinding(this.element, QueryController_1.QueryController);
	    };
	    Component.prototype.resolveComponentStateModel = function () {
	        return Component.resolveBinding(this.element, ComponentStateModel_1.ComponentStateModel);
	    };
	    Component.prototype.resolveQueryStateModel = function () {
	        return Component.resolveBinding(this.element, QueryStateModel_1.QueryStateModel);
	    };
	    Component.prototype.resolveComponentOptionsModel = function () {
	        return Component.resolveBinding(this.element, ComponentOptionsModel_1.ComponentOptionsModel);
	    };
	    Component.prototype.resolveUA = function () {
	        var searchInterface = this.resolveSearchInterface();
	        return (searchInterface && searchInterface.usageAnalytics) ? searchInterface.usageAnalytics : new NoopAnalyticsClient_1.NoopAnalyticsClient();
	    };
	    Component.prototype.resolveResult = function () {
	        return Component.getResult(this.element);
	    };
	    Component.prototype.initDebugInfo = function () {
	        var _this = this;
	        Dom_1.$$(this.element).on('dblclick', function (e) {
	            if (e.altKey) {
	                var debugInfo = _this.debugInfo();
	                if (debugInfo != null) {
	                    Dom_1.$$(_this.root).trigger(DebugEvents_1.DebugEvents.showDebugPanel, _this.debugInfo());
	                }
	            }
	        });
	    };
	    /**
	     * Get the bound component to the given HTMLElement. Throws an assert if the HTMLElement has no component bound, unless using the noThrow argument.<br/>
	     * If there is multiple component bound to the current HTMLElement, you must specify the component class.
	     * @param element HTMLElement for which to get the bound component.
	     * @param componentClass Optional component class. If the HTMLElement has multiple components bound, you must specify which one you are targeting.
	     * @param noThrow Boolean option to tell the method to not throw on error.
	     * @returns {Component}
	     */
	    Component.get = function (element, componentClass, noThrow) {
	        Assert_1.Assert.exists(element);
	        if (_.isString(componentClass)) {
	            return element[Component.computeCssClassNameForType(componentClass)];
	        }
	        else if (Utils_1.Utils.exists(componentClass)) {
	            Assert_1.Assert.exists(componentClass.ID);
	            return element[Component.computeCssClassNameForType(componentClass.ID)];
	        }
	        else {
	            // No class specified, but we support returning the bound component
	            // if there is exactly one.
	            var boundComponents = BaseComponent_1.BaseComponent.getBoundComponentsForElement(element);
	            if (!noThrow) {
	                Assert_1.Assert.check(boundComponents.length <= 1, 'More than one component is bound to this element. You need to specify the component type.');
	            }
	            return boundComponents[0];
	        }
	    };
	    Component.getResult = function (element, noThrow) {
	        if (noThrow === void 0) { noThrow = false; }
	        var resultElement = Dom_1.$$(element).closest('.CoveoResult');
	        Assert_1.Assert.check(noThrow || resultElement != undefined);
	        return resultElement['CoveoResult'];
	    };
	    Component.bindResultToElement = function (element, result) {
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(result);
	        Dom_1.$$(element).addClass('CoveoResult');
	        element['CoveoResult'] = result;
	        var jQuery = JQueryutils_1.JQueryUtils.getJQuery();
	        if (jQuery) {
	            jQuery(element).data(result);
	        }
	    };
	    Component.resolveBinding = function (element, componentClass) {
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(componentClass);
	        Assert_1.Assert.exists(componentClass.ID);
	        // first, look down
	        var found;
	        if (Dom_1.$$(element).is('.' + Component.computeCssClassNameForType(componentClass.ID))) {
	            found = element;
	        }
	        else {
	            var findDown = Dom_1.$$(element).findClass(Component.computeCssClassNameForType(componentClass.ID));
	            if (!findDown || findDown.length == 0) {
	                var findUp = Dom_1.$$(element).closest(Component.computeCssClassNameForType(componentClass.ID));
	                if (findUp) {
	                    found = findUp;
	                }
	            }
	            else {
	                found = findDown;
	            }
	        }
	        if (found) {
	            return found[Component.computeCssClassNameForType(componentClass.ID)];
	        }
	        else {
	            return undefined;
	        }
	    };
	    Component.pointElementsToDummyForm = function (element) {
	        var inputs = Dom_1.$$(element).is('input') ? [element] : [];
	        inputs = inputs.concat(Dom_1.$$(element).findAll('input'));
	        _.each(_.compact(inputs), function (input) {
	            input.setAttribute('form', 'coveo-dummy-form');
	        });
	    };
	    return Component;
	}(BaseComponent_1.BaseComponent));
	exports.Component = Component;
	/**
	 * Used by the various Coveo Component to trigger and bind event.<br/>
	 * It adds a small logic to execute handler or triggers only when the component is "enabled".<br/>
	 * A component is disabled by calling {Component.disable}<br/>
	 * Typically, a component is disabled when it is not active in the current {Tab}.<br/>
	 * It can also be disabled by external code.<br/>
	 * The class serves as a way to not execute handler on component that are invisible and inactive in the query.
	 */
	var ComponentEvents = (function () {
	    /**
	     * Create a new `ComponentEvents` for the given {@link Component}.
	     * @param owner The {@link Component} which owns those events handler and trigger.
	     */
	    function ComponentEvents(owner) {
	        this.owner = owner;
	        Assert_1.Assert.exists(owner);
	    }
	    ComponentEvents.prototype.on = function (arg, event, handler) {
	        if (!JQueryutils_1.JQueryUtils.getJQuery() || !JQueryutils_1.JQueryUtils.isInstanceOfJQuery(arg)) {
	            var htmlEl = arg;
	            Dom_1.$$(htmlEl).on(event, this.wrapToCallIfEnabled(handler));
	        }
	        else {
	            var jq = arg;
	            jq.on(event, this.wrapToCallIfEnabled(handler));
	        }
	    };
	    ComponentEvents.prototype.one = function (arg, event, handler) {
	        if (arg instanceof HTMLElement) {
	            var htmlEl = arg;
	            Dom_1.$$(htmlEl).one(event, this.wrapToCallIfEnabled(handler));
	        }
	        else {
	            var jq = arg;
	            jq.one(event, this.wrapToCallIfEnabled(handler));
	        }
	    };
	    /**
	     * Bind on the "root" of the Component. The root is typically the {@link SearchInterface}.<br/>
	     * Bind an event using native javascript code.
	     * @param event The event for which to register an handler.
	     * @param handler The function to execute when the event is triggered.
	     */
	    ComponentEvents.prototype.onRootElement = function (event, handler) {
	        this.on(this.owner.root, event, handler);
	    };
	    /**
	     * Bind on the "root" of the Component. The root is typically the {@link SearchInterface}.<br/>
	     * Bind an event using native javascript code.
	     * The handler will execute only ONE time.
	     * @param event The event for which to register an handler.
	     * @param handler The function to execute when the event is triggered.
	     */
	    ComponentEvents.prototype.oneRootElement = function (event, handler) {
	        this.one(this.owner.root, event, handler);
	    };
	    /**
	     * Bind an event related specially to the query state model.<br/>
	     * This will build the correct string event and execute the handler only if the component is activated.
	     * @param eventType The event type for which to register an event.
	     * @param attribute The attribute for which to register an event.
	     * @param handler The handler to execute when the query state event is triggered.
	     */
	    ComponentEvents.prototype.onQueryState = function (eventType, attribute, handler) {
	        this.onRootElement(this.getQueryStateEventName(eventType, attribute), handler);
	    };
	    /**
	     * Bind an event related specially to the query state model.<br/>
	     * This will build the correct string event and execute the handler only if the component is activated.<br/>
	     * Will execute only once.
	     * @param eventType The event type for which to register an event.
	     * @param attribute The attribute for which to register an event.
	     * @param handler The handler to execute when the query state event is triggered.
	     */
	    ComponentEvents.prototype.oneQueryState = function (eventType, attribute, handler) {
	        this.oneRootElement(this.getQueryStateEventName(eventType, attribute), handler);
	    };
	    ComponentEvents.prototype.trigger = function (arg, event, args) {
	        this.wrapToCallIfEnabled(function () {
	            if (arg instanceof HTMLElement) {
	                var htmlEl = arg;
	                Dom_1.$$(htmlEl).trigger(event, args);
	            }
	            else {
	                var jq = arg;
	                jq.trigger(event, args);
	            }
	        })(args);
	    };
	    /**
	     * Execute the function only if the component is enabled.
	     * @param func The function to execute if the component is enabled.
	     * @returns {function(...[any]): *}
	     */
	    ComponentEvents.prototype.wrapToCallIfEnabled = function (func) {
	        var _this = this;
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (!_this.owner.disabled) {
	                if (args && args[0] instanceof CustomEvent) {
	                    if (args[0].detail) {
	                        args = [args[0].detail];
	                    }
	                }
	                else if (args && JQueryutils_1.JQueryUtils.isInstanceOfJqueryEvent(args[0])) {
	                    if (args[1] != undefined) {
	                        args = [args[1]];
	                    }
	                    else {
	                        args = [];
	                    }
	                }
	                return func.apply(_this.owner, args);
	            }
	        };
	    };
	    ComponentEvents.prototype.getQueryStateEventName = function (eventType, attribute) {
	        var evtName;
	        if (eventType && attribute) {
	            evtName = this.owner.queryStateModel.getEventName(eventType + attribute);
	        }
	        else {
	            evtName = this.owner.queryStateModel.getEventName(eventType);
	        }
	        return evtName;
	    };
	    return ComponentEvents;
	}());
	exports.ComponentEvents = ComponentEvents;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SearchEndpoint_1 = __webpack_require__(9);
	var ComponentOptions_1 = __webpack_require__(109);
	var DeviceUtils_1 = __webpack_require__(16);
	var Dom_1 = __webpack_require__(59);
	var DomUtils_1 = __webpack_require__(60);
	var Assert_1 = __webpack_require__(12);
	var QueryStateModel_1 = __webpack_require__(101);
	var ComponentStateModel_1 = __webpack_require__(103);
	var ComponentOptionsModel_1 = __webpack_require__(102);
	var QueryController_1 = __webpack_require__(74);
	var Model_1 = __webpack_require__(98);
	var QueryEvents_1 = __webpack_require__(48);
	var StandaloneSearchInterfaceEvents_1 = __webpack_require__(54);
	var HistoryController_1 = __webpack_require__(97);
	var LocalStorageHistoryController_1 = __webpack_require__(99);
	var InitializationEvents_1 = __webpack_require__(45);
	var NoopAnalyticsClient_1 = __webpack_require__(119);
	var Utils_1 = __webpack_require__(13);
	var RootComponent_1 = __webpack_require__(75);
	var BaseComponent_1 = __webpack_require__(76);
	var Debug_1 = __webpack_require__(120);
	var HashUtils_1 = __webpack_require__(65);
	var fastclick = __webpack_require__(121);
	var jstz = __webpack_require__(122);
	var SentryLogger_1 = __webpack_require__(125);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var ResponsiveComponents_1 = __webpack_require__(17);
	var _ = __webpack_require__(14);
	/**
	 * The SearchInterface component is the root and main component of your Coveo search interface. You should place all
	 * other Coveo components inside the SearchInterface component.
	 *
	 * It is also on the HTMLElement of the SearchInterface component that you call the {@link init} function.
	 *
	 * It is advisable to specify a unique HTML `id` attribute for the SearchInterface component in order to be able to
	 * reference it easily.
	 *
	 * **Example:**
	 *
	 * ```html
	 * <head>
	 *
	 * [ ... ]
	 *
	 * <script>
	 *   document.addEventListener('DOMContentLoaded', function() {
	 *
	 *     [ ... ]
	 *     // The init function is called on the SearchInterface element, in this case, the body of the page.
	 *     Coveo.init(document.body);
	 *
	 *     [ ... ]
	 *
	 *     });
	 * </script>
	 *
	 * [ ... ]
	 * </head>
	 *
	 * <!-- Specifying a unique HTML id attribute for the SearchInterface component is good practice. -->
	 * <body id='search' class='CoveoSearchInterface' [ ... other options ... ]>
	 *
	 *   [ ... ]
	 *
	 *   <!-- You should place all other Coveo components here, inside the SearchInterface component. -->
	 *
	 *   [ ... ]
	 *
	 * </body>
	 * ```
	 */
	var SearchInterface = (function (_super) {
	    __extends(SearchInterface, _super);
	    /**
	     * Creates a new SearchInterface. Initialize various singletons for the interface (e.g., usage analytics, query
	     * controller, state model, etc.). Binds events related to the query. Hides and shows the loading animation, if
	     * activated (see the [hideUntilFirstQuery]{@link SearchInterface.options.hideUntilFirstQuery} option).
	     * @param element The HTMLElement on which to instantiate the component. This cannot be an `HTMLInputElement` for
	     * technical reasons.
	     * @param options The options for the SearchInterface.
	     * @param analyticsOptions The options for the {@link Analytics} component. Since the Analytics component is normally
	     * global, it needs to be passed at initialization of the whole interface.
	     * @param _window The window object for the search interface. Used for unit tests, which can pass a mock. Default is
	     * the global window object.
	     */
	    function SearchInterface(element, options, analyticsOptions, _window) {
	        if (_window === void 0) { _window = window; }
	        var _this = _super.call(this, element, SearchInterface.ID) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.analyticsOptions = analyticsOptions;
	        _this.isNewDesignAttribute = false;
	        if (DeviceUtils_1.DeviceUtils.isMobileDevice()) {
	            Dom_1.$$(document.body).addClass('coveo-mobile-device');
	        }
	        // The definition file for fastclick does not match the way that fast click gets loaded (AMD)
	        if (fastclick.attach) {
	            fastclick.attach(element);
	        }
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, SearchInterface, options);
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(_this.options);
	        if (_this.options.hideUntilFirstQuery) {
	            _this.showAndHideFirstQueryAnimation();
	        }
	        _this.root = element;
	        _this.queryStateModel = new QueryStateModel_1.QueryStateModel(element);
	        _this.componentStateModel = new ComponentStateModel_1.ComponentStateModel(element);
	        _this.componentOptionsModel = new ComponentOptionsModel_1.ComponentOptionsModel(element);
	        _this.usageAnalytics = _this.initializeAnalytics();
	        _this.queryController = new QueryController_1.QueryController(element, _this.options, _this.usageAnalytics, _this);
	        new SentryLogger_1.SentryLogger(_this.queryController);
	        var eventName = _this.queryStateModel.getEventName(Model_1.Model.eventTypes.preprocess);
	        Dom_1.$$(_this.element).on(eventName, function (e, args) { return _this.handlePreprocessQueryStateModel(args); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.buildingQuery, function (e, args) { return _this.handleBuildingQuery(args); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.querySuccess, function (e, args) { return _this.handleQuerySuccess(args); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.queryError, function (e, args) { return _this.handleQueryError(args); });
	        if (_this.options.enableHistory) {
	            if (!_this.options.useLocalStorageForHistory) {
	                new HistoryController_1.HistoryController(element, _window, _this.queryStateModel, _this.queryController);
	            }
	            else {
	                new LocalStorageHistoryController_1.LocalStorageHistoryController(element, _window, _this.queryStateModel, _this.queryController);
	            }
	        }
	        else {
	            Dom_1.$$(_this.element).on(InitializationEvents_1.InitializationEvents.restoreHistoryState, function () { return _this.queryStateModel.setMultiple(_this.queryStateModel.defaultAttributes); });
	        }
	        var eventNameQuickview = _this.queryStateModel.getEventName(Model_1.Model.eventTypes.changeOne + QueryStateModel_1.QueryStateModel.attributesEnum.quickview);
	        Dom_1.$$(_this.element).on(eventNameQuickview, function (e, args) { return _this.handleQuickviewChanged(args); });
	        // shows the UI, since it's been hidden while loading
	        _this.element.style.display = element.style.display || 'block';
	        _this.setupDebugInfo();
	        _this.isNewDesignAttribute = _this.root.getAttribute('data-design') == 'new';
	        _this.responsiveComponents = new ResponsiveComponents_1.ResponsiveComponents();
	        return _this;
	    }
	    /**
	     * Displays the first query animation (see the
	     * [firstLoadingAnimation]{@link SearchInterface.options.firstLoadingAnimation} option).
	     *
	     * By default, this is the Coveo logo with a CSS animation (which can be customized with options or CSS).
	     */
	    SearchInterface.prototype.showWaitAnimation = function () {
	        Dom_1.$$(this.options.firstLoadingAnimation).detach();
	        Dom_1.$$(this.element).addClass('coveo-waiting-for-first-query');
	        this.element.appendChild(this.options.firstLoadingAnimation);
	    };
	    /**
	     * Hides the first query animation (see the
	     * [firstLoadingAnimation]{@link SearchInterface.options.firstLoadingAnimation} option).
	     *
	     * By default, this is the Coveo logo with a CSS animation (which can be customized with options or CSS).
	     */
	    SearchInterface.prototype.hideWaitAnimation = function () {
	        Dom_1.$$(this.options.firstLoadingAnimation).detach();
	        Dom_1.$$(this.element).removeClass('coveo-waiting-for-first-query');
	    };
	    /**
	     * Attaches a component to the search interface. This allows the search interface to easily list and iterate over its
	     * components.
	     * @param type Normally, the component type is a unique identifier without the `Coveo` prefix (e.g., `CoveoFacet` ->
	     * `Facet`, `CoveoPager` -> `Pager`, `CoveoQuerybox` -> `Querybox`, etc.).
	     * @param component The component instance to attach.
	     */
	    SearchInterface.prototype.attachComponent = function (type, component) {
	        this.getComponents(type).push(component);
	    };
	    /**
	     * Detaches a component from the search interface.
	     * @param type Normally, the component type is a unique identifier without the `Coveo` prefix (e.g., `CoveoFacet` ->
	     * `Facet`, `CoveoPager` -> `Pager`, `CoveoQuerybox` -> `Querybox`, etc.).
	     * @param component The component instance to detach.
	     */
	    SearchInterface.prototype.detachComponent = function (type, component) {
	        var components = this.getComponents(type);
	        var index = _.indexOf(components, component);
	        if (index > -1) {
	            components.splice(index, 1);
	        }
	    };
	    /**
	     * Returns the bindings, or environment, for the current component.
	     * @returns {IComponentBindings}
	     */
	    SearchInterface.prototype.getBindings = function () {
	        return {
	            root: this.root,
	            queryStateModel: this.queryStateModel,
	            queryController: this.queryController,
	            searchInterface: this,
	            componentStateModel: this.componentStateModel,
	            componentOptionsModel: this.componentOptionsModel,
	            usageAnalytics: this.usageAnalytics
	        };
	    };
	    /**
	     * Gets all the components of a given type.
	     * @param type Normally, the component type is a unique identifier without the `Coveo` prefix (e.g., `CoveoFacet` ->
	     * `Facet`, `CoveoPager` -> `Pager`, `CoveoQuerybox` -> `Querybox`, etc.).
	     */
	    SearchInterface.prototype.getComponents = function (type) {
	        if (this.attachedComponents == null) {
	            this.attachedComponents = {};
	        }
	        if (!(type in this.attachedComponents)) {
	            this.attachedComponents[type] = [];
	        }
	        return this.attachedComponents[type];
	    };
	    /**
	     * Indicates whether the search interface is using the new design.
	     * This changes the rendering of multiple components.
	     */
	    SearchInterface.prototype.isNewDesign = function () {
	        return this.isNewDesignAttribute;
	    };
	    SearchInterface.prototype.initializeAnalytics = function () {
	        var analyticsRef = BaseComponent_1.BaseComponent.getComponentRef('Analytics');
	        if (analyticsRef) {
	            return analyticsRef.create(this.element, this.analyticsOptions);
	        }
	        return new NoopAnalyticsClient_1.NoopAnalyticsClient();
	    };
	    SearchInterface.prototype.setupDebugInfo = function () {
	        var _this = this;
	        if (this.options.enableDebugInfo) {
	            setTimeout(function () { return new Debug_1.Debug(_this.element, _this.queryController); });
	        }
	    };
	    SearchInterface.prototype.showAndHideFirstQueryAnimation = function () {
	        var _this = this;
	        this.showWaitAnimation();
	        // On first query success or error, wait for call stack to finish, then remove the animation
	        Dom_1.$$(this.element).one(QueryEvents_1.QueryEvents.querySuccess, function () {
	            _.defer(function () { return _this.hideWaitAnimation(); });
	        });
	        Dom_1.$$(this.element).one(QueryEvents_1.QueryEvents.queryError, function () {
	            _.defer(function () { return _this.hideWaitAnimation(); });
	        });
	    };
	    SearchInterface.prototype.handlePreprocessQueryStateModel = function (args) {
	        var tgFromModel = this.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.tg);
	        var tFromModel = this.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.t);
	        var tg = tgFromModel;
	        var t = tFromModel;
	        // if you want to set the tab group
	        if (args.tg !== undefined) {
	            args.tg = this.getTabGroupId(args.tg);
	            if (tg != args.tg) {
	                args.t = args.t || QueryStateModel_1.QueryStateModel.defaultAttributes.t;
	                args.sort = args.sort || QueryStateModel_1.QueryStateModel.defaultAttributes.sort;
	                tg = args.tg;
	            }
	        }
	        if (args.t !== undefined) {
	            args.t = this.getTabId(tg, args.t);
	            if (t != args.t) {
	                args.sort = args.sort || QueryStateModel_1.QueryStateModel.defaultAttributes.sort;
	                t = args.t;
	            }
	        }
	        if (args.sort !== undefined) {
	            args.sort = this.getSort(t, args.sort);
	        }
	        if (args.quickview !== undefined) {
	            args.quickview = this.getQuickview(args.quickview);
	        }
	    };
	    SearchInterface.prototype.getTabGroupId = function (tabGroupId) {
	        var tabGroupRef = BaseComponent_1.BaseComponent.getComponentRef('TabGroup');
	        if (tabGroupRef) {
	            var tabGroups = this.getComponents(tabGroupRef.ID);
	            // check if the tabgroup is correct
	            if (tabGroupId != QueryStateModel_1.QueryStateModel.defaultAttributes.tg && _.any(tabGroups, function (tabGroup) { return !tabGroup.disabled && tabGroupId == tabGroup.options.id; })) {
	                return tabGroupId;
	            }
	            // select the first tabGroup
	            if (tabGroups.length > 0) {
	                return tabGroups[0].options.id;
	            }
	        }
	        return QueryStateModel_1.QueryStateModel.defaultAttributes.tg;
	    };
	    SearchInterface.prototype.getTabId = function (tabGroupId, tabId) {
	        var tabRef = BaseComponent_1.BaseComponent.getComponentRef('Tab');
	        var tabGroupRef = BaseComponent_1.BaseComponent.getComponentRef('TabGroup');
	        if (tabRef) {
	            var tabs = this.getComponents(tabRef.ID);
	            if (tabGroupRef) {
	                // if has a tabGroup
	                if (tabGroupId != QueryStateModel_1.QueryStateModel.defaultAttributes.tg) {
	                    var tabGroups = this.getComponents(tabGroupRef.ID);
	                    var tabGroup_1 = _.find(tabGroups, function (tabGroup) { return tabGroupId == tabGroup.options.id; });
	                    // check if the tabgroup contain this tab
	                    if (tabId != QueryStateModel_1.QueryStateModel.defaultAttributes.t && _.any(tabs, function (tab) { return tabId == tab.options.id && tabGroup_1.isElementIncludedInTabGroup(tab.element); })) {
	                        return tabId;
	                    }
	                    // select the first tab in the tabGroup
	                    var tab = _.find(tabs, function (tab) { return tabGroup_1.isElementIncludedInTabGroup(tab.element); });
	                    if (tab != null) {
	                        return tab.options.id;
	                    }
	                    return QueryStateModel_1.QueryStateModel.defaultAttributes.t;
	                }
	            }
	            // check if the tab is correct
	            if (tabId != QueryStateModel_1.QueryStateModel.defaultAttributes.t && _.any(tabs, function (tab) { return tabId == tab.options.id; })) {
	                return tabId;
	            }
	            // select the first tab
	            if (tabs.length > 0) {
	                return tabs[0].options.id;
	            }
	        }
	        return QueryStateModel_1.QueryStateModel.defaultAttributes.t;
	    };
	    SearchInterface.prototype.getSort = function (tabId, sortId) {
	        var sortRef = BaseComponent_1.BaseComponent.getComponentRef('Sort');
	        if (sortRef) {
	            var sorts = this.getComponents(sortRef.ID);
	            // if has a selected tab
	            var tabRef = BaseComponent_1.BaseComponent.getComponentRef('Tab');
	            if (tabRef) {
	                if (tabId != QueryStateModel_1.QueryStateModel.defaultAttributes.t) {
	                    var tabs = this.getComponents(tabRef.ID);
	                    var tab_1 = _.find(tabs, function (tab) { return tabId == tab.options.id; });
	                    var sortCriteria = tab_1.options.sort;
	                    // check if the tab contain this sort
	                    if (sortId != QueryStateModel_1.QueryStateModel.defaultAttributes.sort && _.any(sorts, function (sort) { return tab_1.isElementIncludedInTab(sort.element) && sort.match(sortId); })) {
	                        return sortId;
	                    }
	                    else if (sortCriteria != null) {
	                        // if not and tab.options.sort is set apply it
	                        return sortCriteria.toString();
	                    }
	                    // select the first sort in the tab
	                    var sort = _.find(sorts, function (sort) { return tab_1.isElementIncludedInTab(sort.element); });
	                    if (sort != null) {
	                        return sort.options.sortCriteria[0].toString();
	                    }
	                    return QueryStateModel_1.QueryStateModel.defaultAttributes.sort;
	                }
	            }
	            // check if the sort is correct
	            if (sortId != QueryStateModel_1.QueryStateModel.defaultAttributes.sort && _.any(sorts, function (sort) { return sort.match(sortId); })) {
	                return sortId;
	            }
	            // select the first sort
	            if (sorts.length > 0) {
	                return sorts[0].options.sortCriteria[0].toString();
	            }
	        }
	        return QueryStateModel_1.QueryStateModel.defaultAttributes.sort;
	    };
	    SearchInterface.prototype.getQuickview = function (quickviewId) {
	        var quickviewRef = BaseComponent_1.BaseComponent.getComponentRef('Quickview');
	        if (quickviewRef) {
	            var quickviews = this.getComponents(quickviewRef.ID);
	            if (_.any(quickviews, function (quickview) { return quickview.getHashId() == quickviewId; })) {
	                return quickviewId;
	            }
	        }
	        return QueryStateModel_1.QueryStateModel.defaultAttributes.quickview;
	    };
	    SearchInterface.prototype.handleQuickviewChanged = function (args) {
	        var quickviewRef = BaseComponent_1.BaseComponent.getComponentRef('Quickview');
	        if (quickviewRef) {
	            var quickviews = this.getComponents(quickviewRef.ID);
	            if (args.value != '') {
	                var quickviewsPartition = _.partition(quickviews, function (quickview) { return quickview.getHashId() == args.value; });
	                if (quickviewsPartition[0].length != 0) {
	                    _.first(quickviewsPartition[0]).open();
	                    _.forEach(_.tail(quickviewsPartition[0]), function (quickview) { return quickview.close(); });
	                }
	                _.forEach(quickviewsPartition[1], function (quickview) { return quickview.close(); });
	            }
	            else {
	                _.forEach(quickviews, function (quickview) {
	                    quickview.close();
	                });
	            }
	        }
	    };
	    SearchInterface.prototype.handleBuildingQuery = function (data) {
	        if (this.options.enableDuplicateFiltering) {
	            data.queryBuilder.enableDuplicateFiltering = true;
	        }
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.pipeline)) {
	            data.queryBuilder.pipeline = this.options.pipeline;
	        }
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.maximumAge)) {
	            data.queryBuilder.maximumAge = this.options.maximumAge;
	        }
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.resultsPerPage)) {
	            data.queryBuilder.numberOfResults = this.options.resultsPerPage;
	        }
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.excerptLength)) {
	            data.queryBuilder.excerptLength = this.options.excerptLength;
	        }
	        if (Utils_1.Utils.isNonEmptyString(this.options.expression)) {
	            data.queryBuilder.advancedExpression.add(this.options.expression);
	        }
	        if (Utils_1.Utils.isNonEmptyString(this.options.filterField)) {
	            data.queryBuilder.filterField = this.options.filterField;
	        }
	        if (Utils_1.Utils.isNonEmptyString(this.options.timezone)) {
	            data.queryBuilder.timezone = this.options.timezone;
	        }
	        data.queryBuilder.enableCollaborativeRating = this.options.enableCollaborativeRating;
	        data.queryBuilder.enableDuplicateFiltering = this.options.enableDuplicateFiltering;
	    };
	    SearchInterface.prototype.handleQuerySuccess = function (data) {
	        var noResults = data.results.results.length == 0;
	        this.toggleSectionState('coveo-no-results', noResults);
	        var resultsHeader = Dom_1.$$(this.element).find('.coveo-results-header');
	        if (resultsHeader) {
	            Dom_1.$$(resultsHeader).removeClass('coveo-query-error');
	        }
	    };
	    SearchInterface.prototype.handleQueryError = function (data) {
	        this.toggleSectionState('coveo-no-results');
	        var resultsHeader = Dom_1.$$(this.element).find('.coveo-results-header');
	        if (resultsHeader) {
	            Dom_1.$$(resultsHeader).addClass('coveo-query-error');
	        }
	    };
	    SearchInterface.prototype.toggleSectionState = function (cssClass, toggle) {
	        var _this = this;
	        if (toggle === void 0) { toggle = true; }
	        var facetSection = Dom_1.$$(this.element).find('.coveo-facet-column');
	        var resultsSection = Dom_1.$$(this.element).find('.coveo-results-column');
	        var resultsHeader = Dom_1.$$(this.element).find('.coveo-results-header');
	        var facetSearchs = Dom_1.$$(this.element).findAll('.coveo-facet-search-results');
	        if (facetSection) {
	            Dom_1.$$(facetSection).toggleClass(cssClass, toggle && !this.queryStateModel.atLeastOneFacetIsActive());
	        }
	        if (resultsSection) {
	            Dom_1.$$(resultsSection).toggleClass(cssClass, toggle && !this.queryStateModel.atLeastOneFacetIsActive());
	        }
	        if (resultsHeader) {
	            Dom_1.$$(resultsHeader).toggleClass(cssClass, toggle && !this.queryStateModel.atLeastOneFacetIsActive());
	        }
	        if (facetSearchs && facetSearchs.length > 0) {
	            _.each(facetSearchs, function (facetSearch) {
	                Dom_1.$$(facetSearch).toggleClass(cssClass, toggle && !_this.queryStateModel.atLeastOneFacetIsActive());
	            });
	        }
	    };
	    return SearchInterface;
	}(RootComponent_1.RootComponent));
	SearchInterface.ID = 'SearchInterface';
	/**
	 * The options for the search interface
	 * @componentOptions
	 */
	SearchInterface.options = {
	    /**
	     * Specifies whether to allow the end user to navigate search history using the **Back** and **Forward** buttons
	     * of the browser.
	     *
	     * If this options is `true`, the SearchInterface component saves the state of the current query in the hash portion
	     * of the URL when the user submits the query.
	     *
	     * **Example:**
	     * > If the `enableHistory` option is `true` and the current query is `foobar`, the SearchInterface component
	     * > saves `q=foobar` in the URL hash when the user submits the query.
	     *
	     * Default value is `false`.
	     */
	    enableHistory: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether to enable automatic responsive mode (i.e., automatically placing {@link Facet} and {@link Tab}
	     * components in dropdown menus under the search box when the width of the SearchInterface HTML element reaches or
	     * falls behind a certain pixel threshold).
	     *
	     * You might want to set this option to `false` if automatic responsive mode does not suit the specific design needs
	     * of your implementation.
	     *
	     * **Note:**
	     *
	     * > If this option is `true`, you can also specify whether to enable responsive mode for Facet components (see
	     * > {@link Facet.options.enableResponsiveMode}) and for Tab components (see
	     * > {@link Tab.options.enableResponsiveMode}).
	     * >
	     * > In addition, you can specify the label you wish to display on the dropdown buttons (see
	     * > {@link Facet.options.dropdownHeaderLabel} and {@link Tab.options.dropdownHeaderLabel}).
	     *
	     * Default value is `true`.
	     */
	    enableAutomaticResponsiveMode: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether to save the interface state in the local storage of the browser.
	     *
	     * You might want to set this option to `true` for reasons specifically important for your implementation.
	     *
	     * Default value is `false`.
	     */
	    useLocalStorageForHistory: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the number of results to display on each page.
	     *
	     * For more advanced features, see the {@link ResultsPerPage} component.
	     *
	     * Default value is `10`. Minimum value is `0`.
	     */
	    resultsPerPage: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 10, min: 0 }),
	    /**
	     * Specifies the number of characters to get at query time to create an excerpt of the result.
	     *
	     * This setting is global and cannot be modified on a per-result basis.
	     *
	     * See also the {@link Excerpt} component.
	     *
	     * Default value is `200`. Minimum value is `0`.
	     */
	    excerptLength: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 200, min: 0 }),
	    /**
	     * Specifies an expression to add to each query.
	     *
	     * You might want to use this options to add a global filter to your entire search interface that applies for all
	     * tabs.
	     *
	     * You should not use this option to address security concerns (it is JavaScript, after all).
	     *
	     * **Note:**
	     *
	     * > It also is possible to set this option separately for each {@link Tab} component
	     * > (see {@link Tab.options.expression}).
	     *
	     * Default value is `''`.
	     */
	    expression: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '' }),
	    /**
	     * Specifies the name of a field to use as a custom filter when executing the query (also referred to as
	     * "folding").
	     *
	     * Setting a value for this option causes the index to return only one result having any particular value inside the
	     * filter field. Any other matching result is "folded" inside the childResults member of each JSON query result.
	     *
	     * This feature is typically useful with threaded conversations to include only one top-level result per
	     * conversation. Thus, the field you specify for this option will typically be value unique to each thread that is
	     * shared by all items (e.g., posts, emails, etc) in the thread.
	     *
	     * For more advanced features, see the {@link Folding} component.
	     *
	     * Default value is the empty string (`''`).
	     */
	    filterField: ComponentOptions_1.ComponentOptions.buildFieldOption({ defaultValue: '' }),
	    /**
	     * Specifies whether to display a loading animation before the first query successfully returns.
	     *
	     * **Note:**
	     *
	     * > If you do not set this options to `false`, the loading animation will still run until the first query
	     * > successfully returns even if the [autoTriggerQuery]{@link SearchInterface.options.autoTriggerQuery} option is
	     * `false`.
	     *
	     * See also the [firstLoadingAnimation]{@link SearchInterface.options.firstLoadingAnimation} option.
	     *
	     * Default value is `true`.
	     */
	    hideUntilFirstQuery: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the animation that you wish to display while your interface is loading.
	     *
	     * You can either specify the CSS selector of an HTML element that matches the default CSS class
	     * (`coveo-first-loading-animation`), or add `-selector` to the markup attribute of this option to specify the CSS
	     * selector of an HTML element that matches any CSS class.
	     *
	     * See also the [hideUntilFirstQuery]{@link SearchInterface.options.hideUntilFirstQuery} option.
	     *
	     * **Examples:**
	     *
	     * In this first case, the SearchInterface uses the HTML element whose `id` attribute is `MyAnimation` as the
	     * loading animation only if the `class` attribute of this element also matches `coveo-first-loading-animation`.
	     * Default loading animation CSS, which you can customize as you see fit, applies to this HTML element.
	     * ```html
	     * <div class='CoveoSearchInterface' data-first-loading-animation='#MyAnimation'>
	     *   <div id='MyAnimation' class='coveo-first-loading-animation'>
	     *     <!-- ... -->
	     *   </div>
	     *   <!-- ... -->
	     * </div>
	     * ```
	     *
	     * In this second case, the SearchInterface uses the HTML element whose `id` attribute is `MyAnimation` as the
	     * loading animation no matter what CSS class it matches. However, if the `class` attribute of the HTML element does
	     * not match `coveo-first-loading-animation`, no default loading animation CSS applies to this HTML element.
	     * Normally, you should only use `data-first-loading-animation-selector` if you want to completely override the
	     * default loading animation CSS.
	     * ```html
	     * <div class='CoveoSearchInterface' data-first-loading-animation-selector='#MyAnimation'>
	     *   <div id='MyAnimation' class='my-custom-loading-animation-class'>
	     *     <!-- ... -->
	     *   </div>
	     *   <!-- ... -->
	     * </div>
	     * ```
	     *
	     * See [Branding Customization](https://developers.coveo.com/x/EoGfAQ).
	     *
	     * By default, the loading animation is a Coveo CSS animation (which you can customize with CSS).
	     */
	    firstLoadingAnimation: ComponentOptions_1.ComponentOptions.buildChildHtmlElementOption({
	        childSelector: '.coveo-first-loading-animation',
	        defaultFunction: function () { return DomUtils_1.DomUtils.getBasicLoadingAnimation(); }
	    }),
	    /**
	     * Specifies whether to trigger the first query automatically when the page finishes loading.
	     *
	     *
	     * **Note:**
	     *
	     * > If you set this option to `false` while the
	     * > [hideUntilFirstQuery]{@link SearchInterface.options.hideUntilFirstQuery} option is `true`, the loading
	     * > animation will still run until the first query successfully returns.
	     *
	     * Default value is `true`.
	     */
	    autoTriggerQuery: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    endpoint: ComponentOptions_1.ComponentOptions.buildCustomOption(function (endpoint) { return endpoint != null && endpoint in SearchEndpoint_1.SearchEndpoint.endpoints ? SearchEndpoint_1.SearchEndpoint.endpoints[endpoint] : null; }, { defaultFunction: function () { return SearchEndpoint_1.SearchEndpoint.endpoints['default']; } }),
	    /**
	     * Specifies the timezone in which the search interface is loaded. This allows the index to recognize some special
	     * query syntax.
	     *
	     * This option must have a valid IANA zone info key (AKA the Olson time zone database) as its value.
	     *
	     * **Example:** `America/New_York`.
	     *
	     * By default, the search interface allows a library to try to detect the timezone automatically.
	     */
	    timezone: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultFunction: function () { return jstz.determine().name(); } }),
	    /**
	     * Specifies whether to enable the feature that allows the end user to ALT + double click any result to open a debug
	     * page with detailed information about all properties and fields for that result.
	     *
	     * Enabling this feature causes no security concern; the entire debug information is always visible to the end user
	     * through the browser developer console or by calling the Coveo API directly.
	     *
	     * Default value is `true`.
	     */
	    enableDebugInfo: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether to enable the collaborative rating for the index and to include user ratings on each results
	     * in addition to the normal index ranking.
	     *
	     * If you set this option to `true`, you can leverage it with the {@link ResultRating} component.
	     *
	     * Default value is `false`.
	     */
	    enableCollaborativeRating: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether to filter duplicates in the search results.
	     *
	     * Setting this option to `true` forces duplicates to not appear in search results. However, {@link Facet} counts
	     * still include the duplicates, which can be confusing for the end user. This is a limitation of the index.
	     *
	     * **Example:**
	     *
	     * > The end user narrows a query down to a single document that has a duplicate. If the enableDuplicateFiltering
	     * > option is `true`, then only one document appears in the search results while the Facet count is still 2.
	     *
	     * **Note:**
	     *
	     * > It also is possible to set this option separately for each {@link Tab} component
	     * > (see {@link Tab.options.enableDuplicateFiltering}).
	     *
	     * Default value is `false`.
	     */
	    enableDuplicateFiltering: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the name of the query pipeline to use for the queries.
	     *
	     * You can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have
	     * been created (see [Managing Query Pipelines](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=128)).
	     *
	     * **Note:**
	     *
	     * > It also is possible to set this option separately for each {@link Tab} component
	     * > (see {@link Tab.options.pipeline}).
	     *
	     * Default value is `undefined`, which means that the search interface uses the default pipeline.
	     */
	    pipeline: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results
	     * instead of performing a new query on the index. The cache is located in the Coveo Search API (which resides
	     * between the index and the search interface).
	     *
	     * If cached results that are older than the age you specify in this option are available, the framework will not
	     * use these results; it will rather perform a new query on the index.
	     *
	     * On high-volume public web sites, specifying a higher value for this option can greatly improve query response
	     * time at the cost of result freshness.
	     *
	     * **Note:**
	     *
	     * > It also is possible to set this option separately for each {@link Tab} component
	     * > (see {@link Tab.options.maximumAge}).
	     *
	     * Default value is `undefined`, which means that the search interface lets the Coveo Search API determine the
	     * maximum cache age. This is typically equivalent to 30 minutes (see
	     * [Query Parameters - maximumAge](https://developers.coveo.com/x/iwEv#QueryParameters-maximumAge)).
	     */
	    maximumAge: ComponentOptions_1.ComponentOptions.buildNumberOption(),
	    /**
	     * Specifies the search page you wish to navigate to when instantiating a standalone search box interface.
	     *
	     * Default value is `undefined`, which means that the search interface does not redirect.
	     */
	    searchPageUri: ComponentOptions_1.ComponentOptions.buildStringOption()
	};
	SearchInterface.SMALL_INTERFACE_CLASS_NAME = 'coveo-small-search-interface';
	exports.SearchInterface = SearchInterface;
	var StandaloneSearchInterface = (function (_super) {
	    __extends(StandaloneSearchInterface, _super);
	    function StandaloneSearchInterface(element, options, analyticsOptions, _window) {
	        if (_window === void 0) { _window = window; }
	        var _this = _super.call(this, element, ComponentOptions_1.ComponentOptions.initComponentOptions(element, StandaloneSearchInterface, options), analyticsOptions, _window) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.analyticsOptions = analyticsOptions;
	        _this._window = _window;
	        Dom_1.$$(_this.root).on(QueryEvents_1.QueryEvents.newQuery, function (e, args) { return _this.handleRedirect(e, args); });
	        return _this;
	    }
	    StandaloneSearchInterface.prototype.handleRedirect = function (e, data) {
	        var dataToSendOnBeforeRedirect = {
	            searchPageUri: this.options.searchPageUri,
	            cancel: false
	        };
	        Dom_1.$$(this.root).trigger(StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents.beforeRedirect, dataToSendOnBeforeRedirect);
	        if (dataToSendOnBeforeRedirect.cancel) {
	            return;
	        }
	        data.cancel = true;
	        if (!this.searchboxIsEmpty() || this.options.redirectIfEmpty) {
	            this.redirectToSearchPage(dataToSendOnBeforeRedirect.searchPageUri);
	        }
	    };
	    StandaloneSearchInterface.prototype.redirectToSearchPage = function (searchPage) {
	        var _this = this;
	        var stateValues = this.queryStateModel.getAttributes();
	        var uaCausedBy = this.usageAnalytics.getCurrentEventCause();
	        if (uaCausedBy != null) {
	            // for legacy reason, searchbox submit were always logged a search from link in an external search box.
	            // transform them if that's what we hit.
	            if (uaCausedBy == AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit.name) {
	                uaCausedBy = AnalyticsActionListMeta_1.analyticsActionCauseList.searchFromLink.name;
	            }
	            stateValues['firstQueryCause'] = uaCausedBy;
	        }
	        var uaMeta = this.usageAnalytics.getCurrentEventMeta();
	        if (uaMeta != null) {
	            stateValues['firstQueryMeta'] = uaMeta;
	        }
	        var link = document.createElement('a');
	        link.href = searchPage;
	        // By using a setTimeout, we allow other possible code related to the search box / magic box time to complete.
	        // eg: onblur of the magic box.
	        setTimeout(function () {
	            _this._window.location.href = link.protocol + "//" + link.host + link.pathname + link.search + (link.hash ? link.hash + '&' : '#') + HashUtils_1.HashUtils.encodeValues(stateValues);
	        }, 0);
	    };
	    StandaloneSearchInterface.prototype.searchboxIsEmpty = function () {
	        return Utils_1.Utils.isEmptyString(this.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.q));
	    };
	    return StandaloneSearchInterface;
	}(SearchInterface));
	StandaloneSearchInterface.ID = 'StandaloneSearchInterface';
	StandaloneSearchInterface.options = {
	    redirectIfEmpty: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true })
	};
	exports.StandaloneSearchInterface = StandaloneSearchInterface;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Logger_1 = __webpack_require__(11);
	var Dom_1 = __webpack_require__(59);
	var TemplateCache_1 = __webpack_require__(110);
	var TemplateList_1 = __webpack_require__(118);
	var UnderscoreTemplate_1 = __webpack_require__(114);
	var HtmlTemplate_1 = __webpack_require__(117);
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var _ = __webpack_require__(14);
	;
	var ComponentOptionsType;
	(function (ComponentOptionsType) {
	    ComponentOptionsType[ComponentOptionsType["BOOLEAN"] = 0] = "BOOLEAN";
	    ComponentOptionsType[ComponentOptionsType["NUMBER"] = 1] = "NUMBER";
	    ComponentOptionsType[ComponentOptionsType["STRING"] = 2] = "STRING";
	    ComponentOptionsType[ComponentOptionsType["LOCALIZED_STRING"] = 3] = "LOCALIZED_STRING";
	    ComponentOptionsType[ComponentOptionsType["LIST"] = 4] = "LIST";
	    ComponentOptionsType[ComponentOptionsType["SELECTOR"] = 5] = "SELECTOR";
	    ComponentOptionsType[ComponentOptionsType["CHILD_HTML_ELEMENT"] = 6] = "CHILD_HTML_ELEMENT";
	    ComponentOptionsType[ComponentOptionsType["TEMPLATE"] = 7] = "TEMPLATE";
	    ComponentOptionsType[ComponentOptionsType["FIELD"] = 8] = "FIELD";
	    ComponentOptionsType[ComponentOptionsType["FIELDS"] = 9] = "FIELDS";
	    ComponentOptionsType[ComponentOptionsType["ICON"] = 10] = "ICON";
	    ComponentOptionsType[ComponentOptionsType["COLOR"] = 11] = "COLOR";
	    ComponentOptionsType[ComponentOptionsType["OBJECT"] = 12] = "OBJECT";
	    ComponentOptionsType[ComponentOptionsType["QUERY"] = 13] = "QUERY";
	    ComponentOptionsType[ComponentOptionsType["HELPER"] = 14] = "HELPER";
	    ComponentOptionsType[ComponentOptionsType["LONG_STRING"] = 15] = "LONG_STRING";
	    ComponentOptionsType[ComponentOptionsType["JSON"] = 16] = "JSON";
	    ComponentOptionsType[ComponentOptionsType["JAVASCRIPT"] = 17] = "JAVASCRIPT";
	    ComponentOptionsType[ComponentOptionsType["NONE"] = 18] = "NONE";
	})(ComponentOptionsType = exports.ComponentOptionsType || (exports.ComponentOptionsType = {}));
	var camelCaseToHyphenRegex = /([A-Z])|\W+(\w)/g;
	var fieldsSeperator = /\s*,\s*/;
	var localizer = /([a-zA-Z\-]+)\s*:\s*(([^,]|,\s*(?!([a-zA-Z\-]+)\s*:))+)/g;
	/**
	 * This static class is used to initialize component options.
	 *
	 * Typically, each {@link Component} that exposes a set of options will contains a static `options` property,
	 *
	 * This property will "build" the options based on their type.
	 */
	var ComponentOptions = (function () {
	    function ComponentOptions() {
	    }
	    /**
	     * Build a boolean option.
	     *
	     * A boolean option can be "true" or "false" in the markup.
	     *
	     * `data-foo="true"` or `data-foo="false"`.
	     * @param optionArgs
	     * @returns {boolean}
	     */
	    ComponentOptions.buildBooleanOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.BOOLEAN, ComponentOptions.loadBooleanOption, optionArgs);
	    };
	    /**
	     * Build a number option.
	     *
	     * A number option can be an integer or a float in the markup.
	     *
	     * `data-foo="1"` or `data-foo="1.5"`.
	     */
	    ComponentOptions.buildNumberOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.NUMBER, ComponentOptions.loadNumberOption, optionArgs);
	    };
	    /**
	     * Build a string option.
	     *
	     * A string option can be any arbitrary string in the markup.
	     *
	     * `data-foo="bar"`.
	     */
	    ComponentOptions.buildStringOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.STRING, ComponentOptions.loadStringOption, optionArgs);
	    };
	    /**
	     * Build an icon option.
	     *
	     * Normally, this only means that it will build a string that matches a CSS class for an icon.
	     *
	     * In the markup, this has no advantage over a plain string. This is mostly useful for the interface editor.
	     *
	     * `data-foo="coveo-sprites-user"` or `data-foo="coveo-sprites-database"`.
	     */
	    ComponentOptions.buildIconOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.ICON, ComponentOptions.loadStringOption, optionArgs);
	    };
	    /**
	     * Build a color option.
	     *
	     * Normally, this only means that it will build a string that matches a CSS color.
	     *
	     * In the markup, this has no advantage over a plain string. This is mostly useful for the interface editor.
	     *
	     * `data-foo="coveo-sprites-user"` or `data-foo="coveo-sprites-database"`.
	     */
	    ComponentOptions.buildColorOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.COLOR, ComponentOptions.loadStringOption, optionArgs);
	    };
	    /**
	     * Build a helper option.
	     *
	     * Normally, this only means that it will build a string that matches the name of a template helper.
	     *
	     * In the markup, this has no advantage over a plain string. This is mostly useful for the interface editor.
	     *
	     * `data-foo="date"` or `data-foo="dateTime"`.
	     */
	    ComponentOptions.buildHelperOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.HELPER, ComponentOptions.loadStringOption, optionArgs);
	    };
	    /**
	     * Build a JSON option.
	     *
	     * Normally, this only means that it will build a stringified JSON.
	     *
	     * In the markup, this has no advantage over a plain string. This is mostly useful for the interface editor.
	     *
	     * `data-foo='{"bar" : "baz"}'`.
	     */
	    ComponentOptions.buildJsonOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.JSON, ComponentOptions.loadStringOption, optionArgs);
	    };
	    /**
	     * Build a localized string option.
	     *
	     * A localized string option can be any arbitrary string.
	     *
	     * The framework, when parsing the value, will try to load the localization for that word if it is available.
	     *
	     * If it is not available, it will return the non-localized option.
	     *
	     * This should be used for options that will be rendered directly to the end users.
	     *
	     * `data-foo="bar"`.
	     */
	    ComponentOptions.buildLocalizedStringOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.LOCALIZED_STRING, ComponentOptions.loadLocalizedStringOption, optionArgs);
	    };
	    /**
	     * Build a field option.
	     *
	     * A field option will validate that the field has a valid name. This means that the string has to start with @.
	     *
	     * `data-foo="@bar"`.
	     */
	    ComponentOptions.buildFieldOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.FIELD, ComponentOptions.loadFieldOption, optionArgs);
	    };
	    /**
	     * Build an array of field option.
	     *
	     * As with all options that expect an array, you should use commas to delimit the different values.
	     *
	     * `data-foo="@bar,@baz"`.
	     */
	    ComponentOptions.buildFieldsOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.FIELDS, ComponentOptions.loadFieldsOption, optionArgs);
	    };
	    /**
	     * Build an array of string option.
	     *
	     * As with all options that expect an array, you should use commas to delimit the different values.
	     *
	     * `data-foo="bar,baz"`.
	     */
	    ComponentOptions.buildListOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.LIST, ComponentOptions.loadListOption, optionArgs);
	    };
	    /**
	     * Build an option that allow to select an HTMLElement.
	     *
	     * The option accept a CSS selector that will allow to find the required HTMLElement.
	     *
	     * It can be a class selector or an ID selector.
	     *
	     * `data-foo-selector=".bar" or data-foo-selector="#bar"`.
	     */
	    ComponentOptions.buildSelectorOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.SELECTOR, ComponentOptions.loadSelectorOption, optionArgs);
	    };
	    ComponentOptions.buildChildHtmlElementOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.CHILD_HTML_ELEMENT, ComponentOptions.loadChildHtmlElementOption, optionArgs);
	    };
	    ComponentOptions.buildTemplateOption = function (optionArgs) {
	        return ComponentOptions.buildOption(ComponentOptionsType.TEMPLATE, ComponentOptions.loadTemplateOption, optionArgs);
	    };
	    ComponentOptions.buildCustomOption = function (converter, optionArgs) {
	        var loadOption = function (element, name, option) {
	            var stringvalue = ComponentOptions.loadStringOption(element, name, option);
	            if (!Utils_1.Utils.isNullOrEmptyString(stringvalue)) {
	                return converter(stringvalue);
	            }
	        };
	        return ComponentOptions.buildOption(ComponentOptionsType.STRING, loadOption, optionArgs);
	    };
	    ComponentOptions.buildCustomListOption = function (converter, optionArgs) {
	        var loadOption = function (element, name, option) {
	            var stringvalue = ComponentOptions.loadListOption(element, name, option);
	            return converter(stringvalue);
	        };
	        return ComponentOptions.buildOption(ComponentOptionsType.LIST, loadOption, optionArgs);
	    };
	    ComponentOptions.buildObjectOption = function (optionArgs) {
	        var loadOption = function (element, name, option) {
	            var keys = _.keys(optionArgs.subOptions);
	            var scopedOptions = {};
	            var scopedValues = {};
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var scopedkey = ComponentOptions.mergeCamelCase(name, key);
	                scopedOptions[scopedkey] = optionArgs.subOptions[key];
	            }
	            ComponentOptions.initOptions(element, scopedOptions, scopedValues);
	            var resultValues = {};
	            var resultFound = false;
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var scopedkey = ComponentOptions.mergeCamelCase(name, key);
	                if (scopedValues[scopedkey] != null) {
	                    resultValues[key] = scopedValues[scopedkey];
	                    resultFound = true;
	                }
	            }
	            return resultFound ? resultValues : null;
	        };
	        return ComponentOptions.buildOption(ComponentOptionsType.OBJECT, loadOption, optionArgs);
	    };
	    ComponentOptions.buildOption = function (type, load, optionArg) {
	        if (optionArg === void 0) { optionArg = {}; }
	        var option = optionArg;
	        option.type = type;
	        option.load = load;
	        return option;
	    };
	    ComponentOptions.attrNameFromName = function (name, optionArgs) {
	        if (optionArgs && optionArgs.attrName) {
	            return optionArgs.attrName;
	        }
	        if (name) {
	            return 'data-' + ComponentOptions.camelCaseToHyphen(name);
	        }
	        return name;
	    };
	    ComponentOptions.camelCaseToHyphen = function (name) {
	        return name.replace(camelCaseToHyphenRegex, '-$1$2').toLowerCase();
	    };
	    ComponentOptions.mergeCamelCase = function (parent, name) {
	        return parent + name.substr(0, 1).toUpperCase() + name.substr(1);
	    };
	    /**
	     * The main function that will load and parse the options for the current given element.
	     *
	     * Every component will call this function in their constructor.
	     * @param element The element on which the options should be parsed
	     * @param component The component class for which the options should be parsed. For example : Searchbox, Facet, etc.
	     * @param values The optional options which should be merged with the options set in the markup.
	     */
	    ComponentOptions.initComponentOptions = function (element, component, values) {
	        return ComponentOptions.initOptions(element, component.options, values, component.ID);
	    };
	    ComponentOptions.initOptions = function (element, options, values, componentID) {
	        var logger = new Logger_1.Logger(this);
	        if (values == null) {
	            values = {};
	        }
	        var names = _.keys(options);
	        for (var i = 0; i < names.length; i++) {
	            var name_1 = names[i];
	            var optionDefinition = options[name_1];
	            var value = void 0;
	            var loadFromAttribute = optionDefinition.load;
	            if (loadFromAttribute != null) {
	                value = loadFromAttribute(element, name_1, optionDefinition);
	                if (value && optionDefinition.deprecated) {
	                    logger.warn(componentID + '.' + name_1 + ' : ' + optionDefinition.deprecated);
	                }
	            }
	            if (Utils_1.Utils.isNullOrUndefined(value) && values[name_1] != undefined) {
	                value = values[name_1];
	            }
	            if (value == null && values[name_1] == undefined) {
	                if (optionDefinition.defaultValue != null) {
	                    if (optionDefinition.type == ComponentOptionsType.LIST) {
	                        value = _.extend([], optionDefinition.defaultValue);
	                    }
	                    else if (optionDefinition.type == ComponentOptionsType.OBJECT) {
	                        value = _.extend({}, optionDefinition.defaultValue);
	                    }
	                    else {
	                        value = optionDefinition.defaultValue;
	                    }
	                }
	                else if (optionDefinition.defaultFunction != null) {
	                    value = optionDefinition.defaultFunction(element);
	                }
	            }
	            if (value != null) {
	                if (optionDefinition.validator) {
	                    var isValid = optionDefinition.validator(value);
	                    if (!isValid) {
	                        logger.warn(componentID + " ." + name_1 + " has invalid value :  " + value);
	                        if (optionDefinition.required) {
	                            logger.error(componentID + " ." + name_1 + " is required and has an invalid value : " + value + ". ***THIS COMPONENT WILL NOT WORK***");
	                        }
	                        delete values[name_1];
	                        continue;
	                    }
	                }
	                if (optionDefinition.type == ComponentOptionsType.OBJECT && values[name_1] != null) {
	                    values[name_1] = _.extend(values[name_1], value);
	                }
	                else if (optionDefinition.type == ComponentOptionsType.LOCALIZED_STRING) {
	                    values[name_1] = Strings_1.l(value);
	                }
	                else {
	                    values[name_1] = value;
	                }
	            }
	        }
	        for (var i = 0; i < names.length; i++) {
	            var name_2 = names[i];
	            var optionDefinition = options[name_2];
	            if (optionDefinition.postProcessing) {
	                values[name_2] = optionDefinition.postProcessing(values[name_2], values);
	            }
	        }
	        return values;
	    };
	    ComponentOptions.loadStringOption = function (element, name, option) {
	        return element.getAttribute(ComponentOptions.attrNameFromName(name, option)) || ComponentOptions.getAttributeFromAlias(element, option);
	    };
	    ComponentOptions.loadFieldOption = function (element, name, option) {
	        var field = ComponentOptions.loadStringOption(element, name, option);
	        Assert_1.Assert.check(!Utils_1.Utils.isNonEmptyString(field) || Utils_1.Utils.isCoveoField(field), field + ' is not a valid field');
	        return field;
	    };
	    ComponentOptions.loadFieldsOption = function (element, name, option) {
	        var fieldsAttr = ComponentOptions.loadStringOption(element, name, option);
	        if (fieldsAttr == null) {
	            return null;
	        }
	        var fields = fieldsAttr.split(fieldsSeperator);
	        _.each(fields, function (field) {
	            Assert_1.Assert.check(Utils_1.Utils.isCoveoField(field), field + ' is not a valid field');
	        });
	        return fields;
	    };
	    ComponentOptions.loadLocalizedStringOption = function (element, name, option) {
	        var attributeValue = ComponentOptions.loadStringOption(element, name, option);
	        var locale = String['locale'] || String['defaultLocale'];
	        if (locale != null && attributeValue != null) {
	            var localeParts_1 = locale.toLowerCase().split('-');
	            var locales = _.map(localeParts_1, function (part, i) { return localeParts_1.slice(0, i + 1).join('-'); });
	            var localizers = attributeValue.match(localizer);
	            if (localizers != null) {
	                for (var i = 0; i < localizers.length; i++) {
	                    var groups = localizer.exec(localizers[i]);
	                    if (groups != null) {
	                        var lang = groups[1].toLowerCase();
	                        if (_.contains(locales, lang)) {
	                            return groups[2].replace(/^\s+|\s+$/g, '');
	                        }
	                    }
	                }
	            }
	            return attributeValue != null ? attributeValue.toLocaleString() : null;
	        }
	        return attributeValue;
	    };
	    ComponentOptions.loadNumberOption = function (element, name, option) {
	        var attributeValue = ComponentOptions.loadStringOption(element, name, option);
	        if (attributeValue == null) {
	            return null;
	        }
	        var numberValue = option.float === true ? Utils_1.Utils.parseFloatIfNotUndefined(attributeValue) : Utils_1.Utils.parseIntIfNotUndefined(attributeValue);
	        if (option.min != null && option.min > numberValue) {
	            new Logger_1.Logger(element).info("Value for option " + name + " is less than the possible minimum (Value is " + numberValue + ", minimum is " + option.min + "). It has been forced to it's minimum value.", option);
	            numberValue = option.min;
	        }
	        if (option.max != null && option.max < numberValue) {
	            new Logger_1.Logger(element).info("Value for option " + name + " is higher than the possible maximum (Value is " + numberValue + ", maximum is " + option.max + "). It has been forced to it's maximum value.", option);
	            numberValue = option.max;
	        }
	        return numberValue;
	    };
	    ComponentOptions.loadBooleanOption = function (element, name, option) {
	        return Utils_1.Utils.parseBooleanIfNotUndefined(ComponentOptions.loadStringOption(element, name, option));
	    };
	    ComponentOptions.loadListOption = function (element, name, option) {
	        var separator = option.separator || /\s*,\s*/;
	        var attributeValue = ComponentOptions.loadStringOption(element, name, option);
	        return Utils_1.Utils.isNonEmptyString(attributeValue) ? attributeValue.split(separator) : null;
	    };
	    ComponentOptions.loadEnumOption = function (element, name, option, _enum) {
	        var enumAsString = ComponentOptions.loadStringOption(element, name, option);
	        return enumAsString != null ? _enum[enumAsString] : null;
	    };
	    ComponentOptions.loadSelectorOption = function (element, name, option, doc) {
	        if (doc === void 0) { doc = document; }
	        var attributeValue = ComponentOptions.loadStringOption(element, name, option);
	        return Utils_1.Utils.isNonEmptyString(attributeValue) ? doc.querySelector(attributeValue) : null;
	    };
	    ComponentOptions.loadChildHtmlElementOption = function (element, name, option, doc) {
	        if (doc === void 0) { doc = document; }
	        var htmlElement;
	        // Attribute: selector
	        var selectorAttr = option.selectorAttr || ComponentOptions.attrNameFromName(name, option) + '-selector';
	        var selector = element.getAttribute(selectorAttr) || ComponentOptions.getAttributeFromAlias(element, option);
	        if (selector != null) {
	            htmlElement = doc.body.querySelector(selector);
	        }
	        // Child
	        if (htmlElement == null) {
	            var childSelector = option.childSelector;
	            if (childSelector == null) {
	                childSelector = '.' + name;
	            }
	            htmlElement = ComponentOptions.loadChildHtmlElementFromSelector(element, childSelector);
	        }
	        return htmlElement;
	    };
	    ComponentOptions.loadChildHtmlElementFromSelector = function (element, selector) {
	        Assert_1.Assert.isNonEmptyString(selector);
	        if (Dom_1.$$(element).is(selector)) {
	            return element;
	        }
	        return Dom_1.$$(element).find(selector);
	    };
	    ComponentOptions.loadChildrenHtmlElementFromSelector = function (element, selector) {
	        Assert_1.Assert.isNonEmptyString(selector);
	        return Dom_1.$$(element).findAll(selector);
	    };
	    ComponentOptions.loadTemplateOption = function (element, name, option, doc) {
	        if (doc === void 0) { doc = document; }
	        var template;
	        // Attribute: template selector
	        var selectorAttr = option.selectorAttr || ComponentOptions.attrNameFromName(name, option) + '-selector';
	        var selector = element.getAttribute(selectorAttr) || ComponentOptions.getAttributeFromAlias(element, option);
	        if (selector != null) {
	            var templateElement = doc.querySelector(selector);
	            if (templateElement != null) {
	                template = ComponentOptions.createResultTemplateFromElement(templateElement);
	            }
	        }
	        // Attribute: template id
	        if (template == null) {
	            var idAttr = option.idAttr || ComponentOptions.attrNameFromName(name, option) + '-id';
	            var id = element.getAttribute(idAttr) || ComponentOptions.getAttributeFromAlias(element, option);
	            if (id != null) {
	                template = ComponentOptions.loadResultTemplateFromId(id);
	            }
	        }
	        // Child
	        if (template == null) {
	            var childSelector = option.childSelector;
	            if (childSelector == null) {
	                childSelector = '.' + name.replace(/([A-Z])/g, '-$1').toLowerCase();
	            }
	            template = ComponentOptions.loadChildrenResultTemplateFromSelector(element, childSelector);
	        }
	        return template;
	    };
	    ComponentOptions.loadResultTemplateFromId = function (templateId) {
	        return Utils_1.Utils.isNonEmptyString(templateId) ? TemplateCache_1.TemplateCache.getTemplate(templateId) : null;
	    };
	    ComponentOptions.loadChildrenResultTemplateFromSelector = function (element, selector) {
	        var foundElements = ComponentOptions.loadChildrenHtmlElementFromSelector(element, selector);
	        if (foundElements.length > 0) {
	            return new TemplateList_1.TemplateList(_.compact(_.map(foundElements, function (element) { return ComponentOptions.createResultTemplateFromElement(element); })));
	        }
	        return null;
	    };
	    ComponentOptions.findParentScrolling = function (element, doc) {
	        if (doc === void 0) { doc = document; }
	        while (element != doc && element != null) {
	            if (ComponentOptions.isElementScrollable(element)) {
	                if (element.tagName.toLowerCase() !== 'body') {
	                    return element;
	                }
	                return window;
	            }
	            element = element.parentElement;
	        }
	        return window;
	    };
	    ComponentOptions.isElementScrollable = function (element) {
	        return Dom_1.$$(element).css('overflow-y') == 'scroll' || element.style.overflowY == 'scroll';
	    };
	    ComponentOptions.getAttributeFromAlias = function (element, option) {
	        if (option.alias) {
	            return element.getAttribute(ComponentOptions.attrNameFromName(option.alias));
	        }
	    };
	    ComponentOptions.createResultTemplateFromElement = function (element) {
	        Assert_1.Assert.exists(element);
	        var type = element.getAttribute('type');
	        var mimeTypes = 'You must specify the type of template. Valid values are :' +
	            ' ' + UnderscoreTemplate_1.UnderscoreTemplate.mimeTypes.toString() +
	            ' ' + HtmlTemplate_1.HtmlTemplate.mimeTypes.toString();
	        Assert_1.Assert.check(Utils_1.Utils.isNonEmptyString(type), mimeTypes);
	        if (_.indexOf(UnderscoreTemplate_1.UnderscoreTemplate.mimeTypes, type.toLowerCase()) != -1) {
	            return UnderscoreTemplate_1.UnderscoreTemplate.create(element);
	        }
	        else if (_.indexOf(HtmlTemplate_1.HtmlTemplate.mimeTypes, type.toLowerCase()) != -1) {
	            return new HtmlTemplate_1.HtmlTemplate(element);
	        }
	        else {
	            Assert_1.Assert.fail('Cannot guess template type from attribute: ' + type + '. Valid values are ' + mimeTypes);
	            return undefined;
	        }
	    };
	    return ComponentOptions;
	}());
	exports.ComponentOptions = ComponentOptions;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var Assert_1 = __webpack_require__(12);
	var UnderscoreTemplate_1 = __webpack_require__(114);
	var HtmlTemplate_1 = __webpack_require__(117);
	var _ = __webpack_require__(14);
	/**
	 * Holds a reference to all template available in the framework
	 */
	var TemplateCache = (function () {
	    function TemplateCache() {
	    }
	    /**
	     * Register a new template in the framework, which will be available to render any results.
	     * @param name
	     * @param template
	     * @param publicTemplate
	     * @param defaultTemplate
	     * @param pageTemplate
	     */
	    TemplateCache.registerTemplate = function (name, template, publicTemplate, defaultTemplate, resultListTemplate) {
	        if (publicTemplate === void 0) { publicTemplate = true; }
	        if (defaultTemplate === void 0) { defaultTemplate = false; }
	        if (resultListTemplate === void 0) { resultListTemplate = false; }
	        Assert_1.Assert.isNonEmptyString(name);
	        Assert_1.Assert.exists(template);
	        if (!(template instanceof Template_1.Template)) {
	            template = new Template_1.Template(template);
	        }
	        if (template.name == null) {
	            template.name = name;
	        }
	        TemplateCache.templates[name] = template;
	        if (publicTemplate && !_.contains(TemplateCache.templateNames, name)) {
	            TemplateCache.templateNames.push(name);
	        }
	        if (resultListTemplate && !_.contains(TemplateCache.resultListTemplateNames, name)) {
	            TemplateCache.resultListTemplateNames.push(name);
	        }
	        if (defaultTemplate) {
	            TemplateCache.defaultTemplates[name] = template;
	        }
	    };
	    /**
	     * Remove the given template from the cache.
	     * @param name
	     * @param string
	     */
	    TemplateCache.unregisterTemplate = function (name) {
	        Assert_1.Assert.isNonEmptyString(name);
	        if (TemplateCache.templates[name] != undefined) {
	            delete TemplateCache.templates[name];
	        }
	        if (TemplateCache.defaultTemplates[name] != undefined) {
	            delete TemplateCache.defaultTemplates[name];
	        }
	    };
	    /**
	     * Return a template by its name/ID.
	     * @param name
	     * @returns {Template}
	     */
	    TemplateCache.getTemplate = function (name) {
	        // In some scenarios, the template we're trying to load might be somewhere in the page
	        // but we could not load it "normally" on page load (eg : UI was loaded with require js)
	        // Try a last ditch effort to scan the needed templates.
	        if (!TemplateCache.templates[name]) {
	            TemplateCache.scanAndRegisterTemplates();
	        }
	        Assert_1.Assert.exists(TemplateCache.templates[name]);
	        return TemplateCache.templates[name];
	    };
	    /**
	     * Get all templates currently registered in the framework.
	     * @returns {{}}
	     */
	    TemplateCache.getTemplates = function () {
	        return TemplateCache.templates;
	    };
	    /**
	     * Get all templates name currently registered in the framework.
	     * @returns {string[]}
	     */
	    TemplateCache.getTemplateNames = function () {
	        return TemplateCache.templateNames;
	    };
	    /**
	     * Get all page templates name currently registered in the framework.
	     * @returns {string[]}
	     */
	    TemplateCache.getResultListTemplateNames = function () {
	        return TemplateCache.resultListTemplateNames;
	    };
	    /**
	     * Get all the "default" templates in the framework.
	     * @returns {string[]}
	     */
	    TemplateCache.getDefaultTemplates = function () {
	        return _.keys(TemplateCache.defaultTemplates);
	    };
	    /**
	     * Get a default template by name.
	     * @param name The name of the queried template
	     */
	    TemplateCache.getDefaultTemplate = function (name) {
	        Assert_1.Assert.exists(TemplateCache.defaultTemplates[name]);
	        return TemplateCache.defaultTemplates[name];
	    };
	    TemplateCache.scanAndRegisterTemplates = function () {
	        // Here we take care not to scan for templates for which the base library
	        // is not available. Case in point: someone was using the JS UI on a page
	        // that was also using Handlebars, but our code was initialized before
	        // the Handlebars library (loaded through AMD).
	        if (UnderscoreTemplate_1.UnderscoreTemplate.isLibraryAvailable()) {
	            TemplateCache.scanAndRegisterUnderscoreTemplates();
	        }
	        TemplateCache.scanAndRegisterHtmlTemplates();
	    };
	    TemplateCache.scanAndRegisterUnderscoreTemplates = function () {
	        _.each(UnderscoreTemplate_1.UnderscoreTemplate.mimeTypes, function (type) {
	            var scriptList = document.querySelectorAll("script[id][type='" + type + "']");
	            var i = scriptList.length;
	            var arr = new Array(i);
	            while (i--) {
	                arr[i] = scriptList.item(i);
	            }
	            _.each(arr, function (elem) {
	                var template = new UnderscoreTemplate_1.UnderscoreTemplate(elem);
	                TemplateCache.registerTemplate(elem.getAttribute('id'), template);
	            });
	        });
	    };
	    TemplateCache.scanAndRegisterHtmlTemplates = function () {
	        _.each(HtmlTemplate_1.HtmlTemplate.mimeTypes, function (type) {
	            var scriptList = document.querySelectorAll("script[id][type='" + type + "']");
	            var i = scriptList.length;
	            var arr = new Array(i);
	            while (i--) {
	                arr[i] = scriptList.item(i);
	            }
	            _.each(arr, function (elem) {
	                var template = new HtmlTemplate_1.HtmlTemplate(elem);
	                TemplateCache.registerTemplate(elem.getAttribute('id'), template);
	            });
	        });
	    };
	    return TemplateCache;
	}());
	TemplateCache.templates = {};
	TemplateCache.templateNames = [];
	TemplateCache.resultListTemplateNames = [];
	TemplateCache.defaultTemplates = {};
	exports.TemplateCache = TemplateCache;
	document.addEventListener('DOMContentLoaded', function () {
	    TemplateCache.scanAndRegisterTemplates();
	});


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var Dom_1 = __webpack_require__(59);
	var TemplateConditionEvaluator_1 = __webpack_require__(112);
	var TemplateFieldsEvaluator_1 = __webpack_require__(113);
	var ResponsiveComponents_1 = __webpack_require__(17);
	var _ = __webpack_require__(14);
	var DefaultInstantiateTemplateOptions = (function () {
	    function DefaultInstantiateTemplateOptions() {
	        this.currentLayout = null;
	        this.checkCondition = true;
	        this.wrapInDiv = true;
	        this.responsiveComponents = new ResponsiveComponents_1.ResponsiveComponents();
	    }
	    DefaultInstantiateTemplateOptions.prototype.get = function () {
	        return {
	            currentLayout: this.currentLayout,
	            checkCondition: this.checkCondition,
	            wrapInDiv: this.wrapInDiv,
	            responsiveComponents: this.responsiveComponents
	        };
	    };
	    DefaultInstantiateTemplateOptions.prototype.merge = function (other) {
	        if (other) {
	            return _.extend(this.get(), other);
	        }
	        return this.get();
	    };
	    return DefaultInstantiateTemplateOptions;
	}());
	exports.DefaultInstantiateTemplateOptions = DefaultInstantiateTemplateOptions;
	var Template = (function () {
	    function Template(dataToString) {
	        this.dataToString = dataToString;
	        this.logger = new Logger_1.Logger(this);
	    }
	    Template.prototype.instantiateToString = function (object, instantiateOptions) {
	        if (instantiateOptions === void 0) { instantiateOptions = new DefaultInstantiateTemplateOptions(); }
	        if (this.dataToString) {
	            if (instantiateOptions.checkCondition === false) {
	                return this.dataToString(object);
	            }
	            // Should not happen but...
	            // Normally, top level call from sub-class will have already created a DefaultInstantiateTemplateOptions
	            // and merged down
	            if (instantiateOptions.responsiveComponents == null) {
	                instantiateOptions.responsiveComponents = new ResponsiveComponents_1.ResponsiveComponents();
	            }
	            // Mobile/tablet/desktop checks are only for "hard" set value (triple equal)
	            // If it's undefined, we skip those checks, and we assume the template works correctly for any given screen size
	            if (this.mobile === true && !instantiateOptions.responsiveComponents.isSmallScreenWidth()) {
	                this.logger.trace('Template was skipped because it is optimized for small screen width', this);
	                return null;
	            }
	            else if (this.mobile === false && instantiateOptions.responsiveComponents.isSmallScreenWidth()) {
	                this.logger.trace('Template was skipped because it is not optimized for small screen width', this);
	                return null;
	            }
	            if (this.tablet === true && !instantiateOptions.responsiveComponents.isMediumScreenWidth()) {
	                this.logger.trace('Template was skipped because it is optimized for medium screen width', this);
	                return null;
	            }
	            else if (this.tablet === false && instantiateOptions.responsiveComponents.isMediumScreenWidth()) {
	                this.logger.trace('Template was skipped because it is not optimized for medium screen width', this);
	                return null;
	            }
	            if (this.desktop === true && !instantiateOptions.responsiveComponents.isLargeScreenWidth()) {
	                this.logger.trace('Template was skipped because it is optimized for large screen width', this);
	                return null;
	            }
	            else if (this.desktop === false && instantiateOptions.responsiveComponents.isLargeScreenWidth()) {
	                this.logger.trace('Template was skipped because it is not optimized for large screen width', this);
	                return null;
	            }
	            if (this.layout != null && instantiateOptions.currentLayout != null && instantiateOptions.currentLayout !== this.layout) {
	                this.logger.trace('Template was skipped because layout does not match', this, this.layout);
	                return null;
	            }
	            this.logger.trace('Evaluating template ...');
	            // Condition (as a function) is eval'ed, first
	            if (this.condition != null && this.condition(object)) {
	                this.logger.trace('Template was loaded because condition was :', this.condition, object);
	                return this.dataToString(object);
	            }
	            // Condition (as a string) is parsed, if available.
	            if (this.conditionToParse != null && TemplateConditionEvaluator_1.TemplateConditionEvaluator.evaluateCondition(this.conditionToParse, object, instantiateOptions.responsiveComponents)) {
	                this.logger.trace('Template was loaded because condition was :', this.conditionToParse, object);
	                return this.dataToString(object);
	            }
	            // fieldsToMatch is yet another fallback that allows to specify if a template should be loaded.
	            if (this.fieldsToMatch != null && TemplateFieldsEvaluator_1.TemplateFieldsEvaluator.evaluateFieldsToMatch(this.fieldsToMatch, object)) {
	                this.logger.trace('Template was loaded because condition was :', this.fieldsToMatch, object);
	                return this.dataToString(object);
	            }
	            // If there is no condition at all, this means "true"
	            if (this.condition == null && this.conditionToParse == null && this.fieldsToMatch == null) {
	                this.logger.trace('Template was loaded because there was *NO* condition', this.condition, object);
	                return this.dataToString(object);
	            }
	        }
	        this.logger.trace('Template was skipped because it did not match any condition', this);
	        return null;
	    };
	    Template.prototype.instantiateToElement = function (object, instantiateTemplateOptions) {
	        if (instantiateTemplateOptions === void 0) { instantiateTemplateOptions = {}; }
	        var merged = new DefaultInstantiateTemplateOptions().merge(instantiateTemplateOptions);
	        var html = this.instantiateToString(object, merged);
	        if (html != null) {
	            var element = Dom_1.$$('div', {}, html).el;
	            if (!merged.wrapInDiv && element.children.length === 1) {
	                element = element.children.item(0);
	            }
	            if (this.layout) {
	                Dom_1.$$(element).addClass("coveo-" + this.layout + "-layout");
	            }
	            this.logger.trace('Instantiated result template', object, element);
	            element['template'] = this;
	            return element;
	        }
	        return null;
	    };
	    Template.prototype.toHtmlElement = function () {
	        return null;
	    };
	    Template.prototype.getFields = function () {
	        return this.fields || [];
	    };
	    Template.prototype.getType = function () {
	        return 'Template';
	    };
	    Template.prototype.setConditionWithFallback = function (condition) {
	        // In some circumstances (eg: locker service in SF), with strict Content-Security-Policy, eval / new Function are not allowed by the browser.
	        // Try to use the eval method, if possible. Otherwise fallback to a mechanism where we will try to parse/evaluate the condition as a simple string.
	        try {
	            this.condition = new Function('obj', 'with(obj||{}){return ' + condition + '}');
	        }
	        catch (e) {
	            this.conditionToParse = condition;
	        }
	    };
	    return Template;
	}());
	exports.Template = Template;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var StringUtils_1 = __webpack_require__(62);
	var Initialization_1 = __webpack_require__(106);
	var BaseComponent_1 = __webpack_require__(76);
	var ResponsiveComponents_1 = __webpack_require__(17);
	var _ = __webpack_require__(14);
	var TemplateConditionEvaluator = (function () {
	    function TemplateConditionEvaluator() {
	    }
	    TemplateConditionEvaluator.getFieldFromString = function (text) {
	        var fields = _.map(StringUtils_1.StringUtils.match(text, /(?:(?!\b@)@([a-z0-9]+(?:\.[a-z0-9]+)*\b))|\braw.([a-z0-9]+)|\braw\['([^']+)'\]|\braw\["([^"]+)"\]/gi), function (field) {
	            return field[1] || field[2] || field[3] || field[4] || null;
	        });
	        _.each(Initialization_1.Initialization.getListOfRegisteredComponents(), function (componentId) {
	            var componentFields = Initialization_1.Initialization.getRegisteredComponent(componentId).fields;
	            if (componentFields != null && text.indexOf(BaseComponent_1.BaseComponent.computeCssClassNameForType(componentId)) != -1) {
	                fields = fields.concat(componentFields);
	            }
	        });
	        return fields;
	    };
	    TemplateConditionEvaluator.evaluateCondition = function (condition, result, responsiveComponents) {
	        if (responsiveComponents === void 0) { responsiveComponents = new ResponsiveComponents_1.ResponsiveComponents(); }
	        var templateShouldBeLoaded = true;
	        var fieldsInCondition = TemplateConditionEvaluator.getFieldFromString(condition);
	        _.each(fieldsInCondition, function (fieldInCondition) {
	            var matchingFieldValues = TemplateConditionEvaluator.evaluateMatchingFieldValues(fieldInCondition, condition);
	            var fieldShouldNotBeNull = matchingFieldValues.length != 0 || TemplateConditionEvaluator.evaluateFieldShouldNotBeNull(fieldInCondition, condition);
	            if (fieldShouldNotBeNull) {
	                templateShouldBeLoaded = templateShouldBeLoaded && result.raw[fieldInCondition] != null;
	            }
	            if (templateShouldBeLoaded) {
	                _.each(matchingFieldValues, function (fieldValue) {
	                    templateShouldBeLoaded = templateShouldBeLoaded && result.raw[fieldInCondition].toLowerCase() == fieldValue.toLowerCase();
	                });
	            }
	        });
	        if (templateShouldBeLoaded) {
	            if (TemplateConditionEvaluator.evaluateShouldUseSmallScreen(condition)) {
	                templateShouldBeLoaded = templateShouldBeLoaded && responsiveComponents.isSmallScreenWidth();
	            }
	        }
	        return templateShouldBeLoaded;
	    };
	    TemplateConditionEvaluator.evaluateMatchingFieldValues = function (field, condition) {
	        var foundForCurrentField = [];
	        // try to get the field value in the format raw.filetype == "YouTubeVideo"
	        var firstRegexToGetValue = new RegExp("raw." + field + "\\s*=+\\s*[\"|']([a-zA-Z]+)[\"|']", 'gi');
	        // try to get the field value in the format raw['filetype'] == "YouTubeVideo"
	        var secondRegexToGetValue = new RegExp("raw[[\"|']" + field + "[\"|']]\\s*=+\\s*[\"|']([a-zA-Z]+)[\"|']", 'gi');
	        var matches = StringUtils_1.StringUtils.match(condition, firstRegexToGetValue).concat(StringUtils_1.StringUtils.match(condition, secondRegexToGetValue));
	        matches.forEach(function (match) {
	            foundForCurrentField = foundForCurrentField.concat(match[1]);
	        });
	        return _.unique(foundForCurrentField);
	    };
	    TemplateConditionEvaluator.evaluateFieldShouldNotBeNull = function (field, condition) {
	        var firstRegexToMatchNonNull = new RegExp("raw." + field + "\\s*!=\\s*(?=null|undefined)", 'gi');
	        var secondRegexToMatchNonNull = new RegExp("raw[[\"|']" + field + "[\"|']]\\s*!=\\s*(?=null|undefined)", 'gi');
	        return condition.match(firstRegexToMatchNonNull) != null || condition.match(secondRegexToMatchNonNull) != null;
	    };
	    TemplateConditionEvaluator.evaluateShouldUseSmallScreen = function (condition) {
	        return condition.match(/Coveo\.DeviceUtils\.isSmallScreenWidth/gi);
	    };
	    return TemplateConditionEvaluator;
	}());
	exports.TemplateConditionEvaluator = TemplateConditionEvaluator;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var TemplateFieldsEvaluator = (function () {
	    function TemplateFieldsEvaluator() {
	    }
	    TemplateFieldsEvaluator.evaluateFieldsToMatch = function (toMatches, result) {
	        var templateShouldBeLoaded = true;
	        _.each(toMatches, function (toMatch) {
	            var matchAtLeastOnce = false;
	            if (!toMatch.values) {
	                matchAtLeastOnce = result.raw[toMatch.field] != null;
	            }
	            else {
	                _.each(toMatch.values, function (value) {
	                    if (!matchAtLeastOnce) {
	                        matchAtLeastOnce = result.raw[toMatch.field] && result.raw[toMatch.field].toLowerCase() == value.toLowerCase();
	                    }
	                });
	            }
	            templateShouldBeLoaded = templateShouldBeLoaded && matchAtLeastOnce;
	        });
	        return templateShouldBeLoaded;
	    };
	    return TemplateFieldsEvaluator;
	}());
	exports.TemplateFieldsEvaluator = TemplateFieldsEvaluator;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var Logger_1 = __webpack_require__(11);
	var TemplateFromAScriptTag_1 = __webpack_require__(115);
	var DefaultResultTemplate_1 = __webpack_require__(116);
	var _ = __webpack_require__(14);
	_.templateSettings = {
	    evaluate: /(?:<%|{{)([\s\S]+?)(?:%>|}})/g,
	    interpolate: /(?:<%|{{)=([\s\S]+?)(?:%>|}})/g,
	    escape: /(?:<%|{{)-([\s\S]+?)(?:%>|}})/g
	};
	var UnderscoreTemplate = (function (_super) {
	    __extends(UnderscoreTemplate, _super);
	    function UnderscoreTemplate(element) {
	        var _this = _super.call(this) || this;
	        _this.element = element;
	        Assert_1.Assert.exists(element);
	        var templateString = element.innerHTML;
	        try {
	            _this.template = _.template(templateString);
	        }
	        catch (e) {
	            new Logger_1.Logger(_this).error('Cannot instantiate underscore template. Might be caused by strict Content-Security-Policy. Will fallback on a default template...', e);
	        }
	        _this.templateFromAScriptTag = new TemplateFromAScriptTag_1.TemplateFromAScriptTag(_this, _this.element);
	        _this.dataToString = function (object) {
	            var extended = _.extend({}, object, UnderscoreTemplate.templateHelpers);
	            if (_this.template) {
	                return _this.template(extended);
	            }
	            else {
	                return new DefaultResultTemplate_1.DefaultResultTemplate().getFallbackTemplate();
	            }
	        };
	        return _this;
	    }
	    UnderscoreTemplate.prototype.toHtmlElement = function () {
	        var script = this.templateFromAScriptTag.toHtmlElement();
	        script.setAttribute('type', _.first(UnderscoreTemplate.mimeTypes));
	        return script;
	    };
	    UnderscoreTemplate.prototype.getType = function () {
	        return 'UnderscoreTemplate';
	    };
	    UnderscoreTemplate.prototype.getFields = function () {
	        return this.fields;
	    };
	    UnderscoreTemplate.registerTemplateHelper = function (helperName, helper) {
	        UnderscoreTemplate.templateHelpers[helperName] = helper;
	    };
	    UnderscoreTemplate.isLibraryAvailable = function () {
	        return Utils_1.Utils.exists(window['_']);
	    };
	    UnderscoreTemplate.fromString = function (template, properties) {
	        var script = TemplateFromAScriptTag_1.TemplateFromAScriptTag.fromString(template, properties);
	        script.setAttribute('type', UnderscoreTemplate.mimeTypes[0]);
	        return new UnderscoreTemplate(script);
	    };
	    UnderscoreTemplate.create = function (element) {
	        Assert_1.Assert.exists(element);
	        return new UnderscoreTemplate(element);
	    };
	    return UnderscoreTemplate;
	}(Template_1.Template));
	UnderscoreTemplate.templateHelpers = {};
	UnderscoreTemplate.mimeTypes = [
	    'text/underscore',
	    'text/underscore-template',
	    'text/x-underscore',
	    'text/x-underscore-template'
	];
	exports.UnderscoreTemplate = UnderscoreTemplate;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Utils_1 = __webpack_require__(13);
	var TemplateConditionEvaluator_1 = __webpack_require__(112);
	var ComponentOptions_1 = __webpack_require__(109);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	var TemplateFromAScriptTag = (function () {
	    function TemplateFromAScriptTag(template, scriptTag) {
	        this.template = template;
	        this.scriptTag = scriptTag;
	        var condition = scriptTag.getAttribute('data-condition');
	        if (condition != null) {
	            // Allows to add quotes in data-condition on the templates
	            condition = condition.toString().replace(/&quot;/g, '"');
	            template.setConditionWithFallback(condition);
	        }
	        else {
	            var parsedFieldsAttributes = this.parseFieldsAttributes();
	            if (parsedFieldsAttributes && Utils_1.Utils.isNonEmptyArray(parsedFieldsAttributes)) {
	                this.template.fieldsToMatch = parsedFieldsAttributes;
	            }
	        }
	        this.template.layout = this.parseLayout();
	        this.template.mobile = this.parseScreenSize('data-mobile');
	        this.template.tablet = this.parseScreenSize('data-tablet');
	        this.template.desktop = this.parseScreenSize('data-desktop');
	        this.template.fields = TemplateConditionEvaluator_1.TemplateConditionEvaluator.getFieldFromString(scriptTag.innerHTML + " " + (condition ? condition : ''));
	        var additionalFields = ComponentOptions_1.ComponentOptions.loadFieldsOption(scriptTag, 'fields', { includeInResults: true });
	        if (additionalFields != null) {
	            // remove the @
	            this.template.fields = this.template.fields.concat(_.map(additionalFields, function (field) { return field.substr(1); }));
	        }
	        this.template.fields = this.template.fields.concat(_.map(this.template.fieldsToMatch, function (toMatch) {
	            return toMatch.field;
	        }));
	    }
	    TemplateFromAScriptTag.prototype.toHtmlElement = function () {
	        var script = Dom_1.$$('code');
	        var condition = Dom_1.$$(this.scriptTag).getAttribute('data-condition');
	        if (condition) {
	            script.setAttribute('data-condition', condition);
	        }
	        script.setHtml(this.scriptTag.innerHTML);
	        return script.el;
	    };
	    TemplateFromAScriptTag.prototype.parseFieldsAttributes = function () {
	        var dataSet = this.scriptTag.dataset;
	        return _.chain(dataSet)
	            .map(function (value, key) {
	            var match = key.match(/field([a-z0-9]*)/i);
	            if (match) {
	                var values = void 0;
	                if (value != null && value != 'null' && value != '') {
	                    values = value.split(',');
	                }
	                return {
	                    field: match[1].toLowerCase(),
	                    values: values
	                };
	            }
	            else {
	                return undefined;
	            }
	        })
	            .compact()
	            .value();
	    };
	    TemplateFromAScriptTag.prototype.parseScreenSize = function (attribute) {
	        return Utils_1.Utils.parseBooleanIfNotUndefined(this.scriptTag.getAttribute(attribute));
	    };
	    TemplateFromAScriptTag.prototype.parseLayout = function () {
	        var layout = this.scriptTag.getAttribute('data-layout');
	        return layout;
	    };
	    TemplateFromAScriptTag.fromString = function (template, properties) {
	        if (properties === void 0) { properties = {}; }
	        var script = document.createElement('code');
	        script.innerHTML = template;
	        if (properties.condition != null) {
	            script.setAttribute('data-condition', properties.condition);
	        }
	        if (properties.layout != null) {
	            script.setAttribute('data-layout', properties.layout);
	        }
	        else {
	            script.setAttribute('data-layout', 'list');
	        }
	        if (properties.mobile != null) {
	            script.setAttribute('data-mobile', properties.mobile.toString());
	        }
	        if (properties.tablet != null) {
	            script.setAttribute('data-tablet', properties.tablet.toString());
	        }
	        if (properties.desktop != null) {
	            script.setAttribute('data-desktop', properties.desktop.toString());
	        }
	        if (properties.fieldsToMatch != null) {
	            _.each(properties.fieldsToMatch, function (fieldToMatch) {
	                if (fieldToMatch.values) {
	                    script.setAttribute("data-field-" + fieldToMatch.field.toLowerCase(), fieldToMatch.values.join(','));
	                }
	                else {
	                    script.setAttribute("data-field-" + fieldToMatch.field.toLowerCase(), null);
	                }
	            });
	        }
	        return script;
	    };
	    return TemplateFromAScriptTag;
	}());
	exports.TemplateFromAScriptTag = TemplateFromAScriptTag;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var UnderscoreTemplate_1 = __webpack_require__(114);
	var TemplateCache_1 = __webpack_require__(110);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	/*
	 * This renders the appropriate result template, found in TemplateCache,
	 * according to its condition.
	 *
	 * For example, a result with a filetype of `YoutubeVideo` will get rendered
	 * with the `YoutubeVideo` template, because the latter is registered with a
	 * `condition` of `raw.filetype == 'YoutubeVideo'`.
	 */
	var DefaultResultTemplate = (function (_super) {
	    __extends(DefaultResultTemplate, _super);
	    function DefaultResultTemplate() {
	        return _super.call(this) || this;
	    }
	    DefaultResultTemplate.prototype.instantiateToString = function (queryResult, instantiateOptions) {
	        if (instantiateOptions === void 0) { instantiateOptions = {}; }
	        Assert_1.Assert.exists(queryResult);
	        var merged = new Template_1.DefaultInstantiateTemplateOptions().merge(instantiateOptions);
	        queryResult = _.extend({}, queryResult, UnderscoreTemplate_1.UnderscoreTemplate.templateHelpers);
	        // Put templates with conditions first
	        var templates = _.chain(TemplateCache_1.TemplateCache.getDefaultTemplates())
	            .map(function (name) { return TemplateCache_1.TemplateCache.getTemplate(name); })
	            .sortBy(function (template) { return template.condition == null; })
	            .sortBy(function (template) { return template.fieldsToMatch == null; })
	            .value();
	        // For the DefaultResultTemplate, we want to display card only in mobile
	        // The default list template are not adapted to mobile.
	        if (merged.responsiveComponents.isSmallScreenWidth()) {
	            templates = _.filter(templates, function (tmpl) { return tmpl.layout == 'card'; });
	            merged.currentLayout = 'card';
	            this.layout = 'card';
	        }
	        else {
	            this.layout = merged.currentLayout;
	        }
	        for (var i = 0; i < templates.length; i++) {
	            var result = templates[i].instantiateToString(queryResult, merged);
	            if (result != null) {
	                return result;
	            }
	        }
	        return this.getFallbackTemplate();
	    };
	    DefaultResultTemplate.prototype.getFields = function () {
	        var defaultTemplates = _.map(TemplateCache_1.TemplateCache.getDefaultTemplates(), function (name) { return TemplateCache_1.TemplateCache.getTemplate(name); });
	        return _.flatten(_.map(defaultTemplates, function (template) { return template.getFields(); }));
	    };
	    DefaultResultTemplate.prototype.getType = function () {
	        return 'DefaultResultTemplate';
	    };
	    DefaultResultTemplate.prototype.getFallbackTemplate = function () {
	        var titleContainer = Dom_1.$$('div', {
	            className: 'coveo-title'
	        });
	        var resultLink = Dom_1.$$('a', {
	            className: 'CoveoResultLink'
	        });
	        titleContainer.append(resultLink.el);
	        var excerpt = Dom_1.$$('div', {
	            className: 'CoveoExcerpt'
	        });
	        var resultContainer = Dom_1.$$('div');
	        resultContainer.append(titleContainer.el);
	        resultContainer.append(excerpt.el);
	        return resultContainer.el.outerHTML;
	    };
	    return DefaultResultTemplate;
	}(Template_1.Template));
	exports.DefaultResultTemplate = DefaultResultTemplate;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var Assert_1 = __webpack_require__(12);
	var TemplateFromAScriptTag_1 = __webpack_require__(115);
	var HtmlTemplate = (function (_super) {
	    __extends(HtmlTemplate, _super);
	    function HtmlTemplate(element) {
	        var _this = _super.call(this, function () { return element.innerHTML; }) || this;
	        _this.element = element;
	        _this.templateFromAScriptTag = new TemplateFromAScriptTag_1.TemplateFromAScriptTag(_this, _this.element);
	        return _this;
	    }
	    HtmlTemplate.prototype.toHtmlElement = function () {
	        var script = this.templateFromAScriptTag.toHtmlElement();
	        // We don't set the type attribute for 2 reasons:
	        // 1) LockerService doesn't like when we set it.
	        // 2) The HTML Template is the default one.
	        return script;
	    };
	    HtmlTemplate.prototype.getType = function () {
	        return 'HtmlTemplate';
	    };
	    HtmlTemplate.prototype.getFields = function () {
	        return this.fields;
	    };
	    HtmlTemplate.create = function (element) {
	        Assert_1.Assert.exists(element);
	        return new HtmlTemplate(element);
	    };
	    HtmlTemplate.fromString = function (template, properties) {
	        var script = TemplateFromAScriptTag_1.TemplateFromAScriptTag.fromString(template, properties);
	        // We don't set the type attribute for 2 reasons:
	        // 1) LockerService doesn't like when we set it.
	        // 2) The HTML Template is the default one.
	        return new HtmlTemplate(script);
	    };
	    return HtmlTemplate;
	}(Template_1.Template));
	HtmlTemplate.mimeTypes = [
	    'text/html',
	    'text/HTML'
	];
	exports.HtmlTemplate = HtmlTemplate;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var DefaultResultTemplate_1 = __webpack_require__(116);
	var _ = __webpack_require__(14);
	var TemplateList = (function (_super) {
	    __extends(TemplateList, _super);
	    function TemplateList(templates) {
	        var _this = _super.call(this) || this;
	        _this.templates = templates;
	        return _this;
	    }
	    TemplateList.prototype.instantiateToString = function (object, instantiateOptions) {
	        if (instantiateOptions === void 0) { instantiateOptions = {}; }
	        var merged = new Template_1.DefaultInstantiateTemplateOptions().merge(instantiateOptions);
	        for (var i = 0; i < this.templates.length; i++) {
	            var result = this.templates[i].instantiateToString(object, merged);
	            if (result != null) {
	                return result;
	            }
	        }
	        return new DefaultResultTemplate_1.DefaultResultTemplate().instantiateToString(object, instantiateOptions);
	    };
	    TemplateList.prototype.instantiateToElement = function (object, instantiateOptions) {
	        if (instantiateOptions === void 0) { instantiateOptions = {}; }
	        var merged = new Template_1.DefaultInstantiateTemplateOptions().merge(instantiateOptions);
	        for (var i = 0; i < this.templates.length; i++) {
	            var element = this.templates[i].instantiateToElement(object, merged);
	            if (element != null) {
	                return element;
	            }
	        }
	        return new DefaultResultTemplate_1.DefaultResultTemplate().instantiateToElement(object, merged);
	    };
	    TemplateList.prototype.getFields = function () {
	        return _.reduce(this.templates, function (fields, template) { return fields.concat(template.getFields()); }, []);
	    };
	    TemplateList.prototype.getType = function () {
	        return 'TemplateList';
	    };
	    return TemplateList;
	}(Template_1.Template));
	exports.TemplateList = TemplateList;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(4);
	var NoopAnalyticsClient = (function () {
	    function NoopAnalyticsClient() {
	        this.isContextual = false;
	    }
	    NoopAnalyticsClient.prototype.isActivated = function () {
	        return false;
	    };
	    NoopAnalyticsClient.prototype.getCurrentEventCause = function () {
	        return this.currentEventCause;
	    };
	    NoopAnalyticsClient.prototype.getCurrentEventMeta = function () {
	        return this.currentEventMeta;
	    };
	    NoopAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
	        this.setNoopCauseAndMeta(actionCause.name, meta);
	    };
	    NoopAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
	        this.setNoopCauseAndMeta(actionCause.name, meta);
	    };
	    NoopAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
	        this.setNoopCauseAndMeta(actionCause.name, meta);
	    };
	    NoopAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
	        this.setNoopCauseAndMeta(actionCause.name, meta);
	    };
	    NoopAnalyticsClient.prototype.getTopQueries = function (params) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            resolve([]);
	        });
	    };
	    NoopAnalyticsClient.prototype.getCurrentVisitIdPromise = function () {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            resolve(null);
	        });
	    };
	    NoopAnalyticsClient.prototype.getCurrentVisitId = function () {
	        return null;
	    };
	    NoopAnalyticsClient.prototype.sendAllPendingEvents = function () {
	    };
	    NoopAnalyticsClient.prototype.cancelAllPendingEvents = function () {
	    };
	    NoopAnalyticsClient.prototype.warnAboutSearchEvent = function () {
	    };
	    NoopAnalyticsClient.prototype.getPendingSearchEvent = function () {
	        return null;
	    };
	    NoopAnalyticsClient.prototype.setOriginContext = function (originContext) {
	    };
	    NoopAnalyticsClient.prototype.setNoopCauseAndMeta = function (cause, meta) {
	        this.currentEventCause = cause;
	        this.currentEventMeta = meta;
	    };
	    return NoopAnalyticsClient;
	}());
	exports.NoopAnalyticsClient = NoopAnalyticsClient;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ComponentOptions_1 = __webpack_require__(109);
	var LocalStorageUtils_1 = __webpack_require__(69);
	var QueryEvents_1 = __webpack_require__(48);
	var ResultListEvents_1 = __webpack_require__(49);
	var DebugEvents_1 = __webpack_require__(43);
	var Dom_1 = __webpack_require__(59);
	var StringUtils_1 = __webpack_require__(62);
	var SearchEndpoint_1 = __webpack_require__(9);
	var Template_1 = __webpack_require__(111);
	var es6_promise_1 = __webpack_require__(4);
	var RootComponent_1 = __webpack_require__(75);
	var BaseComponent_1 = __webpack_require__(76);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var Globalize = __webpack_require__(28);
	var KeyboardUtils_1 = __webpack_require__(68);
	var InitializationEvents_1 = __webpack_require__(45);
	var _ = __webpack_require__(14);
	var Debug = (function (_super) {
	    __extends(Debug, _super);
	    function Debug(element, queryController, options, modalBox) {
	        if (modalBox === void 0) { modalBox = ExternalModulesShim_1.ModalBox; }
	        var _this = _super.call(this, element, Debug.ID) || this;
	        _this.element = element;
	        _this.queryController = queryController;
	        _this.options = options;
	        _this.modalBox = modalBox;
	        _this.debug = false;
	        _this.highlightRecommendation = false;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Debug, options);
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.buildingQuery, function (e, args) {
	            args.queryBuilder.enableDebug = _this.debug || args.queryBuilder.enableDebug;
	        });
	        Dom_1.$$(_this.element).on(ResultListEvents_1.ResultListEvents.newResultDisplayed, function (e, args) { return _this.handleNewResultDisplayed(args); });
	        Dom_1.$$(_this.element).on(DebugEvents_1.DebugEvents.showDebugPanel, function (e, args) {
	            _this.handleShowDebugPanel(args);
	        });
	        Dom_1.$$(_this.element).on(InitializationEvents_1.InitializationEvents.nuke, function () {
	            _this.unbindEscapeEvent();
	        });
	        _this.localStorageDebug = new LocalStorageUtils_1.LocalStorageUtils('DebugPanel');
	        _this.collapsedSections = _this.localStorageDebug.load() || [];
	        return _this;
	    }
	    Debug.prototype.buildFieldsSection = function (result) {
	        return this.fetchFields()
	            .then(function (fieldDescriptions) {
	            var fields = {};
	            _.each(result.raw, function (value, key) {
	                var fieldDescription = fieldDescriptions['@' + key];
	                if (fieldDescription == null && key.match(/^sys/)) {
	                    fieldDescription = fieldDescriptions['@' + key.substr(3)];
	                }
	                if (fieldDescription == null) {
	                    fields['@' + key] = value;
	                }
	                else if (fieldDescription.fieldType == 'Date') {
	                    fields['@' + key] = new Date(value);
	                }
	                else if (fieldDescription.splitGroupByField && _.isString(value)) {
	                    fields['@' + key] = value.split(/\s*;\s*/);
	                }
	                else {
	                    fields['@' + key] = value;
	                }
	            });
	            return fields;
	        });
	    };
	    Debug.prototype.parseRankingInfo = function (value) {
	        var _this = this;
	        var rankingInfo = {};
	        if (value) {
	            var documentWeights = /Document weights:\n((?:.)*?)\n+/g.exec(value);
	            var termsWeight = /Terms weights:\n((?:.|\n)*)\n+/g.exec(value);
	            var totalWeight = /Total weight: ([0-9]+)/g.exec(value);
	            if (documentWeights && documentWeights[1]) {
	                rankingInfo['Document weights'] = this.parseWeights(documentWeights[1]);
	            }
	            if (totalWeight && totalWeight[1]) {
	                rankingInfo['Total weight'] = Number(totalWeight[1]);
	            }
	            if (termsWeight && termsWeight[1]) {
	                var terms = StringUtils_1.StringUtils.match(termsWeight[1], /((?:[^:]+: [0-9]+, [0-9]+; )+)\n((?:\w+: [0-9]+; )+)/g);
	                rankingInfo['Terms weights'] = _.object(_.map(terms, function (term) {
	                    var words = _.object(_.map(StringUtils_1.StringUtils.match(term[1], /([^:]+): ([0-9]+), ([0-9]+); /g), function (word) {
	                        return [
	                            word[1],
	                            {
	                                Correlation: Number(word[2]),
	                                'TF-IDF': Number(word[3]),
	                            }
	                        ];
	                    }));
	                    var weights = _this.parseWeights(term[2]);
	                    return [
	                        _.keys(words).join(', '),
	                        {
	                            terms: words,
	                            Weights: weights
	                        }
	                    ];
	                }));
	            }
	        }
	        return rankingInfo;
	    };
	    Debug.prototype.buildStackPanel = function (stackDebug, results) {
	        var _this = this;
	        var body = Dom_1.Dom.createElement('div', { className: 'coveo-debug' });
	        var keys = _.pairs(_.keys(stackDebug));
	        keys = keys.sort(function (a, b) {
	            var indexA = _.indexOf(Debug.customOrder, a[1]);
	            var indexB = _.indexOf(Debug.customOrder, b[1]);
	            if (indexA != -1 && indexB != -1) {
	                return indexA - indexB;
	            }
	            if (indexA != -1) {
	                return -1;
	            }
	            if (indexB != -1) {
	                return 1;
	            }
	            return a[0] - b[0];
	        });
	        var json = {};
	        _.forEach(keys, function (key) {
	            var section = _this.buildSection(key[1]);
	            var build = _this.buildStackPanelSection(stackDebug[key[1]], results);
	            section.container.appendChild(build.section);
	            if (build.json != null) {
	                json[key[1]] = build.json;
	            }
	            body.appendChild(section.dom);
	        });
	        return { body: body, json: json };
	    };
	    Debug.prototype.debugInfo = function () {
	        return null;
	    };
	    Debug.prototype.showDebugPanel = function (builder) {
	        var _this = this;
	        var build = builder();
	        var modalbox = this.modalBox.open(build.body, {
	            title: '',
	            className: 'coveo-debug',
	            titleClose: true,
	            overlayClose: true,
	            validation: function () {
	                _this.unbindEscapeEvent();
	                return true;
	            }
	        });
	        this.bindEscapeEvent();
	        var title = Dom_1.$$(modalbox.wrapper).find('.coveo-title');
	        var search = this.buildSearchBox(build.body);
	        var downloadLink = Dom_1.$$('a', { download: 'debug.json', 'href': this.downloadHref(build.json) }, 'Download');
	        var bodyBuilder = function (results) {
	            var build = builder(results);
	            downloadLink.el.setAttribute('href', _this.downloadHref(build.json));
	            return build.body;
	        };
	        title.appendChild(this.buildEnabledHighlightRecommendation());
	        title.appendChild(this.buildEnableDebugCheckbox(build.body, search, bodyBuilder));
	        title.appendChild(search);
	        title.appendChild(downloadLink.el);
	    };
	    Debug.prototype.handleEscapeEvent = function (e) {
	        if (e.keyCode == KeyboardUtils_1.KEYBOARD.ESCAPE) {
	            if (this.modalBox) {
	                this.modalBox.close();
	            }
	        }
	    };
	    Debug.prototype.bindEscapeEvent = function () {
	        this.boundEscapeKey = this.handleEscapeEvent.bind(this);
	        Dom_1.$$(document.body).on('keyup', this.boundEscapeKey);
	    };
	    Debug.prototype.unbindEscapeEvent = function () {
	        if (this.boundEscapeKey) {
	            Dom_1.$$(document.body).off('keyup', this.boundEscapeKey);
	        }
	        this.boundEscapeKey = null;
	    };
	    Debug.prototype.handleShowDebugPanel = function (info) {
	        var _this = this;
	        if (this.stackDebug == null) {
	            setTimeout(function () {
	                var stackDebug = _this.stackDebug;
	                _this.showDebugPanel(function (results) { return _this.buildStackPanel(stackDebug, results); });
	                _this.stackDebug = null;
	            });
	            this.stackDebug = {};
	        }
	        _.extend(this.stackDebug, info);
	    };
	    Debug.prototype.handleNewResultDisplayed = function (args) {
	        var _this = this;
	        if (args.item != null) {
	            if (this.highlightRecommendation && args.result.isRecommendation) {
	                Dom_1.$$(args.item).addClass('coveo-is-recommendation');
	            }
	            Dom_1.$$(args.item).on('dblclick', function (e) {
	                _this.handleResultDoubleClick(e, args);
	            });
	        }
	    };
	    Debug.prototype.handleResultDoubleClick = function (e, args) {
	        var _this = this;
	        if (e.altKey) {
	            var index_1 = args.result.index;
	            var findResult_1 = function (results) { return results != null ? _.find(results.results, function (result) { return result.index == index_1; }) : args.result; };
	            var template = args.item['template'];
	            var debugPanel = {
	                result: findResult_1,
	                fields: function (results) { return _this.buildFieldsSection(findResult_1(results)); },
	                rankingInfo: function (results) { return _this.buildRankingInfoSection(findResult_1(results)); },
	                template: this.templateToJson(template),
	            };
	            this.handleShowDebugPanel(debugPanel);
	        }
	    };
	    Debug.prototype.downloadHref = function (info) {
	        return 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(info));
	    };
	    Debug.prototype.buildStackPanelSection = function (value, results) {
	        if (value instanceof HTMLElement) {
	            return { section: value };
	        }
	        else if (_.isFunction(value)) {
	            return this.buildStackPanelSection(value(results), results);
	        }
	        var json = this.toJson(value);
	        return { section: this.buildProperty(json), json: json };
	    };
	    Debug.prototype.buildSearchBox = function (body) {
	        var _this = this;
	        var dom = Dom_1.Dom.createElement('div', { className: 'coveo-debug-search' }, '<input type=\'text\'/>');
	        dom.onclick = function (e) {
	            e.stopPropagation();
	        };
	        var lastSearch = '';
	        var input = dom.querySelector('input');
	        input.setAttribute('placeholder', 'Search in debug');
	        input.onkeyup = function (e) {
	            if (e == null || e.keyCode == 13) {
	                var value = input.value.toLowerCase();
	                if (lastSearch != value) {
	                    lastSearch = value;
	                    _this.search(value, body);
	                }
	            }
	        };
	        input.onchange = function () {
	            var value = input.value.toLowerCase();
	            if (lastSearch != value) {
	                lastSearch = value;
	                _this.search(value, body);
	            }
	        };
	        return dom;
	    };
	    Debug.prototype.search = function (value, body) {
	        var _this = this;
	        if (_.isEmpty(value)) {
	            Dom_1.$$(body).findAll('.coveo-search-match, .coveo-search-submatch').forEach(function (el) {
	                Dom_1.$$(el).removeClass('coveo-search-match, coveo-search-submatch');
	            });
	            Dom_1.$$(body).removeClass('coveo-searching');
	        }
	        else {
	            Dom_1.$$(body).addClass('coveo-searching-loading');
	            setTimeout(function () {
	                var rootProperties = Dom_1.$$(body).findAll('.coveo-section .coveo-section-container > .coveo-property');
	                _.each(rootProperties, function (element) {
	                    _this.findInProperty(element, value);
	                });
	                Dom_1.$$(body).addClass('coveo-searching');
	                Dom_1.$$(body).removeClass('coveo-searching-loading');
	            });
	        }
	    };
	    Debug.prototype.findInProperty = function (element, value) {
	        var _this = this;
	        var jElement = Dom_1.$$(element);
	        var match = element['label'].indexOf(value) != -1;
	        if (match) {
	            this.highlightSearch(element['labelDom'], value);
	        }
	        else {
	            this.removeHighlightSearch(element['labelDom']);
	        }
	        if (jElement.hasClass('coveo-property-object')) {
	            jElement.toggleClass('coveo-search-match', match);
	            var children = element['buildKeys']();
	            var submatch_1 = false;
	            _.each(children, function (child) {
	                submatch_1 = _this.findInProperty(child, value) || submatch_1;
	            });
	            jElement.toggleClass('coveo-search-submatch', submatch_1);
	            return match || submatch_1;
	        }
	        else {
	            if (element['values'].indexOf(value) != -1) {
	                this.highlightSearch(element['valueDom'], value);
	                match = true;
	            }
	            else {
	                this.removeHighlightSearch(element['valueDom']);
	            }
	            jElement.toggleClass('coveo-search-match', match);
	        }
	        return match;
	    };
	    Debug.prototype.buildEnableDebugCheckbox = function (body, search, bodyBuilder) {
	        var _this = this;
	        var dom = Dom_1.Dom.createElement('div', { className: 'coveo-enabled-debug' }, '<label>Enable query debug <input type=\'checkbox\'/></label>');
	        Dom_1.$$(dom).on('click', function (e) {
	            e.stopPropagation();
	        });
	        var checkbox = Dom_1.$$(dom).find('input');
	        if (this.debug) {
	            checkbox.setAttribute('checked', 'checked');
	        }
	        checkbox.onchange = function () {
	            _this.debug = !_this.debug;
	            Dom_1.$$(_this.element).one([QueryEvents_1.QueryEvents.querySuccess, QueryEvents_1.QueryEvents.queryError], function (e, args) {
	                Dom_1.$$(body).removeClass('coveo-debug-loading');
	                Dom_1.$$(body).empty();
	                Dom_1.$$(bodyBuilder(args.results)).children().forEach(function (child) {
	                    body.appendChild(child);
	                });
	            });
	            _this.queryController.executeQuery({ closeModalBox: false });
	            Dom_1.$$(body).addClass('coveo-debug-loading');
	            var input = search.querySelector('input');
	            input.value = '';
	            input.onkeyup(null);
	        };
	        return dom;
	    };
	    Debug.prototype.buildEnabledHighlightRecommendation = function () {
	        var _this = this;
	        var dom = Dom_1.Dom.createElement('div', { className: 'coveo-enabled-highlight-recommendation' }, '<label>Highlight recommendation <input type=\'checkbox\'/></label>');
	        dom.onclick = function (e) {
	            e.stopPropagation();
	        };
	        var checkbox = Dom_1.$$(dom).find('input');
	        if (this.highlightRecommendation) {
	            checkbox.setAttribute('checked', 'checked');
	        }
	        checkbox.onchange = function () {
	            _this.highlightRecommendation = !_this.highlightRecommendation;
	            _this.queryController.executeQuery({ closeModalBox: false });
	        };
	        return dom;
	    };
	    Debug.prototype.buildSection = function (id) {
	        var _this = this;
	        var dom = Dom_1.Dom.createElement('div', { className: 'coveo-section coveo-' + id + '-section' });
	        var header = Dom_1.Dom.createElement('div', { className: 'coveo-section-header' });
	        Dom_1.$$(header).text(id);
	        dom.appendChild(header);
	        var container = Dom_1.Dom.createElement('div', { className: 'coveo-section-container' });
	        dom.appendChild(container);
	        if (_.contains(this.collapsedSections, id)) {
	            Dom_1.$$(dom).addClass('coveo-debug-collapsed');
	        }
	        header.onclick = function () {
	            Dom_1.$$(dom).toggleClass('coveo-debug-collapsed');
	            if (_.contains(_this.collapsedSections, id)) {
	                _this.collapsedSections = _.without(_this.collapsedSections, id);
	            }
	            else {
	                _this.collapsedSections.push(id);
	            }
	            _this.localStorageDebug.save(_this.collapsedSections);
	        };
	        return {
	            dom: dom,
	            header: header,
	            container: container
	        };
	    };
	    Debug.prototype.fetchFields = function () {
	        var _this = this;
	        if (this.fields == null) {
	            return this.queryController.getEndpoint().listFields().then(function (fields) {
	                _this.fields = {};
	                fields.forEach(function (field) {
	                    _this.fields[field.name] = field;
	                });
	                return _this.fields;
	            });
	        }
	        else {
	            return es6_promise_1.Promise.resolve(this.fields);
	        }
	    };
	    Debug.prototype.buildRankingInfoSection = function (result) {
	        return result.rankingInfo && this.parseRankingInfo(result.rankingInfo);
	    };
	    Debug.prototype.parseWeights = function (value) {
	        var listOfWeight = value.match(/(\w+(?:\s\w+)*): ([-0-9]+)/g);
	        return _.object(_.map(listOfWeight, function (weight) {
	            var weightGroup = weight.match(/^(\w+(?:\s\w+)*): ([-0-9]+)$/);
	            return [weightGroup[1], Number(weightGroup[2])];
	        }));
	    };
	    Debug.prototype.buildProperty = function (value, label) {
	        if (value instanceof es6_promise_1.Promise) {
	            return this.buildPromise(value, label);
	        }
	        else if ((_.isArray(value) || (_.isObject(value))) && !_.isString(value)) {
	            return this.buildObjectProperty(value, label);
	        }
	        else {
	            return this.buildBasicProperty(value, label);
	        }
	    };
	    Debug.prototype.buildPromise = function (promise, label) {
	        var _this = this;
	        var dom = document.createElement('div');
	        dom.className = 'coveo-property coveo-property-promise';
	        promise.then(function (value) {
	            var resolvedDom = _this.buildProperty(value, label);
	            Dom_1.$$(dom).replaceWith(resolvedDom);
	        });
	        return dom;
	    };
	    Debug.prototype.buildObjectProperty = function (object, label) {
	        var _this = this;
	        var dom = document.createElement('div');
	        dom.className = 'coveo-property coveo-property-object';
	        var valueContainer = document.createElement('div');
	        valueContainer.className = 'coveo-property-value';
	        var keys = _.keys(object);
	        if (!_.isArray(object)) {
	            keys.sort();
	        }
	        var children;
	        var buildKeys = function () {
	            if (children == null) {
	                children = [];
	                _.each(keys, function (key) {
	                    var property = _this.buildProperty(object[key], key);
	                    if (property != null) {
	                        children.push(property);
	                        valueContainer.appendChild(property);
	                    }
	                });
	            }
	            return children;
	        };
	        dom['buildKeys'] = buildKeys;
	        if (label != null) {
	            var labelDom = document.createElement('div');
	            labelDom.className = 'coveo-property-label';
	            labelDom.appendChild(document.createTextNode(label));
	            dom['labelDom'] = labelDom;
	            dom.appendChild(labelDom);
	            if (keys.length != 0) {
	                dom.className += ' coveo-collapsible';
	                labelDom.onclick = function () {
	                    buildKeys();
	                    var className = dom.className.split(/\s+/);
	                    if (_.contains(className, 'coveo-expanded')) {
	                        className = _.without(className, 'coveo-expanded');
	                    }
	                    else {
	                        className.push('coveo-expanded');
	                    }
	                    dom.className = className.join(' ');
	                };
	            }
	        }
	        else {
	            buildKeys();
	        }
	        if (keys.length == 0) {
	            var className = _.without(dom.className.split(/\s+/), 'coveo-property-object');
	            className.push('coveo-property-basic');
	            dom.className = className.join(' ');
	            if (_.isArray(object)) {
	                valueContainer.innerHTML = '[]';
	            }
	            else {
	                valueContainer.innerHTML = '{}';
	            }
	            dom['values'] = '';
	        }
	        dom['label'] = label != null ? label.toLowerCase() : '';
	        dom.appendChild(valueContainer);
	        return dom;
	    };
	    Debug.prototype.buildBasicProperty = function (value, label) {
	        var _this = this;
	        var dom = document.createElement('div');
	        dom.className = 'coveo-property coveo-property-basic';
	        if (label != null) {
	            var labelDom = document.createElement('div');
	            labelDom.className = 'coveo-property-label';
	            labelDom.appendChild(document.createTextNode(label));
	            dom.appendChild(labelDom);
	            dom['labelDom'] = labelDom;
	        }
	        var stringValue = value != null ? value.toString() : String(value);
	        if (value != null && value['ref'] != null) {
	            value = value['ref'];
	        }
	        var valueDom = document.createElement('div');
	        valueDom.appendChild(document.createTextNode(stringValue));
	        valueDom.ondblclick = function () {
	            _this.selectElementText(valueDom);
	        };
	        dom.appendChild(valueDom);
	        dom['valueDom'] = valueDom;
	        var className = ['coveo-property-value'];
	        if (_.isString(value)) {
	            className.push('coveo-property-value-string');
	        }
	        if (_.isNull(value) || _.isUndefined(value)) {
	            className.push('coveo-property-value-null');
	        }
	        if (_.isNumber(value)) {
	            className.push('coveo-property-value-number');
	        }
	        if (_.isBoolean(value)) {
	            className.push('coveo-property-value-boolean');
	        }
	        if (_.isDate(value)) {
	            className.push('coveo-property-value-date');
	        }
	        if (_.isObject(value)) {
	            className.push('coveo-property-value-object');
	        }
	        if (_.isArray(value)) {
	            className.push('coveo-property-value-array');
	        }
	        valueDom.className = className.join(' ');
	        dom['label'] = label != null ? label.toLowerCase() : '';
	        dom['values'] = stringValue.toLowerCase();
	        return dom;
	    };
	    Debug.prototype.toJson = function (value, depth, done) {
	        var _this = this;
	        if (depth === void 0) { depth = 0; }
	        if (done === void 0) { done = []; }
	        if (value instanceof BaseComponent_1.BaseComponent || value instanceof SearchEndpoint_1.SearchEndpoint) {
	            return this.componentToJson(value, depth);
	        }
	        if (value instanceof HTMLElement) {
	            return this.htmlToJson(value);
	        }
	        if (value instanceof Template_1.Template) {
	            return this.templateToJson(value);
	        }
	        if (value instanceof es6_promise_1.Promise) {
	            return value.then(function (value) {
	                return _this.toJson(value, depth, done);
	            });
	        }
	        if (value == window) {
	            return this.toJsonRef(value);
	        }
	        if (_.isArray(value) || _.isObject(value)) {
	            if (_.contains(done, value)) {
	                return this.toJsonRef(value, '< RECURSIVE >');
	            }
	            else if (depth >= Debug.maxDepth) {
	                return this.toJsonRef(value);
	            }
	            else if (_.isArray(value)) {
	                return _.map(value, function (subValue, key) { return _this.toJson(subValue, depth + 1, done.concat([value])); });
	            }
	            else if (_.isDate(value)) {
	                return this.toJsonRef(value, Globalize.format(value, 'F'));
	            }
	            else {
	                var result_1 = {};
	                _.each(value, function (subValue, key) {
	                    result_1[key] = _this.toJson(subValue, depth + 1, done.concat([value]));
	                });
	                result_1['ref'];
	                return result_1;
	            }
	        }
	        return value;
	    };
	    Debug.prototype.toJsonRef = function (value, stringValue) {
	        stringValue = new String(stringValue || value);
	        stringValue['ref'] = value;
	        return stringValue;
	    };
	    Debug.prototype.componentToJson = function (value, depth) {
	        if (depth === void 0) { depth = 0; }
	        var options = _.keys(value['options']);
	        if (options.length > 0) {
	            return this.toJson(value['options'], depth);
	        }
	        else {
	            return this.toJsonRef(value['options'], new String('No options'));
	        }
	    };
	    Debug.prototype.htmlToJson = function (value) {
	        if (value == null) {
	            return undefined;
	        }
	        return {
	            tagName: value.tagName,
	            id: value.id,
	            classList: value.className.split(/\s+/)
	        };
	    };
	    Debug.prototype.templateToJson = function (template) {
	        if (template == null) {
	            return null;
	        }
	        var element = template['element'];
	        var templateObject = {
	            type: template.getType(),
	        };
	        if (element != null) {
	            templateObject.id = element.id;
	            templateObject.condition = element.attributes['data-condition'];
	            templateObject.content = element.innerText;
	        }
	        return templateObject;
	    };
	    Debug.prototype.selectElementText = function (el) {
	        if (window.getSelection && document.createRange) {
	            var selection = window.getSelection();
	            var range = document.createRange();
	            range.selectNodeContents(el);
	            selection.removeAllRanges();
	            selection.addRange(range);
	        }
	        else if ('createTextRange' in document.body) {
	            var textRange = document.body['createTextRange']();
	            textRange.moveToElementText(el);
	            textRange.select();
	        }
	    };
	    Debug.prototype.highlightSearch = function (element, search) {
	        if (element != null) {
	            var match = element.innerText.split(new RegExp('(?=' + StringUtils_1.StringUtils.regexEncode(search) + ')', 'gi'));
	            element.innerHTML = '';
	            match.forEach(function (value) {
	                var regex = new RegExp('(' + StringUtils_1.StringUtils.regexEncode(search) + ')', 'i');
	                var group = value.match(regex);
	                var span;
	                if (group != null) {
	                    span = Dom_1.Dom.createElement('span', { className: 'coveo-debug-highlight' });
	                    span.appendChild(document.createTextNode(group[1]));
	                    element.appendChild(span);
	                    span = Dom_1.Dom.createElement('span');
	                    span.appendChild(document.createTextNode(value.substr(group[1].length)));
	                    element.appendChild(span);
	                }
	                else {
	                    span = Dom_1.Dom.createElement('span');
	                    span.appendChild(document.createTextNode(value));
	                    element.appendChild(span);
	                }
	            });
	        }
	    };
	    Debug.prototype.removeHighlightSearch = function (element) {
	        if (element != null) {
	            element.innerHTML = element.innerText;
	        }
	    };
	    return Debug;
	}(RootComponent_1.RootComponent));
	Debug.ID = 'Debug';
	Debug.options = {
	    enableDebug: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })
	};
	Debug.customOrder = ['error', 'queryDuration', 'result', 'fields', 'rankingInfo', 'template', 'query', 'results', 'state'];
	Debug.durationKeys = ['indexDuration', 'proxyDuration', 'clientDuration', 'duration'];
	Debug.maxDepth = 10;
	exports.Debug = Debug;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
		'use strict';
	
		/**
		 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
		 *
		 * @codingstandard ftlabs-jsv2
		 * @copyright The Financial Times Limited [All Rights Reserved]
		 * @license MIT License (see LICENSE.txt)
		 */
	
		/*jslint browser:true, node:true*/
		/*global define, Event, Node*/
	
	
		/**
		 * Instantiate fast-clicking listeners on the specified layer.
		 *
		 * @constructor
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		function FastClick(layer, options) {
			var oldOnClick;
	
			options = options || {};
	
			/**
			 * Whether a click is currently being tracked.
			 *
			 * @type boolean
			 */
			this.trackingClick = false;
	
	
			/**
			 * Timestamp for when click tracking started.
			 *
			 * @type number
			 */
			this.trackingClickStart = 0;
	
	
			/**
			 * The element being tracked for a click.
			 *
			 * @type EventTarget
			 */
			this.targetElement = null;
	
	
			/**
			 * X-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartX = 0;
	
	
			/**
			 * Y-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartY = 0;
	
	
			/**
			 * ID of the last touch, retrieved from Touch.identifier.
			 *
			 * @type number
			 */
			this.lastTouchIdentifier = 0;
	
	
			/**
			 * Touchmove boundary, beyond which a click will be cancelled.
			 *
			 * @type number
			 */
			this.touchBoundary = options.touchBoundary || 10;
	
	
			/**
			 * The FastClick layer.
			 *
			 * @type Element
			 */
			this.layer = layer;
	
			/**
			 * The minimum time between tap(touchstart and touchend) events
			 *
			 * @type number
			 */
			this.tapDelay = options.tapDelay || 200;
	
			/**
			 * The maximum time for a tap
			 *
			 * @type number
			 */
			this.tapTimeout = options.tapTimeout || 700;
	
			if (FastClick.notNeeded(layer)) {
				return;
			}
	
			// Some old versions of Android don't have Function.prototype.bind
			function bind(method, context) {
				return function() { return method.apply(context, arguments); };
			}
	
	
			var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
			var context = this;
			for (var i = 0, l = methods.length; i < l; i++) {
				context[methods[i]] = bind(context[methods[i]], context);
			}
	
			// Set up event handlers as required
			if (deviceIsAndroid) {
				layer.addEventListener('mouseover', this.onMouse, true);
				layer.addEventListener('mousedown', this.onMouse, true);
				layer.addEventListener('mouseup', this.onMouse, true);
			}
	
			layer.addEventListener('click', this.onClick, true);
			layer.addEventListener('touchstart', this.onTouchStart, false);
			layer.addEventListener('touchmove', this.onTouchMove, false);
			layer.addEventListener('touchend', this.onTouchEnd, false);
			layer.addEventListener('touchcancel', this.onTouchCancel, false);
	
			// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
			// layer when they are cancelled.
			if (!Event.prototype.stopImmediatePropagation) {
				layer.removeEventListener = function(type, callback, capture) {
					var rmv = Node.prototype.removeEventListener;
					if (type === 'click') {
						rmv.call(layer, type, callback.hijacked || callback, capture);
					} else {
						rmv.call(layer, type, callback, capture);
					}
				};
	
				layer.addEventListener = function(type, callback, capture) {
					var adv = Node.prototype.addEventListener;
					if (type === 'click') {
						adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
							if (!event.propagationStopped) {
								callback(event);
							}
						}), capture);
					} else {
						adv.call(layer, type, callback, capture);
					}
				};
			}
	
			// If a handler is already declared in the element's onclick attribute, it will be fired before
			// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
			// adding it as listener.
			if (typeof layer.onclick === 'function') {
	
				// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
				// - the old one won't work if passed to addEventListener directly.
				oldOnClick = layer.onclick;
				layer.addEventListener('click', function(event) {
					oldOnClick(event);
				}, false);
				layer.onclick = null;
			}
		}
	
		/**
		* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
		*
		* @type boolean
		*/
		var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;
	
		/**
		 * Android requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;
	
	
		/**
		 * iOS requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;
	
	
		/**
		 * iOS 4 requires an exception for select elements.
		 *
		 * @type boolean
		 */
		var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);
	
	
		/**
		 * iOS 6.0-7.* requires the target element to be manually derived
		 *
		 * @type boolean
		 */
		var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);
	
		/**
		 * BlackBerry requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;
	
		/**
		 * Determine whether a given element requires a native click.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element needs a native click
		 */
		FastClick.prototype.needsClick = function(target) {
			switch (target.nodeName.toLowerCase()) {
	
			// Don't send a synthetic click to disabled inputs (issue #62)
			case 'button':
			case 'select':
			case 'textarea':
				if (target.disabled) {
					return true;
				}
	
				break;
			case 'input':
	
				// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
				if ((deviceIsIOS && target.type === 'file') || target.disabled) {
					return true;
				}
	
				break;
			case 'label':
			case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
			case 'video':
				return true;
			}
	
			return (/\bneedsclick\b/).test(target.className);
		};
	
	
		/**
		 * Determine whether a given element requires a call to focus to simulate click into element.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
		 */
		FastClick.prototype.needsFocus = function(target) {
			switch (target.nodeName.toLowerCase()) {
			case 'textarea':
				return true;
			case 'select':
				return !deviceIsAndroid;
			case 'input':
				switch (target.type) {
				case 'button':
				case 'checkbox':
				case 'file':
				case 'image':
				case 'radio':
				case 'submit':
					return false;
				}
	
				// No point in attempting to focus disabled inputs
				return !target.disabled && !target.readOnly;
			default:
				return (/\bneedsfocus\b/).test(target.className);
			}
		};
	
	
		/**
		 * Send a click event to the specified element.
		 *
		 * @param {EventTarget|Element} targetElement
		 * @param {Event} event
		 */
		FastClick.prototype.sendClick = function(targetElement, event) {
			var clickEvent, touch;
	
			// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
			if (document.activeElement && document.activeElement !== targetElement) {
				document.activeElement.blur();
			}
	
			touch = event.changedTouches[0];
	
			// Synthesise a click event, with an extra attribute so it can be tracked
			clickEvent = document.createEvent('MouseEvents');
			clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
			clickEvent.forwardedTouchEvent = true;
			targetElement.dispatchEvent(clickEvent);
		};
	
		FastClick.prototype.determineEventType = function(targetElement) {
	
			//Issue #159: Android Chrome Select Box does not open with a synthetic click event
			if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
				return 'mousedown';
			}
	
			return 'click';
		};
	
	
		/**
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.focus = function(targetElement) {
			var length;
	
			// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
			if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
				length = targetElement.value.length;
				targetElement.setSelectionRange(length, length);
			} else {
				targetElement.focus();
			}
		};
	
	
		/**
		 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
		 *
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.updateScrollParent = function(targetElement) {
			var scrollParent, parentElement;
	
			scrollParent = targetElement.fastClickScrollParent;
	
			// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
			// target element was moved to another parent.
			if (!scrollParent || !scrollParent.contains(targetElement)) {
				parentElement = targetElement;
				do {
					if (parentElement.scrollHeight > parentElement.offsetHeight) {
						scrollParent = parentElement;
						targetElement.fastClickScrollParent = parentElement;
						break;
					}
	
					parentElement = parentElement.parentElement;
				} while (parentElement);
			}
	
			// Always update the scroll top tracker if possible.
			if (scrollParent) {
				scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
			}
		};
	
	
		/**
		 * @param {EventTarget} targetElement
		 * @returns {Element|EventTarget}
		 */
		FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
	
			// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
			if (eventTarget.nodeType === Node.TEXT_NODE) {
				return eventTarget.parentNode;
			}
	
			return eventTarget;
		};
	
	
		/**
		 * On touch start, record the position and scroll offset.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchStart = function(event) {
			var targetElement, touch, selection;
	
			// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
			if (event.targetTouches.length > 1) {
				return true;
			}
	
			targetElement = this.getTargetElementFromEventTarget(event.target);
			touch = event.targetTouches[0];
	
			if (deviceIsIOS) {
	
				// Only trusted events will deselect text on iOS (issue #49)
				selection = window.getSelection();
				if (selection.rangeCount && !selection.isCollapsed) {
					return true;
				}
	
				if (!deviceIsIOS4) {
	
					// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
					// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
					// with the same identifier as the touch event that previously triggered the click that triggered the alert.
					// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
					// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
					// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
					// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
					// random integers, it's safe to to continue if the identifier is 0 here.
					if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
						event.preventDefault();
						return false;
					}
	
					this.lastTouchIdentifier = touch.identifier;
	
					// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
					// 1) the user does a fling scroll on the scrollable layer
					// 2) the user stops the fling scroll with another tap
					// then the event.target of the last 'touchend' event will be the element that was under the user's finger
					// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
					// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
					this.updateScrollParent(targetElement);
				}
			}
	
			this.trackingClick = true;
			this.trackingClickStart = event.timeStamp;
			this.targetElement = targetElement;
	
			this.touchStartX = touch.pageX;
			this.touchStartY = touch.pageY;
	
			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				event.preventDefault();
			}
	
			return true;
		};
	
	
		/**
		 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.touchHasMoved = function(event) {
			var touch = event.changedTouches[0], boundary = this.touchBoundary;
	
			if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
				return true;
			}
	
			return false;
		};
	
	
		/**
		 * Update the last position.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchMove = function(event) {
			if (!this.trackingClick) {
				return true;
			}
	
			// If the touch has moved, cancel the click tracking
			if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
				this.trackingClick = false;
				this.targetElement = null;
			}
	
			return true;
		};
	
	
		/**
		 * Attempt to find the labelled control for the given label element.
		 *
		 * @param {EventTarget|HTMLLabelElement} labelElement
		 * @returns {Element|null}
		 */
		FastClick.prototype.findControl = function(labelElement) {
	
			// Fast path for newer browsers supporting the HTML5 control attribute
			if (labelElement.control !== undefined) {
				return labelElement.control;
			}
	
			// All browsers under test that support touch events also support the HTML5 htmlFor attribute
			if (labelElement.htmlFor) {
				return document.getElementById(labelElement.htmlFor);
			}
	
			// If no for attribute exists, attempt to retrieve the first labellable descendant element
			// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
			return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
		};
	
	
		/**
		 * On touch end, determine whether to send a click event at once.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchEnd = function(event) {
			var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
	
			if (!this.trackingClick) {
				return true;
			}
	
			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				this.cancelNextClick = true;
				return true;
			}
	
			if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
				return true;
			}
	
			// Reset to prevent wrong click cancel on input (issue #156).
			this.cancelNextClick = false;
	
			this.lastClickTime = event.timeStamp;
	
			trackingClickStart = this.trackingClickStart;
			this.trackingClick = false;
			this.trackingClickStart = 0;
	
			// On some iOS devices, the targetElement supplied with the event is invalid if the layer
			// is performing a transition or scroll, and has to be re-detected manually. Note that
			// for this to function correctly, it must be called *after* the event target is checked!
			// See issue #57; also filed as rdar://13048589 .
			if (deviceIsIOSWithBadTarget) {
				touch = event.changedTouches[0];
	
				// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
				targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
				targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
			}
	
			targetTagName = targetElement.tagName.toLowerCase();
			if (targetTagName === 'label') {
				forElement = this.findControl(targetElement);
				if (forElement) {
					this.focus(targetElement);
					if (deviceIsAndroid) {
						return false;
					}
	
					targetElement = forElement;
				}
			} else if (this.needsFocus(targetElement)) {
	
				// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
				// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
				if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
					this.targetElement = null;
					return false;
				}
	
				this.focus(targetElement);
				this.sendClick(targetElement, event);
	
				// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
				// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
				if (!deviceIsIOS || targetTagName !== 'select') {
					this.targetElement = null;
					event.preventDefault();
				}
	
				return false;
			}
	
			if (deviceIsIOS && !deviceIsIOS4) {
	
				// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
				// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
				scrollParent = targetElement.fastClickScrollParent;
				if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
					return true;
				}
			}
	
			// Prevent the actual click from going though - unless the target node is marked as requiring
			// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
			if (!this.needsClick(targetElement)) {
				event.preventDefault();
				this.sendClick(targetElement, event);
			}
	
			return false;
		};
	
	
		/**
		 * On touch cancel, stop tracking the click.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.onTouchCancel = function() {
			this.trackingClick = false;
			this.targetElement = null;
		};
	
	
		/**
		 * Determine mouse events which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onMouse = function(event) {
	
			// If a target element was never set (because a touch event was never fired) allow the event
			if (!this.targetElement) {
				return true;
			}
	
			if (event.forwardedTouchEvent) {
				return true;
			}
	
			// Programmatically generated events targeting a specific element should be permitted
			if (!event.cancelable) {
				return true;
			}
	
			// Derive and check the target element to see whether the mouse event needs to be permitted;
			// unless explicitly enabled, prevent non-touch click events from triggering actions,
			// to prevent ghost/doubleclicks.
			if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
	
				// Prevent any user-added listeners declared on FastClick element from being fired.
				if (event.stopImmediatePropagation) {
					event.stopImmediatePropagation();
				} else {
	
					// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
					event.propagationStopped = true;
				}
	
				// Cancel the event
				event.stopPropagation();
				event.preventDefault();
	
				return false;
			}
	
			// If the mouse event is permitted, return true for the action to go through.
			return true;
		};
	
	
		/**
		 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
		 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
		 * an actual click which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onClick = function(event) {
			var permitted;
	
			// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
			if (this.trackingClick) {
				this.targetElement = null;
				this.trackingClick = false;
				return true;
			}
	
			// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
			if (event.target.type === 'submit' && event.detail === 0) {
				return true;
			}
	
			permitted = this.onMouse(event);
	
			// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
			if (!permitted) {
				this.targetElement = null;
			}
	
			// If clicks are permitted, return true for the action to go through.
			return permitted;
		};
	
	
		/**
		 * Remove all FastClick's event listeners.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.destroy = function() {
			var layer = this.layer;
	
			if (deviceIsAndroid) {
				layer.removeEventListener('mouseover', this.onMouse, true);
				layer.removeEventListener('mousedown', this.onMouse, true);
				layer.removeEventListener('mouseup', this.onMouse, true);
			}
	
			layer.removeEventListener('click', this.onClick, true);
			layer.removeEventListener('touchstart', this.onTouchStart, false);
			layer.removeEventListener('touchmove', this.onTouchMove, false);
			layer.removeEventListener('touchend', this.onTouchEnd, false);
			layer.removeEventListener('touchcancel', this.onTouchCancel, false);
		};
	
	
		/**
		 * Check whether FastClick is needed.
		 *
		 * @param {Element} layer The layer to listen on
		 */
		FastClick.notNeeded = function(layer) {
			var metaViewport;
			var chromeVersion;
			var blackberryVersion;
			var firefoxVersion;
	
			// Devices that don't support touch don't need FastClick
			if (typeof window.ontouchstart === 'undefined') {
				return true;
			}
	
			// Chrome version - zero for other browsers
			chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];
	
			if (chromeVersion) {
	
				if (deviceIsAndroid) {
					metaViewport = document.querySelector('meta[name=viewport]');
	
					if (metaViewport) {
						// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// Chrome 32 and above with width=device-width or less don't need FastClick
						if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
	
				// Chrome desktop doesn't need FastClick (issue #15)
				} else {
					return true;
				}
			}
	
			if (deviceIsBlackBerry10) {
				blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);
	
				// BlackBerry 10.3+ does not require Fastclick library.
				// https://github.com/ftlabs/fastclick/issues/251
				if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
					metaViewport = document.querySelector('meta[name=viewport]');
	
					if (metaViewport) {
						// user-scalable=no eliminates click delay.
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// width=device-width (or less than device-width) eliminates click delay.
						if (document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
				}
			}
	
			// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
			if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}
	
			// Firefox version - zero for other browsers
			firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];
	
			if (firefoxVersion >= 27) {
				// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896
	
				metaViewport = document.querySelector('meta[name=viewport]');
				if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
					return true;
				}
			}
	
			// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
			// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
			if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}
	
			return false;
		};
	
	
		/**
		 * Factory method for creating a FastClick object
		 *
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		FastClick.attach = function(layer, options) {
			return new FastClick(layer, options);
		};
	
	
		if (true) {
	
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return FastClick;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = FastClick.attach;
			module.exports.FastClick = FastClick;
		} else {
			window.FastClick = FastClick;
		}
	}());


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root) {/*global exports, Intl*/
	/**
	 * This script gives you the zone info key representing your device's time zone setting.
	 *
	 * @name jsTimezoneDetect
	 * @version 1.0.6
	 * @author Jon Nylander
	 * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt
	 *
	 * For usage and examples, visit:
	 * http://pellepim.bitbucket.org/jstz/
	 *
	 * Copyright (c) Jon Nylander
	 */
	
	
	/**
	 * Namespace to hold all the code for timezone detection.
	 */
	var jstz = (function () {
	    'use strict';
	    var HEMISPHERE_SOUTH = 's',
	
	        consts = {
	            DAY: 86400000,
	            HOUR: 3600000,
	            MINUTE: 60000,
	            SECOND: 1000,
	            BASELINE_YEAR: 2014,
	            MAX_SCORE: 864000000, // 10 days
	            AMBIGUITIES: {
	                'America/Denver':       ['America/Mazatlan'],
	                'Europe/London':        ['Africa/Casablanca'],
	                'America/Chicago':      ['America/Mexico_City'],
	                'America/Asuncion':     ['America/Campo_Grande', 'America/Santiago'],
	                'America/Montevideo':   ['America/Sao_Paulo', 'America/Santiago'],
	                // Europe/Minsk should not be in this list... but Windows.
	                'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Europe/Helsinki', 'Asia/Damascus', 'Africa/Cairo', 'Asia/Gaza', 'Europe/Minsk'],
	                'Pacific/Auckland':     ['Pacific/Fiji'],
	                'America/Los_Angeles':  ['America/Santa_Isabel'],
	                'America/New_York':     ['America/Havana'],
	                'America/Halifax':      ['America/Goose_Bay'],
	                'America/Godthab':      ['America/Miquelon'],
	                'Asia/Dubai':           ['Asia/Yerevan'],
	                'Asia/Jakarta':         ['Asia/Krasnoyarsk'],
	                'Asia/Shanghai':        ['Asia/Irkutsk', 'Australia/Perth'],
	                'Australia/Sydney':     ['Australia/Lord_Howe'],
	                'Asia/Tokyo':           ['Asia/Yakutsk'],
	                'Asia/Dhaka':           ['Asia/Omsk'],
	                // In the real world Yerevan is not ambigous for Baku... but Windows.
	                'Asia/Baku':            ['Asia/Yerevan'],
	                'Australia/Brisbane':   ['Asia/Vladivostok'],
	                'Pacific/Noumea':       ['Asia/Vladivostok'],
	                'Pacific/Majuro':       ['Asia/Kamchatka', 'Pacific/Fiji'],
	                'Pacific/Tongatapu':    ['Pacific/Apia'],
	                'Asia/Baghdad':         ['Europe/Minsk', 'Europe/Moscow'],
	                'Asia/Karachi':         ['Asia/Yekaterinburg'],
	                'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']
	            }
	        },
	
	        /**
	         * Gets the offset in minutes from UTC for a certain date.
	         * @param {Date} date
	         * @returns {Number}
	         */
	        get_date_offset = function get_date_offset(date) {
	            var offset = -date.getTimezoneOffset();
	            return (offset !== null ? offset : 0);
	        },
	
	        /**
	         * This function does some basic calculations to create information about
	         * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
	         * the script has been tested rather than depend on the year set by the
	         * client device.
	         *
	         * Returns a key that can be used to do lookups in jstz.olson.timezones.
	         * eg: "720,1,2".
	         *
	         * @returns {String}
	         */
	        lookup_key = function lookup_key() {
	            var january_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 0, 2)),
	                june_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 5, 2)),
	                diff = january_offset - june_offset;
	
	            if (diff < 0) {
	                return january_offset + ",1";
	            } else if (diff > 0) {
	                return june_offset + ",1," + HEMISPHERE_SOUTH;
	            }
	
	            return january_offset + ",0";
	        },
	
	
	        /**
	         * Tries to get the time zone key directly from the operating system for those
	         * environments that support the ECMAScript Internationalization API.
	         */
	        get_from_internationalization_api = function get_from_internationalization_api() {
	            var format, timezone;
	            if (typeof Intl === "undefined" || typeof Intl.DateTimeFormat === "undefined") {
	                return;
	            }
	
	            format = Intl.DateTimeFormat();
	
	            if (typeof format === "undefined" || typeof format.resolvedOptions === "undefined") {
	                return;
	            }
	
	            timezone = format.resolvedOptions().timeZone;
	
	            if (timezone && (timezone.indexOf("/") > -1 || timezone === 'UTC')) {
	                return timezone;
	            }
	
	        },
	
	        /**
	         * Starting point for getting all the DST rules for a specific year
	         * for the current timezone (as described by the client system).
	         *
	         * Returns an object with start and end attributes, or false if no
	         * DST rules were found for the year.
	         *
	         * @param year
	         * @returns {Object} || {Boolean}
	         */
	        dst_dates = function dst_dates(year) {
	            var yearstart = new Date(year, 0, 1, 0, 0, 1, 0).getTime();
	            var yearend = new Date(year, 12, 31, 23, 59, 59).getTime();
	            var current = yearstart;
	            var offset = (new Date(current)).getTimezoneOffset();
	            var dst_start = null;
	            var dst_end = null;
	
	            while (current < yearend - 86400000) {
	                var dateToCheck = new Date(current);
	                var dateToCheckOffset = dateToCheck.getTimezoneOffset();
	
	                if (dateToCheckOffset !== offset) {
	                    if (dateToCheckOffset < offset) {
	                        dst_start = dateToCheck;
	                    }
	                    if (dateToCheckOffset > offset) {
	                        dst_end = dateToCheck;
	                    }
	                    offset = dateToCheckOffset;
	                }
	
	                current += 86400000;
	            }
	
	            if (dst_start && dst_end) {
	                return {
	                    s: find_dst_fold(dst_start).getTime(),
	                    e: find_dst_fold(dst_end).getTime()
	                };
	            }
	
	            return false;
	        },
	
	        /**
	         * Probably completely unnecessary function that recursively finds the
	         * exact (to the second) time when a DST rule was changed.
	         *
	         * @param a_date - The candidate Date.
	         * @param padding - integer specifying the padding to allow around the candidate
	         *                  date for finding the fold.
	         * @param iterator - integer specifying how many milliseconds to iterate while
	         *                   searching for the fold.
	         *
	         * @returns {Date}
	         */
	        find_dst_fold = function find_dst_fold(a_date, padding, iterator) {
	            if (typeof padding === 'undefined') {
	                padding = consts.DAY;
	                iterator = consts.HOUR;
	            }
	
	            var date_start = new Date(a_date.getTime() - padding).getTime();
	            var date_end = a_date.getTime() + padding;
	            var offset = new Date(date_start).getTimezoneOffset();
	
	            var current = date_start;
	
	            var dst_change = null;
	            while (current < date_end - iterator) {
	                var dateToCheck = new Date(current);
	                var dateToCheckOffset = dateToCheck.getTimezoneOffset();
	
	                if (dateToCheckOffset !== offset) {
	                    dst_change = dateToCheck;
	                    break;
	                }
	                current += iterator;
	            }
	
	            if (padding === consts.DAY) {
	                return find_dst_fold(dst_change, consts.HOUR, consts.MINUTE);
	            }
	
	            if (padding === consts.HOUR) {
	                return find_dst_fold(dst_change, consts.MINUTE, consts.SECOND);
	            }
	
	            return dst_change;
	        },
	
	        windows7_adaptations = function windows7_adaptions(rule_list, preliminary_timezone, score, sample) {
	            if (score !== 'N/A') {
	                return score;
	            }
	            if (preliminary_timezone === 'Asia/Beirut') {
	                if (sample.name === 'Africa/Cairo') {
	                    if (rule_list[6].s === 1398376800000 && rule_list[6].e === 1411678800000) {
	                        return 0;
	                    }
	                }
	                if (sample.name === 'Asia/Jerusalem') {
	                    if (rule_list[6].s === 1395964800000 && rule_list[6].e === 1411858800000) {
	                        return 0;
	                }
	            }
	            } else if (preliminary_timezone === 'America/Santiago') {
	                if (sample.name === 'America/Asuncion') {
	                    if (rule_list[6].s === 1412481600000 && rule_list[6].e === 1397358000000) {
	                        return 0;
	                    }
	                }
	                if (sample.name === 'America/Campo_Grande') {
	                    if (rule_list[6].s === 1413691200000 && rule_list[6].e === 1392519600000) {
	                        return 0;
	                    }
	                }
	            } else if (preliminary_timezone === 'America/Montevideo') {
	                if (sample.name === 'America/Sao_Paulo') {
	                    if (rule_list[6].s === 1413687600000 && rule_list[6].e === 1392516000000) {
	                        return 0;
	                    }
	                }
	            } else if (preliminary_timezone === 'Pacific/Auckland') {
	                if (sample.name === 'Pacific/Fiji') {
	                    if (rule_list[6].s === 1414245600000 && rule_list[6].e === 1396101600000) {
	                        return 0;
	                    }
	                }
	            }
	
	            return score;
	        },
	
	        /**
	         * Takes the DST rules for the current timezone, and proceeds to find matches
	         * in the jstz.olson.dst_rules.zones array.
	         *
	         * Compares samples to the current timezone on a scoring basis.
	         *
	         * Candidates are ruled immediately if either the candidate or the current zone
	         * has a DST rule where the other does not.
	         *
	         * Candidates are ruled out immediately if the current zone has a rule that is
	         * outside the DST scope of the candidate.
	         *
	         * Candidates are included for scoring if the current zones rules fall within the
	         * span of the samples rules.
	         *
	         * Low score is best, the score is calculated by summing up the differences in DST
	         * rules and if the consts.MAX_SCORE is overreached the candidate is ruled out.
	         *
	         * Yah follow? :)
	         *
	         * @param rule_list
	         * @param preliminary_timezone
	         * @returns {*}
	         */
	        best_dst_match = function best_dst_match(rule_list, preliminary_timezone) {
	            var score_sample = function score_sample(sample) {
	                var score = 0;
	
	                for (var j = 0; j < rule_list.length; j++) {
	
	                    // Both sample and current time zone report DST during the year.
	                    if (!!sample.rules[j] && !!rule_list[j]) {
	
	                        // The current time zone's DST rules are inside the sample's. Include.
	                        if (rule_list[j].s >= sample.rules[j].s && rule_list[j].e <= sample.rules[j].e) {
	                            score = 0;
	                            score += Math.abs(rule_list[j].s - sample.rules[j].s);
	                            score += Math.abs(sample.rules[j].e - rule_list[j].e);
	
	                        // The current time zone's DST rules are outside the sample's. Discard.
	                        } else {
	                            score = 'N/A';
	                            break;
	                        }
	
	                        // The max score has been reached. Discard.
	                        if (score > consts.MAX_SCORE) {
	                            score = 'N/A';
	                            break;
	                        }
	                    }
	                }
	
	                score = windows7_adaptations(rule_list, preliminary_timezone, score, sample);
	
	                return score;
	            };
	            var scoreboard = {};
	            var dst_zones = jstz.olson.dst_rules.zones;
	            var dst_zones_length = dst_zones.length;
	            var ambiguities = consts.AMBIGUITIES[preliminary_timezone];
	
	            for (var i = 0; i < dst_zones_length; i++) {
	                var sample = dst_zones[i];
	                var score = score_sample(dst_zones[i]);
	
	                if (score !== 'N/A') {
	                    scoreboard[sample.name] = score;
	                }
	            }
	
	            for (var tz in scoreboard) {
	                if (scoreboard.hasOwnProperty(tz)) {
	                    for (var j = 0; j < ambiguities.length; j++) {
	                        if (ambiguities[j] === tz) {
	                            return tz;
	                        }
	                    }
	                }
	            }
	
	            return preliminary_timezone;
	        },
	
	        /**
	         * Takes the preliminary_timezone as detected by lookup_key().
	         *
	         * Builds up the current timezones DST rules for the years defined
	         * in the jstz.olson.dst_rules.years array.
	         *
	         * If there are no DST occurences for those years, immediately returns
	         * the preliminary timezone. Otherwise proceeds and tries to solve
	         * ambiguities.
	         *
	         * @param preliminary_timezone
	         * @returns {String} timezone_name
	         */
	        get_by_dst = function get_by_dst(preliminary_timezone) {
	            var get_rules = function get_rules() {
	                var rule_list = [];
	                for (var i = 0; i < jstz.olson.dst_rules.years.length; i++) {
	                    var year_rules = dst_dates(jstz.olson.dst_rules.years[i]);
	                    rule_list.push(year_rules);
	                }
	                return rule_list;
	            };
	            var check_has_dst = function check_has_dst(rules) {
	                for (var i = 0; i < rules.length; i++) {
	                    if (rules[i] !== false) {
	                        return true;
	                    }
	                }
	                return false;
	            };
	            var rules = get_rules();
	            var has_dst = check_has_dst(rules);
	
	            if (has_dst) {
	                return best_dst_match(rules, preliminary_timezone);
	            }
	
	            return preliminary_timezone;
	        },
	
	        /**
	         * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
	         *
	         * Returns an object with one function ".name()"
	         *
	         * @returns Object
	         */
	        determine = function determine() {
	            var preliminary_tz = get_from_internationalization_api();
	
	            if (!preliminary_tz) {
	                preliminary_tz = jstz.olson.timezones[lookup_key()];
	
	                if (typeof consts.AMBIGUITIES[preliminary_tz] !== 'undefined') {
	                    preliminary_tz = get_by_dst(preliminary_tz);
	                }
	            }
	
	            return {
	                name: function () {
	                    return preliminary_tz;
	                }
	            };
	        };
	
	    return {
	        determine: determine
	    };
	}());
	
	
	jstz.olson = jstz.olson || {};
	
	/**
	 * The keys in this dictionary are comma separated as such:
	 *
	 * First the offset compared to UTC time in minutes.
	 *
	 * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
	 * does.
	 *
	 * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
	 * only interesting for timezones with DST.
	 *
	 * The mapped arrays is used for constructing the jstz.TimeZone object from within
	 * jstz.determine();
	 */
	jstz.olson.timezones = {
	    '-720,0': 'Etc/GMT+12',
	    '-660,0': 'Pacific/Pago_Pago',
	    '-660,1,s': 'Pacific/Apia', // Why? Because windows... cry!
	    '-600,1': 'America/Adak',
	    '-600,0': 'Pacific/Honolulu',
	    '-570,0': 'Pacific/Marquesas',
	    '-540,0': 'Pacific/Gambier',
	    '-540,1': 'America/Anchorage',
	    '-480,1': 'America/Los_Angeles',
	    '-480,0': 'Pacific/Pitcairn',
	    '-420,0': 'America/Phoenix',
	    '-420,1': 'America/Denver',
	    '-360,0': 'America/Guatemala',
	    '-360,1': 'America/Chicago',
	    '-360,1,s': 'Pacific/Easter',
	    '-300,0': 'America/Bogota',
	    '-300,1': 'America/New_York',
	    '-270,0': 'America/Caracas',
	    '-240,1': 'America/Halifax',
	    '-240,0': 'America/Santo_Domingo',
	    '-240,1,s': 'America/Asuncion',
	    '-210,1': 'America/St_Johns',
	    '-180,1': 'America/Godthab',
	    '-180,0': 'America/Argentina/Buenos_Aires',
	    '-180,1,s': 'America/Montevideo',
	    '-120,0': 'America/Noronha',
	    '-120,1': 'America/Noronha',
	    '-60,1': 'Atlantic/Azores',
	    '-60,0': 'Atlantic/Cape_Verde',
	    '0,0': 'UTC',
	    '0,1': 'Europe/London',
	    '60,1': 'Europe/Berlin',
	    '60,0': 'Africa/Lagos',
	    '60,1,s': 'Africa/Windhoek',
	    '120,1': 'Asia/Beirut',
	    '120,0': 'Africa/Johannesburg',
	    '180,0': 'Asia/Baghdad',
	    '180,1': 'Europe/Moscow',
	    '210,1': 'Asia/Tehran',
	    '240,0': 'Asia/Dubai',
	    '240,1': 'Asia/Baku',
	    '270,0': 'Asia/Kabul',
	    '300,1': 'Asia/Yekaterinburg',
	    '300,0': 'Asia/Karachi',
	    '330,0': 'Asia/Kolkata',
	    '345,0': 'Asia/Kathmandu',
	    '360,0': 'Asia/Dhaka',
	    '360,1': 'Asia/Omsk',
	    '390,0': 'Asia/Rangoon',
	    '420,1': 'Asia/Krasnoyarsk',
	    '420,0': 'Asia/Jakarta',
	    '480,0': 'Asia/Shanghai',
	    '480,1': 'Asia/Irkutsk',
	    '525,0': 'Australia/Eucla',
	    '525,1,s': 'Australia/Eucla',
	    '540,1': 'Asia/Yakutsk',
	    '540,0': 'Asia/Tokyo',
	    '570,0': 'Australia/Darwin',
	    '570,1,s': 'Australia/Adelaide',
	    '600,0': 'Australia/Brisbane',
	    '600,1': 'Asia/Vladivostok',
	    '600,1,s': 'Australia/Sydney',
	    '630,1,s': 'Australia/Lord_Howe',
	    '660,1': 'Asia/Kamchatka',
	    '660,0': 'Pacific/Noumea',
	    '690,0': 'Pacific/Norfolk',
	    '720,1,s': 'Pacific/Auckland',
	    '720,0': 'Pacific/Majuro',
	    '765,1,s': 'Pacific/Chatham',
	    '780,0': 'Pacific/Tongatapu',
	    '780,1,s': 'Pacific/Apia',
	    '840,0': 'Pacific/Kiritimati'
	};
	
	/* Build time: 2015-11-02 13:01:00Z Build by invoking python utilities/dst.py generate */
	jstz.olson.dst_rules = {
	    "years": [
	        2008,
	        2009,
	        2010,
	        2011,
	        2012,
	        2013,
	        2014
	    ],
	    "zones": [
	        {
	            "name": "Africa/Cairo",
	            "rules": [
	                {
	                    "e": 1219957200000,
	                    "s": 1209074400000
	                },
	                {
	                    "e": 1250802000000,
	                    "s": 1240524000000
	                },
	                {
	                    "e": 1285880400000,
	                    "s": 1284069600000
	                },
	                false,
	                false,
	                false,
	                {
	                    "e": 1411678800000,
	                    "s": 1406844000000
	                }
	            ]
	        },
	        {
	            "name": "Africa/Casablanca",
	            "rules": [
	                {
	                    "e": 1220223600000,
	                    "s": 1212278400000
	                },
	                {
	                    "e": 1250809200000,
	                    "s": 1243814400000
	                },
	                {
	                    "e": 1281222000000,
	                    "s": 1272758400000
	                },
	                {
	                    "e": 1312066800000,
	                    "s": 1301788800000
	                },
	                {
	                    "e": 1348970400000,
	                    "s": 1345428000000
	                },
	                {
	                    "e": 1382839200000,
	                    "s": 1376100000000
	                },
	                {
	                    "e": 1414288800000,
	                    "s": 1406944800000
	                }
	            ]
	        },
	        {
	            "name": "America/Asuncion",
	            "rules": [
	                {
	                    "e": 1205031600000,
	                    "s": 1224388800000
	                },
	                {
	                    "e": 1236481200000,
	                    "s": 1255838400000
	                },
	                {
	                    "e": 1270954800000,
	                    "s": 1286078400000
	                },
	                {
	                    "e": 1302404400000,
	                    "s": 1317528000000
	                },
	                {
	                    "e": 1333854000000,
	                    "s": 1349582400000
	                },
	                {
	                    "e": 1364094000000,
	                    "s": 1381032000000
	                },
	                {
	                    "e": 1395543600000,
	                    "s": 1412481600000
	                }
	            ]
	        },
	        {
	            "name": "America/Campo_Grande",
	            "rules": [
	                {
	                    "e": 1203217200000,
	                    "s": 1224388800000
	                },
	                {
	                    "e": 1234666800000,
	                    "s": 1255838400000
	                },
	                {
	                    "e": 1266721200000,
	                    "s": 1287288000000
	                },
	                {
	                    "e": 1298170800000,
	                    "s": 1318737600000
	                },
	                {
	                    "e": 1330225200000,
	                    "s": 1350792000000
	                },
	                {
	                    "e": 1361070000000,
	                    "s": 1382241600000
	                },
	                {
	                    "e": 1392519600000,
	                    "s": 1413691200000
	                }
	            ]
	        },
	        {
	            "name": "America/Goose_Bay",
	            "rules": [
	                {
	                    "e": 1225594860000,
	                    "s": 1205035260000
	                },
	                {
	                    "e": 1257044460000,
	                    "s": 1236484860000
	                },
	                {
	                    "e": 1289098860000,
	                    "s": 1268539260000
	                },
	                {
	                    "e": 1320555600000,
	                    "s": 1299988860000
	                },
	                {
	                    "e": 1352005200000,
	                    "s": 1331445600000
	                },
	                {
	                    "e": 1383454800000,
	                    "s": 1362895200000
	                },
	                {
	                    "e": 1414904400000,
	                    "s": 1394344800000
	                }
	            ]
	        },
	        {
	            "name": "America/Havana",
	            "rules": [
	                {
	                    "e": 1224997200000,
	                    "s": 1205643600000
	                },
	                {
	                    "e": 1256446800000,
	                    "s": 1236488400000
	                },
	                {
	                    "e": 1288501200000,
	                    "s": 1268542800000
	                },
	                {
	                    "e": 1321160400000,
	                    "s": 1300597200000
	                },
	                {
	                    "e": 1352005200000,
	                    "s": 1333256400000
	                },
	                {
	                    "e": 1383454800000,
	                    "s": 1362891600000
	                },
	                {
	                    "e": 1414904400000,
	                    "s": 1394341200000
	                }
	            ]
	        },
	        {
	            "name": "America/Mazatlan",
	            "rules": [
	                {
	                    "e": 1225008000000,
	                    "s": 1207472400000
	                },
	                {
	                    "e": 1256457600000,
	                    "s": 1238922000000
	                },
	                {
	                    "e": 1288512000000,
	                    "s": 1270371600000
	                },
	                {
	                    "e": 1319961600000,
	                    "s": 1301821200000
	                },
	                {
	                    "e": 1351411200000,
	                    "s": 1333270800000
	                },
	                {
	                    "e": 1382860800000,
	                    "s": 1365325200000
	                },
	                {
	                    "e": 1414310400000,
	                    "s": 1396774800000
	                }
	            ]
	        },
	        {
	            "name": "America/Mexico_City",
	            "rules": [
	                {
	                    "e": 1225004400000,
	                    "s": 1207468800000
	                },
	                {
	                    "e": 1256454000000,
	                    "s": 1238918400000
	                },
	                {
	                    "e": 1288508400000,
	                    "s": 1270368000000
	                },
	                {
	                    "e": 1319958000000,
	                    "s": 1301817600000
	                },
	                {
	                    "e": 1351407600000,
	                    "s": 1333267200000
	                },
	                {
	                    "e": 1382857200000,
	                    "s": 1365321600000
	                },
	                {
	                    "e": 1414306800000,
	                    "s": 1396771200000
	                }
	            ]
	        },
	        {
	            "name": "America/Miquelon",
	            "rules": [
	                {
	                    "e": 1225598400000,
	                    "s": 1205038800000
	                },
	                {
	                    "e": 1257048000000,
	                    "s": 1236488400000
	                },
	                {
	                    "e": 1289102400000,
	                    "s": 1268542800000
	                },
	                {
	                    "e": 1320552000000,
	                    "s": 1299992400000
	                },
	                {
	                    "e": 1352001600000,
	                    "s": 1331442000000
	                },
	                {
	                    "e": 1383451200000,
	                    "s": 1362891600000
	                },
	                {
	                    "e": 1414900800000,
	                    "s": 1394341200000
	                }
	            ]
	        },
	        {
	            "name": "America/Santa_Isabel",
	            "rules": [
	                {
	                    "e": 1225011600000,
	                    "s": 1207476000000
	                },
	                {
	                    "e": 1256461200000,
	                    "s": 1238925600000
	                },
	                {
	                    "e": 1288515600000,
	                    "s": 1270375200000
	                },
	                {
	                    "e": 1319965200000,
	                    "s": 1301824800000
	                },
	                {
	                    "e": 1351414800000,
	                    "s": 1333274400000
	                },
	                {
	                    "e": 1382864400000,
	                    "s": 1365328800000
	                },
	                {
	                    "e": 1414314000000,
	                    "s": 1396778400000
	                }
	            ]
	        },
	        {
	            "name": "America/Santiago",
	            "rules": [
	                {
	                    "e": 1206846000000,
	                    "s": 1223784000000
	                },
	                {
	                    "e": 1237086000000,
	                    "s": 1255233600000
	                },
	                {
	                    "e": 1270350000000,
	                    "s": 1286683200000
	                },
	                {
	                    "e": 1304823600000,
	                    "s": 1313899200000
	                },
	                {
	                    "e": 1335668400000,
	                    "s": 1346558400000
	                },
	                {
	                    "e": 1367118000000,
	                    "s": 1378612800000
	                },
	                {
	                    "e": 1398567600000,
	                    "s": 1410062400000
	                }
	            ]
	        },
	        {
	            "name": "America/Sao_Paulo",
	            "rules": [
	                {
	                    "e": 1203213600000,
	                    "s": 1224385200000
	                },
	                {
	                    "e": 1234663200000,
	                    "s": 1255834800000
	                },
	                {
	                    "e": 1266717600000,
	                    "s": 1287284400000
	                },
	                {
	                    "e": 1298167200000,
	                    "s": 1318734000000
	                },
	                {
	                    "e": 1330221600000,
	                    "s": 1350788400000
	                },
	                {
	                    "e": 1361066400000,
	                    "s": 1382238000000
	                },
	                {
	                    "e": 1392516000000,
	                    "s": 1413687600000
	                }
	            ]
	        },
	        {
	            "name": "Asia/Amman",
	            "rules": [
	                {
	                    "e": 1225404000000,
	                    "s": 1206655200000
	                },
	                {
	                    "e": 1256853600000,
	                    "s": 1238104800000
	                },
	                {
	                    "e": 1288303200000,
	                    "s": 1269554400000
	                },
	                {
	                    "e": 1319752800000,
	                    "s": 1301608800000
	                },
	                false,
	                false,
	                {
	                    "e": 1414706400000,
	                    "s": 1395957600000
	                }
	            ]
	        },
	        {
	            "name": "Asia/Damascus",
	            "rules": [
	                {
	                    "e": 1225486800000,
	                    "s": 1207260000000
	                },
	                {
	                    "e": 1256850000000,
	                    "s": 1238104800000
	                },
	                {
	                    "e": 1288299600000,
	                    "s": 1270159200000
	                },
	                {
	                    "e": 1319749200000,
	                    "s": 1301608800000
	                },
	                {
	                    "e": 1351198800000,
	                    "s": 1333058400000
	                },
	                {
	                    "e": 1382648400000,
	                    "s": 1364508000000
	                },
	                {
	                    "e": 1414702800000,
	                    "s": 1395957600000
	                }
	            ]
	        },
	        {
	            "name": "Asia/Dubai",
	            "rules": [
	                false,
	                false,
	                false,
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Gaza",
	            "rules": [
	                {
	                    "e": 1219957200000,
	                    "s": 1206655200000
	                },
	                {
	                    "e": 1252015200000,
	                    "s": 1238104800000
	                },
	                {
	                    "e": 1281474000000,
	                    "s": 1269640860000
	                },
	                {
	                    "e": 1312146000000,
	                    "s": 1301608860000
	                },
	                {
	                    "e": 1348178400000,
	                    "s": 1333058400000
	                },
	                {
	                    "e": 1380229200000,
	                    "s": 1364508000000
	                },
	                {
	                    "e": 1414098000000,
	                    "s": 1395957600000
	                }
	            ]
	        },
	        {
	            "name": "Asia/Irkutsk",
	            "rules": [
	                {
	                    "e": 1224957600000,
	                    "s": 1206813600000
	                },
	                {
	                    "e": 1256407200000,
	                    "s": 1238263200000
	                },
	                {
	                    "e": 1288461600000,
	                    "s": 1269712800000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Jerusalem",
	            "rules": [
	                {
	                    "e": 1223161200000,
	                    "s": 1206662400000
	                },
	                {
	                    "e": 1254006000000,
	                    "s": 1238112000000
	                },
	                {
	                    "e": 1284246000000,
	                    "s": 1269561600000
	                },
	                {
	                    "e": 1317510000000,
	                    "s": 1301616000000
	                },
	                {
	                    "e": 1348354800000,
	                    "s": 1333065600000
	                },
	                {
	                    "e": 1382828400000,
	                    "s": 1364515200000
	                },
	                {
	                    "e": 1414278000000,
	                    "s": 1395964800000
	                }
	            ]
	        },
	        {
	            "name": "Asia/Kamchatka",
	            "rules": [
	                {
	                    "e": 1224943200000,
	                    "s": 1206799200000
	                },
	                {
	                    "e": 1256392800000,
	                    "s": 1238248800000
	                },
	                {
	                    "e": 1288450800000,
	                    "s": 1269698400000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Krasnoyarsk",
	            "rules": [
	                {
	                    "e": 1224961200000,
	                    "s": 1206817200000
	                },
	                {
	                    "e": 1256410800000,
	                    "s": 1238266800000
	                },
	                {
	                    "e": 1288465200000,
	                    "s": 1269716400000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Omsk",
	            "rules": [
	                {
	                    "e": 1224964800000,
	                    "s": 1206820800000
	                },
	                {
	                    "e": 1256414400000,
	                    "s": 1238270400000
	                },
	                {
	                    "e": 1288468800000,
	                    "s": 1269720000000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Vladivostok",
	            "rules": [
	                {
	                    "e": 1224950400000,
	                    "s": 1206806400000
	                },
	                {
	                    "e": 1256400000000,
	                    "s": 1238256000000
	                },
	                {
	                    "e": 1288454400000,
	                    "s": 1269705600000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Yakutsk",
	            "rules": [
	                {
	                    "e": 1224954000000,
	                    "s": 1206810000000
	                },
	                {
	                    "e": 1256403600000,
	                    "s": 1238259600000
	                },
	                {
	                    "e": 1288458000000,
	                    "s": 1269709200000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Yekaterinburg",
	            "rules": [
	                {
	                    "e": 1224968400000,
	                    "s": 1206824400000
	                },
	                {
	                    "e": 1256418000000,
	                    "s": 1238274000000
	                },
	                {
	                    "e": 1288472400000,
	                    "s": 1269723600000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Asia/Yerevan",
	            "rules": [
	                {
	                    "e": 1224972000000,
	                    "s": 1206828000000
	                },
	                {
	                    "e": 1256421600000,
	                    "s": 1238277600000
	                },
	                {
	                    "e": 1288476000000,
	                    "s": 1269727200000
	                },
	                {
	                    "e": 1319925600000,
	                    "s": 1301176800000
	                },
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Australia/Lord_Howe",
	            "rules": [
	                {
	                    "e": 1207407600000,
	                    "s": 1223134200000
	                },
	                {
	                    "e": 1238857200000,
	                    "s": 1254583800000
	                },
	                {
	                    "e": 1270306800000,
	                    "s": 1286033400000
	                },
	                {
	                    "e": 1301756400000,
	                    "s": 1317483000000
	                },
	                {
	                    "e": 1333206000000,
	                    "s": 1349537400000
	                },
	                {
	                    "e": 1365260400000,
	                    "s": 1380987000000
	                },
	                {
	                    "e": 1396710000000,
	                    "s": 1412436600000
	                }
	            ]
	        },
	        {
	            "name": "Australia/Perth",
	            "rules": [
	                {
	                    "e": 1206813600000,
	                    "s": 1224957600000
	                },
	                false,
	                false,
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Europe/Helsinki",
	            "rules": [
	                {
	                    "e": 1224982800000,
	                    "s": 1206838800000
	                },
	                {
	                    "e": 1256432400000,
	                    "s": 1238288400000
	                },
	                {
	                    "e": 1288486800000,
	                    "s": 1269738000000
	                },
	                {
	                    "e": 1319936400000,
	                    "s": 1301187600000
	                },
	                {
	                    "e": 1351386000000,
	                    "s": 1332637200000
	                },
	                {
	                    "e": 1382835600000,
	                    "s": 1364691600000
	                },
	                {
	                    "e": 1414285200000,
	                    "s": 1396141200000
	                }
	            ]
	        },
	        {
	            "name": "Europe/Minsk",
	            "rules": [
	                {
	                    "e": 1224979200000,
	                    "s": 1206835200000
	                },
	                {
	                    "e": 1256428800000,
	                    "s": 1238284800000
	                },
	                {
	                    "e": 1288483200000,
	                    "s": 1269734400000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Europe/Moscow",
	            "rules": [
	                {
	                    "e": 1224975600000,
	                    "s": 1206831600000
	                },
	                {
	                    "e": 1256425200000,
	                    "s": 1238281200000
	                },
	                {
	                    "e": 1288479600000,
	                    "s": 1269730800000
	                },
	                false,
	                false,
	                false,
	                false
	            ]
	        },
	        {
	            "name": "Pacific/Apia",
	            "rules": [
	                false,
	                false,
	                false,
	                {
	                    "e": 1301752800000,
	                    "s": 1316872800000
	                },
	                {
	                    "e": 1333202400000,
	                    "s": 1348927200000
	                },
	                {
	                    "e": 1365256800000,
	                    "s": 1380376800000
	                },
	                {
	                    "e": 1396706400000,
	                    "s": 1411826400000
	                }
	            ]
	        },
	        {
	            "name": "Pacific/Fiji",
	            "rules": [
	                false,
	                false,
	                {
	                    "e": 1269698400000,
	                    "s": 1287842400000
	                },
	                {
	                    "e": 1327154400000,
	                    "s": 1319292000000
	                },
	                {
	                    "e": 1358604000000,
	                    "s": 1350741600000
	                },
	                {
	                    "e": 1390050000000,
	                    "s": 1382796000000
	                },
	                {
	                    "e": 1421503200000,
	                    "s": 1414850400000
	                }
	            ]
	        },
	        {
	            "name": "Europe/London",
	            "rules": [
	                {
	                    "e": 1224982800000,
	                    "s": 1206838800000
	                },
	                {
	                    "e": 1256432400000,
	                    "s": 1238288400000
	                },
	                {
	                    "e": 1288486800000,
	                    "s": 1269738000000
	                },
	                {
	                    "e": 1319936400000,
	                    "s": 1301187600000
	                },
	                {
	                    "e": 1351386000000,
	                    "s": 1332637200000
	                },
	                {
	                    "e": 1382835600000,
	                    "s": 1364691600000
	                },
	                {
	                    "e": 1414285200000,
	                    "s": 1396141200000
	                }
	            ]
	        }
	    ]
	};
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
	    module.exports = jstz;
	} else if (("function" !== 'undefined' && __webpack_require__(123) !== null) && (__webpack_require__(124) != null)) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return jstz;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	    if (typeof root === 'undefined') {
	        window.jstz = jstz;
	    } else {
	        root.jstz = jstz;
	    }
	}
	}());


/***/ }),
/* 123 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 124 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(11);
	var DeviceUtils_1 = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var SentryLogger = (function () {
	    function SentryLogger(queryController, windoh) {
	        if (windoh === void 0) { windoh = window; }
	        this.queryController = queryController;
	        this.windoh = windoh;
	        this.logger = new Logger_1.Logger(this);
	        this.bindErrorHandler();
	    }
	    SentryLogger.prototype.bindErrorHandler = function () {
	        var _this = this;
	        // take care of not overriding any existing onerror handler that might be already present in the page.
	        var oldHandler = this.windoh.onerror;
	        if (_.isFunction(oldHandler)) {
	            this.windoh.onerror = function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                oldHandler.apply(oldHandler, args);
	                _this.handleError.apply(_this, args);
	            };
	        }
	        else {
	            this.windoh.onerror = this.handleError.bind(this);
	        }
	    };
	    SentryLogger.prototype.handleError = function (message, filename, lineno, colno, error) {
	        // try not to log irrelevant errors ...
	        if (!filename.toLowerCase().match(/coveo/) || this.windoh.location.host.toLowerCase().match(/localhost/)) {
	            return;
	        }
	        var errorInfo = {
	            message: message,
	            filename: filename,
	            line: lineno,
	            column: colno,
	            error: error.toString(),
	            errorStack: error['stack'],
	            device: DeviceUtils_1.DeviceUtils.getDeviceName()
	        };
	        var sentryLog = {
	            level: 'DEBUG',
	            title: this.windoh.location.href,
	            message: JSON.stringify(errorInfo)
	        };
	        this.queryController.getEndpoint().logError(sentryLog);
	    };
	    return SentryLogger;
	}());
	exports.SentryLogger = SentryLogger;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.analyticsActionCauseList = {
	    interfaceLoad: {
	        name: 'interfaceLoad',
	        type: 'interface'
	    },
	    interfaceChange: {
	        name: 'interfaceChange',
	        type: 'interface',
	        metaMap: { interfaceChangeTo: 1 }
	    },
	    contextRemove: {
	        name: 'contextRemove',
	        type: 'misc',
	        metaMap: { contextName: 1 }
	    },
	    didyoumeanAutomatic: {
	        name: 'didyoumeanAutomatic',
	        type: 'misc'
	    },
	    didyoumeanClick: {
	        name: 'didyoumeanClick',
	        type: 'misc'
	    },
	    resultsSort: {
	        name: 'resultsSort',
	        type: 'misc',
	        metaMap: { resultsSortBy: 1 }
	    },
	    searchboxSubmit: {
	        name: 'searchboxSubmit',
	        type: 'search box'
	    },
	    searchboxClear: {
	        name: 'searchboxClear',
	        type: 'search box'
	    },
	    searchboxAsYouType: {
	        name: 'searchboxAsYouType',
	        type: 'search box'
	    },
	    breadcrumbFacet: {
	        name: 'breadcrumbFacet',
	        type: 'breadcrumb',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    breadcrumbResetAll: {
	        name: 'breadcrumbResetAll',
	        type: 'breadcrumb',
	    },
	    documentTag: {
	        name: 'documentTag',
	        type: 'document',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    documentField: {
	        name: 'documentField',
	        type: 'document',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    documentQuickview: {
	        name: 'documentQuickview',
	        type: 'document',
	        metaMap: { documentTitle: 1, documentURL: 2 }
	    },
	    documentOpen: {
	        name: 'documentOpen',
	        type: 'document',
	        metaMap: { documentTitle: 1, documentURL: 2 }
	    },
	    omniboxFacetSelect: {
	        name: 'omniboxFacetSelect',
	        type: 'omnibox',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    omniboxFacetExclude: {
	        name: 'omniboxFacetExclude',
	        type: 'omnibox',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    omniboxFacetDeselect: {
	        name: 'omniboxFacetDeselect',
	        type: 'omnibox',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    omniboxFacetUnexclude: {
	        name: 'omniboxFacetUnexclude',
	        type: 'omnibox',
	        metaMap: { faceId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    omniboxAnalytics: {
	        name: 'omniboxAnalytics',
	        type: 'omnibox',
	        metaMap: {
	            partialQuery: 1,
	            suggestionRanking: 2,
	            partialQueries: 3,
	            suggestions: 4
	        }
	    },
	    omniboxFromLink: {
	        name: 'omniboxFromLink',
	        type: 'omnibox',
	        metaMap: {
	            partialQuery: 1,
	            suggestionRanking: 2,
	            partialQueries: 3,
	            suggestions: 4
	        }
	    },
	    omniboxField: {
	        name: 'omniboxField',
	        type: 'omnibox'
	    },
	    facetClearAll: {
	        name: 'facetClearAll',
	        type: 'facet',
	        metaMap: { facetId: 1 }
	    },
	    facetSearch: {
	        name: 'facetSearch',
	        type: 'facet',
	        metaMap: { facetId: 1 }
	    },
	    facetToggle: {
	        name: 'facetToggle',
	        type: 'facet',
	        metaMap: { facetId: 1, facetOperatorBefore: 2, facetOperatorAfter: 3 }
	    },
	    facetRangeSlider: {
	        name: 'facetRangeSlider',
	        type: 'facet',
	        metaMap: { facetId: 1, facetRangeStart: 2, facetRangeEnd: 3 }
	    },
	    facetRangeGraph: {
	        name: 'facetRangeGraph',
	        type: 'facet',
	        metaMap: { facetId: 1, facetRangeStart: 2, facetRangeEnd: 3 }
	    },
	    facetSelect: {
	        name: 'facetSelect',
	        type: 'facet',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    facetSelectAll: {
	        name: 'facetSelectAll',
	        type: 'facet',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    facetDeselect: {
	        name: 'facetDeselect',
	        type: 'facet',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    facetExclude: {
	        name: 'facetExclude',
	        type: 'facet',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    facetUnexclude: {
	        name: 'facetUnexclude',
	        type: 'facet',
	        metaMap: { facetId: 1, facetValue: 2, facetTitle: 3 }
	    },
	    errorBack: {
	        name: 'errorBack',
	        type: 'errors'
	    },
	    errorClearQuery: {
	        name: 'errorClearQuery',
	        type: 'errors'
	    },
	    errorRetry: {
	        name: 'errorRetry',
	        type: 'errors'
	    },
	    noResultsBack: {
	        name: 'noResultsBack',
	        type: 'noResults'
	    },
	    expandToFullUI: {
	        name: 'expandToFullUI',
	        type: 'interface'
	    },
	    caseCreationInputChange: {
	        name: 'inputChange',
	        type: 'caseCreation'
	    },
	    caseCreationSubmitButton: {
	        name: 'submitButton',
	        type: 'caseCreation'
	    },
	    caseCreationCancelButton: {
	        name: 'cancelButton',
	        type: 'caseCreation'
	    },
	    caseCreationUnloadPage: {
	        name: 'unloadPage',
	        type: 'caseCreation'
	    },
	    casecontextAdd: {
	        name: 'casecontextAdd',
	        type: 'casecontext',
	        metaMap: { caseID: 5 }
	    },
	    casecontextRemove: {
	        name: 'casecontextRemove',
	        type: 'casecontext',
	        metaMap: { caseID: 5 }
	    },
	    preferencesChange: {
	        name: 'preferencesChange',
	        type: 'preferences',
	        metaMap: { preferenceName: 1, preferenceType: 2 }
	    },
	    getUserHistory: {
	        name: 'getUserHistory',
	        type: 'userHistory'
	    },
	    userActionDocumentClick: {
	        name: 'userActionDocumentClick',
	        type: 'userHistory'
	    },
	    caseAttach: {
	        name: 'caseAttach',
	        type: 'case',
	        metaMap: { documentTitle: 1, resultUriHash: 3, articleID: 4, caseID: 5 }
	    },
	    caseDetach: {
	        name: 'caseDetach',
	        type: 'case',
	        metaMap: { documentTitle: 1, resultUriHash: 3, articleID: 4, caseID: 5 }
	    },
	    customfiltersChange: {
	        name: 'customfiltersChange',
	        type: 'customfilters',
	        metaMap: { customFilterName: 1, customFilterType: 2, customFilterExpression: 3 }
	    },
	    pagerNumber: {
	        name: 'pagerNumber',
	        type: 'getMoreResults',
	        metaMap: { 'pagerNumber': 1 }
	    },
	    pagerNext: {
	        name: 'pagerNext',
	        type: 'getMoreResults',
	        metaMap: { 'pagerNumber': 1 }
	    },
	    pagerPrevious: {
	        name: 'pagerPrevious',
	        type: 'getMoreResults',
	        metaMap: { 'pagerNumber': 1 }
	    },
	    pagerScrolling: {
	        name: 'pagerScrolling',
	        type: 'getMoreResults'
	    },
	    pagerResize: {
	        name: 'pagerResize',
	        type: 'getMoreResults'
	    },
	    searchFromLink: {
	        name: 'searchFromLink',
	        type: 'interface'
	    },
	    triggerNotify: {
	        name: 'notify',
	        type: 'queryPipelineTriggers'
	    },
	    triggerExecute: {
	        name: 'execute',
	        type: 'queryPipelineTriggers'
	    },
	    triggerQuery: {
	        name: 'query',
	        type: 'queryPipelineTriggers'
	    },
	    triggerRedirect: {
	        name: 'redirect',
	        type: 'queryPipelineTriggers'
	    },
	    queryError: {
	        name: 'query',
	        type: 'errors',
	        metaMap: { 'query': 1, 'aq': 2, 'cq': 3, 'dq': 4, 'errorType': 5, 'errorMessage': 6 }
	    },
	    exportToExcel: {
	        name: 'exportToExcel',
	        type: 'misc'
	    },
	    recommendation: {
	        name: 'recommendation',
	        type: 'recommendation'
	    },
	    recommendationInterfaceLoad: {
	        name: 'recommendationInterfaceLoad',
	        type: 'recommendation'
	    },
	    recommendationOpen: {
	        name: 'recommendationOpen',
	        type: 'recommendation'
	    },
	    advancedSearch: {
	        name: 'advancedSearch',
	        type: 'advancedSearch'
	    },
	    searchAlertsFollowDocument: {
	        name: 'followDocument',
	        type: 'searchAlerts'
	    },
	    searchAlertsFollowQuery: {
	        name: 'followQuery',
	        type: 'searchAlerts'
	    },
	    searchAlertsUpdateSubscription: {
	        name: 'updateSubscription',
	        type: 'searchAlerts'
	    },
	    searchAlertsDeleteSubscription: {
	        name: 'deleteSubscription',
	        type: 'searchAlerts'
	    },
	    searchAlertsUnfollowDocument: {
	        name: 'unfollowDocument',
	        type: 'searchAlerts'
	    },
	    searchAlertsUnfollowQuery: {
	        name: 'unfollowQuery',
	        type: 'searchAlerts'
	    },
	    resultsLayoutChange: {
	        name: 'changeResultsLayout',
	        type: 'resultsLayout'
	    }
	};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var AnalyticsEndpoint_1 = __webpack_require__(37);
	var SearchEndpoint_1 = __webpack_require__(9);
	var Assert_1 = __webpack_require__(12);
	var QueryEvents_1 = __webpack_require__(48);
	var ComponentOptionsModel_1 = __webpack_require__(102);
	var Dom_1 = __webpack_require__(59);
	var Model_1 = __webpack_require__(98);
	var Utils_1 = __webpack_require__(13);
	var NoopAnalyticsClient_1 = __webpack_require__(119);
	var LiveAnalyticsClient_1 = __webpack_require__(128);
	var MultiAnalyticsClient_1 = __webpack_require__(132);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var SearchInterface_1 = __webpack_require__(108);
	var Recommendation_1 = __webpack_require__(133);
	var RecommendationAnalyticsClient_1 = __webpack_require__(173);
	var _ = __webpack_require__(14);
	/**
	 * The Analytics component logs user actions performed in the search interface and sends them to a REST web service
	 * exposed through the Coveo Cloud Platform.
	 *
	 * You can use analytics data to evaluate how users are interacting with your search interface, improve relevance and
	 * produce analytics dashboards within the Coveo Cloud Platform.
	 *
	 * See [Step 7 - Usage Analytics](https://developers.coveo.com/x/EYskAg) of the Getting Started with the JavaScript
	 * Search Framework V1 tutorial for an introduction to usage analytics.
	 *
	 * See also [Sending Custom Analytics Events](https://developers.coveo.com/x/KoGfAQ) for more advanced use cases.
	 */
	var Analytics = (function (_super) {
	    __extends(Analytics, _super);
	    /**
	     * Creates a new Analytics component. Creates the {@link IAnalyticsClient}.
	     * @param element The HTMLElement on which the component will be instantiated.
	     * @param options The options for the Analytics component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function Analytics(element, options, bindings) {
	        if (options === void 0) { options = {}; }
	        var _this = _super.call(this, element, Analytics.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.bindings = bindings;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Analytics, options);
	        _this.retrieveInfoFromDefaultSearchEndpoint();
	        _this.initializeAnalyticsClient();
	        Assert_1.Assert.exists(_this.client);
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (data) { return _this.handleBuildingQuery(data); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.queryError, function (data) { return _this.handleQueryError(data); });
	        // Analytics component is a bit special: It can be higher in the dom tree than the search interface
	        // Need to resolve down to find the componentOptionsModel if we need to.
	        if (!_this.componentOptionsModel) {
	            var cmpOptionElement = Dom_1.$$(element).find('.' + Component_1.Component.computeCssClassName(ComponentOptionsModel_1.ComponentOptionsModel));
	            if (cmpOptionElement) {
	                _this.componentOptionsModel = cmpOptionElement[Component_1.Component.computeCssClassName(ComponentOptionsModel_1.ComponentOptionsModel)];
	            }
	        }
	        if (_this.componentOptionsModel) {
	            _this.componentOptionsModel.set(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchHub, _this.options.searchHub);
	            var event_1 = _this.componentOptionsModel.getEventName(Model_1.Model.eventTypes.changeOne + ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchHub);
	            _this.bind.onRootElement(event_1, function (args) { return _this.handleSearchHubChanged(args); });
	        }
	        return _this;
	    }
	    /**
	     * Logs a Search event on the service, using an [AnalyticsActionCause]({@link IAnalyticsActionCause}) and a meta
	     * object.
	     *
	     * Note that the search event is only sent to the service when the query successfully returns, not immediately after
	     * calling this method. Therefore, it is important to call this method before executing the query. Otherwise the
	     * service will log no Search event and you will get a warning message in the console.
	     *
	     * See [Sending Custom Analytics Events](https://developers.coveo.com/x/KoGfAQ).
	     *
	     * @param actionCause Describes the cause of the event.
	     * @param meta The metadata which you want to use to create custom dimensions. Metadata can contain as many key-value
	     * pairs as you need. Each key must contain only alphanumeric characters and underscores. The Coveo Usage Analytics
	     * API automatically converts white spaces to underscores and uppercase characters to lowercase characters in key
	     * names. Each value must be a simple string. If you do not need to log metadata, you can simply pass an empty JSON
	     * ( `{}` ).
	     */
	    Analytics.prototype.logSearchEvent = function (actionCause, meta) {
	        this.client.logSearchEvent(actionCause, meta);
	    };
	    /**
	     * Logs a SearchAsYouType event on the service, using an {@link IAnalyticsActionCause} and a meta object.
	     *
	     * This method is very similar to the {@link logSearchEvent} method, except that logSearchAsYouType is, by definition,
	     * more frequently called.
	     *
	     * The `PendingSearchAsYouTypeEvent` takes care of logging only the "relevant" last event: an event that occurs after
	     * 5 seconds elapse without any event being logged, or an event that occurs after another part of the interface
	     * triggers a search event. This avoids logging every single partial query, which would make the reporting very
	     * confusing.
	     *
	     * It is important to call this method before executing the query. Otherwise the service will log no SearchAsYouType
	     * event and you will get a warning message in the console.
	     *
	     * See [Sending Custom Analytics Events](https://developers.coveo.com/x/KoGfAQ).
	     *
	     * @param actionCause Describes the cause of the event.
	     * @param meta The metadata which you want to use to create custom dimensions. Metadata can contain as many key-value
	     * pairs as you need. Each key must contain only alphanumeric characters and underscores. The Coveo Usage Analytics
	     * API automatically converts white spaces to underscores and uppercase characters to lowercase characters in key
	     * names. Each value must be a simple string. If you do not need to log metadata, you can simply pass an empty JSON
	     * ( `{}` ).
	     */
	    Analytics.prototype.logSearchAsYouType = function (actionCause, meta) {
	        this.client.logSearchAsYouType(actionCause, meta);
	    };
	    /**
	     * Logs a Custom event on the service. You can use custom events to create custom reports, or to track events
	     * that are not queries or document views.
	     *
	     * @param actionCause Describes the cause of the event.
	     * @param meta The metadata which you want to use to create custom dimensions. Metadata can contain as many key-value
	     * pairs as you need. Each key must contain only alphanumeric characters and underscores. The Coveo Usage Analytics
	     * API automatically converts white spaces to underscores and uppercase characters to lowercase characters in key
	     * names. Each value must be a simple string. If you do not need to log metadata, you can simply pass an empty JSON
	     * ( `{}` ).
	     * @param element The HTMLElement that the user has interacted with for this custom event.
	     */
	    Analytics.prototype.logCustomEvent = function (actionCause, meta, element) {
	        if (element === void 0) { element = this.element; }
	        this.client.logCustomEvent(actionCause, meta, element);
	    };
	    /**
	     * Logs a Click event. You can understand click events as document views (e.g., clicking on a {@link ResultLink} or
	     * opening a {@link Quickview}).
	     *
	     * This event is logged immediately on the service.
	     *
	     * @param actionCause Describes the cause of the event.
	     * @param meta The metadata which you want to use to create custom dimensions. Metadata can contain as many key-value
	     * pairs as you need. Each key must contain only alphanumeric characters and underscores. The Coveo Usage Analytics
	     * API automatically converts uppercase characters to lowercase characters in key names. Each value must be a simple
	     * string. You do not have to pass an {@link IAnalyticsDocumentViewMeta} as meta when logging a custom Click event.
	     * You can actually send any arbitrary meta. If you do not need to log metadata, you can simply pass an empty JSON
	     * ( `{}` ).
	     * @param result The result that the user has clicked.
	     * @param element The HTMLElement that the user has clicked in the interface.
	     */
	    Analytics.prototype.logClickEvent = function (actionCause, meta, result, element) {
	        if (element === void 0) { element = this.element; }
	        this.client.logClickEvent(actionCause, meta, result, element);
	    };
	    /**
	     * Sets the Origin Context dimension on the analytic events.
	     *
	     * You can use this dimension to specify the context of your application.
	     * Suggested values are "Search", "InternalSearch" and "CommunitySearch"
	     *
	     * Default value is `Search`.
	     *
	     * @param originContext The origin context value
	     */
	    Analytics.prototype.setOriginContext = function (originContext) {
	        this.client.setOriginContext(originContext);
	    };
	    Analytics.prototype.initializeAnalyticsEndpoint = function () {
	        return new AnalyticsEndpoint_1.AnalyticsEndpoint({
	            token: this.options.token,
	            serviceUrl: this.options.endpoint,
	            organization: this.options.organization
	        });
	    };
	    Analytics.prototype.initializeAnalyticsClient = function () {
	        if (Utils_1.Utils.isNonEmptyString(this.options.endpoint)) {
	            var endpoint = this.initializeAnalyticsEndpoint();
	            var elementToInitializeClient = void 0;
	            if (this.root && this.element) {
	                if (this.root.contains(this.element)) {
	                    elementToInitializeClient = this.root;
	                }
	                else {
	                    elementToInitializeClient = this.element;
	                }
	            }
	            var isRecommendation = Dom_1.$$(this.root).hasClass(Component_1.Component.computeCssClassName(Recommendation_1.Recommendation));
	            this.instantiateAnalyticsClient(endpoint, elementToInitializeClient, isRecommendation);
	        }
	        else {
	            this.client = new NoopAnalyticsClient_1.NoopAnalyticsClient();
	        }
	    };
	    Analytics.prototype.instantiateAnalyticsClient = function (endpoint, elementToInitializeClient, isRecommendation) {
	        if (isRecommendation) {
	            this.client = new RecommendationAnalyticsClient_1.RecommendationAnalyticsClient(endpoint, elementToInitializeClient, this.options.user, this.options.userDisplayName, this.options.anonymous, this.options.splitTestRunName, this.options.splitTestRunVersion, this.options.searchHub, this.options.sendToCloud, this.getBindings());
	        }
	        else {
	            this.client = new LiveAnalyticsClient_1.LiveAnalyticsClient(endpoint, elementToInitializeClient, this.options.user, this.options.userDisplayName, this.options.anonymous, this.options.splitTestRunName, this.options.splitTestRunVersion, this.options.searchHub, this.options.sendToCloud);
	        }
	    };
	    Analytics.prototype.retrieveInfoFromDefaultSearchEndpoint = function () {
	        var defaultEndpoint = SearchEndpoint_1.SearchEndpoint.endpoints['default'];
	        if (this.options.token == null && defaultEndpoint) {
	            this.options.token = defaultEndpoint.options.accessToken;
	        }
	        if (!this.options.organization && defaultEndpoint) {
	            this.options.organization = defaultEndpoint.options.queryStringArguments['workgroup'];
	        }
	    };
	    Analytics.prototype.handleBuildingQuery = function (data) {
	        Assert_1.Assert.exists(data);
	        data.queryBuilder.searchHub = this.options.searchHub;
	    };
	    Analytics.prototype.handleSearchHubChanged = function (data) {
	        this.options.searchHub = data.value;
	    };
	    Analytics.prototype.handleQueryError = function (data) {
	        Assert_1.Assert.exists(data);
	        this.client.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.queryError, {
	            query: data.query.q,
	            aq: data.query.aq,
	            cq: data.query.cq,
	            dq: data.query.dq,
	            errorType: data.error.type,
	            errorMessage: data.error.message
	        }, this.element);
	    };
	    Analytics.create = function (element, options, bindings) {
	        var selector = Component_1.Component.computeSelectorForType(Analytics.ID);
	        var found = [];
	        found = found.concat(Dom_1.$$(element).findAll(selector));
	        if (!(Component_1.Component.get(element, SearchInterface_1.SearchInterface) instanceof Recommendation_1.Recommendation)) {
	            found = this.ignoreElementsInsideRecommendationInterface(found);
	        }
	        found.push(Dom_1.$$(element).closest(Component_1.Component.computeCssClassName(Analytics)));
	        if (Dom_1.$$(element).is(selector)) {
	            found.push(element);
	        }
	        found = _.compact(found);
	        if (found.length == 1) {
	            return Analytics.getClient(found[0], options, bindings);
	        }
	        else if (found.length > 1) {
	            return new MultiAnalyticsClient_1.MultiAnalyticsClient(_.map(found, function (el) { return Analytics.getClient(el, options, bindings); }));
	        }
	        else {
	            return new NoopAnalyticsClient_1.NoopAnalyticsClient();
	        }
	    };
	    Analytics.ignoreElementsInsideRecommendationInterface = function (found) {
	        return _.filter(found, function (element) {
	            return Dom_1.$$(element).closest(Component_1.Component.computeCssClassName(Recommendation_1.Recommendation)) === undefined;
	        });
	    };
	    Analytics.getClient = function (element, options, bindings) {
	        // This check if an element is already initialized as an analytics component.
	        // If that's the case, return the client on that element.
	        // Otherwise, init and return.
	        var foundOnElement = Component_1.Component.get(element, Analytics, true);
	        if (foundOnElement instanceof Analytics) {
	            return foundOnElement.client;
	        }
	        else {
	            return new Analytics(element, options, bindings).client;
	        }
	    };
	    return Analytics;
	}(Component_1.Component));
	Analytics.ID = 'Analytics';
	// NOTE: The default values for some of those options (`organization`, `endpoint`, `searchHub`) can be
	// overridden by generated code when using hosted search pages.
	/**
	 * Options for the component
	 * @componentOptions
	 */
	Analytics.options = {
	    /**
	     * Specifies the name of the user for the usage analytics logs.
	     *
	     * Default value is `undefined`
	     */
	    user: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the user display name for the usage analytics logs.
	     *
	     * Default value is `undefined`
	     */
	    userDisplayName: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the token to use to access the usage analytics endpoint.
	     *
	     * Default value is `undefined`, and the component uses the search token.
	     */
	    token: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the URL of the usage analytics logger to cover exceptional cases in which this location could differ
	     * from the default Coveo Cloud Usage Analytics endpoint (https://usageanalytics.coveo.com).
	     *
	     * Default value is `https://usageanalytics.coveo.com`.
	     */
	    endpoint: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: AnalyticsEndpoint_1.AnalyticsEndpoint.DEFAULT_ANALYTICS_URI }),
	    /**
	     * Specifies whether to convert search user identities to unique hash when logging analytics data, so that
	     * analytics reviewers and managers will not be able to clearly identify which user is performing which query.
	     *
	     * When this option is `true`, the Coveo Usage Analytics Platform can still properly differentiate sessions
	     * made by anonymous users from sessions made by users authenticated in some way on the site containing the search
	     * page.
	     *
	     * Default value is `false`.
	     */
	    anonymous: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Sets the Search Hub dimension on the search events.
	     *
	     * The Search Hub dimension is typically a name that refers to a specific search page. For example, you could use
	     * the `CommunitySite` value to refer to a search page on a company's public community site.
	     *
	     * Default value is `default`.
	     */
	    searchHub: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'default' }),
	    /**
	     * Specifies the name of the split test run that the search page is part of.
	     *
	     * You can use this dimension to perform A/B testing using different search page layouts and features inside the
	     * Coveo Query pipeline.
	     *
	     * Default value is `undefined` and no split test run name is reported to the Coveo Usage Analytics Platform.
	     */
	    splitTestRunName: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the version name for the page when a split test run is active.
	     *
	     * When reporting on A/B testing analytics data, this value specifies the test run version name that was
	     * presented to the user.
	     *
	     * Default value is `undefined`
	     */
	    splitTestRunVersion: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    sendToCloud: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the organization bound to the access token. This is necessary when using an access token, because a
	     * single access token can be associated to more than one organization.
	     *
	     * Default value is `undefined`, and the value of this parameter will fallback to the organization used for the
	     * search endpoint.
	     */
	    organization: ComponentOptions_1.ComponentOptions.buildStringOption()
	};
	exports.Analytics = Analytics;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DeviceUtils_1 = __webpack_require__(16);
	var PendingSearchEvent_1 = __webpack_require__(129);
	var PendingSearchAsYouTypeSearchEvent_1 = __webpack_require__(131);
	var Assert_1 = __webpack_require__(12);
	var Logger_1 = __webpack_require__(11);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Defer_1 = __webpack_require__(32);
	var Dom_1 = __webpack_require__(59);
	var AnalyticsEvents_1 = __webpack_require__(41);
	var APIAnalyticsBuilder_1 = __webpack_require__(130);
	var QueryStateModel_1 = __webpack_require__(101);
	var Component_1 = __webpack_require__(107);
	var Version_1 = __webpack_require__(8);
	var QueryUtils_1 = __webpack_require__(21);
	var _ = __webpack_require__(14);
	var LiveAnalyticsClient = (function () {
	    function LiveAnalyticsClient(endpoint, rootElement, userId, userDisplayName, anonymous, splitTestRunName, splitTestRunVersion, originLevel1, sendToCloud) {
	        this.endpoint = endpoint;
	        this.rootElement = rootElement;
	        this.userId = userId;
	        this.userDisplayName = userDisplayName;
	        this.anonymous = anonymous;
	        this.splitTestRunName = splitTestRunName;
	        this.splitTestRunVersion = splitTestRunVersion;
	        this.originLevel1 = originLevel1;
	        this.sendToCloud = sendToCloud;
	        this.isContextual = false;
	        this.originContext = 'Search';
	        this.language = String['locale'];
	        this.device = DeviceUtils_1.DeviceUtils.getDeviceName();
	        this.mobile = DeviceUtils_1.DeviceUtils.isMobileDevice();
	        Assert_1.Assert.exists(endpoint);
	        Assert_1.Assert.exists(rootElement);
	        Assert_1.Assert.isNonEmptyString(this.language);
	        Assert_1.Assert.isNonEmptyString(this.device);
	        Assert_1.Assert.isNonEmptyString(this.originLevel1);
	        this.logger = new Logger_1.Logger(this);
	    }
	    LiveAnalyticsClient.prototype.isActivated = function () {
	        return true;
	    };
	    LiveAnalyticsClient.prototype.getCurrentVisitId = function () {
	        return this.endpoint.getCurrentVisitId();
	    };
	    LiveAnalyticsClient.prototype.getCurrentVisitIdPromise = function () {
	        return this.endpoint.getCurrentVisitIdPromise();
	    };
	    LiveAnalyticsClient.prototype.getCurrentEventCause = function () {
	        if (this.pendingSearchEvent != null) {
	            return this.pendingSearchEvent.getEventCause();
	        }
	        if (this.pendingSearchAsYouTypeSearchEvent != null) {
	            return this.pendingSearchAsYouTypeSearchEvent.getEventCause();
	        }
	        return null;
	    };
	    LiveAnalyticsClient.prototype.getCurrentEventMeta = function () {
	        if (this.pendingSearchEvent != null) {
	            return this.pendingSearchEvent.getEventMeta();
	        }
	        if (this.pendingSearchAsYouTypeSearchEvent != null) {
	            return this.pendingSearchAsYouTypeSearchEvent.getEventMeta();
	        }
	        return null;
	    };
	    LiveAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
	        var metaObject = this.buildMetaObject(meta);
	        this.pushSearchEvent(actionCause, metaObject);
	    };
	    LiveAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
	        var metaObject = this.buildMetaObject(meta);
	        this.pushSearchAsYouTypeEvent(actionCause, metaObject);
	    };
	    LiveAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
	        var metaObject = this.buildMetaObject(meta, result);
	        this.pushClickEvent(actionCause, metaObject, result, element);
	    };
	    LiveAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
	        var metaObject = this.buildMetaObject(meta);
	        this.pushCustomEvent(actionCause, metaObject, element);
	    };
	    LiveAnalyticsClient.prototype.getTopQueries = function (params) {
	        return this.endpoint.getTopQueries(params);
	    };
	    LiveAnalyticsClient.prototype.sendAllPendingEvents = function () {
	        if (this.pendingSearchAsYouTypeSearchEvent) {
	            this.pendingSearchAsYouTypeSearchEvent.sendRightNow();
	        }
	    };
	    LiveAnalyticsClient.prototype.cancelAllPendingEvents = function () {
	        if (this.pendingSearchAsYouTypeSearchEvent) {
	            this.pendingSearchAsYouTypeSearchEvent.cancel();
	            this.pendingSearchAsYouTypeSearchEvent = null;
	        }
	        if (this.pendingSearchEvent) {
	            this.pendingSearchEvent.cancel();
	            this.pendingSearchEvent = null;
	        }
	    };
	    LiveAnalyticsClient.prototype.getPendingSearchEvent = function () {
	        if (this.pendingSearchEvent) {
	            return this.pendingSearchEvent;
	        }
	        else if (this.pendingSearchAsYouTypeSearchEvent) {
	            return this.pendingSearchAsYouTypeSearchEvent;
	        }
	        return null;
	    };
	    LiveAnalyticsClient.prototype.warnAboutSearchEvent = function () {
	        if (_.isUndefined(this.pendingSearchEvent) && _.isUndefined(this.pendingSearchAsYouTypeSearchEvent)) {
	            this.logger.warn('A search was triggered, but no analytics event was logged. If you wish to have consistent analytics data, consider logging a search event using the methods provided by the framework', 'https://developers.coveo.com/x/TwA5');
	            if (window['console'] && console.trace) {
	                console.trace();
	            }
	        }
	    };
	    LiveAnalyticsClient.prototype.setOriginContext = function (originContext) {
	        this.originContext = originContext;
	    };
	    LiveAnalyticsClient.prototype.pushCustomEvent = function (actionCause, metaObject, element) {
	        var _this = this;
	        var customEvent = this.buildCustomEvent(actionCause, metaObject, element);
	        this.triggerChangeAnalyticsCustomData('CustomEvent', metaObject, customEvent);
	        this.checkToSendAnyPendingSearchAsYouType(actionCause);
	        Defer_1.Defer.defer(function () {
	            if (_this.sendToCloud) {
	                _this.endpoint.sendCustomEvent(customEvent);
	            }
	            Dom_1.$$(_this.rootElement).trigger(AnalyticsEvents_1.AnalyticsEvents.customEvent, { customEvent: APIAnalyticsBuilder_1.APIAnalyticsBuilder.convertCustomEventToAPI(customEvent) });
	        });
	    };
	    LiveAnalyticsClient.prototype.pushSearchEvent = function (actionCause, metaObject) {
	        var _this = this;
	        Assert_1.Assert.exists(actionCause);
	        if (this.pendingSearchEvent && this.pendingSearchEvent.getEventCause() !== actionCause.name) {
	            this.pendingSearchEvent.stopRecording();
	            this.pendingSearchEvent = null;
	        }
	        this.checkToSendAnyPendingSearchAsYouType(actionCause);
	        if (!this.pendingSearchEvent) {
	            var searchEvent = this.buildSearchEvent(actionCause, metaObject);
	            this.triggerChangeAnalyticsCustomData('SearchEvent', metaObject, searchEvent);
	            var pendingSearchEvent = this.pendingSearchEvent = new PendingSearchEvent_1.PendingSearchEvent(this.rootElement, this.endpoint, searchEvent, this.sendToCloud);
	            Defer_1.Defer.defer(function () {
	                // At this point all `duringQuery` events should have been fired, so we can forget
	                // about the pending search event. It will finish processing automatically when
	                // all the deferred that were caught terminate.
	                _this.pendingSearchEvent = undefined;
	                pendingSearchEvent.stopRecording();
	            });
	        }
	    };
	    LiveAnalyticsClient.prototype.checkToSendAnyPendingSearchAsYouType = function (actionCause) {
	        if (this.eventIsNotRelatedToSearchbox(actionCause.name)) {
	            this.sendAllPendingEvents();
	        }
	        else {
	            this.cancelAnyPendingSearchAsYouTypeEvent();
	        }
	    };
	    LiveAnalyticsClient.prototype.pushSearchAsYouTypeEvent = function (actionCause, metaObject) {
	        this.cancelAnyPendingSearchAsYouTypeEvent();
	        var searchEvent = this.buildSearchEvent(actionCause, metaObject);
	        this.triggerChangeAnalyticsCustomData('SearchEvent', metaObject, searchEvent);
	        this.pendingSearchAsYouTypeSearchEvent = new PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent(this.rootElement, this.endpoint, searchEvent, this.sendToCloud);
	    };
	    LiveAnalyticsClient.prototype.pushClickEvent = function (actionCause, metaObject, result, element) {
	        var _this = this;
	        var event = this.buildClickEvent(actionCause, metaObject, result, element);
	        this.checkToSendAnyPendingSearchAsYouType(actionCause);
	        this.triggerChangeAnalyticsCustomData('ClickEvent', metaObject, event, { resultData: result });
	        Assert_1.Assert.isNonEmptyString(event.searchQueryUid);
	        Assert_1.Assert.isNonEmptyString(event.collectionName);
	        Assert_1.Assert.isNonEmptyString(event.sourceName);
	        Assert_1.Assert.isNumber(event.documentPosition);
	        Defer_1.Defer.defer(function () {
	            if (_this.sendToCloud) {
	                _this.endpoint.sendDocumentViewEvent(event);
	            }
	            Dom_1.$$(_this.rootElement).trigger(AnalyticsEvents_1.AnalyticsEvents.documentViewEvent, {
	                documentViewEvent: APIAnalyticsBuilder_1.APIAnalyticsBuilder.convertDocumentViewToAPI(event)
	            });
	        });
	    };
	    LiveAnalyticsClient.prototype.buildAnalyticsEvent = function (actionCause, metaObject) {
	        return {
	            actionCause: actionCause.name,
	            actionType: actionCause.type,
	            username: this.userId,
	            userDisplayName: this.userDisplayName,
	            anonymous: this.anonymous,
	            device: this.device,
	            mobile: this.mobile,
	            language: this.language,
	            responseTime: undefined,
	            originLevel1: this.originLevel1,
	            originLevel2: this.getOriginLevel2(this.rootElement),
	            originLevel3: document.referrer,
	            originContext: this.originContext,
	            customData: _.keys(metaObject).length > 0 ? metaObject : undefined,
	            userAgent: navigator.userAgent
	        };
	    };
	    LiveAnalyticsClient.prototype.buildSearchEvent = function (actionCause, metaObject) {
	        return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
	            searchQueryUid: undefined,
	            pipeline: undefined,
	            splitTestRunName: this.splitTestRunName,
	            splitTestRunVersion: this.splitTestRunVersion,
	            queryText: undefined,
	            advancedQuery: undefined,
	            results: undefined,
	            resultsPerPage: undefined,
	            pageNumber: undefined,
	            didYouMean: undefined,
	            facets: undefined,
	            contextual: this.isContextual
	        });
	    };
	    LiveAnalyticsClient.prototype.buildClickEvent = function (actionCause, metaObject, result, element) {
	        return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
	            searchQueryUid: result.queryUid,
	            queryPipeline: result.pipeline,
	            splitTestRunName: this.splitTestRunName || result.splitTestRun,
	            splitTestRunVersion: this.splitTestRunVersion || (result.splitTestRun != undefined ? result.pipeline : undefined),
	            documentUri: result.uri,
	            documentUriHash: QueryUtils_1.QueryUtils.getUriHash(result),
	            documentUrl: result.clickUri,
	            documentTitle: result.title,
	            documentCategory: QueryUtils_1.QueryUtils.getObjectType(result),
	            originLevel2: this.getOriginLevel2(element),
	            collectionName: QueryUtils_1.QueryUtils.getCollection(result),
	            sourceName: QueryUtils_1.QueryUtils.getSource(result),
	            documentPosition: result.index + 1,
	            responseTime: 0,
	            viewMethod: actionCause.name,
	            rankingModifier: result.rankingModifier
	        });
	    };
	    LiveAnalyticsClient.prototype.buildCustomEvent = function (actionCause, metaObject, element) {
	        return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
	            eventType: actionCause.type,
	            eventValue: actionCause.name,
	            originLevel2: this.getOriginLevel2(element),
	            responseTime: 0
	        });
	    };
	    LiveAnalyticsClient.prototype.getOriginLevel2 = function (element) {
	        return this.resolveActiveTabFromElement(element) || 'default';
	    };
	    LiveAnalyticsClient.prototype.buildMetaObject = function (meta, result) {
	        var modifiedMeta = _.extend({}, meta);
	        modifiedMeta['JSUIVersion'] = Version_1.version.lib + ';' + Version_1.version.product;
	        if (result) {
	            var uniqueId = QueryUtils_1.QueryUtils.getPermanentId(result);
	            modifiedMeta['contentIDKey'] = uniqueId.fieldUsed;
	            modifiedMeta['contentIDValue'] = uniqueId.fieldValue;
	        }
	        return modifiedMeta;
	    };
	    LiveAnalyticsClient.prototype.cancelAnyPendingSearchAsYouTypeEvent = function () {
	        if (this.pendingSearchAsYouTypeSearchEvent) {
	            this.pendingSearchAsYouTypeSearchEvent.cancel();
	            this.pendingSearchAsYouTypeSearchEvent = undefined;
	        }
	    };
	    LiveAnalyticsClient.prototype.resolveActiveTabFromElement = function (element) {
	        Assert_1.Assert.exists(element);
	        var queryStateModel = this.resolveQueryStateModel(element);
	        return (queryStateModel && queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.t));
	    };
	    LiveAnalyticsClient.prototype.resolveQueryStateModel = function (rootElement) {
	        return Component_1.Component.resolveBinding(rootElement, QueryStateModel_1.QueryStateModel);
	    };
	    LiveAnalyticsClient.prototype.eventIsNotRelatedToSearchbox = function (event) {
	        return event !== AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit.name && event !== AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxClear.name;
	    };
	    LiveAnalyticsClient.prototype.triggerChangeAnalyticsCustomData = function (type, metaObject, event, data) {
	        // This is for backward compatibility. Before the analytics were using either numbered
	        // metas in `metaDataAsNumber` of later on named metas in `metaDataAsString`. Thus we still
	        // provide those properties in a deprecated way. Below we are moving any data that put
	        // in them to the root.
	        metaObject['metaDataAsString'] = {};
	        metaObject['metaDataAsNumber'] = {};
	        var changeableAnalyticsDataObject = {
	            language: event.language,
	            originLevel1: event.originLevel1,
	            originLevel2: event.originLevel2,
	            originLevel3: event.originLevel3,
	            metaObject: metaObject
	        };
	        var args = _.extend({}, {
	            type: type,
	            actionType: event.actionType,
	            actionCause: event.actionCause
	        }, changeableAnalyticsDataObject, data);
	        Dom_1.$$(this.rootElement).trigger(AnalyticsEvents_1.AnalyticsEvents.changeAnalyticsCustomData, args);
	        event.language = args.language;
	        event.originLevel1 = args.originLevel1;
	        event.originLevel2 = args.originLevel2;
	        event.originLevel3 = args.originLevel3;
	        event.customData = metaObject;
	        // This is for backward compatibility. Before the analytics were using either numbered
	        // metas in `metaDataAsNumber` of later on named metas in `metaDataAsString`. We are now putting
	        // them all at the root, and if I encounter the older properties I move them to the top
	        // level after issuing a warning.
	        var metaDataAsString = event.customData['metaDataAsString'];
	        if (_.keys(metaDataAsString).length > 0) {
	            this.logger.warn('Using deprecated \'metaDataAsString\' key to log custom analytics data. Custom meta should now be put at the root of the object.');
	            _.extend(event.customData, metaDataAsString);
	        }
	        delete event.customData['metaDataAsString'];
	        var metaDataAsNumber = event.customData['metaDataAsNumber'];
	        if (_.keys(metaDataAsNumber).length > 0) {
	            this.logger.warn('Using deprecated \'metaDataAsNumber\' key to log custom analytics data. Custom meta should now be put at the root of the object.');
	            _.extend(event.customData, metaDataAsNumber);
	        }
	        delete event.customData['metaDataAsNumber'];
	    };
	    LiveAnalyticsClient.prototype.merge = function (first, second) {
	        return _.extend({}, first, second);
	    };
	    return LiveAnalyticsClient;
	}());
	exports.LiveAnalyticsClient = LiveAnalyticsClient;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var QueryEvents_1 = __webpack_require__(48);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var SearchInterface_1 = __webpack_require__(108);
	var Component_1 = __webpack_require__(107);
	var QueryController_1 = __webpack_require__(74);
	var Defer_1 = __webpack_require__(32);
	var APIAnalyticsBuilder_1 = __webpack_require__(130);
	var AnalyticsEvents_1 = __webpack_require__(41);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var QueryStateModel_1 = __webpack_require__(101);
	var _ = __webpack_require__(14);
	var PendingSearchEvent = (function () {
	    function PendingSearchEvent(root, endpoint, templateSearchEvent, sendToCloud) {
	        var _this = this;
	        this.root = root;
	        this.endpoint = endpoint;
	        this.templateSearchEvent = templateSearchEvent;
	        this.sendToCloud = sendToCloud;
	        this.searchPromises = [];
	        this.results = [];
	        this.cancelled = false;
	        this.finished = false;
	        this.searchEvents = [];
	        Assert_1.Assert.exists(root);
	        Assert_1.Assert.exists(endpoint);
	        Assert_1.Assert.exists(templateSearchEvent);
	        this.handler = function (evt, arg) {
	            _this.handleDuringQuery(evt, arg);
	        };
	        Dom_1.$$(root).on(QueryEvents_1.QueryEvents.duringQuery, this.handler);
	    }
	    PendingSearchEvent.prototype.getEventCause = function () {
	        return this.templateSearchEvent.actionCause;
	    };
	    PendingSearchEvent.prototype.getEventMeta = function () {
	        return this.templateSearchEvent.customData;
	    };
	    PendingSearchEvent.prototype.cancel = function () {
	        this.stopRecording();
	        this.cancelled = true;
	    };
	    PendingSearchEvent.prototype.handleDuringQuery = function (evt, args) {
	        var _this = this;
	        Assert_1.Assert.check(!this.finished);
	        Assert_1.Assert.check(!this.cancelled);
	        // When synchronizing multiple search interfaces under a single search event
	        // (think Salesforce boxes), we need to collect all search events and send them
	        // in one single batch. So we gather all events until we idle out and then we
	        // monitor those before sending the data.
	        this.searchPromises.push(args.promise);
	        // TODO: Maybe a better way to grab the search interface?
	        var eventTarget;
	        eventTarget = evt.target;
	        var searchInterface = Component_1.Component.get(eventTarget, SearchInterface_1.SearchInterface);
	        Assert_1.Assert.exists(searchInterface);
	        // TODO: Maybe a better way to grab the query controller?
	        var queryController = Component_1.Component.get(eventTarget, QueryController_1.QueryController);
	        Assert_1.Assert.exists(queryController);
	        args.promise.then(function (queryResults) {
	            Assert_1.Assert.exists(queryResults);
	            Assert_1.Assert.check(!_this.finished);
	            if (queryResults._reusedSearchUid !== true || _this.templateSearchEvent.actionCause == AnalyticsActionListMeta_1.analyticsActionCauseList.recommendation.name) {
	                var searchEvent = _.extend({}, _this.templateSearchEvent);
	                _this.fillSearchEvent(searchEvent, searchInterface, args.query, queryResults);
	                _this.searchEvents.push(searchEvent);
	                _this.results.push(queryResults);
	                return queryResults;
	            }
	        }).finally(function () {
	            var index = _.indexOf(_this.searchPromises, args.promise);
	            _this.searchPromises.splice(index, 1);
	            if (_this.searchPromises.length == 0) {
	                _this.flush();
	            }
	        });
	    };
	    PendingSearchEvent.prototype.stopRecording = function () {
	        if (this.handler) {
	            Dom_1.$$(this.root).off(QueryEvents_1.QueryEvents.duringQuery, this.handler);
	            Dom_1.$$(this.root).off(QueryEvents_1.QueryEvents.duringFetchMoreQuery, this.handler);
	            this.handler = null;
	        }
	    };
	    PendingSearchEvent.prototype.flush = function () {
	        var _this = this;
	        if (!this.cancelled) {
	            this.stopRecording();
	            this.finished = true;
	            Assert_1.Assert.check(this.searchEvents.length == this.results.length);
	            Defer_1.Defer.defer(function () {
	                if (_this.sendToCloud) {
	                    _this.endpoint.sendSearchEvents(_this.searchEvents);
	                }
	                var apiSearchEvents = _.map(_this.searchEvents, function (searchEvent) {
	                    return APIAnalyticsBuilder_1.APIAnalyticsBuilder.convertSearchEventToAPI(searchEvent);
	                });
	                Dom_1.$$(_this.root).trigger(AnalyticsEvents_1.AnalyticsEvents.searchEvent, { searchEvents: apiSearchEvents });
	            });
	        }
	    };
	    PendingSearchEvent.prototype.fillSearchEvent = function (searchEvent, searchInterface, query, queryResults) {
	        Assert_1.Assert.exists(searchEvent);
	        Assert_1.Assert.exists(searchInterface);
	        Assert_1.Assert.exists(query);
	        Assert_1.Assert.exists(queryResults);
	        var currentQuery = searchInterface.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.q);
	        searchEvent.queryPipeline = queryResults.pipeline;
	        searchEvent.splitTestRunName = searchEvent.splitTestRunName || queryResults.splitTestRun;
	        searchEvent.splitTestRunVersion = searchEvent.splitTestRunVersion || (queryResults.splitTestRun != undefined ? queryResults.pipeline : undefined);
	        searchEvent.originLevel2 = searchEvent.originLevel2 || searchInterface.queryStateModel.get('t') || 'default';
	        searchEvent.queryText = currentQuery || query.q || ''; // do not log the query sent to the server if possible; it may contain added syntax depending on options
	        searchEvent.advancedQuery = query.aq || '';
	        searchEvent.didYouMean = query.enableDidYouMean;
	        searchEvent.numberOfResults = queryResults.totalCount;
	        searchEvent.responseTime = queryResults.duration;
	        searchEvent.pageNumber = (query.firstResult / query.numberOfResults);
	        searchEvent.resultsPerPage = query.numberOfResults;
	        searchEvent.searchQueryUid = queryResults.searchUid;
	        searchEvent.queryPipeline = queryResults.pipeline;
	        // The context_${key} format is important for the Analytics backend
	        // This is what they use to recognize a custom data that will be used internally by other coveo's service.
	        // In this case, Reveal will be the consumer of this information.
	        if (query.context != undefined) {
	            _.each(query.context, function (value, key) {
	                searchEvent.customData["context_" + key] = value;
	            });
	        }
	        // The refinedKeywords field is important for Reveal in order to learn properly on query
	        // made based on the long query.
	        if (queryResults.refinedKeywords != undefined && queryResults.refinedKeywords.length != 0) {
	            searchEvent.customData['refinedKeywords'] = queryResults.refinedKeywords;
	        }
	    };
	    return PendingSearchEvent;
	}());
	exports.PendingSearchEvent = PendingSearchEvent;


/***/ }),
/* 130 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var APIAnalyticsBuilder = (function () {
	    function APIAnalyticsBuilder() {
	    }
	    APIAnalyticsBuilder.convertSearchEventToAPI = function (searchEvent) {
	        var apiSearchEvent = {
	            advancedQuery: searchEvent.advancedQuery,
	            customMetadatas: searchEvent.customData,
	            device: searchEvent.device,
	            didYouMean: searchEvent.didYouMean,
	            language: searchEvent.language,
	            pageNumber: searchEvent.pageNumber,
	            queryText: searchEvent.queryText,
	            responseTime: searchEvent.responseTime,
	            numberOfResults: searchEvent.numberOfResults,
	            resultsPerPage: searchEvent.resultsPerPage,
	            searchHub: searchEvent.originLevel1,
	            searchInterface: searchEvent.originLevel2,
	            searchQueryUid: searchEvent.searchQueryUid,
	            type: searchEvent.actionType,
	            actionCause: searchEvent.actionCause,
	            queryPipeline: searchEvent.queryPipeline,
	            splitTestRunName: searchEvent.splitTestRunName,
	            splitTestRunVersion: searchEvent.splitTestRunVersion
	        };
	        return apiSearchEvent;
	    };
	    APIAnalyticsBuilder.convertDocumentViewToAPI = function (documentView) {
	        var apiDocumentView = {
	            collectionName: documentView.collectionName,
	            device: documentView.device,
	            documentPosition: documentView.documentPosition,
	            title: documentView.documentTitle,
	            documentUrl: documentView.documentUrl,
	            documentUri: documentView.documentUri,
	            documentUriHash: documentView.documentUriHash,
	            language: documentView.language,
	            responseTime: documentView.responseTime,
	            searchHub: documentView.originLevel1,
	            searchInterface: documentView.originLevel2,
	            searchQueryUid: documentView.searchQueryUid,
	            sourceName: documentView.sourceName,
	            viewMethod: documentView.viewMethod,
	            customMetadatas: documentView.customData,
	            actionCause: documentView.actionCause,
	            queryPipeline: documentView.queryPipeline,
	            splitTestRunName: documentView.splitTestRunName,
	            splitTestRunVersion: documentView.splitTestRunVersion
	        };
	        return apiDocumentView;
	    };
	    APIAnalyticsBuilder.convertCustomEventToAPI = function (customEvent) {
	        var apiCustomEvent = {
	            actionCause: customEvent.actionCause,
	            actionType: customEvent.actionType,
	            device: customEvent.device,
	            language: customEvent.language,
	            responseTime: customEvent.responseTime,
	            searchHub: customEvent.originLevel1,
	            searchInterface: customEvent.originLevel2,
	            customMetadatas: customEvent.customData
	        };
	        return apiCustomEvent;
	    };
	    return APIAnalyticsBuilder;
	}());
	exports.APIAnalyticsBuilder = APIAnalyticsBuilder;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var PendingSearchEvent_1 = __webpack_require__(129);
	var Dom_1 = __webpack_require__(59);
	var InitializationEvents_1 = __webpack_require__(45);
	var _ = __webpack_require__(14);
	var PendingSearchAsYouTypeSearchEvent = (function (_super) {
	    __extends(PendingSearchAsYouTypeSearchEvent, _super);
	    function PendingSearchAsYouTypeSearchEvent(root, endpoint, templateSearchEvent, sendToCloud) {
	        var _this = _super.call(this, root, endpoint, templateSearchEvent, sendToCloud) || this;
	        _this.root = root;
	        _this.endpoint = endpoint;
	        _this.templateSearchEvent = templateSearchEvent;
	        _this.sendToCloud = sendToCloud;
	        _this.delayBeforeSending = 5000;
	        _this.armBatchDelay = 50;
	        _this.beforeUnloadHandler = function () {
	            _this.onWindowUnload();
	        };
	        window.addEventListener('beforeunload', _this.beforeUnloadHandler);
	        Dom_1.$$(root).on(InitializationEvents_1.InitializationEvents.nuke, function () { return _this.handleNuke(); });
	        return _this;
	    }
	    PendingSearchAsYouTypeSearchEvent.prototype.handleDuringQuery = function (e, args) {
	        var _this = this;
	        var event = _.clone(e);
	        this.beforeResolve = new Promise(function (resolve) {
	            _this.toSendRightNow = function () {
	                if (!_this.isCancelledOrFinished()) {
	                    resolve(_this);
	                    _super.prototype.handleDuringQuery.call(_this, event, args);
	                }
	            };
	            _.delay(function () {
	                _this.toSendRightNow();
	            }, _this.delayBeforeSending);
	        });
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.sendRightNow = function () {
	        if (this.toSendRightNow) {
	            this.toSendRightNow();
	        }
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.modifyCustomData = function (key, newData) {
	        _.each(this.searchEvents, function (searchEvent) {
	            searchEvent.customData[key] = newData;
	        });
	        if (!this.templateSearchEvent.customData) {
	            this.templateSearchEvent.customData = {};
	        }
	        this.templateSearchEvent.customData[key] = newData;
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.modifyEventCause = function (newCause) {
	        _.each(this.searchEvents, function (searchEvent) {
	            searchEvent.actionCause = newCause.name;
	            searchEvent.actionType = newCause.type;
	        });
	        this.templateSearchEvent.actionCause = newCause.name;
	        this.templateSearchEvent.actionType = newCause.type;
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.stopRecording = function () {
	        _super.prototype.stopRecording.call(this);
	        if (this.beforeUnloadHandler) {
	            window.removeEventListener('beforeunload', this.beforeUnloadHandler);
	            this.beforeUnloadHandler = undefined;
	        }
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.handleNuke = function () {
	        window.removeEventListener('beforeunload', this.beforeUnloadHandler);
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.onWindowUnload = function () {
	        if (!this.isCancelledOrFinished()) {
	            this.armBatchDelay = 0;
	            this.sendRightNow();
	        }
	    };
	    PendingSearchAsYouTypeSearchEvent.prototype.isCancelledOrFinished = function () {
	        if (!this.cancelled) {
	            if (this.finished) {
	                this.cancel();
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	        else {
	            return true;
	        }
	    };
	    return PendingSearchAsYouTypeSearchEvent;
	}(PendingSearchEvent_1.PendingSearchEvent));
	exports.PendingSearchAsYouTypeSearchEvent = PendingSearchAsYouTypeSearchEvent;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var MultiAnalyticsClient = (function () {
	    function MultiAnalyticsClient(analyticsClients) {
	        if (analyticsClients === void 0) { analyticsClients = []; }
	        this.analyticsClients = analyticsClients;
	        this.isContextual = false;
	    }
	    MultiAnalyticsClient.prototype.isActivated = function () {
	        return _.some(this.analyticsClients, function (analyticsClient) { return analyticsClient.isActivated(); });
	    };
	    MultiAnalyticsClient.prototype.getCurrentEventCause = function () {
	        return _.find(_.map(this.analyticsClients, function (analyticsClient) { return analyticsClient.getCurrentEventCause(); }), function (currentEventCause) { return currentEventCause != null; });
	    };
	    MultiAnalyticsClient.prototype.getCurrentEventMeta = function () {
	        return _.find(_.map(this.analyticsClients, function (analyticsClient) { return analyticsClient.getCurrentEventMeta(); }), function (currentEventMeta) { return currentEventMeta != null; });
	    };
	    MultiAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logSearchEvent(actionCause, meta); });
	    };
	    MultiAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logSearchEvent(actionCause, meta); });
	    };
	    MultiAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logClickEvent(actionCause, meta, result, element); });
	    };
	    MultiAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logCustomEvent(actionCause, meta, element); });
	    };
	    MultiAnalyticsClient.prototype.getTopQueries = function (params) {
	        var _this = this;
	        return Promise.all(_.map(this.analyticsClients, function (client) {
	            return client.getTopQueries(params);
	        }))
	            .then(function (values) {
	            return _this.mergeTopQueries(values, params.pageSize);
	        });
	    };
	    MultiAnalyticsClient.prototype.getCurrentVisitIdPromise = function () {
	        return _.first(this.analyticsClients).getCurrentVisitIdPromise();
	    };
	    MultiAnalyticsClient.prototype.getCurrentVisitId = function () {
	        return _.first(this.analyticsClients).getCurrentVisitId();
	    };
	    MultiAnalyticsClient.prototype.sendAllPendingEvents = function () {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.sendAllPendingEvents(); });
	    };
	    MultiAnalyticsClient.prototype.warnAboutSearchEvent = function () {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.warnAboutSearchEvent(); });
	    };
	    MultiAnalyticsClient.prototype.cancelAllPendingEvents = function () {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.cancelAllPendingEvents(); });
	    };
	    MultiAnalyticsClient.prototype.getPendingSearchEvent = function () {
	        return _.first(this.analyticsClients).getPendingSearchEvent();
	    };
	    MultiAnalyticsClient.prototype.setOriginContext = function (originContext) {
	        _.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.setOriginContext(originContext); });
	    };
	    MultiAnalyticsClient.prototype.mergeTopQueries = function (values, pageSize) {
	        if (pageSize === void 0) { pageSize = 5; }
	        return _.chain(values)
	            .flatten()
	            .first(pageSize)
	            .value();
	    };
	    return MultiAnalyticsClient;
	}());
	exports.MultiAnalyticsClient = MultiAnalyticsClient;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SearchInterface_1 = __webpack_require__(108);
	var ComponentOptions_1 = __webpack_require__(109);
	var QueryEvents_1 = __webpack_require__(48);
	var OmniboxEvents_1 = __webpack_require__(46);
	var ResultListEvents_1 = __webpack_require__(49);
	var SettingsEvents_1 = __webpack_require__(52);
	var PreferencesPanelEvents_1 = __webpack_require__(47);
	var AnalyticsEvents_1 = __webpack_require__(41);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var BreadcrumbEvents_1 = __webpack_require__(42);
	var QuickviewEvents_1 = __webpack_require__(134);
	var QueryStateModel_1 = __webpack_require__(101);
	var Model_1 = __webpack_require__(98);
	var Utils_1 = __webpack_require__(13);
	var Dom_1 = __webpack_require__(59);
	var ResponsiveRecommendation_1 = __webpack_require__(135);
	var coveo_analytics_1 = __webpack_require__(80);
	var RegisteredNamedMethods_1 = __webpack_require__(105);
	var InitializationEvents_1 = __webpack_require__(45);
	var _ = __webpack_require__(14);
	/**
	 * The Recommendation component is a {@link SearchInterface} that displays recommendations typically based on user
	 * history.
	 *
	 * This component usually listens to the main SearchInterface. When the main SearchInterface generates a query, the
	 * Recommendation component generates another query to get the recommendations at the same time.
	 *
	 * To get history-based recommendations, you will likely want to include the `pageview` script in your page (see
	 * [coveo.analytics.js](https://github.com/coveo/coveo.analytics.js)). However, including this script is not mandatory.
	 * For instance, you could use the Recommendation component without the Coveo Machine Learning service to create a
	 * simple "recommended people" interface.
	 *
	 * It is possible to include this component inside another SearchInterface, but it is also possible to instantiate it as
	 * a "standalone" search interface, without even instantiating a main SearchInterface component. In any case, a
	 * Recommendation component always acts as a full-fledged search interface. Therefore, you can include any component
	 * inside the Recommendation component (Searchbox, Facet, Sort, etc.), just as you would inside the main SearchInterface
	 * component.
	 */
	var Recommendation = (function (_super) {
	    __extends(Recommendation, _super);
	    /**
	     * Creates a new Recommendation component.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the Recommendation component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time)
	     * @param _window
	     */
	    function Recommendation(element, options, analyticsOptions, _window) {
	        if (options === void 0) { options = {}; }
	        if (analyticsOptions === void 0) { analyticsOptions = {}; }
	        if (_window === void 0) { _window = window; }
	        var _this = _super.call(this, element, ComponentOptions_1.ComponentOptions.initComponentOptions(element, Recommendation, options), analyticsOptions, _window) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.analyticsOptions = analyticsOptions;
	        if (!_this.options.id) {
	            _this.generateDefaultId();
	        }
	        // This is done to allow the component to be included in another search interface without triggering the parent events.
	        _this.preventEventPropagation();
	        if (_this.options.mainSearchInterface) {
	            _this.bindToMainSearchInterface();
	        }
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.buildingQuery, function (e, args) { return _this.handleRecommendationBuildingQuery(args); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.querySuccess, function (e, args) { return _this.handleRecommendationQuerySuccess(args); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.noResults, function (e, args) { return _this.handleRecommendationNoResults(); });
	        Dom_1.$$(_this.element).on(QueryEvents_1.QueryEvents.queryError, function (e, args) { return _this.handleRecommendationQueryError(); });
	        _this.historyStore = new coveo_analytics_1.history.HistoryStore();
	        if (!_this.options.mainSearchInterface) {
	            // When the recommendation component is "standalone", we add additional safeguard against bad config.
	            _this.ensureCurrentPageViewExistsInStore();
	        }
	        ResponsiveRecommendation_1.ResponsiveRecommendation.init(_this.root, _this, options);
	        return _this;
	    }
	    Recommendation.prototype.getId = function () {
	        return this.options.id;
	    };
	    Recommendation.prototype.enable = function () {
	        _super.prototype.enable.call(this);
	        this.show();
	    };
	    Recommendation.prototype.disable = function () {
	        _super.prototype.disable.call(this);
	        this.hide();
	    };
	    Recommendation.prototype.hide = function () {
	        if (!this.displayStyle) {
	            this.displayStyle = this.element.style.display;
	        }
	        Dom_1.$$(this.element).hide();
	    };
	    Recommendation.prototype.show = function () {
	        if (!this.displayStyle) {
	            this.displayStyle = this.element.style.display;
	        }
	        this.element.style.display = this.displayStyle;
	    };
	    Recommendation.prototype.ensureCurrentPageViewExistsInStore = function () {
	        // It's not 100% sure that the element will actually be added in the store.
	        // It's possible that an external script configured by the end user to log the page view already did that.
	        // So we *could* end up with duplicate values in the store :
	        // We rely on the fact that the coveo.analytics lib has defensive code against consecutive page view that are identical.
	        // This is mainly done if the recommendation component is being initialized before the page view could be logged correctly by the coveo.analytics externa lib.
	        var historyElement = {
	            name: 'PageView',
	            value: document.location.toString(),
	            time: JSON.stringify(new Date()),
	            title: document.title
	        };
	        this.historyStore.addElement(historyElement);
	    };
	    Recommendation.prototype.bindToMainSearchInterface = function () {
	        this.bindComponentOptionsModelToMainSearchInterface();
	        this.bindQueryEventsToMainSearchInterface();
	    };
	    Recommendation.prototype.bindComponentOptionsModelToMainSearchInterface = function () {
	        var _this = this;
	        // Try to fetch the componentOptions from the main search interface.
	        // Since we do not know which interface is init first (recommendation or full search interface)
	        // add a mechanism that waits for the full search interface to be correctly initialized
	        // then, set the needed values on the component options model.
	        var searchInterfaceComponent = RegisteredNamedMethods_1.get(this.options.mainSearchInterface, SearchInterface_1.SearchInterface);
	        var alreadyInitialized = searchInterfaceComponent != null;
	        var onceInitialized = function () {
	            var mainSearchInterfaceOptionsModel = searchInterfaceComponent.getBindings().componentOptionsModel;
	            _this.componentOptionsModel.setMultiple(mainSearchInterfaceOptionsModel.getAttributes());
	            Dom_1.$$(_this.options.mainSearchInterface).on(_this.componentOptionsModel.getEventName(Model_1.MODEL_EVENTS.ALL), function () {
	                _this.componentOptionsModel.setMultiple(mainSearchInterfaceOptionsModel.getAttributes());
	            });
	        };
	        if (alreadyInitialized) {
	            onceInitialized();
	        }
	        else {
	            Dom_1.$$(this.options.mainSearchInterface).on(InitializationEvents_1.InitializationEvents.afterComponentsInitialization, function () {
	                searchInterfaceComponent = RegisteredNamedMethods_1.get(_this.options.mainSearchInterface, SearchInterface_1.SearchInterface);
	                onceInitialized();
	            });
	        }
	    };
	    Recommendation.prototype.bindQueryEventsToMainSearchInterface = function () {
	        var _this = this;
	        // Whenever a query sucessfully returns on the full search interface, refresh the recommendation component.
	        Dom_1.$$(this.options.mainSearchInterface).on(QueryEvents_1.QueryEvents.querySuccess, function (e, args) {
	            _this.mainInterfaceQuery = args;
	            _this.mainQuerySearchUID = args.results.searchUid;
	            _this.mainQueryPipeline = args.results.pipeline;
	            _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.recommendation, {});
	            _this.queryController.executeQuery();
	        });
	    };
	    Recommendation.prototype.handleRecommendationBuildingQuery = function (data) {
	        if (!this.disabled) {
	            this.modifyQueryForRecommendation(data);
	            this.addRecommendationInfoInQuery(data);
	        }
	    };
	    Recommendation.prototype.handleRecommendationQuerySuccess = function (data) {
	        if (!this.disabled) {
	            if (this.options.hideIfNoResults) {
	                if (data.results.totalCount === 0) {
	                    this.hide();
	                }
	                else {
	                    this.show();
	                }
	            }
	        }
	    };
	    Recommendation.prototype.handleRecommendationNoResults = function () {
	        if (!this.disabled) {
	            if (this.options.hideIfNoResults) {
	                this.hide();
	            }
	        }
	    };
	    Recommendation.prototype.handleRecommendationQueryError = function () {
	        if (!this.disabled) {
	            this.hide();
	        }
	    };
	    Recommendation.prototype.modifyQueryForRecommendation = function (data) {
	        if (this.mainInterfaceQuery) {
	            Utils_1.Utils.copyObjectAttributes(data.queryBuilder, this.mainInterfaceQuery.queryBuilder, this.options.optionsToUse);
	        }
	    };
	    Recommendation.prototype.addRecommendationInfoInQuery = function (data) {
	        if (!_.isEmpty(this.options.userContext)) {
	            data.queryBuilder.addContext(JSON.parse(this.options.userContext));
	        }
	        if (this.options.sendActionsHistory) {
	            data.queryBuilder.actionsHistory = this.getHistory();
	        }
	        data.queryBuilder.recommendation = this.options.id;
	    };
	    Recommendation.prototype.getHistory = function () {
	        var historyFromStore = this.historyStore.getHistory();
	        if (historyFromStore == null) {
	            historyFromStore = [];
	        }
	        return JSON.stringify(historyFromStore);
	    };
	    Recommendation.prototype.preventEventPropagation = function () {
	        this.preventEventPropagationOn(QueryEvents_1.QueryEvents);
	        this.preventEventPropagationOn(OmniboxEvents_1.OmniboxEvents);
	        this.preventEventPropagationOn(ResultListEvents_1.ResultListEvents);
	        this.preventEventPropagationOn(SettingsEvents_1.SettingsEvents);
	        this.preventEventPropagationOn(PreferencesPanelEvents_1.PreferencesPanelEvents);
	        this.preventEventPropagationOn(AnalyticsEvents_1.AnalyticsEvents);
	        this.preventEventPropagationOn(BreadcrumbEvents_1.BreadcrumbEvents);
	        this.preventEventPropagationOn(QuickviewEvents_1.QuickviewEvents);
	        this.preventEventPropagationOn(InitializationEvents_1.InitializationEvents);
	        this.preventEventPropagationOn(this.getAllModelEvents());
	    };
	    Recommendation.prototype.preventEventPropagationOn = function (eventType, eventName) {
	        if (eventName === void 0) { eventName = function (event) { return event; }; }
	        for (var event_1 in eventType) {
	            Dom_1.$$(this.root).on(eventName(event_1), function (e) { return e.stopPropagation(); });
	        }
	    };
	    Recommendation.prototype.getAllModelEvents = function () {
	        var _this = this;
	        var events = {};
	        _.each(_.values(Model_1.Model.eventTypes), function (event) {
	            _.each(_.values(QueryStateModel_1.QUERY_STATE_ATTRIBUTES), function (attribute) {
	                var eventName = _this.getBindings().queryStateModel.getEventName(event + attribute);
	                events[eventName] = eventName;
	            });
	        });
	        return events;
	    };
	    Recommendation.prototype.generateDefaultId = function () {
	        var id = 'Recommendation';
	        if (Recommendation.NEXT_ID !== 1) {
	            this.logger.warn('Generating another recommendation default id', 'Consider configuring a human friendly / meaningful id for this interface');
	            id = id + '_' + Recommendation.NEXT_ID;
	        }
	        Recommendation.NEXT_ID++;
	        this.options.id = id;
	    };
	    return Recommendation;
	}(SearchInterface_1.SearchInterface));
	Recommendation.ID = 'Recommendation';
	Recommendation.NEXT_ID = 1;
	/**
	 * The options for the recommendation component
	 * @componentOptions
	 */
	Recommendation.options = {
	    /**
	     * Specifies the main {@link SearchInterface} to listen to.
	     */
	    mainSearchInterface: ComponentOptions_1.ComponentOptions.buildSelectorOption(),
	    /**
	     * Specifies the user context to send to Coveo usage analytics.
	     * The component sends this information with the query alongside the user history to get the recommendations.
	     */
	    userContext: ComponentOptions_1.ComponentOptions.buildJsonOption(),
	    /**
	     * Specifies the ID of the interface.
	     * The usage analytics use the interface ID to know which recommendation interface was selected.
	     *
	     * Default value is `Recommendation` for the first one and `Recommendation_{number}`, where {number} depends on the
	     * number of Recommendation interfaces with default IDs in the page for the others.
	     */
	    id: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies which options from the main {@link QueryBuilder} to use in the triggered query.
	     *
	     * Possible values are:
	     * - `expression`
	     * - `advancedExpression`
	     * - `constantExpression`
	     * - `disjunctionExpression`
	     *
	     * **Example:**
	     *
	     * Adding the expression (`q`) and the advanced expression (`aq`) parts of the main query in the triggered query:
	     *
	     * `data-options-to-use="expression,advancedExpression"`
	     *
	     * Default value is `expression`.
	     */
	    optionsToUse: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: ['expression'] }),
	    /**
	     * Specifies whether to send the actions history along with the triggered query.
	     *
	     * Setting this option to `false` makes it impossible for this component to get Coveo Machine Learning
	     * recommendations.
	     *
	     * However, setting this option to `false` can be useful to display side results in a search page.
	     *
	     * Default value is `true`.
	     */
	    sendActionsHistory: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether to hide the Recommendations component if no result or recommendation is available.
	     *
	     * Default value is `false`.
	     */
	    hideIfNoResults: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    autoTriggerQuery: ComponentOptions_1.ComponentOptions.buildBooleanOption({
	        postProcessing: function (value, options) {
	            if (options.mainSearchInterface) {
	                return false;
	            }
	            return value;
	        }
	    }),
	    /**
	     * Specifies whether to enable *responsive mode* for Recommendation components. Setting this options to `false` on
	     * any Recommendation component in a search interface disables responsive mode for all other Recommendation
	     * components in the search interface.
	     *
	     * Responsive mode displays all Recommendation components under a single dropdown button whenever the width of the
	     * HTML element which the search interface is bound to reaches or falls behind a certain threshold (see
	     * {@link Recommendation.options.responsiveBreakpoint}).
	     *
	     * See also {@link Recommendation.options.dropdownHeaderLabel}.
	     *
	     * Default value is `true`.
	     */
	    enableResponsiveMode: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * If {@link Recommendation.options.enableResponsiveMode} is `true` for all Recommendation components, specifies the
	     * width threshold (in pixels) of the search interface at which Recommendation components go in responsive mode.
	     *
	     * Recommendation components go in responsive mode when the width of the search interface is equal to or lower than
	     * this value.
	     *
	     * The `search interface` corresponds to the HTML element with the class `CoveoSearchInterface`.
	     *
	     * If more than one Recommendation component in the search interface specifies a value for this option, then the
	     * framework uses the last occurrence of the option.
	     *
	     * Default value is `1000`.
	     */
	    responsiveBreakpoint: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 1000 }),
	    /**
	     * If {@link Recommendation.options.enableResponsiveMode} is `true` for all Recommendation components, specifies the
	     * label of the dropdown button that allows to display the Recommendation components when in responsive mode.
	     *
	     * If more than one Recommendation component in the search interface specifies a value for this option, then the
	     * framework uses the first occurrence of the option.
	     *
	     * Default value is `Recommendations`.
	     */
	    dropdownHeaderLabel: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ defaultValue: 'Recommendations' })
	};
	exports.Recommendation = Recommendation;
	// We do not register the Recommendation component since it is done with .coveo('initRecommendation')


/***/ }),
/* 134 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var QuickviewEvents = (function () {
	    function QuickviewEvents() {
	    }
	    return QuickviewEvents;
	}());
	QuickviewEvents.quickviewLoaded = 'quickviewLoaded';
	QuickviewEvents.openQuickview = 'openQuickview';
	exports.QuickviewEvents = QuickviewEvents;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResponsiveComponentsManager_1 = __webpack_require__(136);
	var ResponsiveComponentsUtils_1 = __webpack_require__(140);
	var SearchInterface_1 = __webpack_require__(108);
	var Utils_1 = __webpack_require__(13);
	var Dom_1 = __webpack_require__(59);
	var Logger_1 = __webpack_require__(11);
	var Recommendation_1 = __webpack_require__(133);
	var RecommendationDropdownContent_1 = __webpack_require__(141);
	var ResponsiveDropdownHeader_1 = __webpack_require__(143);
	var ResponsiveDropdown_1 = __webpack_require__(144);
	var Strings_1 = __webpack_require__(35);
	var FacetSlider_1 = __webpack_require__(145);
	var Facet_1 = __webpack_require__(157);
	var Component_1 = __webpack_require__(107);
	var RegisteredNamedMethods_1 = __webpack_require__(105);
	var QueryEvents_1 = __webpack_require__(48);
	var _ = __webpack_require__(14);
	var ResponsiveRecommendation = (function () {
	    function ResponsiveRecommendation(coveoRoot, ID, options, responsiveDropdown) {
	        this.coveoRoot = coveoRoot;
	        this.ID = ID;
	        this.responsiveDropdown = responsiveDropdown;
	        this.recommendationRoot = this.getRecommendationRoot();
	        this.dropdownHeaderLabel = options.dropdownHeaderLabel;
	        this.breakpoint = this.defineResponsiveBreakpoint(options);
	        this.logger = new Logger_1.Logger(this);
	        this.dropdown = this.buildDropdown(responsiveDropdown);
	        this.facets = this.getFacets();
	        this.facetSliders = this.getFacetSliders();
	        this.registerOnOpenHandler();
	        this.registerOnCloseHandler();
	        this.registerQueryEvents();
	        this.dropdownContainer = Dom_1.$$('div', { className: ResponsiveRecommendation.DROPDOWN_CONTAINER_CSS_CLASS_NAME });
	    }
	    ResponsiveRecommendation.init = function (root, component, options) {
	        var logger = new Logger_1.Logger('ResponsiveRecommendation');
	        var coveoRoot = this.findParentRootOfRecommendationComponent(root);
	        if (!coveoRoot) {
	            logger.info('Recommendation component has no parent interface. Disabling responsive mode for this component.');
	            return;
	        }
	        if (!Dom_1.$$(coveoRoot).find('.coveo-results-column')) {
	            logger.info('Cannot find element with class coveo-results-column. Disabling responsive mode for this component.');
	            return;
	        }
	        ResponsiveComponentsManager_1.ResponsiveComponentsManager.register(ResponsiveRecommendation, Dom_1.$$(coveoRoot), Recommendation_1.Recommendation.ID, component, options);
	    };
	    ResponsiveRecommendation.findParentRootOfRecommendationComponent = function (root) {
	        var coveoRoot = Dom_1.$$(root).parents(Component_1.Component.computeCssClassName(SearchInterface_1.SearchInterface));
	        if (coveoRoot[0]) {
	            return Dom_1.$$(coveoRoot[0]);
	        }
	        return null;
	    };
	    ResponsiveRecommendation.prototype.handleResizeEvent = function () {
	        if (this.needSmallMode() && !ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallRecommendationActivated(this.coveoRoot)) {
	            this.changeToSmallMode();
	        }
	        else if (!this.needSmallMode() && ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallRecommendationActivated(this.coveoRoot)) {
	            this.changeToLargeMode();
	        }
	        if (this.dropdown.isOpened) {
	            this.dropdown.dropdownContent.positionDropdown();
	        }
	    };
	    ResponsiveRecommendation.prototype.needDropdownWrapper = function () {
	        return this.needSmallMode();
	    };
	    ResponsiveRecommendation.prototype.needSmallMode = function () {
	        return this.coveoRoot.width() <= this.breakpoint;
	    };
	    ResponsiveRecommendation.prototype.changeToSmallMode = function () {
	        this.dropdown.close();
	        Dom_1.$$(this.coveoRoot.find("." + ResponsiveComponentsManager_1.ResponsiveComponentsManager.DROPDOWN_HEADER_WRAPPER_CSS_CLASS)).el.appendChild(this.dropdown.dropdownHeader.element.el);
	        this.disableFacetPreservePosition();
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.activateSmallRecommendation(this.coveoRoot);
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.activateSmallRecommendation(this.recommendationRoot);
	    };
	    ResponsiveRecommendation.prototype.changeToLargeMode = function () {
	        this.enableFacetPreservePosition();
	        this.dropdown.cleanUp();
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.deactivateSmallRecommendation(this.coveoRoot);
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.deactivateSmallRecommendation(this.recommendationRoot);
	    };
	    ResponsiveRecommendation.prototype.buildDropdown = function (responsiveDropdown) {
	        var dropdownContent = this.buildDropdownContent();
	        var dropdownHeader = this.buildDropdownHeader();
	        var dropdown = responsiveDropdown ? responsiveDropdown : new ResponsiveDropdown_1.ResponsiveDropdown(dropdownContent, dropdownHeader, this.coveoRoot);
	        dropdown.disablePopupBackground();
	        return dropdown;
	    };
	    ResponsiveRecommendation.prototype.buildDropdownHeader = function () {
	        var dropdownHeaderElement = Dom_1.$$('a');
	        var content = Dom_1.$$('p');
	        content.text(Strings_1.l(this.dropdownHeaderLabel));
	        dropdownHeaderElement.el.appendChild(content.el);
	        var dropdownHeader = new ResponsiveDropdownHeader_1.ResponsiveDropdownHeader('recommendation', dropdownHeaderElement);
	        return dropdownHeader;
	    };
	    ResponsiveRecommendation.prototype.buildDropdownContent = function () {
	        var dropdownContentElement;
	        var recommendationColumn = this.coveoRoot.find('.coveo-recommendation-column');
	        if (recommendationColumn) {
	            dropdownContentElement = Dom_1.$$(recommendationColumn);
	        }
	        else {
	            dropdownContentElement = Dom_1.$$(this.coveoRoot.find('.' + Component_1.Component.computeCssClassName(Recommendation_1.Recommendation)));
	        }
	        var dropdownContent = new RecommendationDropdownContent_1.RecommendationDropdownContent('recommendation', dropdownContentElement, this.coveoRoot);
	        return dropdownContent;
	    };
	    ResponsiveRecommendation.prototype.defineResponsiveBreakpoint = function (options) {
	        var breakpoint;
	        if (Utils_1.Utils.isNullOrUndefined(options.responsiveBreakpoint)) {
	            breakpoint = ResponsiveRecommendation.RESPONSIVE_BREAKPOINT;
	        }
	        else {
	            breakpoint = options.responsiveBreakpoint;
	        }
	        return breakpoint;
	    };
	    ResponsiveRecommendation.prototype.getFacetSliders = function () {
	        var facetSliders = [];
	        _.each(this.coveoRoot.findAll('.' + Component_1.Component.computeCssClassName(FacetSlider_1.FacetSlider)), function (facetSliderElement) {
	            var facetSlider = Component_1.Component.get(facetSliderElement, FacetSlider_1.FacetSlider);
	            if (facetSlider instanceof FacetSlider_1.FacetSlider) {
	                facetSliders.push(facetSlider);
	            }
	        });
	        return facetSliders;
	    };
	    ResponsiveRecommendation.prototype.getFacets = function () {
	        var facets = [];
	        _.each(this.coveoRoot.findAll('.' + Component_1.Component.computeCssClassName(Facet_1.Facet)), function (facetElement) {
	            var facet = Component_1.Component.get(facetElement, Facet_1.Facet);
	            if (facet instanceof Facet_1.Facet) {
	                facets.push(facet);
	            }
	        });
	        return facets;
	    };
	    ResponsiveRecommendation.prototype.dismissFacetSearches = function () {
	        _.each(this.facets, function (facet) {
	            if (facet.facetSearch && facet.facetSearch.currentlyDisplayedResults) {
	                facet.facetSearch.completelyDismissSearch();
	            }
	        });
	    };
	    ResponsiveRecommendation.prototype.enableFacetPreservePosition = function () {
	        _.each(this.facets, function (facet) { return facet.options.preservePosition = true; });
	    };
	    ResponsiveRecommendation.prototype.disableFacetPreservePosition = function () {
	        _.each(this.facets, function (facet) { return facet.options.preservePosition = false; });
	    };
	    ResponsiveRecommendation.prototype.drawFacetSliderGraphs = function () {
	        _.each(this.facetSliders, function (facetSlider) { return facetSlider.drawDelayedGraphData(); });
	    };
	    ResponsiveRecommendation.prototype.registerOnOpenHandler = function () {
	        this.dropdown.registerOnOpenHandler(this.drawFacetSliderGraphs, this);
	    };
	    ResponsiveRecommendation.prototype.registerOnCloseHandler = function () {
	        this.dropdown.registerOnCloseHandler(this.dismissFacetSearches, this);
	    };
	    ResponsiveRecommendation.prototype.getRecommendationRoot = function () {
	        return Dom_1.$$(this.coveoRoot.find('.' + Component_1.Component.computeCssClassName(Recommendation_1.Recommendation)));
	    };
	    ResponsiveRecommendation.prototype.registerQueryEvents = function () {
	        var _this = this;
	        var recommendationInstance = RegisteredNamedMethods_1.get(this.recommendationRoot.el, SearchInterface_1.SearchInterface);
	        if (recommendationInstance && recommendationInstance.options.hideIfNoResults) {
	            this.coveoRoot.on(QueryEvents_1.QueryEvents.querySuccess, function (e, data) { return _this.handleRecommnendationQuerySucess(data); });
	            this.coveoRoot.on(QueryEvents_1.QueryEvents.noResults, function (e, data) { return _this.handleRecommendationNoResults(); });
	        }
	        this.coveoRoot.on(QueryEvents_1.QueryEvents.queryError, function () { return _this.handleRecommendationQueryError(); });
	    };
	    ResponsiveRecommendation.prototype.handleRecommnendationQuerySucess = function (data) {
	        if (data.results.totalCount === 0) {
	            this.dropdown.close();
	            this.dropdown.dropdownHeader.hide();
	        }
	        else {
	            this.dropdown.dropdownHeader.show();
	        }
	    };
	    ResponsiveRecommendation.prototype.handleRecommendationNoResults = function () {
	        this.dropdown.close();
	        this.dropdown.dropdownHeader.hide();
	    };
	    ResponsiveRecommendation.prototype.handleRecommendationQueryError = function () {
	        this.dropdown.close();
	        this.dropdown.dropdownHeader.hide();
	    };
	    return ResponsiveRecommendation;
	}());
	ResponsiveRecommendation.DROPDOWN_CONTAINER_CSS_CLASS_NAME = 'coveo-recommendation-dropdown-container';
	ResponsiveRecommendation.RESPONSIVE_BREAKPOINT = 1000;
	exports.ResponsiveRecommendation = ResponsiveRecommendation;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var InitializationEvents_1 = __webpack_require__(45);
	var Component_1 = __webpack_require__(107);
	var SearchInterface_1 = __webpack_require__(108);
	var Utils_1 = __webpack_require__(13);
	var Tab_1 = __webpack_require__(137);
	var QueryEvents_1 = __webpack_require__(48);
	var Logger_1 = __webpack_require__(11);
	var _ = __webpack_require__(14);
	var ResponsiveComponentsManager = (function () {
	    function ResponsiveComponentsManager(root) {
	        var _this = this;
	        this.disabledComponents = [];
	        this.responsiveComponents = [];
	        this.coveoRoot = root;
	        this.searchInterface = Component_1.Component.get(this.coveoRoot.el, SearchInterface_1.SearchInterface, false);
	        this.dropdownHeadersWrapper = Dom_1.$$('div', { className: ResponsiveComponentsManager.DROPDOWN_HEADER_WRAPPER_CSS_CLASS });
	        this.searchBoxElement = this.getSearchBoxElement();
	        this.logger = new Logger_1.Logger(this);
	        this.resizeListener = _.debounce(function () {
	            if (_this.coveoRoot.width() != 0) {
	                _this.addDropdownHeaderWrapperIfNeeded();
	                if (_this.shouldSwitchToSmallMode()) {
	                    _this.coveoRoot.addClass('coveo-small-interface');
	                }
	                else if (!_this.shouldSwitchToSmallMode()) {
	                    _this.coveoRoot.removeClass('coveo-small-interface');
	                }
	                _.each(_this.responsiveComponents, function (responsiveComponent) {
	                    responsiveComponent.handleResizeEvent();
	                });
	            }
	            else {
	                _this.logger.warn("The width of the search interface is 0, cannot dispatch resize events to responsive components. This means that the tabs will not\n        automatically fit in the tab section. Also, the facet and recommendation component will not hide in a menu. Could the search\n        interface display property be none? Could its visibility property be set to hidden? Also, if either of these scenarios happen during\n        loading, it could be the cause of this issue.");
	            }
	        }, ResponsiveComponentsManager.RESIZE_DEBOUNCE_DELAY);
	        window.addEventListener('resize', this.resizeListener);
	        this.bindNukeEvents();
	    }
	    // Register takes a class and will instantiate it after framework initialization has completed.
	    ResponsiveComponentsManager.register = function (responsiveComponentConstructor, root, ID, component, options) {
	        var _this = this;
	        root.on(InitializationEvents_1.InitializationEvents.afterInitialization, function () {
	            if (_this.shouldEnableResponsiveMode(root)) {
	                var responsiveComponentsManager = _.find(_this.componentManagers, function (componentManager) { return root.el == componentManager.coveoRoot.el; });
	                if (!responsiveComponentsManager) {
	                    responsiveComponentsManager = new ResponsiveComponentsManager(root);
	                    _this.componentManagers.push(responsiveComponentsManager);
	                }
	                if (!Utils_1.Utils.isNullOrUndefined(options.enableResponsiveMode) && !options.enableResponsiveMode) {
	                    responsiveComponentsManager.disableComponent(ID);
	                    return;
	                }
	                _this.componentInitializations.push({
	                    responsiveComponentsManager: responsiveComponentsManager,
	                    arguments: [responsiveComponentConstructor, root, ID, component, options]
	                });
	            }
	            _this.remainingComponentInitializations--;
	            if (_this.remainingComponentInitializations == 0) {
	                _this.instantiateResponsiveComponents(); // necessary to verify if all components are disabled before they are initialized.
	                if (root.width() == 0) {
	                    var logger = new Logger_1.Logger('ResponsiveComponentsManager');
	                    logger.info("Search interface width is 0, cannot dispatch resize events to responsive components. Will try again after first\n          query success.");
	                    root.one(QueryEvents_1.QueryEvents.querySuccess, function () {
	                        _this.resizeAllComponentsManager();
	                    });
	                }
	                else {
	                    _this.resizeAllComponentsManager();
	                }
	            }
	        });
	        this.remainingComponentInitializations++;
	    };
	    ResponsiveComponentsManager.shouldEnableResponsiveMode = function (root) {
	        var searchInterface = Component_1.Component.get(root.el, SearchInterface_1.SearchInterface, true);
	        return searchInterface instanceof SearchInterface_1.SearchInterface && searchInterface.options.enableAutomaticResponsiveMode && searchInterface.isNewDesign();
	    };
	    ResponsiveComponentsManager.instantiateResponsiveComponents = function () {
	        _.each(this.componentInitializations, function (componentInitialization) {
	            var responsiveComponentsManager = componentInitialization.responsiveComponentsManager;
	            responsiveComponentsManager.register.apply(responsiveComponentsManager, componentInitialization.arguments);
	        });
	    };
	    ResponsiveComponentsManager.resizeAllComponentsManager = function () {
	        _.each(this.componentManagers, function (componentManager) {
	            componentManager.resizeListener();
	        });
	    };
	    ResponsiveComponentsManager.prototype.register = function (responsiveComponentConstructor, root, ID, component, options) {
	        if (this.isDisabled(ID)) {
	            return;
	        }
	        if (!this.isActivated(ID)) {
	            var responsiveComponent = new responsiveComponentConstructor(root, ID, options);
	            if (this.isTabs(ID)) {
	                this.responsiveComponents.push(responsiveComponent);
	            }
	            else {
	                // Tabs need to be rendered last, so any dropdown header(eg: facet) is already there when the responsive tabs check for overflow.
	                this.responsiveComponents.unshift(responsiveComponent);
	            }
	        }
	        _.each(this.responsiveComponents, function (responsiveComponent) {
	            if (responsiveComponent.registerComponent != null) {
	                responsiveComponent.registerComponent(component);
	            }
	        });
	    };
	    ResponsiveComponentsManager.prototype.disableComponent = function (ID) {
	        this.disabledComponents.push(ID);
	    };
	    ResponsiveComponentsManager.prototype.isDisabled = function (ID) {
	        return _.indexOf(this.disabledComponents, ID) != -1;
	    };
	    ResponsiveComponentsManager.prototype.shouldSwitchToSmallMode = function () {
	        var aComponentNeedsTabSection = this.needDropdownWrapper();
	        var reachedBreakpoint = this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getMediumScreenWidth();
	        return aComponentNeedsTabSection || reachedBreakpoint;
	    };
	    ResponsiveComponentsManager.prototype.needDropdownWrapper = function () {
	        for (var i = 0; i < this.responsiveComponents.length; i++) {
	            var responsiveComponent = this.responsiveComponents[i];
	            if (responsiveComponent.needDropdownWrapper && responsiveComponent.needDropdownWrapper()) {
	                return true;
	            }
	        }
	        return false;
	    };
	    ResponsiveComponentsManager.prototype.addDropdownHeaderWrapperIfNeeded = function () {
	        if (this.needDropdownWrapper()) {
	            var tabSection = Dom_1.$$(this.coveoRoot).find('.coveo-tab-section');
	            if (this.searchBoxElement) {
	                this.dropdownHeadersWrapper.insertAfter(this.searchBoxElement);
	            }
	            else if (tabSection) {
	                this.dropdownHeadersWrapper.insertAfter(tabSection);
	            }
	            else {
	                this.coveoRoot.prepend(this.dropdownHeadersWrapper.el);
	            }
	        }
	    };
	    ResponsiveComponentsManager.prototype.isTabs = function (ID) {
	        return ID == Tab_1.Tab.ID;
	    };
	    ResponsiveComponentsManager.prototype.isActivated = function (ID) {
	        return _.find(this.responsiveComponents, function (current) { return current.ID == ID; }) != undefined;
	    };
	    ResponsiveComponentsManager.prototype.getSearchBoxElement = function () {
	        var searchBoxElement = this.coveoRoot.find('.coveo-search-section');
	        if (searchBoxElement) {
	            return searchBoxElement;
	        }
	        else {
	            return this.coveoRoot.find('.CoveoSearchbox');
	        }
	    };
	    ResponsiveComponentsManager.prototype.bindNukeEvents = function () {
	        var _this = this;
	        Dom_1.$$(this.coveoRoot).on(InitializationEvents_1.InitializationEvents.nuke, function () {
	            window.removeEventListener('resize', _this.resizeListener);
	        });
	    };
	    return ResponsiveComponentsManager;
	}());
	ResponsiveComponentsManager.DROPDOWN_HEADER_WRAPPER_CSS_CLASS = 'coveo-dropdown-header-wrapper';
	ResponsiveComponentsManager.RESIZE_DEBOUNCE_DELAY = 200;
	ResponsiveComponentsManager.componentManagers = [];
	ResponsiveComponentsManager.remainingComponentInitializations = 0;
	ResponsiveComponentsManager.componentInitializations = [];
	exports.ResponsiveComponentsManager = ResponsiveComponentsManager;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResponsiveTabs_ts_1 = __webpack_require__(138);
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var Model_1 = __webpack_require__(98);
	var QueryEvents_1 = __webpack_require__(48);
	var QueryStateModel_1 = __webpack_require__(101);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var SearchEndpoint_1 = __webpack_require__(9);
	var Initialization_1 = __webpack_require__(106);
	var Utils_1 = __webpack_require__(13);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var KeyboardUtils_1 = __webpack_require__(68);
	var _ = __webpack_require__(14);
	/**
	 * The Tab component renders a bar that allows the end user to select a specific search interface.
	 *
	 * This component attaches itself to a `div` element. It is in charge of adding an advanced expression to the outgoing
	 * query in order to refine the results.
	 *
	 * The Tab component can also hide and show different parts of the UI. For each individual component in the UI, you can
	 * specify whether you wish to include or exclude that component when the user selects a certain Tab.
	 *
	 * **Including and Excluding Other HTML Components:**
	 *
	 * You can hide or show a specific HTML component based on the currently selected Tab by adding one of the following
	 * attributes to its tag:
	 *
	 * - `<div data-tab="foobar">`: Only include this element in the Tab with `foobar` as its `data-id`.
	 * - `<div data-tab-not="foobar">`: Do not include this element in the Tab with `foobar` as its `data-id`.
	 * - `<div data-tab="foobar,somethingelse">`: Only include this element in the Tab with `foobar` as its `data-id` and in
	 * the Tab with `somethingelse` as its `data-id`.
	 *
	 * **Setting a New Endpoint for a Tab:**
	 *
	 * A Tab can use a custom endpoint when performing a query. Of course, you need to make sure that the endpoint exists in
	 * the array of Coveo.SearchEndpoint.endpoints (see {@link SearchEndpoint.endpoints}).
	 *
	 * ```
	 * Coveo.SearchEndpoint.endpoints["specialEndpoint"] = new Coveo.SearchEndpoint({
	 *     restUri : 'https://somewhere.com/rest/search'
	 * })
	 *
	 * [ ... ]
	 *
	 * <div class='CoveoTab' data-endpoint='specialEndpoint'></div>
	 *
	 * ```
	 */
	var Tab = (function (_super) {
	    __extends(Tab, _super);
	    /**
	     * Creates a new Tab. Binds on buildingQuery event as well as an event on click of the element.
	     * @param element The HTMLElement on which to instantiate the component. Normally a `div`.
	     * @param options The options for the Tab component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function Tab(element, options, bindings) {
	        var _this = _super.call(this, element, Tab.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.isFirstQuery = true;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Tab, options);
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.T, function (args) { return _this.handleQueryStateChanged(args); });
	        var clickAction = function () { return _this.handleClick(); };
	        _this.bind.on(element, 'click', clickAction);
	        _this.bind.on(element, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, clickAction));
	        _this.render();
	        ResponsiveTabs_ts_1.ResponsiveTabs.init(_this.root, _this, _this.options);
	        return _this;
	    }
	    /**
	     * Selects the current Tab.
	     *
	     * Also logs the `interfaceChange` event in the usage analytics with the new current {@link Tab.options.id} as metada
	     * and triggers a new query.
	     */
	    Tab.prototype.select = function () {
	        if (!this.disabled) {
	            var currentLayout = this.queryStateModel.get(QueryStateModel_1.QUERY_STATE_ATTRIBUTES.LAYOUT);
	            this.queryStateModel.setMultiple({
	                t: this.options.id,
	                sort: this.options.sort || QueryStateModel_1.QueryStateModel.defaultAttributes.sort,
	                layout: this.options.layout || currentLayout || QueryStateModel_1.QueryStateModel.defaultAttributes.layout
	            });
	            this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.interfaceChange, { interfaceChangeTo: this.options.id });
	            this.queryController.executeQuery();
	        }
	    };
	    /**
	     * Indicates whether the HTMLElement argument is included in the Tab. *Included* elements are shown when the Tab is
	     * selected, whereas *excluded* elements are not.
	     * @param element The HTMLElement to verify.
	     * @returns {boolean} `true` if the HTMLElement is included in the Tab; `false` if it is excluded.
	     */
	    Tab.prototype.isElementIncludedInTab = function (element) {
	        Assert_1.Assert.exists(element);
	        var includedTabs = this.splitListOfTabs(element.getAttribute('data-tab'));
	        var excludedTabs = this.splitListOfTabs(element.getAttribute('data-tab-not'));
	        Assert_1.Assert.check(!(includedTabs.length != 0 && excludedTabs.length != 0), 'You cannot both explicitly include and exclude an element from tabs.');
	        return (includedTabs.length != 0 && _.indexOf(includedTabs, this.options.id) != -1) ||
	            (excludedTabs.length != 0 && _.indexOf(excludedTabs, this.options.id) == -1) ||
	            (includedTabs.length == 0 && excludedTabs.length == 0);
	    };
	    Tab.prototype.handleClick = function () {
	        this.select();
	    };
	    Tab.prototype.render = function () {
	        var icon = this.options.icon;
	        if (Utils_1.Utils.isNonEmptyString(icon)) {
	            var iconSpan = Dom_1.$$('span').el;
	            Dom_1.$$(iconSpan).addClass(['coveo-icon', icon]);
	            this.element.insertBefore(iconSpan, this.element.firstChild);
	        }
	        var caption = this.options.caption;
	        if (Utils_1.Utils.isNonEmptyString(caption)) {
	            var captionP = document.createElement('p');
	            Dom_1.$$(captionP).text(caption);
	            this.element.appendChild(captionP);
	        }
	        this.element.setAttribute('tabindex', '0');
	    };
	    Tab.prototype.handleBuildingQuery = function (data) {
	        Assert_1.Assert.exists(data);
	        this.isFirstQuery = false;
	        if (!this.disabled && this.isSelected()) {
	            data.queryBuilder.tab = this.options.id;
	            if (Utils_1.Utils.isNonEmptyString(this.options.expression)) {
	                if (this.options.constant) {
	                    data.queryBuilder.constantExpression.add(this.options.expression);
	                }
	                else {
	                    data.queryBuilder.advancedExpression.add(this.options.expression);
	                }
	            }
	            if (this.options.enableDuplicateFiltering) {
	                data.queryBuilder.enableDuplicateFiltering = true;
	            }
	            if (this.options.pipeline != null) {
	                data.queryBuilder.pipeline = this.options.pipeline;
	            }
	            if (this.options.maximumAge != null) {
	                data.queryBuilder.maximumAge = this.options.maximumAge;
	            }
	        }
	    };
	    Tab.prototype.handleQueryStateChanged = function (data) {
	        Assert_1.Assert.exists(data);
	        if (!this.disabled && this.isSelected()) {
	            Dom_1.$$(this.element).addClass('coveo-selected');
	            this.queryController.setEndpoint(this.options.endpoint);
	            this.showAndHideAppropriateElements();
	        }
	        else {
	            Dom_1.$$(this.element).removeClass('coveo-selected');
	        }
	    };
	    Tab.prototype.isSelected = function () {
	        var activeTab = this.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.t);
	        return activeTab == this.options.id;
	    };
	    Tab.prototype.showAndHideAppropriateElements = function () {
	        var _this = this;
	        var showElements = [];
	        var hideElements = [];
	        _.each(Dom_1.$$(this.root).findAll('[data-tab],[data-tab-not]'), function (element) {
	            if (_this.isElementIncludedInTab(element)) {
	                _this.toggleAllComponentsUnder(element, true);
	                showElements.push(element);
	            }
	            else {
	                _this.toggleAllComponentsUnder(element, false);
	                hideElements.push(element);
	            }
	        });
	        Dom_1.$$(this.root).one(QueryEvents_1.QueryEvents.querySuccess, function () {
	            _.each(showElements, function (elem) { return Dom_1.$$(elem).removeClass('coveo-tab-disabled'); });
	            _.each(hideElements, function (elem) { return Dom_1.$$(elem).addClass('coveo-tab-disabled'); });
	        });
	    };
	    Tab.prototype.splitListOfTabs = function (value) {
	        if (Utils_1.Utils.exists(value)) {
	            return _.map(value.split(','), function (tab) { return Utils_1.Utils.trim(tab); });
	        }
	        else {
	            return [];
	        }
	    };
	    Tab.prototype.toggleAllComponentsUnder = function (element, enable) {
	        Assert_1.Assert.exists(element);
	        var togglePossibleComponent = function (possibleComponent) {
	            var possibleCmp = Component_1.Component.get(possibleComponent, undefined, true);
	            if (possibleCmp) {
	                if (enable) {
	                    possibleCmp.enable();
	                }
	                else {
	                    possibleCmp.disable();
	                }
	            }
	        };
	        togglePossibleComponent(element);
	        _.each(Dom_1.$$(element).findAll('*'), function (el) {
	            togglePossibleComponent(el);
	        });
	    };
	    Tab.prototype.enable = function () {
	        _super.prototype.enable.call(this);
	        this.element.style.display = '';
	    };
	    Tab.prototype.disable = function () {
	        _super.prototype.disable.call(this);
	        this.element.style.display = 'none';
	    };
	    return Tab;
	}(Component_1.Component));
	Tab.ID = 'Tab';
	/**
	 * The options for a Tab
	 * @componentOptions
	 */
	Tab.options = {
	    /**
	     * Specifies a unique ID for the Tab.
	     *
	     * Specifying a value for this option is necessary for this component to work.
	     */
	    id: ComponentOptions_1.ComponentOptions.buildStringOption({ required: true }),
	    /**
	     * Specifies the caption of the Tab.
	     *
	     * Specifying a value for this option is necessary for this component to work.
	     */
	    caption: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ required: true }),
	    /**
	     * Specifies an icon to use for the Tab.
	     *
	     * @deprecated This options is mostly kept for legacy reasons. If possible, you should avoid using it.
	     */
	    icon: ComponentOptions_1.ComponentOptions.buildIconOption(),
	    /**
	     * Specifies an advanced expression or filter that the Tab should add to any outgoing query.
	     *
	     * **Example:**
	     *
	     * `@objecttype==Message`
	     *
	     * Default value is `undefined` and the Tab applies no additional expression or filter to the query.
	     */
	    expression: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the {@link SearchEndpoint} to point to when performing queries from within the Tab.
	     *
	     * By default, the Tab uses the "default" endpoint.
	     */
	    endpoint: ComponentOptions_1.ComponentOptions.buildCustomOption(function (endpoint) { return endpoint != null ? SearchEndpoint_1.SearchEndpoint.endpoints[endpoint] : null; }),
	    /**
	     * Specifies the default sort criteria to use when selecting the Tab. A {@link Sort} component with the same
	     * parameter needs to be present in the search interface in order for this option to function properly.
	     *
	     * **Examples:**
	     *
	     * - `data-sort='relevancy'`
	     * - `data-sort='date descending'`
	     *
	     * Default value is `undefined` and the normal {@link Sort} component behavior applies.
	     */
	    sort: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the default layout to display when the user selects the Tab (see {@link ResultList.options.layout} and
	     * {@link ResultLayout}).
	     *
	     * See the {@link ValidLayout} type for the list of possible values.
	     *
	     * If not specified, it will default to 'list'.
	     *
	     * See also [Result Layouts](https://developers.coveo.com/x/yQUvAg).
	     *
	     * Default value is `undefined` and the component selects the first available layout.
	     */
	    layout: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies whether to include the {@link Tab.options.expression} in the constant part of the query.
	     *
	     * The index specially optimizes the constant part of the query to execute faster. However, you must be careful not
	     * to include dynamic query expressions, otherwise the cache will lose its efficiency.
	     *
	     * Default value is `true`.
	     */
	    constant: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether to filter duplicates in the search results when the user selects the Tab.
	     *
	     * Setting this option to `true` forces duplicates to not appear in the search results. However, {@link Facet}
	     * counts still include duplicates, which can be confusing for the end user. This is a limitation of the index.
	     *
	     * **Example:**
	     *
	     * > The end user narrows a query down to one document that has a duplicate. If this options is `true` and the user
	     * > selects the Tab, only one document appears in the search results while the Facet count is still 2.
	     *
	     * **Note:**
	     *
	     * > It is also possible to enable duplicate filtering for the entire {@link SearchInterface} rather than for a
	     * > single Tab (see {@link SearchInterface.options.enableDuplicateFiltering}).
	     *
	     * Default value is `false`.
	     */
	    enableDuplicateFiltering: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the name of the query pipeline to use for the queries when the Tab is selected.
	     *
	     * You can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have
	     * been created (see [Managing Query Pipelines](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=128)).
	     *
	     * Default value is `undefined`, which means that pipeline selection conditions defined in the Coveo Cloud
	     * organization apply.
	     */
	    pipeline: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results
	     * instead of performing a new query on the index from within the Tab. The cache is located in the Coveo Search API
	     * (which resides between the index and the search interface).
	     *
	     * If cached results that are older than the age you specify in this option are available, a new query will be
	     * performed on the index anyhow.
	     *
	     * On high-volume public web sites, specifying a higher value for this option can greatly improve query response
	     * time at the cost of result freshness.
	     *
	     * **Note:**
	     *
	     * > It is also possible to set a maximum cache age for the entire {@link SearchInterface} rather than for a single
	     * > Tab (see {@link SearchInterface.options.maximumAge}).
	     *
	     * Default value is `undefined` and the Coveo Search API determines the maximum cache age. This is typically
	     * equivalent to 30 minutes (see [Query Parameters - maximumAge](https://developers.coveo.com/display/SearchREST/Query+Parameters#QueryParameters-maximumAge)).
	     */
	    maximumAge: ComponentOptions_1.ComponentOptions.buildNumberOption(),
	    /**
	     * Specifies whether to enable responsive mode for tabs. Responsive mode makes overflowing tabs disappear, instead
	     * making them available using a dropdown button. Responsive tabs are enabled either when tabs overflow or when the
	     * width of the search interface becomes too small.
	     *
	     * Disabling responsive mode for one Tab also disables it for all tabs. Therefore, you only need to set this option
	     * to `false` on one Tab to disable responsive mode.
	     *
	     * Default value is `true`.
	     */
	    enableResponsiveMode: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the label of the button that allows to show the hidden tabs when in responsive mode.
	     *
	     * If more than one Tab in the search interface specifies a value for this option, then the framework uses the first
	     * occurrence of the option.
	     *
	     * The default value is `"More"`.
	     */
	    dropdownHeaderLabel: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption()
	};
	exports.Tab = Tab;
	Initialization_1.Initialization.registerAutoCreateComponent(Tab);


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var InitializationEvents_1 = __webpack_require__(45);
	var PopupUtils_1 = __webpack_require__(71);
	var EventsUtils_1 = __webpack_require__(139);
	var Utils_1 = __webpack_require__(13);
	var Logger_1 = __webpack_require__(11);
	var Component_1 = __webpack_require__(107);
	var SearchInterface_1 = __webpack_require__(108);
	var Tab_1 = __webpack_require__(137);
	var ResponsiveComponentsManager_1 = __webpack_require__(136);
	var ResponsiveComponentsUtils_1 = __webpack_require__(140);
	var Strings_1 = __webpack_require__(35);
	var ResponsiveComponents_1 = __webpack_require__(17);
	var _ = __webpack_require__(14);
	var ResponsiveTabs = (function () {
	    function ResponsiveTabs(coveoRoot, ID) {
	        this.coveoRoot = coveoRoot;
	        this.ID = ID;
	        this.dropdownHeaderLabel = this.getDropdownHeaderLabel();
	        this.searchInterface = Component_1.Component.get(this.coveoRoot.el, SearchInterface_1.SearchInterface, false);
	        this.searchBoxElement = this.getSearchBoxElement();
	        this.dropdownContent = this.buildDropdownContent();
	        this.dropdownHeader = this.buildDropdownHeader();
	        this.bindDropdownContentEvents();
	        this.bindDropdownHeaderEvents();
	        this.tabSection = Dom_1.$$(this.coveoRoot.find('.coveo-tab-section'));
	        this.manageTabSwapping();
	        this.saveTabsPosition();
	        this.bindNukeEvents();
	    }
	    ResponsiveTabs.init = function (root, component, options) {
	        this.logger = new Logger_1.Logger('ResponsiveTabs');
	        if (!Dom_1.$$(root).find('.coveo-tab-section')) {
	            this.logger.info('No element with class coveo-tab-section. Responsive tabs cannot be enabled.');
	            return;
	        }
	        ResponsiveComponentsManager_1.ResponsiveComponentsManager.register(ResponsiveTabs, Dom_1.$$(root), Tab_1.Tab.ID, component, options);
	    };
	    ResponsiveTabs.prototype.handleResizeEvent = function () {
	        if (this.needSmallMode() && !ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallTabsActivated(this.coveoRoot)) {
	            this.changeToSmallMode();
	        }
	        else if (!this.needSmallMode() && ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallTabsActivated(this.coveoRoot)) {
	            this.changeToLargeMode();
	        }
	        var tabs = this.getTabsInTabSection();
	        if (this.shouldAddTabsToDropdown()) {
	            this.addTabsToDropdown(tabs);
	        }
	        else if (this.shouldRemoveTabsFromDropdown()) {
	            this.removeTabsFromDropdown(tabs);
	        }
	        if (this.dropdownHeader.hasClass('coveo-dropdown-header-active')) {
	            this.positionPopup();
	        }
	    };
	    ;
	    ResponsiveTabs.prototype.needSmallMode = function () {
	        var mediumWidth = this.searchInterface ? this.searchInterface.responsiveComponents.getMediumScreenWidth() : new ResponsiveComponents_1.ResponsiveComponents().getMediumScreenWidth();
	        if (this.coveoRoot.width() <= mediumWidth) {
	            return true;
	        }
	        else if (!ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallTabsActivated(this.coveoRoot)) {
	            return this.isOverflowing(this.tabSection.el);
	        }
	        else {
	            return this.isLargeFormatOverflowing();
	        }
	    };
	    ResponsiveTabs.prototype.changeToSmallMode = function () {
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.activateSmallTabs(this.coveoRoot);
	    };
	    ResponsiveTabs.prototype.changeToLargeMode = function () {
	        this.emptyDropdown();
	        this.cleanUpDropdown();
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.deactivateSmallTabs(this.coveoRoot);
	    };
	    ResponsiveTabs.prototype.shouldAddTabsToDropdown = function () {
	        return this.isOverflowing(this.tabSection.el) && ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallTabsActivated(this.coveoRoot);
	    };
	    ResponsiveTabs.prototype.addTabsToDropdown = function (tabs) {
	        var currentTab;
	        if (!this.tabSection.find('.coveo-tab-dropdown-header')) {
	            var facetDropdownHeader = this.tabSection.find('.coveo-facet-dropdown-header');
	            if (facetDropdownHeader) {
	                this.dropdownHeader.insertBefore(facetDropdownHeader);
	            }
	            else {
	                this.tabSection.el.appendChild(this.dropdownHeader.el);
	            }
	        }
	        for (var i = tabs.length - 1; i >= 0; i--) {
	            currentTab = tabs[i];
	            if (Dom_1.$$(currentTab).hasClass('coveo-selected') && i > 0) {
	                currentTab = tabs[--i];
	            }
	            this.addToDropdown(currentTab);
	            if (!this.isOverflowing(this.tabSection.el)) {
	                break;
	            }
	        }
	    };
	    ResponsiveTabs.prototype.shouldRemoveTabsFromDropdown = function () {
	        return !this.isOverflowing(this.tabSection.el) && ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallTabsActivated(this.coveoRoot) && !this.isDropdownEmpty();
	    };
	    ResponsiveTabs.prototype.removeTabsFromDropdown = function (tabs) {
	        var dropdownTabs = this.dropdownContent.findAll('.coveo-tab-dropdown');
	        var lastTabInSection, current;
	        if (tabs) {
	            lastTabInSection = tabs.pop();
	        }
	        while (!this.isOverflowing(this.tabSection.el) && !this.isDropdownEmpty()) {
	            current = dropdownTabs.shift();
	            this.removeFromDropdown(current);
	            this.fromDropdownToTabSection(Dom_1.$$(current), lastTabInSection);
	            lastTabInSection = _.clone(current);
	        }
	        if (this.isOverflowing(this.tabSection.el)) {
	            var tabs_1 = this.getTabsInTabSection();
	            this.addToDropdown(tabs_1.pop());
	        }
	        if (this.isDropdownEmpty()) {
	            this.cleanUpDropdown();
	        }
	    };
	    ResponsiveTabs.prototype.emptyDropdown = function () {
	        if (!this.isDropdownEmpty()) {
	            var dropdownTabs = this.dropdownContent.findAll('.coveo-tab-dropdown');
	            var tabs = this.getTabsInTabSection();
	            var lastTabInSection = void 0;
	            if (tabs) {
	                lastTabInSection = tabs.pop();
	            }
	            while (!this.isDropdownEmpty()) {
	                var current = dropdownTabs.shift();
	                this.removeFromDropdown(current);
	                Dom_1.$$(current).insertBefore(this.dropdownHeader.el);
	                this.fromDropdownToTabSection(Dom_1.$$(current), lastTabInSection);
	                lastTabInSection = _.clone(current);
	            }
	        }
	    };
	    ResponsiveTabs.prototype.isLargeFormatOverflowing = function () {
	        var virtualTabSection = Dom_1.$$(this.tabSection.el.cloneNode(true));
	        var dropdownHeader = virtualTabSection.find('.coveo-tab-dropdown-header');
	        if (dropdownHeader) {
	            virtualTabSection.el.removeChild(dropdownHeader);
	        }
	        virtualTabSection.el.style.position = 'absolute';
	        virtualTabSection.el.style.visibility = 'hidden';
	        if (!this.isDropdownEmpty()) {
	            _.each(this.dropdownContent.findAll('.CoveoTab'), function (tab) {
	                virtualTabSection.el.appendChild(tab.cloneNode(true));
	            });
	        }
	        virtualTabSection.insertBefore(this.tabSection.el);
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.deactivateSmallTabs(this.coveoRoot);
	        var isOverflowing = this.isOverflowing(virtualTabSection.el);
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.activateSmallTabs(this.coveoRoot);
	        virtualTabSection.detach();
	        return isOverflowing;
	    };
	    ResponsiveTabs.prototype.isOverflowing = function (el) {
	        return el.clientWidth < el.scrollWidth;
	    };
	    ResponsiveTabs.prototype.buildDropdownHeader = function () {
	        var dropdownHeader = Dom_1.$$('a', { className: 'coveo-dropdown-header coveo-tab-dropdown-header' });
	        var content = Dom_1.$$('p');
	        content.text(this.dropdownHeaderLabel);
	        content.el.appendChild(Dom_1.$$('span', { className: 'coveo-sprites-more-tabs' }).el);
	        dropdownHeader.el.appendChild(content.el);
	        return dropdownHeader;
	    };
	    ResponsiveTabs.prototype.bindDropdownHeaderEvents = function () {
	        var _this = this;
	        this.dropdownHeader.on('click', function () {
	            if (!_this.dropdownHeader.hasClass('coveo-dropdown-header-active')) {
	                _this.positionPopup();
	                _this.dropdownHeader.addClass('coveo-dropdown-header-active');
	            }
	            else {
	                _this.closeDropdown();
	            }
	        });
	    };
	    ResponsiveTabs.prototype.buildDropdownContent = function () {
	        var dropdownContent = Dom_1.$$('div', { className: 'coveo-tab-list-container ' + SearchInterface_1.SearchInterface.SMALL_INTERFACE_CLASS_NAME });
	        var contentList = Dom_1.$$('ol', { className: 'coveo-tab-list' });
	        dropdownContent.el.appendChild(contentList.el);
	        return dropdownContent;
	    };
	    ResponsiveTabs.prototype.bindDropdownContentEvents = function () {
	        var _this = this;
	        this.documentClickListener = function (event) {
	            if (Utils_1.Utils.isHtmlElement(event.target)) {
	                var eventTarget = Dom_1.$$(event.target);
	                if (!eventTarget.closest('coveo-tab-list-container') && !eventTarget.closest('coveo-tab-dropdown-header') && !eventTarget.closest('coveo-tab-dropdown')) {
	                    _this.closeDropdown();
	                }
	            }
	        };
	        Dom_1.$$(document.documentElement).on('click', this.documentClickListener);
	    };
	    ResponsiveTabs.prototype.closeDropdown = function () {
	        this.dropdownContent.detach();
	        this.dropdownHeader.removeClass('coveo-dropdown-header-active');
	    };
	    ResponsiveTabs.prototype.addToDropdown = function (el) {
	        if (this.dropdownContent) {
	            Dom_1.$$(el).addClass('coveo-tab-dropdown');
	            var list = this.dropdownContent.find('ol');
	            var listElement = Dom_1.$$('li');
	            listElement.el.appendChild(el);
	            Dom_1.$$(list).prepend(listElement.el);
	        }
	    };
	    ResponsiveTabs.prototype.removeFromDropdown = function (el) {
	        if (this.dropdownContent) {
	            Dom_1.$$(el).removeClass('coveo-tab-dropdown');
	            Dom_1.$$(el.parentElement).detach();
	        }
	    };
	    ResponsiveTabs.prototype.cleanUpDropdown = function () {
	        this.dropdownHeader.removeClass('coveo-dropdown-header-active');
	        this.dropdownHeader.detach();
	        this.dropdownContent.detach();
	    };
	    ResponsiveTabs.prototype.isDropdownEmpty = function () {
	        if (this.dropdownContent) {
	            var tabs = this.dropdownContent.findAll('.CoveoTab');
	            return tabs.length == 0;
	        }
	        return false;
	    };
	    ResponsiveTabs.prototype.manageTabSwapping = function () {
	        var _this = this;
	        _.each(this.coveoRoot.findAll('.' + Component_1.Component.computeCssClassNameForType(this.ID)), function (tabElement) {
	            var tab = Dom_1.$$(tabElement);
	            var fadeOutFadeIn = function (event) {
	                var tabsInSection = _this.getTabsInTabSection();
	                var lastTabInSection = tabsInSection.pop();
	                var lastTabSectionSibling = lastTabInSection.previousSibling;
	                if (event.propertyName == 'opacity') {
	                    if (tab.el.style.opacity == '0') {
	                        Dom_1.$$(lastTabInSection).addClass('coveo-tab-dropdown');
	                        tab.replaceWith(lastTabInSection);
	                        tab.removeClass('coveo-tab-dropdown');
	                        _this.fromDropdownToTabSection(tab, lastTabSectionSibling);
	                        // Because of the DOM manipulation, sometimes the animation will not trigger. Accessing the computed styles makes sure
	                        // the animation will happen.
	                        window.getComputedStyle(tab.el).opacity;
	                        window.getComputedStyle(lastTabInSection).opacity;
	                        tab.el.style.opacity = lastTabInSection.style.opacity = '1';
	                    }
	                    else if (tab.el.style.opacity == '1') {
	                        _this.closeDropdown();
	                        EventsUtils_1.EventsUtils.removePrefixedEvent(tab.el, 'TransitionEnd', fadeOutFadeIn);
	                        _this.handleResizeEvent();
	                    }
	                }
	            };
	            tab.on('click', function () {
	                if (tab.hasClass('coveo-tab-dropdown')) {
	                    var tabsInSection = _this.getTabsInTabSection();
	                    var lastTabInSection = tabsInSection.pop();
	                    if (lastTabInSection) {
	                        EventsUtils_1.EventsUtils.addPrefixedEvent(tab.el, 'TransitionEnd', fadeOutFadeIn);
	                        tab.el.style.opacity = lastTabInSection.style.opacity = '0';
	                    }
	                }
	            });
	        });
	    };
	    ResponsiveTabs.prototype.getSearchBoxElement = function () {
	        var searchBoxElement = this.coveoRoot.find('.coveo-search-section');
	        if (searchBoxElement) {
	            return searchBoxElement;
	        }
	        else {
	            return this.coveoRoot.find('.CoveoSearchbox');
	        }
	    };
	    ResponsiveTabs.prototype.saveTabsPosition = function () {
	        this.previousSibling = this.tabSection.el.previousSibling ? Dom_1.$$(this.tabSection.el.previousSibling) : null;
	        this.parent = Dom_1.$$(this.tabSection.el.parentElement);
	    };
	    ResponsiveTabs.prototype.bindNukeEvents = function () {
	        var _this = this;
	        Dom_1.$$(this.coveoRoot).on(InitializationEvents_1.InitializationEvents.nuke, function () {
	            Dom_1.$$(document.documentElement).off('click', _this.documentClickListener);
	        });
	    };
	    ResponsiveTabs.prototype.positionPopup = function () {
	        PopupUtils_1.PopupUtils.positionPopup(this.dropdownContent.el, this.dropdownHeader.el, this.coveoRoot.el, { horizontal: PopupUtils_1.HorizontalAlignment.INNERRIGHT, vertical: PopupUtils_1.VerticalAlignment.BOTTOM }, this.coveoRoot.el);
	    };
	    ResponsiveTabs.prototype.getTabsInTabSection = function () {
	        var _this = this;
	        var tabsInSection = [];
	        _.each(this.tabSection.el.children, function (childElement) {
	            if (Utils_1.Utils.isHtmlElement(childElement)) {
	                var child = Dom_1.$$(childElement);
	                if (!child.hasClass('coveo-tab-dropdown') && child.hasClass(Component_1.Component.computeCssClassNameForType(_this.ID))) {
	                    tabsInSection.push(child.el);
	                }
	            }
	        });
	        return tabsInSection;
	    };
	    ResponsiveTabs.prototype.fromDropdownToTabSection = function (tab, lastTabInTabSection) {
	        if (lastTabInTabSection) {
	            tab.insertAfter(lastTabInTabSection);
	        }
	        else {
	            this.tabSection.prepend(tab.el);
	        }
	    };
	    ResponsiveTabs.prototype.getDropdownHeaderLabel = function () {
	        var dropdownHeaderLabel;
	        _.each(Dom_1.$$(this.coveoRoot.find('.coveo-tab-section')).findAll('.' + Component_1.Component.computeCssClassName(Tab_1.Tab)), function (tabElement) {
	            var tab = Component_1.Component.get(tabElement, Tab_1.Tab);
	            if (!dropdownHeaderLabel && tab.options.dropdownHeaderLabel) {
	                dropdownHeaderLabel = tab.options.dropdownHeaderLabel;
	            }
	        });
	        if (!dropdownHeaderLabel) {
	            dropdownHeaderLabel = Strings_1.l(ResponsiveTabs.DROPDOWN_HEADER_LABEL_DEFAULT_VALUE);
	        }
	        return dropdownHeaderLabel;
	    };
	    return ResponsiveTabs;
	}());
	ResponsiveTabs.DROPDOWN_HEADER_LABEL_DEFAULT_VALUE = 'More';
	exports.ResponsiveTabs = ResponsiveTabs;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var EventsUtils = (function () {
	    function EventsUtils() {
	    }
	    // eventName must be in PascalCase
	    EventsUtils.addPrefixedEvent = function (element, pascalCaseEventName, callback) {
	        _.each(this.prefixes, function (prefix) {
	            if (prefix == '') {
	                pascalCaseEventName = pascalCaseEventName.toLowerCase();
	            }
	            element.addEventListener(prefix + pascalCaseEventName, callback, false);
	        });
	    };
	    // eventName must be in PascalCase
	    EventsUtils.removePrefixedEvent = function (element, pascalCaseEventName, callback) {
	        _.each(this.prefixes, function (prefix) {
	            if (prefix == '') {
	                pascalCaseEventName = pascalCaseEventName.toLowerCase();
	            }
	            element.removeEventListener(prefix + pascalCaseEventName, callback, false);
	        });
	    };
	    return EventsUtils;
	}());
	EventsUtils.prefixes = ['webkit', 'moz', 'MS', 'o', ''];
	exports.EventsUtils = EventsUtils;


/***/ }),
/* 140 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResponsiveComponentsUtils = (function () {
	    function ResponsiveComponentsUtils() {
	    }
	    ResponsiveComponentsUtils.shouldDrawFacetSlider = function (root) {
	        return !this.isSmallFacetActivated(root) && !this.isSmallRecommendationActivated(root);
	    };
	    ResponsiveComponentsUtils.isSmallTabsActivated = function (root) {
	        return root.hasClass(this.smallTabsClassName);
	    };
	    ResponsiveComponentsUtils.isSmallFacetActivated = function (root) {
	        return root.hasClass(this.smallFacetClassName);
	    };
	    ResponsiveComponentsUtils.isSmallRecommendationActivated = function (root) {
	        return root.hasClass(this.smallRecommendationClassName);
	    };
	    ResponsiveComponentsUtils.activateSmallTabs = function (root) {
	        root.addClass(this.smallTabsClassName);
	    };
	    ResponsiveComponentsUtils.deactivateSmallTabs = function (root) {
	        root.removeClass(this.smallTabsClassName);
	    };
	    ResponsiveComponentsUtils.activateSmallFacet = function (root) {
	        root.addClass(this.smallFacetClassName);
	    };
	    ResponsiveComponentsUtils.deactivateSmallFacet = function (root) {
	        root.removeClass(this.smallFacetClassName);
	    };
	    ResponsiveComponentsUtils.activateSmallRecommendation = function (root) {
	        root.addClass(this.smallRecommendationClassName);
	    };
	    ResponsiveComponentsUtils.deactivateSmallRecommendation = function (root) {
	        root.removeClass(this.smallRecommendationClassName);
	    };
	    return ResponsiveComponentsUtils;
	}());
	ResponsiveComponentsUtils.smallTabsClassName = 'coveo-small-tabs';
	ResponsiveComponentsUtils.smallFacetClassName = 'coveo-small-facets';
	ResponsiveComponentsUtils.smallRecommendationClassName = 'coveo-small-recommendation';
	exports.ResponsiveComponentsUtils = ResponsiveComponentsUtils;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResponsiveDropdownContent_1 = __webpack_require__(142);
	var Dom_1 = __webpack_require__(59);
	var RecommendationDropdownContent = (function () {
	    function RecommendationDropdownContent(componentName, element, coveoRoot) {
	        this.element = element;
	        this.coveoRoot = coveoRoot;
	        this.cssClassName = "coveo-" + componentName + "-dropdown-content";
	        this.element.addClass(this.cssClassName);
	        this.element.addClass(ResponsiveDropdownContent_1.ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	    }
	    RecommendationDropdownContent.prototype.positionDropdown = function () {
	        this.element.el.style.display = '';
	        var dropdownContentWrapper = this.coveoRoot.find('.coveo-results-column');
	        Dom_1.$$(dropdownContentWrapper).prepend(this.element.el);
	        this.element.addClass(ResponsiveDropdownContent_1.ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	        this.element.addClass(this.cssClassName);
	        // forces the browser to reflow the element, so that the transition is applied.
	        window.getComputedStyle(this.element.el).maxHeight;
	        this.element.addClass(RecommendationDropdownContent.OPENED_DROPDOWN_CSS_CLASS_NAME);
	    };
	    RecommendationDropdownContent.prototype.hideDropdown = function () {
	        this.element.addClass(ResponsiveDropdownContent_1.ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	        this.element.addClass(this.cssClassName);
	        this.element.removeClass(RecommendationDropdownContent.OPENED_DROPDOWN_CSS_CLASS_NAME);
	    };
	    RecommendationDropdownContent.prototype.cleanUp = function () {
	        this.element.removeClass(this.cssClassName);
	        this.element.removeClass(ResponsiveDropdownContent_1.ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	    };
	    return RecommendationDropdownContent;
	}());
	RecommendationDropdownContent.OPENED_DROPDOWN_CSS_CLASS_NAME = 'coveo-open-dropdown-content';
	exports.RecommendationDropdownContent = RecommendationDropdownContent;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var PopupUtils_1 = __webpack_require__(71);
	var ResponsiveComponentsManager_1 = __webpack_require__(136);
	var ResponsiveDropdownContent = (function () {
	    function ResponsiveDropdownContent(componentName, element, coveoRoot, minWidth, widthRatio) {
	        this.element = element;
	        this.cssClassName = "coveo-" + componentName + "-dropdown-content";
	        this.coveoRoot = coveoRoot;
	        this.widthRatio = widthRatio;
	        this.minWidth = minWidth;
	    }
	    ResponsiveDropdownContent.prototype.positionDropdown = function () {
	        this.element.addClass(this.cssClassName);
	        this.element.addClass(ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	        this.element.el.style.display = '';
	        var width = this.widthRatio * this.coveoRoot.width();
	        if (width <= this.minWidth) {
	            width = this.minWidth;
	        }
	        this.element.el.style.width = width.toString() + 'px';
	        PopupUtils_1.PopupUtils.positionPopup(this.element.el, Dom_1.$$(this.coveoRoot.find("." + ResponsiveComponentsManager_1.ResponsiveComponentsManager.DROPDOWN_HEADER_WRAPPER_CSS_CLASS)).el, this.coveoRoot.el, { horizontal: PopupUtils_1.HorizontalAlignment.INNERRIGHT, vertical: PopupUtils_1.VerticalAlignment.BOTTOM, verticalOffset: 15 }, this.coveoRoot.el);
	    };
	    ResponsiveDropdownContent.prototype.hideDropdown = function () {
	        this.element.el.style.display = 'none';
	        this.element.removeClass(this.cssClassName);
	        this.element.removeClass(ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME);
	    };
	    ResponsiveDropdownContent.prototype.cleanUp = function () {
	        this.element.el.removeAttribute('style');
	    };
	    return ResponsiveDropdownContent;
	}());
	ResponsiveDropdownContent.DEFAULT_CSS_CLASS_NAME = 'coveo-dropdown-content';
	exports.ResponsiveDropdownContent = ResponsiveDropdownContent;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var ResponsiveDropdownHeader = (function () {
	    function ResponsiveDropdownHeader(componentName, element) {
	        this.element = element;
	        this.element.addClass("coveo-" + componentName + "-dropdown-header");
	        this.element.addClass(ResponsiveDropdownHeader.DEFAULT_CSS_CLASS_NAME);
	    }
	    ResponsiveDropdownHeader.prototype.open = function () {
	        this.element.addClass(ResponsiveDropdownHeader.ACTIVE_HEADER_CSS_CLASS_NAME);
	    };
	    ResponsiveDropdownHeader.prototype.close = function () {
	        this.element.removeClass(ResponsiveDropdownHeader.ACTIVE_HEADER_CSS_CLASS_NAME);
	    };
	    ResponsiveDropdownHeader.prototype.cleanUp = function () {
	        this.element.detach();
	    };
	    ResponsiveDropdownHeader.prototype.hide = function () {
	        Dom_1.$$(this.element).addClass('coveo-hidden');
	    };
	    ResponsiveDropdownHeader.prototype.show = function () {
	        Dom_1.$$(this.element).removeClass('coveo-hidden');
	    };
	    return ResponsiveDropdownHeader;
	}());
	ResponsiveDropdownHeader.DEFAULT_CSS_CLASS_NAME = 'coveo-dropdown-header';
	ResponsiveDropdownHeader.ACTIVE_HEADER_CSS_CLASS_NAME = 'coveo-dropdown-header-active';
	exports.ResponsiveDropdownHeader = ResponsiveDropdownHeader;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var EventsUtils_1 = __webpack_require__(139);
	var _ = __webpack_require__(14);
	var ResponsiveDropdown = (function () {
	    function ResponsiveDropdown(dropdownContent, dropdownHeader, coveoRoot) {
	        this.dropdownContent = dropdownContent;
	        this.dropdownHeader = dropdownHeader;
	        this.coveoRoot = coveoRoot;
	        this.isOpened = false;
	        this.onOpenHandlers = [];
	        this.onCloseHandlers = [];
	        this.popupBackgroundIsEnabled = true;
	        this.popupBackground = this.buildPopupBackground();
	        this.bindOnClickDropdownHeaderEvent();
	        this.saveContentPosition();
	    }
	    ResponsiveDropdown.prototype.registerOnOpenHandler = function (handler, context) {
	        this.onOpenHandlers.push({ handler: handler, context: context });
	    };
	    ResponsiveDropdown.prototype.registerOnCloseHandler = function (handler, context) {
	        this.onCloseHandlers.push({ handler: handler, context: context });
	    };
	    ResponsiveDropdown.prototype.cleanUp = function () {
	        this.close();
	        this.dropdownHeader.cleanUp();
	        this.dropdownContent.cleanUp();
	        this.restoreContentPosition();
	    };
	    ResponsiveDropdown.prototype.open = function () {
	        this.isOpened = true;
	        this.dropdownHeader.open();
	        this.dropdownContent.positionDropdown();
	        _.each(this.onOpenHandlers, function (handlerCall) {
	            handlerCall.handler.apply(handlerCall.context);
	        });
	        this.showPopupBackground();
	    };
	    ResponsiveDropdown.prototype.close = function () {
	        this.isOpened = false;
	        _.each(this.onCloseHandlers, function (handlerCall) {
	            handlerCall.handler.apply(handlerCall.context);
	        });
	        this.dropdownHeader.close();
	        this.dropdownContent.hideDropdown();
	        this.hidePopupBackground();
	    };
	    ResponsiveDropdown.prototype.disablePopupBackground = function () {
	        this.popupBackgroundIsEnabled = false;
	    };
	    ResponsiveDropdown.prototype.bindOnClickDropdownHeaderEvent = function () {
	        var _this = this;
	        this.dropdownHeader.element.on('click', function () {
	            if (_this.isOpened) {
	                _this.close();
	            }
	            else {
	                _this.open();
	            }
	        });
	    };
	    ResponsiveDropdown.prototype.showPopupBackground = function () {
	        if (this.popupBackgroundIsEnabled) {
	            this.coveoRoot.el.appendChild(this.popupBackground.el);
	            window.getComputedStyle(this.popupBackground.el).opacity;
	            this.popupBackground.el.style.opacity = ResponsiveDropdown.TRANSPARENT_BACKGROUND_OPACITY;
	        }
	    };
	    ResponsiveDropdown.prototype.hidePopupBackground = function () {
	        if (this.popupBackgroundIsEnabled) {
	            // forces the browser to reflow the element, so that the transition is applied.
	            window.getComputedStyle(this.popupBackground.el).opacity;
	            this.popupBackground.el.style.opacity = '0';
	        }
	    };
	    ResponsiveDropdown.prototype.buildPopupBackground = function () {
	        var _this = this;
	        var popupBackground = Dom_1.$$('div', { className: ResponsiveDropdown.DROPDOWN_BACKGROUND_CSS_CLASS_NAME });
	        EventsUtils_1.EventsUtils.addPrefixedEvent(popupBackground.el, 'TransitionEnd', function () {
	            if (popupBackground.el.style.opacity == '0') {
	                popupBackground.detach();
	            }
	        });
	        popupBackground.on('click', function () { return _this.close(); });
	        return popupBackground;
	    };
	    ResponsiveDropdown.prototype.saveContentPosition = function () {
	        var dropdownContentPreviousSibling = this.dropdownContent.element.el.previousSibling;
	        var dropdownContentParent = this.dropdownContent.element.el.parentElement;
	        this.previousSibling = dropdownContentPreviousSibling ? Dom_1.$$(dropdownContentPreviousSibling) : null;
	        this.parent = Dom_1.$$(dropdownContentParent);
	    };
	    ResponsiveDropdown.prototype.restoreContentPosition = function () {
	        if (this.previousSibling) {
	            this.dropdownContent.element.insertAfter(this.previousSibling.el);
	        }
	        else {
	            this.parent.prepend(this.dropdownContent.element.el);
	        }
	    };
	    return ResponsiveDropdown;
	}());
	ResponsiveDropdown.TRANSPARENT_BACKGROUND_OPACITY = '0.9';
	ResponsiveDropdown.DROPDOWN_BACKGROUND_CSS_CLASS_NAME = 'coveo-dropdown-background';
	exports.ResponsiveDropdown = ResponsiveDropdown;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="../Facet/FacetHeader.ts" />
	/// <reference path="../../controllers/FacetSliderQueryController.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Slider_1 = __webpack_require__(146);
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var ResponsiveFacets_1 = __webpack_require__(156);
	var FacetHeader_1 = __webpack_require__(167);
	var Strings_1 = __webpack_require__(35);
	var InitializationEvents_1 = __webpack_require__(45);
	var FacetSliderQueryController_1 = __webpack_require__(95);
	var QueryEvents_1 = __webpack_require__(48);
	var BreadcrumbEvents_1 = __webpack_require__(42);
	var Model_1 = __webpack_require__(98);
	var Dom_1 = __webpack_require__(59);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var QueryStateModel_1 = __webpack_require__(101);
	var SliderEvents_1 = __webpack_require__(53);
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var ResponsiveComponentsUtils_1 = __webpack_require__(140);
	var Initialization_1 = __webpack_require__(106);
	var d3 = __webpack_require__(155);
	var SearchAlertEvents_1 = __webpack_require__(51);
	var _ = __webpack_require__(14);
	/**
	 * The FacetSlider component creates a facet containing a slider widget that allows the end user to filter results based
	 * on a range of numerical values, rather than a "classic" multi-select {@link Facet} with a label and a count for each
	 * value.
	 *
	 * Note that this component does not inherit from the Facet component, and thus does not offer the same configuration
	 * options. Also, some of the FacetSlider options cannot be set as a HTML attributes on the component and must rather be
	 * configured in the {@link init} call of the search interface.
	 *
	 * **Examples:**
	 *
	 * Specifying the FacetSlider configuration using a JSON inside the init call. Note that the JSON follows the
	 * FacetSlider options:
	 *
	 * ```javascript
	 * // You can call the init script using "pure" JavaScript:
	 * Coveo.init(document.querySelector('#search'), {
	 *    FacetSlider: {
	 *      field: "@size",
	 *      start: 1000,
	 *      end: 5000,
	 *      rangeSlider: true,
	 *      graph: {
	 *        steps: 10
	 *      }
	 *    }
	 * })
	 *
	 * // Or you can call the init script using the jQuery extension:
	 * $('#search').coveo('init', {
	 *    FacetSlider: {
	 *      field: "@size",
	 *      start: 1000,
	 *      end: 5000,
	 *      rangeSlider: true,
	 *      graph: {
	 *        steps: 10
	 *      }
	 *    }
	 * })
	 * ```
	 *
	 * Specifying the same FacetSlider configuration by setting the corresponding HTML attributes directly in the markup:
	 *
	 * ```html
	 * <div class='CoveoFacetSlider' data-field='@size' data-start='1000' data-end='5000' data-range-slider='true' data-graph-steps='10'></div>
	 * ```
	 */
	var FacetSlider = (function (_super) {
	    __extends(FacetSlider, _super);
	    /**
	     * Creates a new FacetSlider component. Binds multiple query events as well.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the FacetSlider component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     * @param slider
	     */
	    function FacetSlider(element, options, bindings, slider) {
	        var _this = _super.call(this, element, FacetSlider.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.slider = slider;
	        _this.isEmpty = false;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, FacetSlider, options);
	        ResponsiveFacets_1.ResponsiveFacets.init(_this.root, _this, _this.options);
	        if (_this.options.excludeOuterBounds == null) {
	            _this.options.excludeOuterBounds = false;
	        }
	        if (_this.options.start) {
	            _this.options.start = _this.options.dateField ? new Date(_this.options.start.replace(/-/g, '/')).getTime() : Number(_this.options.start);
	        }
	        if (_this.options.end) {
	            _this.options.end = _this.options.dateField ? new Date(_this.options.end.replace(/-/g, '/')).getTime() : Number(_this.options.end);
	        }
	        if (_this.hasAGraph() && typeof d3 == 'undefined') {
	            _this.options.graph = undefined;
	            _this.logger.info('Cannot find the required dependencies d3.js. Cannot add graphic to your facet range', _this);
	        }
	        _this.facetQueryController = new FacetSliderQueryController_1.FacetSliderQueryController(_this);
	        _this.initQueryStateEvents();
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.newQuery, function () { return _this.handleNewQuery(); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.noResults, function () { return _this.handleNoresults(); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.deferredQuerySuccess, function (args) { return _this.handleDeferredQuerySuccess(args); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.doneBuildingQuery, function (args) { return _this.handleDoneBuildingQuery(args); });
	        _this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.populateBreadcrumb, function (args) { return _this.handlePopulateBreadcrumb(args); });
	        _this.bind.onRootElement(SearchAlertEvents_1.SearchAlertsEvents.searchAlertsPopulateMessage, function (args) { return _this.handlePopulateSearchAlerts(args); });
	        _this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.clearBreadcrumb, function () { return _this.reset(); });
	        _this.onResize = _.debounce(function () {
	            if (ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.shouldDrawFacetSlider(Dom_1.$$(_this.root)) && _this.slider && !_this.isEmpty) {
	                _this.slider.drawGraph();
	            }
	        }, FacetSlider.DEBOUNCED_RESIZE_DELAY);
	        window.addEventListener('resize', _this.onResize);
	        // This is used inside SF integration
	        _this.bind.onRootElement('onPopupOpen', _this.onResize);
	        Dom_1.$$(_this.root).on(InitializationEvents_1.InitializationEvents.nuke, _this.handleNuke);
	        return _this;
	    }
	    FacetSlider.prototype.createDom = function () {
	        this.facetHeader = new FacetHeader_1.FacetHeader({
	            field: this.options.field,
	            facetElement: this.element,
	            title: this.options.title,
	            enableClearElement: true,
	            enableCollapseElement: true,
	            isNewDesign: this.getBindings().searchInterface.isNewDesign(),
	            facetSlider: this
	        });
	        this.element.appendChild(this.facetHeader.build());
	    };
	    FacetSlider.prototype.disable = function () {
	        _super.prototype.disable.call(this);
	        Dom_1.$$(this.element).addClass('coveo-disabled-empty');
	    };
	    /**
	     * Resets the FacetSlider (meaning that you need to set the range value as inactive).
	     */
	    FacetSlider.prototype.reset = function () {
	        if (this.slider) {
	            this.slider.initializeState();
	            this.updateQueryState();
	            this.updateAppearanceDependingOnState();
	        }
	    };
	    /**
	     * Gets the current selection in the FacetSlider.
	     *
	     * **Note:**
	     * > This method returns an array of number for selected date values. These numbers represent a number of milliseconds
	     * > before or after January 1, 1970. Therefore, you can use these numbers to instantiate standard JavaScript Date
	     * > objects.
	     *
	     * @returns {any} An array of number containing the first and last selected values, if possible. An array containing
	     * two `undefined` values otherwise.
	     */
	    FacetSlider.prototype.getSelectedValues = function () {
	        if (this.startOfSlider != undefined && this.endOfSlider != undefined) {
	            return [this.startOfSlider, this.endOfSlider];
	        }
	        else {
	            return [undefined, undefined];
	        }
	    };
	    /**
	     * Sets the selected values in the slider.
	     *
	     * **Note:**
	     * > You must set date values with numbers representing a number of milliseconds before or after January 1, 1970. You
	     * > can easily extract such numbers from standard JavaScript Date objects.
	     *
	     * @param values [start, end] An array containing the first and last values to select in the slider.
	     */
	    FacetSlider.prototype.setSelectedValues = function (values) {
	        this.setupSliderIfNeeded(undefined);
	        this.startOfSlider = values[0];
	        this.endOfSlider = values[1];
	        this.slider.setValues([this.startOfSlider, this.endOfSlider]);
	        this.updateAppearanceDependingOnState();
	    };
	    /**
	     * Indicates whether the FacetSlider is active. An active FacetSlider outputs an expression in the query when a search
	     * is performed.
	     * @returns {boolean} `true` if the FacetSlider is active; `false` otherwise.
	     */
	    FacetSlider.prototype.isActive = function () {
	        return !isNaN(this.startOfSlider)
	            && !isNaN(this.endOfSlider)
	            && !isNaN(this.initialStartOfSlider)
	            && !isNaN(this.initialEndOfSlider)
	            && (this.startOfSlider != this.initialStartOfSlider || this.endOfSlider != this.initialEndOfSlider);
	    };
	    FacetSlider.prototype.getSliderBoundaryForQuery = function () {
	        var needToReturnABoundary = false;
	        if (!this.slider) {
	            needToReturnABoundary = true;
	        }
	        else if (this.slider && this.isActive()) {
	            needToReturnABoundary = true;
	        }
	        if (needToReturnABoundary) {
	            return this.generateBoundary();
	        }
	        else {
	            return undefined;
	        }
	    };
	    // There is delayed graph data if at the time the facet slider tried to draw, the facet was hidden in the
	    // facet dropdown. This method will draw delayed graph data if it exists.
	    FacetSlider.prototype.drawDelayedGraphData = function () {
	        if (this.delayedGraphData != undefined && !this.isEmpty) {
	            this.slider.drawGraph(this.delayedGraphData);
	        }
	    };
	    FacetSlider.prototype.isSimpleSliderConfig = function () {
	        return this.options.start != null && this.options.end != null;
	    };
	    FacetSlider.prototype.hasAGraph = function () {
	        return this.options.graph != undefined;
	    };
	    FacetSlider.prototype.handleNoresults = function () {
	        this.isEmpty = true;
	        this.updateAppearanceDependingOnState();
	    };
	    FacetSlider.prototype.handleNewQuery = function () {
	        this.isEmpty = false;
	    };
	    FacetSlider.prototype.handleRangeQueryStateChanged = function (args) {
	        this.setupSliderIfNeeded(args);
	        this.startOfSlider = args.value[0] == undefined ? this.startOfSlider : args.value[0];
	        this.endOfSlider = args.value[1] == undefined ? this.endOfSlider : args.value[1];
	        this.setSelectedValues([this.startOfSlider, this.endOfSlider]);
	    };
	    FacetSlider.prototype.handlePopulateBreadcrumb = function (args) {
	        var _this = this;
	        var populateBreadcrumb = function () {
	            if (_this.isActive()) {
	                args.breadcrumbs.push({
	                    element: _this.buildBreadcrumbFacetSlider()
	                });
	            }
	        };
	        if (this.slider) {
	            populateBreadcrumb();
	        }
	        else {
	            Dom_1.$$(this.root).one(QueryEvents_1.QueryEvents.deferredQuerySuccess, function () {
	                populateBreadcrumb();
	                Dom_1.$$(_this.root).trigger(BreadcrumbEvents_1.BreadcrumbEvents.redrawBreadcrumb);
	            });
	        }
	    };
	    FacetSlider.prototype.handlePopulateSearchAlerts = function (args) {
	        if (this.isActive()) {
	            args.text.push(Dom_1.$$(this.buildBreadcrumbFacetSlider()).text());
	        }
	    };
	    FacetSlider.prototype.buildBreadcrumbFacetSlider = function () {
	        var _this = this;
	        var elem = Dom_1.$$('div', {
	            className: 'coveo-facet-slider-breadcrumb'
	        }).el;
	        var title = Dom_1.$$('span', {
	            className: 'coveo-facet-slider-breadcrumb-title'
	        });
	        title.text(this.options.title + ': ');
	        elem.appendChild(title.el);
	        var values = Dom_1.$$('span', {
	            className: 'coveo-facet-slider-breadcrumb-values'
	        });
	        elem.appendChild(values.el);
	        var value = Dom_1.$$('span', {
	            className: 'coveo-facet-slider-breadcrumb-value'
	        });
	        value.text(this.slider.getCaption());
	        values.el.appendChild(value.el);
	        var clear = Dom_1.$$('span', {
	            className: 'coveo-facet-slider-breadcrumb-clear'
	        });
	        value.el.appendChild(clear.el);
	        value.on('click', function () {
	            _this.reset();
	            _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetClearAll, {
	                facetId: _this.options.id,
	                facetTitle: _this.options.title
	            });
	            _this.queryController.executeQuery();
	        });
	        return elem;
	    };
	    FacetSlider.prototype.initSlider = function () {
	        this.buildSlider();
	        this.slider.initializeState([this.startOfSlider, this.endOfSlider]);
	        this.updateAppearanceDependingOnState();
	    };
	    FacetSlider.prototype.initQueryStateEvents = function () {
	        var _this = this;
	        this.rangeQueryStateAttribute = QueryStateModel_1.QueryStateModel.getFacetId(this.options.id) + ':range';
	        this.queryStateModel.registerNewAttribute(this.rangeQueryStateAttribute, [undefined, undefined]);
	        var eventName = this.queryStateModel.getEventName(Model_1.Model.eventTypes.changeOne + this.rangeQueryStateAttribute);
	        this.bind.onRootElement(eventName, function (args) {
	            _this.slider ? _this.handleRangeQueryStateChanged(args) : _this.setRangeStateSliderStillNotCreated(args);
	        });
	    };
	    FacetSlider.prototype.setRangeStateSliderStillNotCreated = function (args) {
	        this.rangeFromUrlState = this.copyValues(args.value);
	    };
	    FacetSlider.prototype.buildSlider = function () {
	        var _this = this;
	        var sliderContainer = Dom_1.$$('div', {
	            className: 'coveo-facet-values coveo-slider-container'
	        }).el;
	        if (this.hasAGraph()) {
	            Dom_1.$$(sliderContainer).addClass('coveo-with-graph');
	        }
	        var sliderDiv = Dom_1.$$('div').el;
	        this.slider = this.slider ? this.slider : new Slider_1.Slider(sliderDiv, _.extend({}, this.options, { dateField: this.options.dateField }), this.root);
	        Dom_1.$$(sliderDiv).on(SliderEvents_1.SliderEvents.endSlide, function (e, args) {
	            _this.handleEndSlide(args);
	        });
	        Dom_1.$$(sliderDiv).on(SliderEvents_1.SliderEvents.duringSlide, function (e, args) {
	            _this.handleDuringSlide(args);
	        });
	        if (this.hasAGraph()) {
	            Dom_1.$$(sliderDiv).on(SliderEvents_1.SliderEvents.graphValueSelected, function (e, args) {
	                _this.handleGraphValueSelected(args);
	            });
	        }
	        sliderContainer.appendChild(sliderDiv);
	        this.element.appendChild(sliderContainer);
	        this.updateAppearanceDependingOnState();
	    };
	    FacetSlider.prototype.handleBuildingQuery = function (data) {
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.queryBuilder);
	        var boundary = this.getSliderBoundaryForQuery();
	        if (boundary != undefined) {
	            this.facetQueryController.prepareForNewQuery();
	            var expression = this.facetQueryController.computeOurFilterExpression(boundary);
	            if (Utils_1.Utils.isNonEmptyString(expression)) {
	                this.logger.trace('Putting filter in query', expression);
	                data.queryBuilder.advancedExpression.add(expression);
	            }
	        }
	    };
	    FacetSlider.prototype.handleDoneBuildingQuery = function (data) {
	        var queryBuilder = data.queryBuilder;
	        this.facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
	    };
	    FacetSlider.prototype.handleDeferredQuerySuccess = function (data) {
	        this.ensureDom();
	        this.setupSliderIfNeeded(data);
	        var groupByResults = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
	        this.isEmpty = this.isFacetEmpty(groupByResults, data);
	        this.updateAppearanceDependingOnState();
	        if (this.hasAGraph()) {
	            this.renderToSliderGraph(data);
	        }
	    };
	    FacetSlider.prototype.handleEndSlide = function (args) {
	        var values = args.slider.getValues();
	        this.startOfSlider = values[0];
	        this.endOfSlider = values[1];
	        if (this.updateQueryState(values)) {
	            this.updateAppearanceDependingOnState();
	            this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetRangeSlider, {
	                facetId: this.options.id,
	                facetRangeStart: this.startOfSlider.toString(),
	                facetRangeEnd: this.endOfSlider.toString()
	            });
	            this.queryController.executeQuery();
	        }
	    };
	    FacetSlider.prototype.handleDuringSlide = function (args) {
	        var values = args.slider.getValues();
	        this.startOfSlider = values[0];
	        this.endOfSlider = values[1];
	        this.slider.setValues([this.startOfSlider, this.endOfSlider]);
	        this.updateAppearanceDependingOnState(true);
	    };
	    FacetSlider.prototype.handleGraphValueSelected = function (args) {
	        if ((this.options.rangeSlider && this.startOfSlider != args.start) || this.endOfSlider != args.end) {
	            if (this.options.rangeSlider) {
	                this.startOfSlider = args.start;
	            }
	            this.endOfSlider = args.end;
	            this.slider.setValues([this.startOfSlider, this.endOfSlider]);
	            this.updateQueryState();
	            this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetRangeGraph, {
	                facetId: this.options.id,
	                facetRangeStart: this.startOfSlider.toString(),
	                facetRangeEnd: this.endOfSlider.toString()
	            });
	            this.queryController.executeQuery();
	        }
	    };
	    FacetSlider.prototype.updateQueryState = function (values, silent) {
	        if (values === void 0) { values = this.slider.getValues(); }
	        if (silent === void 0) { silent = false; }
	        var copyOfValues = this.copyValues(values);
	        var start = values[0] + 0.0;
	        var end = values[1] + 0.0;
	        var model = this.queryStateModel.get(this.rangeQueryStateAttribute);
	        if (model == null || copyOfValues[0] != model[0] || copyOfValues[1] != model[1]) {
	            copyOfValues[0] = start;
	            copyOfValues[1] = end;
	            this.queryStateModel.set(this.rangeQueryStateAttribute, copyOfValues, { silent: silent });
	            return true;
	        }
	        return false;
	    };
	    FacetSlider.prototype.copyValues = function (values) {
	        // Creating a copy of the values prevents an unwanted automatic update of the state while sliding
	        // That's the cleanest way I found to copy that array correctly
	        var copyOfValues = [];
	        copyOfValues[0] = Number(values[0]) + 0.0;
	        copyOfValues[1] = Number(values[1]) + 0.0;
	        return copyOfValues;
	    };
	    FacetSlider.prototype.renderToSliderGraph = function (data) {
	        var _this = this;
	        var rawGroupByResults = data.results.groupByResults[this.facetQueryController.graphGroupByQueriesIndex];
	        var graphData;
	        var totalGraphResults = 0;
	        if (rawGroupByResults) {
	            graphData = _.map(rawGroupByResults.values, function (value) {
	                totalGraphResults += value.numberOfResults;
	                var start = value.value.split('..')[0];
	                var end = value.value.split('..')[1];
	                if (!_this.options.dateField) {
	                    start = Number(start);
	                    end = Number(end);
	                }
	                else {
	                    start = new Date(start.split('@')[0]).getTime();
	                    end = new Date(end.split('@')[0]).getTime();
	                }
	                var y = value.numberOfResults;
	                return {
	                    start: start,
	                    y: y,
	                    end: end,
	                    isDate: _this.options.dateField
	                };
	            });
	        }
	        if (totalGraphResults == 0) {
	            this.isEmpty = true;
	            this.updateAppearanceDependingOnState();
	        }
	        else if (graphData != undefined && !this.isDropdownHidden()) {
	            this.slider.drawGraph(graphData);
	        }
	        else if (graphData != undefined && this.isDropdownHidden()) {
	            this.delayedGraphData = graphData;
	        }
	    };
	    FacetSlider.prototype.isDropdownHidden = function () {
	        var facetDropdown = this.root.querySelector('.coveo-facet-column');
	        if (facetDropdown) {
	            return Dom_1.$$(facetDropdown).css('display') == 'none';
	        }
	        if (Dom_1.$$(this.root).hasClass('CoveoRecommendation')) {
	            var recommendationDropdown = Dom_1.$$(this.root).parents('.coveo-recommendation-column')[0] || this.root;
	            return Dom_1.$$(recommendationDropdown).css('display') == 'none';
	        }
	        return false;
	    };
	    FacetSlider.prototype.generateBoundary = function () {
	        if (!this.slider) {
	            // If the slider is not initialized, the only boundary we can get is from the state.
	            return this.generateBoundaryFromState();
	        }
	        else {
	            // Else, try to get one from the slider itself. If we cant, try to return one from the state.
	            var boundary = this.generateBoundaryFromSlider();
	            if (boundary[0] == undefined && boundary[1] == undefined) {
	                return this.generateBoundaryFromState();
	            }
	            else {
	                return boundary;
	            }
	        }
	    };
	    FacetSlider.prototype.generateBoundaryFromSlider = function () {
	        var start, end;
	        if (this.startOfSlider != undefined) {
	            start = this.startOfSlider;
	        }
	        if (this.endOfSlider != undefined) {
	            end = this.endOfSlider;
	        }
	        return [start, end];
	    };
	    FacetSlider.prototype.generateBoundaryFromState = function () {
	        var start, end;
	        var startFromState = this.queryStateModel.get(this.rangeQueryStateAttribute)[0];
	        if (startFromState != undefined) {
	            start = startFromState;
	        }
	        var endFromState = this.queryStateModel.get(this.rangeQueryStateAttribute)[1];
	        if (endFromState != undefined) {
	            end = endFromState;
	        }
	        if (start != this.queryStateModel.getDefault(this.rangeQueryStateAttribute)[0] || end != this.queryStateModel.getDefault(this.rangeQueryStateAttribute)[1]) {
	            return [start, end];
	        }
	        else {
	            return [undefined, undefined];
	        }
	    };
	    FacetSlider.prototype.setupSliderIfNeeded = function (data) {
	        this.ensureDom();
	        if (Utils_1.Utils.isNullOrUndefined(this.slider)) {
	            if (!this.alreadySetBoundary()) {
	                this.trySetSliderBoundaryFromOptions();
	            }
	            if (!this.alreadySetBoundary() && data != undefined) {
	                this.trySetSliderBoundaryFromQueryResult(data);
	            }
	            this.trySetSliderBoundaryFromState();
	            this.setupSliderStateVariables();
	            var isInError = this.verifySetup();
	            if (isInError) {
	                this.logger.warn('Unable to initialize slider with current values', this);
	            }
	            else {
	                this.initSlider();
	                this.updateQueryState();
	            }
	        }
	    };
	    FacetSlider.prototype.verifySetup = function () {
	        var isInError = 0;
	        isInError += this.initialStartOfSlider == undefined ? 1 : 0;
	        isInError += isNaN(this.initialStartOfSlider) ? 1 : 0;
	        isInError += this.initialEndOfSlider == undefined ? 1 : 0;
	        isInError += isNaN(this.initialEndOfSlider) ? 1 : 0;
	        return isInError;
	    };
	    FacetSlider.prototype.setupSliderStateVariables = function () {
	        if (isNaN(this.initialStartOfSlider) || isNaN(this.initialEndOfSlider)) {
	            this.logger.warn('Cannnot initialize slider with those values : start: ' + this.initialStartOfSlider + ' end: ' + this.initialEndOfSlider);
	        }
	        else {
	            this.initialStartOfSlider = Number(this.initialStartOfSlider);
	            this.initialEndOfSlider = Number(this.initialEndOfSlider);
	            this.startOfSlider = this.startOfSlider != undefined ? Number(this.startOfSlider) : this.initialStartOfSlider;
	            this.endOfSlider = this.endOfSlider != undefined ? Number(this.endOfSlider) : this.initialEndOfSlider;
	            this.options.start = this.initialStartOfSlider;
	            this.options.end = this.initialEndOfSlider;
	            this.queryStateModel.setNewDefault(this.rangeQueryStateAttribute, [this.initialStartOfSlider, this.initialEndOfSlider]);
	        }
	    };
	    FacetSlider.prototype.alreadySetBoundary = function () {
	        return this.startOfSlider != undefined && this.endOfSlider != undefined;
	    };
	    FacetSlider.prototype.trySetSliderBoundaryFromOptions = function () {
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.start)) {
	            this.setupInitialSliderStateStart(this.options.start);
	        }
	        if (!Utils_1.Utils.isNullOrUndefined(this.options.end)) {
	            this.setupInitialSliderStateEnd(this.options.end);
	        }
	    };
	    FacetSlider.prototype.trySetSliderBoundaryFromState = function () {
	        var stateValues = this.rangeFromUrlState || this.queryStateModel.get(this.rangeQueryStateAttribute);
	        if (stateValues && stateValues[0] != undefined && stateValues[1] != undefined) {
	            stateValues[0] = Number(stateValues[0]);
	            stateValues[1] = Number(stateValues[1]);
	            this.setupInitialSliderStateStart(stateValues[0]);
	            this.setupInitialSliderStateEnd(stateValues[1]);
	            this.startOfSlider = stateValues[0];
	            this.endOfSlider = stateValues[1];
	        }
	    };
	    FacetSlider.prototype.trySetSliderBoundaryFromQueryResult = function (data) {
	        var groupByResults = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
	        if (groupByResults && groupByResults.values.length > 0) {
	            this.setupInitialSliderStateStart(groupByResults.values[0].value.split('..')[0]);
	            this.setupInitialSliderStateEnd(groupByResults.values[groupByResults.values.length - 1].value.split('..')[1]);
	        }
	    };
	    FacetSlider.prototype.setupInitialSliderStateStart = function (value) {
	        if (this.initialStartOfSlider == undefined) {
	            this.initialStartOfSlider = value;
	            if (this.options.dateField && isNaN(value)) {
	                this.initialStartOfSlider = new Date(value.replace('@', ' ')).getTime();
	            }
	        }
	    };
	    FacetSlider.prototype.setupInitialSliderStateEnd = function (value) {
	        if (this.initialEndOfSlider == undefined) {
	            this.initialEndOfSlider = value;
	            if (this.options.dateField && isNaN((value))) {
	                this.initialEndOfSlider = new Date(value.replace('@', ' ')).getTime();
	            }
	        }
	    };
	    FacetSlider.prototype.updateAppearanceDependingOnState = function (sliding) {
	        if (sliding === void 0) { sliding = false; }
	        if (this.isEmpty && !this.isActive() && !sliding) {
	            Dom_1.$$(this.element).addClass('coveo-disabled-empty');
	        }
	        else {
	            Dom_1.$$(this.element).removeClass('coveo-disabled-empty');
	            Dom_1.$$(this.facetHeader.eraserElement).toggle(this.isActive());
	        }
	        if (!this.isActive() && !sliding) {
	            Dom_1.$$(this.element).addClass('coveo-disabled');
	        }
	        else {
	            Dom_1.$$(this.element).removeClass('coveo-disabled');
	        }
	        if (this.isActive() && this.slider) {
	            this.slider.onMoving();
	        }
	    };
	    FacetSlider.prototype.handleNuke = function () {
	        window.removeEventListener('resize', this.onResize);
	    };
	    FacetSlider.prototype.isFacetEmpty = function (groupByResults, data) {
	        return groupByResults == null || groupByResults.values[0] == null || groupByResults.values[0].numberOfResults == 0 || data.results.results.length == 0;
	    };
	    return FacetSlider;
	}(Component_1.Component));
	/**
	 * The component options
	 * @componentOptions
	 */
	FacetSlider.options = {
	    /**
	     * Specifies the title to display on top of the FacetSlider component.
	     *
	     * Default value is the localized string for `"NoTitle"`.
	     */
	    title: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ defaultValue: Strings_1.l('NoTitle') }),
	    /**
	     * Specifies whether the field for which you are requesting a range is a date field. This allows the FacetSlider to
	     * correctly build the outgoing [GroupByRequest]{@link IGroupByRequest} and render itself properly.
	     *
	     * Default value is `false`.
	     */
	    dateField: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the index field whose values the FacetSlider should use.
	     *
	     * This requires the given field to be configured correctly in the index as a Facet field (see
	     * [Adding Fields to a Source](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=137)).
	     *
	     * Specifying a value for this option is required for the FacetSlider component to work.
	     */
	    field: ComponentOptions_1.ComponentOptions.buildFieldOption({ groupByField: true, required: true }),
	    /**
	     * Specifies a unique identifier for the FacetSlider. Among other things, this identifier serves the purpose of
	     * saving the facet state in the URL hash.
	     *
	     * If you have two facets with the same field on the same page, you should specify a unique id value for at least
	     * one of those two facets. This id must be unique in the page.
	     *
	     * Default value is the {@link FacetSlider.options.field} option value.
	     */
	    id: ComponentOptions_1.ComponentOptions.buildStringOption({
	        postProcessing: function (value, options) { return value || options.field; }
	    }),
	    /**
	     * Specifies the format to use to display values if they are dates.
	     *
	     * Default value is `"MMM dd, yyyy"`.
	     */
	    dateFormat: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the query to filter automatic minimum and maximum range of the slider.
	     *
	     * This is especially useful for date ranges where the index may contain values which are not set, and thus the
	     * automatic range returns values from the year 1400 (earliest date from the boost C++ library).
	     *
	     * This option can be useful to do something like `queryOverride : @date>2000/01/01` or some arbitrary date which
	     * will filter out unwanted values.
	     */
	    queryOverride: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the starting boundary of the slider.
	     *
	     * Date values are rounded to the nearest year when {@link FacetSlider.options.dateField} is `true`.
	     *
	     * Default value is the lowest available field value in the index.
	     */
	    start: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies the ending boundary of the slider.
	     *
	     * Date values are rounded to the nearest year when {@link FacetSlider.options.dateField} is `true`.
	     *
	     * Default value is the highest available field value in the index.
	     */
	    end: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies whether to exclude the outer bounds of the slider in the generated query when they are not active.
	     *
	     * Default value is `false`.
	     */
	    excludeOuterBounds: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the number of decimal places to round the displayed numerical values to.
	     *
	     * Default (and minimum) value is `0`.
	     */
	    rounded: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 }),
	    /**
	     * Specifies the number of steps to split the slider into.
	     *
	     * For example, if your range is [ 0 , 100 ] and you specify 10 steps, then the end user can move the slider only to
	     * the values [ 0, 10, 20, 30 ... , 100 ].
	     *
	     * For performance reasons, the maximum value for option is 1
	     *
	     * Default value is `undefined`, and the slider allows all values. Minimum value is `2`.
	     */
	    steps: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 2 }),
	    /**
	     * Specifies whether you want a slider with two buttons instead of a slider with a single button.
	     *
	     * By default, only one button appears in the slider.
	     */
	    rangeSlider: ComponentOptions_1.ComponentOptions.buildBooleanOption(),
	    /**
	     * Specifies the caption options to use to display the field values.
	     *
	     * Available options are:
	     * - enable (`data-display-as-value-enable`): boolean; specifies whether to display the caption as a value. Default
	     * value is `true`.
	     * - unitSign (`data-display-as-value-unit-sign`): string; specifies the unit sign for this value (e.g., `"$"`).
	     * Default value is `undefined`.
	     * - separator (`data-display-as-value-separator`): string; specifies the character(s) to use as a separator in the
	     * caption. Default value is `"-"`.
	     */
	    displayAsValue: ComponentOptions_1.ComponentOptions.buildObjectOption({
	        subOptions: {
	            enable: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	            unitSign: ComponentOptions_1.ComponentOptions.buildStringOption(),
	            separator: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '-' })
	        }
	    }),
	    /**
	     * Specifies the percentage caption options to use to display the field values.
	     *
	     * Available options are:
	     * - enable (`data-display-as-percent-enable`): boolean; specifies whether to display the caption as a percentage.
	     * Default value is `false`.
	     * separator (`data-display-as-percent-separator`): string; specifies the character(s) to use as a separator in the
	     * caption. Default value is `"-"`.
	     */
	    displayAsPercent: ComponentOptions_1.ComponentOptions.buildObjectOption({
	        subOptions: {
	            enable: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	            separator: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '-' })
	        }
	    }),
	    /**
	     * Specifies whether to display a small graph on top of the slider.
	     *
	     * Available options are:
	     * - steps (`data-graph-steps`): number; specifies the number of steps/columns to display in your graph. Default
	     * value is `10`. Minimum value is `2`.
	     */
	    graph: ComponentOptions_1.ComponentOptions.buildObjectOption({
	        subOptions: {
	            steps: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 2 }),
	            animationDuration: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 }),
	            margin: ComponentOptions_1.ComponentOptions.buildObjectOption({
	                subOptions: {
	                    top: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 }),
	                    bottom: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 }),
	                    left: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 }),
	                    right: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 0 })
	                }
	            })
	        }
	    }),
	    /**
	     * Specifies a function to generate the steps for the FacetSlider (see {@link FacetSlider.options.steps}. This
	     * function receives the FacetSlider boundaries (see {@link FacetSlider.options.start} and
	     * {@link FacetSlider.options.end}) and must return an array of numbers (the steps).
	     *
	     * You can only set this option in the {@link init} call of your search interface. You cannot set it directly in the
	     * markup as an HTML attribute.
	     *
	     * **Example:**
	     *
	     * ```javascript
	     * // You can call the init script using "pure" JavaScript:
	     * Coveo.init(document.querySelector('#search'), {
	     *    FacetSlider: {
	     *      field: "@size",
	     *      getSteps: function(start, end) {
	     *        return [0,2,4,6,8,10];
	     *      }
	     *    }
	     * })
	     *
	     * // Or you can call the init script using the jQuery extension:
	     * $('#search').coveo('init', {
	     *    FacetSlider: {
	     *        field: "@size",
	     *        getSteps: function(start, end) {
	     *            return [0,2,4,6,8,10];
	     *        }
	     *    }
	     * })
	     * ```
	     */
	    getSteps: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {
	        return null;
	    }),
	    /**
	     * Specifies a function to generate the caption for the FacetSlider. Receives the current slider values
	     * (number[]) and must return the caption (string).
	     *
	     * You can only set this option in the {@link init} call of your search interface. You cannot set it directly in the
	     * markup as an HTML attribute.
	     *
	     * **Example:**
	     *
	     * ```javascript
	     * // You can call the init script using "pure" JavaScript:
	     * Coveo.init(document.querySelector('#search'), {
	     *    FacetSlider: {
	     *      field: "@size",
	     *      valueCaption: function(values) {
	     *        return values[0] + " hello" + ", " + values[1] + " world";
	     *      }
	     *    }
	     * })
	     *
	     * // Or you can call the init script using the jQuery extension:
	     * $('#search').coveo('init', {
	     *    FacetSlider: {
	     *      field: "@size",
	     *      valueCaption: function(values) {
	     *        return values[0] + " hello" + ", " + values[1] + " world";
	     *      }
	     *    }
	     * })
	     * ```
	     */
	    valueCaption: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {
	        return null;
	    }),
	    /**
	     * Specifies whether to enable *responsive mode* for facets. Setting this options to `false` on any {@link Facet} or
	     * {@link FacetSlider} in a search interface disables responsive mode for all other facets in the search interface.
	     *
	     * Responsive mode displays all facets under a single dropdown button whenever the width of the HTML element which
	     * the search interface is bound to reaches or falls behind a certain threshold (see
	     * {@link SearchInterface.responsiveComponents}).
	     *
	     * See also {@link FacetSlider.options.dropdownHeaderLabel}.
	     *
	     * Default value is `true`.
	     */
	    enableResponsiveMode: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the label of the button that allows to show the facets when in responsive mode. If it is specified more than once, the
	     * first occurence of the option will be used.
	     * The default value is "Filters".
	     */
	    dropdownHeaderLabel: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption()
	};
	FacetSlider.ID = 'FacetSlider';
	FacetSlider.DEBOUNCED_RESIZE_DELAY = 250;
	exports.FacetSlider = FacetSlider;
	Initialization_1.Initialization.registerAutoCreateComponent(FacetSlider);


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var DeviceUtils_1 = __webpack_require__(16);
	var SliderEvents_1 = __webpack_require__(53);
	var Utils_1 = __webpack_require__(13);
	var d3Scale = __webpack_require__(147);
	var d3 = __webpack_require__(155);
	var Globalize = __webpack_require__(28);
	var _ = __webpack_require__(14);
	var Logger_1 = __webpack_require__(11);
	exports.MAX_NUMBER_OF_STEPS = 100;
	var Slider = (function () {
	    function Slider(element, options, root) {
	        var _this = this;
	        this.element = element;
	        this.options = options;
	        this.root = root;
	        this.steps = [];
	        if (this.options.dateField) {
	            this.options.start = new Date(this.options.start).getTime();
	            this.options.end = new Date(this.options.end).getTime();
	        }
	        if (this.options.rounded == undefined) {
	            this.options.rounded = 0;
	        }
	        if (this.options.steps || this.options.getSteps) {
	            this.buildSteps();
	        }
	        if (this.options.graph) {
	            this.sliderGraph = new SliderGraph(this);
	        }
	        this.sliderLine = new SliderLine(this);
	        _.each(this.sliderLine.build(), function (e) {
	            _this.element.appendChild(e);
	        });
	        if (this.options.rangeSlider) {
	            this.sliderRange = new SliderRange(this);
	            _.each(this.sliderRange.build(), function (e) {
	                _this.element.appendChild(e);
	            });
	        }
	        else {
	            this.sliderButton = new SliderButton(this, 1);
	            var btnEl = this.sliderButton.build();
	            Dom_1.$$(btnEl).addClass('coveo-no-range-button');
	            this.element.appendChild(btnEl);
	            this.sliderLine.setActiveWidth(this.sliderButton);
	        }
	        this.sliderCaption = new SliderCaption(this);
	        this.element.appendChild(this.sliderCaption.build());
	    }
	    Slider.prototype.onMoving = function () {
	        if (this.options.rangeSlider) {
	            this.sliderRange.setBoundary();
	            this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
	        }
	        else {
	            this.setButtonBoundary();
	            this.sliderLine.setActiveWidth(this.sliderButton);
	        }
	        if (this.options.graph) {
	            this.sliderGraph.draw();
	        }
	        this.displayCaption();
	    };
	    Slider.prototype.initializeState = function (values) {
	        if (values === void 0) { values = [this.options.start, this.options.end]; }
	        this.currentValues = values;
	        if (this.options.rangeSlider) {
	            this.sliderRange.initializeSliderRangeState(values);
	            this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
	        }
	        else {
	            if (values == undefined) {
	                this.sliderButton.toEnd();
	            }
	            else {
	                this.sliderButton.setValue(values[1]);
	            }
	            this.setButtonBoundary();
	            this.sliderLine.setActiveWidth(this.sliderButton);
	        }
	        this.displayCaption();
	    };
	    Slider.prototype.getPosition = function () {
	        if (this.options.rangeSlider) {
	            return this.sliderRange.getPosition();
	        }
	        else {
	            return [0, this.sliderButton.getPosition()];
	        }
	    };
	    Slider.prototype.getPercentPosition = function () {
	        if (this.options.rangeSlider) {
	            return this.sliderRange.getPercentPosition();
	        }
	        else {
	            return [0, this.sliderButton.getPercent()];
	        }
	    };
	    Slider.prototype.getValues = function () {
	        if (this.currentValues != undefined) {
	            return this.currentValues;
	        }
	        else {
	            if (this.options.rangeSlider) {
	                return this.sliderRange.getValue();
	            }
	            else {
	                return [this.options.start, this.sliderButton.getValue()];
	            }
	        }
	    };
	    Slider.prototype.getCaptionFromValue = function (values) {
	        return this.sliderCaption.getCaptionFromValues(values);
	    };
	    Slider.prototype.getCaption = function () {
	        return this.sliderCaption.getCaption();
	    };
	    Slider.prototype.setValues = function (values) {
	        if (values != undefined) {
	            values[0] = Math.max(values[0], this.options.start);
	            values[1] = Math.min(values[1], this.options.end);
	        }
	        this.currentValues = values;
	        if (this.options.rangeSlider) {
	            this.sliderRange.setValue(values);
	            this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
	        }
	        else {
	            this.sliderButton.setValue(values[1]);
	            this.sliderLine.setActiveWidth(this.sliderButton);
	        }
	        this.displayCaption();
	    };
	    Slider.prototype.drawGraph = function (data) {
	        if (this.sliderGraph) {
	            this.sliderGraph.draw(data);
	        }
	    };
	    Slider.prototype.setButtonBoundary = function () {
	        this.sliderButton.leftBoundary = 0;
	        this.sliderButton.rightBoundary = this.element.clientWidth;
	    };
	    Slider.prototype.displayCaption = function () {
	        if (this.options.valueCaption != undefined) {
	            this.sliderCaption.setFromString(this.options.valueCaption(this.getValues()));
	        }
	        else if (this.options.percentCaption != undefined) {
	            this.sliderCaption.setFromString(this.options.percentCaption(this.getPercentPosition()));
	        }
	        else if (this.options.displayAsPercent != undefined && this.options.displayAsPercent.separator != undefined && this.options.displayAsPercent.enable) {
	            this.sliderCaption.setAsPercent();
	        }
	        else {
	            this.sliderCaption.setAsValue();
	        }
	    };
	    Slider.prototype.buildSteps = function () {
	        if (this.options.getSteps) {
	            this.steps = this.options.getSteps(this.options.start, this.options.end);
	        }
	        else {
	            if (this.options.steps > exports.MAX_NUMBER_OF_STEPS) {
	                new Logger_1.Logger(this).warn("Maximum number of steps for slider is " + exports.MAX_NUMBER_OF_STEPS + " for performance reason");
	                this.options.steps = exports.MAX_NUMBER_OF_STEPS;
	            }
	            var oneStep = (this.options.end - this.options.start) / Math.max(1, this.options.steps);
	            if (oneStep > 0) {
	                var currentStep = this.options.start;
	                var currentNumberOfSteps = 0;
	                while (currentStep <= this.options.end && currentNumberOfSteps <= exports.MAX_NUMBER_OF_STEPS) {
	                    this.steps.push(currentStep);
	                    currentStep += oneStep;
	                    currentNumberOfSteps++;
	                }
	            }
	            else {
	                this.steps.push(this.options.start);
	                this.steps.push(this.options.end);
	            }
	        }
	    };
	    return Slider;
	}());
	exports.Slider = Slider;
	var SliderLine = (function () {
	    function SliderLine(slider) {
	        this.slider = slider;
	    }
	    SliderLine.prototype.build = function () {
	        this.backGround = Dom_1.$$('div', {
	            className: 'coveo-slider-line coveo-background'
	        }).el;
	        this.activePart = Dom_1.$$('div', {
	            className: 'coveo-slider-line coveo-active'
	        }).el;
	        return [this.backGround, this.activePart];
	    };
	    SliderLine.prototype.setActiveWidth = function (buttonOne, buttonTwo) {
	        if (this.slider.options.rangeSlider) {
	            var width = (buttonTwo.getPercent() - buttonOne.getPercent()) * 100;
	            this.activePart.style.width = width + '%';
	            this.activePart.style.left = buttonOne.getPercent() * 100 + '%';
	            this.activePart.style.right = buttonTwo.getPercent() * 100 + '%';
	        }
	        else {
	            var width = buttonOne.getPercent() * 100;
	            this.activePart.style.width = width + '%';
	        }
	    };
	    return SliderLine;
	}());
	// This component relies heavily on mouse interaction, really difficult to test inside a UT context.
	// Ignore it
	/* istanbul ignore next */
	var SliderButton = (function () {
	    function SliderButton(slider, which) {
	        this.slider = slider;
	        this.which = which;
	        this.eventMouseDown = DeviceUtils_1.DeviceUtils.isMobileDevice() ? 'touchstart' : 'mousedown';
	        this.eventMouseMove = DeviceUtils_1.DeviceUtils.isMobileDevice() ? 'touchmove' : 'mousemove';
	        this.eventMouseUp = DeviceUtils_1.DeviceUtils.isMobileDevice() ? 'touchend' : 'mouseup';
	    }
	    SliderButton.prototype.build = function () {
	        this.element = Dom_1.$$('div', {
	            className: 'coveo-slider-button'
	        }).el;
	        this.bindEvents();
	        this.element['CoveoSliderButton'] = this;
	        return this.element;
	    };
	    SliderButton.prototype.toBeginning = function () {
	        this.element.style.left = '0%';
	    };
	    SliderButton.prototype.toEnd = function () {
	        this.element.style.left = '100%';
	    };
	    SliderButton.prototype.setValue = function (value) {
	        var percent = this.fromValueToPercent(value);
	        this.element.style.left = Math.round(percent * 100) + '%';
	    };
	    SliderButton.prototype.getPosition = function () {
	        var left = this.element.style.left;
	        if (left.indexOf('%') != -1) {
	            return (parseFloat(left) / 100) * this.slider.element.clientWidth;
	        }
	        else {
	            return parseFloat(left);
	        }
	    };
	    SliderButton.prototype.getPercent = function (position) {
	        if (position === void 0) { position = this.getPosition(); }
	        if (this.slider.element.clientWidth == 0) {
	            return 0;
	        }
	        return +(position / this.slider.element.clientWidth).toFixed(2);
	    };
	    SliderButton.prototype.getValue = function () {
	        var value = this.getPercent() * (this.slider.options.end - this.slider.options.start) + this.slider.options.start;
	        return value;
	    };
	    SliderButton.prototype.fromValueToPercent = function (value) {
	        return 1 - ((this.slider.options.end - value) / (this.slider.options.end - this.slider.options.start));
	    };
	    SliderButton.prototype.fromPositionToValue = function (position) {
	        var percent = this.getPercent(position);
	        return this.slider.options.start + (percent * (this.slider.options.end - this.slider.options.start));
	    };
	    SliderButton.prototype.fromValueToPosition = function (value) {
	        var percent = this.fromValueToPercent(value);
	        return this.slider.element.clientWidth * percent;
	    };
	    SliderButton.prototype.bindEvents = function () {
	        var _this = this;
	        Dom_1.$$(this.element).on(this.eventMouseDown, function (e) {
	            _this.handleStartSlide(e);
	        });
	        var doc = this.slider.options.document || document;
	        doc.addEventListener(this.eventMouseMove, function (e) {
	            if (_this.eventMouseMove == 'touchmove' && _this.isMouseDown) {
	                e.preventDefault();
	            }
	            _this.handleMoving(e);
	        });
	        doc.addEventListener(this.eventMouseUp, function () {
	            _this.handleEndSlide();
	        });
	    };
	    SliderButton.prototype.getUserSelect = function () {
	        if (document.body.style.msUserSelect !== undefined) {
	            return 'msUserSelect';
	        }
	        if (document.body.style.webkitUserSelect !== undefined) {
	            return 'webkitUserSelect';
	        }
	        if (document.body.style['MozUserSelect'] !== undefined) {
	            return 'MozUserSelect';
	        }
	        return 'userSelect';
	    };
	    SliderButton.prototype.handleStartSlide = function (e) {
	        var position = this.getMousePosition(e);
	        this.isMouseDown = true;
	        this.startPositionX = position.x;
	        this.lastElementLeft = (parseInt(this.element.style.left, 10) / 100) * this.slider.element.clientWidth;
	        this.origUserSelect = document.body.style[this.getUserSelect()];
	        this.origCursor = document.body.style.cursor;
	        document.body.style[this.getUserSelect()] = 'none';
	        document.body.style.cursor = 'pointer';
	        Dom_1.$$(this.element).addClass('coveo-active');
	        Dom_1.$$(this.element).trigger(SliderEvents_1.SliderEvents.startSlide, {
	            button: this,
	            slider: this.slider
	        });
	        e.stopPropagation();
	    };
	    SliderButton.prototype.handleMoving = function (e) {
	        if (this.isMouseDown) {
	            this.slider.onMoving();
	            this.updatePosition(e);
	            this.handleButtonNearEnd();
	            Dom_1.$$(this.element).trigger(SliderEvents_1.SliderEvents.duringSlide, {
	                button: this,
	                slider: this.slider
	            });
	        }
	    };
	    SliderButton.prototype.handleEndSlide = function () {
	        if (this.isMouseDown) {
	            document.body.style[this.getUserSelect()] = this.origUserSelect;
	            document.body.style.cursor = this.origCursor;
	            Dom_1.$$(this.element).removeClass('coveo-active');
	            Dom_1.$$(this.element).trigger(SliderEvents_1.SliderEvents.endSlide, {
	                button: this,
	                slider: this.slider
	            });
	        }
	        this.isMouseDown = false;
	    };
	    SliderButton.prototype.handleButtonNearEnd = function () {
	        if (this.which == 0) {
	            if (this.origZIndex == undefined) {
	                this.origZIndex = this.element.style.zIndex || '1';
	            }
	            if (this.currentPos > 90) {
	                this.element.style.zIndex = this.origZIndex + 1;
	            }
	            else {
	                this.element.style.zIndex = this.origZIndex;
	            }
	        }
	    };
	    SliderButton.prototype.getMousePosition = function (e) {
	        var posx = 0;
	        var posy = 0;
	        if (e['touches'] && e['touches'][0]) {
	            posx = e['touches'][0].pageX;
	            posy = e['touches'][0].pageY;
	        }
	        else if (e.pageX && e.pageY) {
	            posx = e.pageX;
	            posy = e.pageY;
	        }
	        else if (e.clientX && e.clientY) {
	            posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	            posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	        }
	        return { x: posx, y: posy };
	    };
	    SliderButton.prototype.updatePosition = function (e) {
	        var pos = this.getMousePosition(e);
	        var spanX = pos.x - this.startPositionX;
	        var currentValue;
	        this.currentPos = this.lastElementLeft + spanX;
	        if (this.slider.options.steps || this.slider.options.getSteps) {
	            var snapResult = this.snapToStep(spanX);
	            this.currentPos = snapResult.position;
	            currentValue = snapResult.value;
	        }
	        this.currentPos = Math.max(this.leftBoundary, this.currentPos);
	        this.currentPos = Math.min(this.rightBoundary, this.currentPos);
	        this.currentPos = this.getPercent(this.currentPos) * 100;
	        this.currentPos = Math.min(this.currentPos, 100);
	        this.currentPos = Math.max(this.currentPos, 0);
	        this.element.style.left = Math.round(this.currentPos) + '%';
	        if (this.slider.options.steps || this.slider.options.getSteps) {
	            this.slider.currentValues[this.which] = currentValue;
	        }
	        else {
	            this.slider.currentValues[this.which] = this.getValue();
	        }
	    };
	    SliderButton.prototype.snapToStep = function (spanX) {
	        var _this = this;
	        var diffs = _.map(this.slider.steps, function (step, i) {
	            return Math.abs(_this.currentPos - _this.fromValueToPosition(_this.slider.steps[i]));
	        });
	        var diffsNext = _.map(this.slider.steps, function (step, i) {
	            return Math.abs(_this.rightBoundary - _this.fromValueToPosition(_this.slider.steps[i]));
	        });
	        var diffsPrev = _.map(this.slider.steps, function (step, i) {
	            return Math.abs(_this.leftBoundary - _this.fromValueToPosition(_this.slider.steps[i]));
	        });
	        var nearest = _.min(diffs);
	        var nearestNext = _.min(diffsNext);
	        var nearestPrevious = _.min(diffsPrev);
	        var currentStep = this.slider.steps[_.indexOf(diffs, nearest)];
	        var nextStep = this.slider.steps[_.indexOf(diffsNext, nearestNext)];
	        var previousStep = this.slider.steps[_.indexOf(diffsPrev, nearestPrevious)];
	        currentStep = Math.min(currentStep, nextStep);
	        currentStep = Math.max(currentStep, previousStep);
	        return { position: this.fromValueToPosition(currentStep), value: currentStep };
	    };
	    return SliderButton;
	}());
	exports.SliderButton = SliderButton;
	var SliderRange = (function () {
	    function SliderRange(slider) {
	        this.slider = slider;
	        this.firstButton = new SliderButton(slider, 0);
	        this.secondButton = new SliderButton(slider, 1);
	    }
	    SliderRange.prototype.build = function () {
	        var firstElem = this.firstButton.build();
	        var secondElem = this.secondButton.build();
	        Dom_1.$$(secondElem).addClass('coveo-range-button');
	        return [firstElem, secondElem];
	    };
	    SliderRange.prototype.initializeSliderRangeState = function (values) {
	        if (values == undefined) {
	            this.firstButton.toBeginning();
	            this.secondButton.toEnd();
	        }
	        else {
	            this.firstButton.setValue(values[0]);
	            this.secondButton.setValue(values[1]);
	        }
	        this.setBoundary();
	    };
	    SliderRange.prototype.setValue = function (values) {
	        this.firstButton.setValue(values[0]);
	        this.secondButton.setValue(values[1]);
	    };
	    SliderRange.prototype.setBoundary = function () {
	        this.firstButton.leftBoundary = 0;
	        this.firstButton.rightBoundary = this.secondButton.getPosition();
	        this.secondButton.leftBoundary = this.firstButton.getPosition();
	        this.secondButton.rightBoundary = this.slider.element.clientWidth;
	    };
	    SliderRange.prototype.getPosition = function () {
	        return [this.firstButton.getPosition(), this.secondButton.getPosition()];
	    };
	    SliderRange.prototype.getPercentPosition = function () {
	        return [this.firstButton.getPercent(), this.secondButton.getPercent()];
	    };
	    SliderRange.prototype.getValue = function () {
	        return [this.firstButton.getValue(), this.secondButton.getValue()];
	    };
	    return SliderRange;
	}());
	var SliderCaption = (function () {
	    function SliderCaption(slider) {
	        this.slider = slider;
	        this.separator = '-';
	        this.unitSign = '';
	        if (this.slider.options.displayAsPercent && this.slider.options.displayAsPercent.enable) {
	            this.separator = this.slider.options.displayAsPercent.separator != undefined ? this.slider.options.displayAsPercent.separator : this.separator;
	        }
	        else if (this.slider.options.displayAsValue && this.slider.options.displayAsValue.enable) {
	            this.separator = this.slider.options.displayAsValue.separator != undefined ? this.slider.options.displayAsValue.separator : this.separator;
	            this.unitSign = this.slider.options.displayAsValue.unitSign != undefined ? this.slider.options.displayAsValue.unitSign : this.unitSign;
	        }
	    }
	    SliderCaption.prototype.build = function () {
	        this.caption = Dom_1.$$('div', {
	            className: 'coveo-slider-caption'
	        }).el;
	        return this.caption;
	    };
	    SliderCaption.prototype.getCaption = function () {
	        return Dom_1.$$(this.caption).text();
	    };
	    SliderCaption.prototype.getCaptionFromValues = function (values) {
	        return this.getValueCaption(values);
	    };
	    SliderCaption.prototype.getCaptionFromValuesAsPercent = function (values) {
	        return this.getValueCaption(values);
	    };
	    SliderCaption.prototype.setAsValue = function () {
	        Dom_1.$$(this.caption).text(this.getValueCaption());
	    };
	    SliderCaption.prototype.setAsPercent = function () {
	        var values = this.slider.getPercentPosition();
	        Dom_1.$$(this.caption).text([(values[0] * 100).toFixed(this.slider.options.rounded), '%', this.separator, (values[1] * 100).toFixed(this.slider.options.rounded), '%'].join(' '));
	    };
	    SliderCaption.prototype.setFromString = function (str) {
	        Dom_1.$$(this.caption).text(str);
	    };
	    SliderCaption.prototype.getValueCaption = function (values) {
	        if (values === void 0) { values = this.slider.getValues(); }
	        var first = values[0];
	        var second = values[1];
	        if (this.slider.options.dateField) {
	            var firstAsDate = new Date(first);
	            var secondAsDate = new Date(second);
	            firstAsDate.setHours(0, 0, 0, 0);
	            secondAsDate.setHours(0, 0, 0, 0);
	            first = Globalize.format(firstAsDate, this.slider.options.dateFormat || 'MMM dd, yyyy');
	            second = Globalize.format(secondAsDate, this.slider.options.dateFormat || 'MMM dd, yyyy');
	            this.unitSign = '';
	        }
	        else {
	            first = first.toFixed(this.slider.options.rounded);
	            second = second.toFixed(this.slider.options.rounded);
	        }
	        return [first, this.unitSign, this.separator, second, this.unitSign].join(' ');
	    };
	    return SliderCaption;
	}());
	var SliderGraph = (function () {
	    function SliderGraph(slider) {
	        this.slider = slider;
	        this.svg = d3.select(slider.element).append('svg').append('g');
	        this.x = d3Scale.scaleBand();
	        this.y = d3Scale.scaleLinear();
	        this.slider.options.graph.margin = Utils_1.Utils.extendDeep({
	            top: 20,
	            right: 0,
	            left: 0,
	            bottom: 20
	        }, this.slider.options.graph.margin || {});
	        this.slider.options.graph.animationDuration = this.slider.options.graph.animationDuration || 500;
	        this.tooltip = Dom_1.$$('div', {
	            className: 'coveo-slider-tooltip'
	        }).el;
	        this.tooltip.style.display = 'none';
	        this.slider.element.appendChild(this.tooltip);
	        this.slider.options.graph.steps = this.slider.options.graph.steps || 10;
	    }
	    SliderGraph.prototype.draw = function (data) {
	        if (data === void 0) { data = this.oldData; }
	        if (data) {
	            if (data != this.oldData) {
	                // only modify the data if it's new
	                data = this.modifyPossibleSinglePointDataIntoValidRange(data);
	            }
	            var sliderOuterWidth = this.slider.element.offsetWidth;
	            var sliderOuterHeight = this.slider.element.offsetHeight;
	            var width = sliderOuterWidth - this.slider.options.graph.margin.left - this.slider.options.graph.margin.right;
	            var height = sliderOuterHeight - this.slider.options.graph.margin.top - this.slider.options.graph.margin.bottom;
	            if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {
	                this.applyTransformOnSvg(width, height);
	                this.setXAndYRange(width, height);
	                this.setXAndYDomain(data);
	                var bars = this.svg.selectAll('.coveo-bar').data(data);
	                var currentSliderValues = this.slider.getValues();
	                this.renderGraphBars(bars, width, height, currentSliderValues);
	                this.setGraphBarsTransition(bars, height, currentSliderValues);
	            }
	            this.oldData = data;
	        }
	    };
	    SliderGraph.prototype.modifyPossibleSinglePointDataIntoValidRange = function (data) {
	        var _this = this;
	        return _.map(data, function (d) {
	            // In some rare corner case, the index can return range values where the start of the data is equal to the end of the data
	            // Since it's a "point" as opposed to a real range, it's impossible to display this properly on a graph (where the range is the x axis)
	            // An element in a graph with with 0 width on the x axis is illogical and cannot work.
	            // In those case, we must "widen" the x range. Instead of adding an arbitrary value (like +1 to end, for example), we need something that won't make the range super small to click on.
	            // We use the total width available, and subtract half a step at the beginning, and add half a step at the end
	            if (d.start == d.end) {
	                var oneStep = (_this.slider.options.end - _this.slider.options.start) / _this.slider.options.graph.steps;
	                d.start = Math.round(d.start - oneStep / 2);
	                d.end = Math.round(d.end + oneStep / 2);
	            }
	            return d;
	        });
	    };
	    SliderGraph.prototype.setXAndYRange = function (width, height) {
	        this.x.range([0, width]);
	        this.x.padding(0.2);
	        this.y.range([height - this.slider.options.graph.margin.top, 0]);
	    };
	    SliderGraph.prototype.setXAndYDomain = function (data) {
	        this.padGraphWithEmptyData(data);
	        this.x.domain(_.map(data, function (d) {
	            return d.start;
	        }));
	        this.y.domain([0, d3.max(data, function (d) {
	                return d.y;
	            })]);
	    };
	    SliderGraph.prototype.padGraphWithEmptyData = function (data) {
	        var oneStepOfGraph = data[0].end - data[0].start;
	        this.padBeginningOfGraphWithEmptyData(data, oneStepOfGraph);
	        this.padEndOfGraphWithEmptyData(data, oneStepOfGraph);
	    };
	    SliderGraph.prototype.padBeginningOfGraphWithEmptyData = function (data, oneStepOfGraph) {
	        if (data[0].start > this.slider.options.start && data[0].start > oneStepOfGraph) {
	            var difToFillAtStart = data[0].start - this.slider.options.start;
	            var nbOfStepsAtStart = Math.round(difToFillAtStart / oneStepOfGraph);
	            var currentStep = data[0].start;
	            for (var i = nbOfStepsAtStart; i > 0; i--) {
	                data.unshift({ start: currentStep - oneStepOfGraph, end: currentStep, y: 0 });
	                currentStep -= oneStepOfGraph;
	            }
	        }
	    };
	    SliderGraph.prototype.padEndOfGraphWithEmptyData = function (data, oneStepOfGraph) {
	        var lastDataIndex = data.length - 1;
	        if (data[lastDataIndex].end < this.slider.options.end) {
	            var diffToFillAtEnd = this.slider.options.end - data[lastDataIndex].end;
	            var nbOfStepsAtEnd = Math.round(diffToFillAtEnd / oneStepOfGraph);
	            var currentStep = data[lastDataIndex].end;
	            for (var i = 0; i < nbOfStepsAtEnd; i++) {
	                data.push({ start: currentStep, end: currentStep + oneStepOfGraph, y: 0 });
	                currentStep += oneStepOfGraph;
	            }
	        }
	    };
	    SliderGraph.prototype.applyTransformOnSvg = function (width, height) {
	        var svg = Dom_1.$$(this.slider.element).find('svg');
	        svg.setAttribute('width', width + 'px');
	        svg.setAttribute('height', height + 'px');
	        this.svg.attr('transform', 'translate(' + this.slider.options.graph.margin.left + ',' + this.slider.options.graph.margin.top + ')');
	    };
	    SliderGraph.prototype.renderGraphBars = function (bars, width, height, currentSliderValues) {
	        bars.enter().append('rect')
	            .attr('class', this.getFunctionForClass(currentSliderValues))
	            .attr('width', this.x.bandwidth())
	            .attr('height', this.getFunctionForHeight(height))
	            .attr('x', this.getFunctionForX())
	            .attr('y', this.getFunctionForY())
	            .on('click', this.getFunctionForClick())
	            .on('mouseover', this.getFunctionForMouseOver(height))
	            .on('mouseout', this.getFunctionForMouseOut());
	    };
	    SliderGraph.prototype.setGraphBarsTransition = function (bars, height, currentSliderValues) {
	        bars
	            .transition()
	            .attr('x', this.getFunctionForX())
	            .attr('width', this.x.bandwidth())
	            .attr('class', this.getFunctionForClass(currentSliderValues))
	            .transition()
	            .duration(this.slider.options.graph.animationDuration)
	            .attr('y', this.getFunctionForY())
	            .attr('height', this.getFunctionForHeight(height));
	    };
	    SliderGraph.prototype.getBarClass = function (currentSliderValues, d, i) {
	        if (d.start >= currentSliderValues[0] && d.end <= currentSliderValues[1]) {
	            return 'coveo-active';
	        }
	        else if (currentSliderValues[0] == this.slider.options.start && i == 0) {
	            return 'coveo-active';
	        }
	        else if (currentSliderValues[1] == this.slider.options.end && i == this.slider.options.graph.steps - 1) {
	            return 'coveo-active';
	        }
	        else {
	            return '';
	        }
	    };
	    SliderGraph.prototype.setTooltip = function (d, height) {
	        var caption = Dom_1.$$('span', {
	            className: 'coveo-caption'
	        });
	        caption.text(this.slider.getCaptionFromValue([d.start, d.end]));
	        var count = Dom_1.$$('span', {
	            className: 'coveo-count'
	        });
	        count.text(d.y.toString());
	        Dom_1.$$(this.tooltip).empty();
	        this.tooltip.appendChild(caption.el);
	        this.tooltip.appendChild(count.el);
	        this.tooltip.style.display = 'block';
	        this.tooltip.style.left = (this.x(d.start) - (0.2 * this.slider.options.graph.steps)) + 'px';
	        this.tooltip.style.top = (this.y(d.y) - height) + 'px';
	    };
	    SliderGraph.prototype.getFunctionForX = function () {
	        var _this = this;
	        return function (d) {
	            return _this.x(d.start);
	        };
	    };
	    SliderGraph.prototype.getFunctionForY = function () {
	        var _this = this;
	        return function (d) {
	            return _this.y(d.y);
	        };
	    };
	    SliderGraph.prototype.getFunctionForHeight = function (height) {
	        var _this = this;
	        return function (d) {
	            return height - _this.y(d.y);
	        };
	    };
	    SliderGraph.prototype.getFunctionForClass = function (currentSliderValues) {
	        var _this = this;
	        return function (d, i) {
	            return 'coveo-bar ' + _this.getBarClass(currentSliderValues, d, i);
	        };
	    };
	    SliderGraph.prototype.getFunctionForClick = function () {
	        var _this = this;
	        return function (d, i) {
	            Dom_1.$$(_this.slider.element).trigger(SliderEvents_1.SliderEvents.graphValueSelected, {
	                start: d.start,
	                end: d.end,
	                value: d.y
	            });
	        };
	    };
	    SliderGraph.prototype.getFunctionForMouseOver = function (height) {
	        var _this = this;
	        return function (d) {
	            _this.setTooltip(d, height);
	        };
	    };
	    SliderGraph.prototype.getFunctionForMouseOut = function () {
	        var _this = this;
	        return function () {
	            _this.tooltip.style.display = 'none';
	        };
	    };
	    return SliderGraph;
	}());


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-scale/ Version 1.0.5. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(148), __webpack_require__(149), __webpack_require__(150), __webpack_require__(152), __webpack_require__(153), __webpack_require__(154), __webpack_require__(151)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-collection', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format', 'd3-color'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Array,d3Collection,d3Interpolate,d3Format,d3Time,d3TimeFormat,d3Color) { 'use strict';
	
	var array = Array.prototype;
	
	var map$1 = array.map;
	var slice = array.slice;
	
	var implicit = {name: "implicit"};
	
	function ordinal(range$$1) {
	  var index = d3Collection.map(),
	      domain = [],
	      unknown = implicit;
	
	  range$$1 = range$$1 == null ? [] : slice.call(range$$1);
	
	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range$$1[(i - 1) % range$$1.length];
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = d3Collection.map();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), scale) : range$$1.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range$$1)
	        .unknown(unknown);
	  };
	
	  return scale;
	}
	
	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;
	
	  delete scale.unknown;
	
	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = d3Array.range(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };
	
	  scale.bandwidth = function() {
	    return bandwidth;
	  };
	
	  scale.step = function() {
	    return step;
	  };
	
	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };
	
	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };
	
	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };
	
	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };
	
	  return rescale();
	}
	
	function pointish(scale) {
	  var copy = scale.copy;
	
	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;
	
	  scale.copy = function() {
	    return pointish(copy());
	  };
	
	  return scale;
	}
	
	function point() {
	  return pointish(band().paddingInner(1));
	}
	
	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var number = function(x) {
	  return +x;
	};
	
	var unit = [0, 1];
	
	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant(b);
	}
	
	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}
	
	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}
	
	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}
	
	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;
	
	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }
	
	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }
	
	  return function(x) {
	    var i = d3Array.bisect(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}
	
	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}
	
	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = d3Interpolate.interpolate,
	      clamp = false,
	      piecewise,
	      output,
	      input;
	
	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }
	
	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }
	
	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$1.call(_, number), rescale()) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = slice.call(_), interpolate$$1 = d3Interpolate.interpolateRound, rescale();
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };
	
	  return rescale();
	}
	
	var tickFormat = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = d3Array.tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
	      return d3Format.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return d3Format.format(specifier);
	};
	
	function linearish(scale) {
	  var domain = scale.domain;
	
	  scale.ticks = function(count) {
	    var d = domain();
	    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };
	
	  scale.nice = function(count) {
	    var d = domain(),
	        i = d.length - 1,
	        n = count == null ? 10 : count,
	        start = d[0],
	        stop = d[i],
	        step = d3Array.tickStep(start, stop, n);
	
	    if (step) {
	      step = d3Array.tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
	      d[0] = Math.floor(start / step) * step;
	      d[i] = Math.ceil(stop / step) * step;
	      domain(d);
	    }
	
	    return scale;
	  };
	
	  return scale;
	}
	
	function linear() {
	  var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber);
	
	  scale.copy = function() {
	    return copy(scale, linear());
	  };
	
	  return linearish(scale);
	}
	
	function identity() {
	  var domain = [0, 1];
	
	  function scale(x) {
	    return +x;
	  }
	
	  scale.invert = scale;
	
	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$1.call(_, number), scale) : domain.slice();
	  };
	
	  scale.copy = function() {
	    return identity().domain(domain);
	  };
	
	  return linearish(scale);
	}
	
	var nice = function(domain, interval) {
	  domain = domain.slice();
	
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;
	
	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }
	
	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};
	
	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant(b);
	}
	
	function reinterpolate(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}
	
	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}
	
	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}
	
	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}
	
	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}
	
	function log() {
	  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);
	
	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }
	
	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	
	    if (r = v < u) i = u, u = v, v = i;
	
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];
	
	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
	    }
	
	    return r ? z.reverse() : z;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };
	
	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };
	
	  scale.copy = function() {
	    return copy(scale, log().base(base));
	  };
	
	  return scale;
	}
	
	function raise(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}
	
	function pow() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;
	
	  function deinterpolate(a, b) {
	    return (b = raise(b, exponent) - (a = raise(a, exponent)))
	        ? function(x) { return (raise(x, exponent) - a) / b; }
	        : constant(b);
	  }
	
	  function reinterpolate(a, b) {
	    b = raise(b, exponent) - (a = raise(a, exponent));
	    return function(t) { return raise(a + b * t, 1 / exponent); };
	  }
	
	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };
	
	  scale.copy = function() {
	    return copy(scale, pow().exponent(exponent));
	  };
	
	  return linearish(scale);
	}
	
	function sqrt() {
	  return pow().exponent(0.5);
	}
	
	function quantile$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];
	
	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
	    return scale;
	  }
	
	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[d3Array.bisect(thresholds, x)];
	  }
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(d3Array.ascending);
	    return rescale();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.quantiles = function() {
	    return thresholds.slice();
	  };
	
	  scale.copy = function() {
	    return quantile$1()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	function quantize() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];
	
	  function scale(x) {
	    if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
	  }
	
	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice.call(_)).length - 1, rescale()) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return quantize()
	        .domain([x0, x1])
	        .range(range$$1);
	  };
	
	  return linearish(scale);
	}
	
	function threshold() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;
	
	  function scale(x) {
	    if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return threshold()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;
	
	function date(t) {
	  return new Date(t);
	}
	
	function number$1(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}
	
	function calendar(year, month, week, day, hour, minute, second, millisecond, format$$1) {
	  var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber),
	      invert = scale.invert,
	      domain = scale.domain;
	
	  var formatMillisecond = format$$1(".%L"),
	      formatSecond = format$$1(":%S"),
	      formatMinute = format$$1("%I:%M"),
	      formatHour = format$$1("%I %p"),
	      formatDay = format$$1("%a %d"),
	      formatWeek = format$$1("%b %d"),
	      formatMonth = format$$1("%B"),
	      formatYear = format$$1("%Y");
	
	  var tickIntervals = [
	    [second,  1,      durationSecond],
	    [second,  5,  5 * durationSecond],
	    [second, 15, 15 * durationSecond],
	    [second, 30, 30 * durationSecond],
	    [minute,  1,      durationMinute],
	    [minute,  5,  5 * durationMinute],
	    [minute, 15, 15 * durationMinute],
	    [minute, 30, 30 * durationMinute],
	    [  hour,  1,      durationHour  ],
	    [  hour,  3,  3 * durationHour  ],
	    [  hour,  6,  6 * durationHour  ],
	    [  hour, 12, 12 * durationHour  ],
	    [   day,  1,      durationDay   ],
	    [   day,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month,  1,      durationMonth ],
	    [ month,  3,  3 * durationMonth ],
	    [  year,  1,      durationYear  ]
	  ];
	
	  function tickFormat(date) {
	    return (second(date) < date ? formatMillisecond
	        : minute(date) < date ? formatSecond
	        : hour(date) < date ? formatMinute
	        : day(date) < date ? formatHour
	        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year(date) < date ? formatMonth
	        : formatYear)(date);
	  }
	
	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;
	
	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = d3Array.tickStep(start, stop, interval);
	        interval = millisecond;
	      }
	    }
	
	    return step == null ? interval : interval.every(step);
	  }
	
	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? domain(map$1.call(_, number$1)) : domain().map(date);
	  };
	
	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format$$1(specifier);
	  };
	
	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };
	
	  scale.copy = function() {
	    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format$$1));
	  };
	
	  return scale;
	}
	
	var time = function() {
	  return calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};
	
	var utcTime = function() {
	  return calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};
	
	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};
	
	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
	
	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
	
	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
	
	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
	
	var cubehelix$1 = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));
	
	var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));
	
	var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));
	
	var rainbow = d3Color.cubehelix();
	
	var rainbow$1 = function(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	};
	
	function ramp(range$$1) {
	  var n = range$$1.length;
	  return function(t) {
	    return range$$1[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}
	
	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
	
	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
	
	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
	
	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
	
	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;
	
	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };
	
	  return linearish(scale);
	}
	
	exports.scaleBand = band;
	exports.scalePoint = point;
	exports.scaleIdentity = identity;
	exports.scaleLinear = linear;
	exports.scaleLog = log;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow;
	exports.scaleSqrt = sqrt;
	exports.scaleQuantile = quantile$1;
	exports.scaleQuantize = quantize;
	exports.scaleThreshold = threshold;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.schemeCategory10 = category10;
	exports.schemeCategory20b = category20b;
	exports.schemeCategory20c = category20c;
	exports.schemeCategory20 = category20;
	exports.interpolateCubehelixDefault = cubehelix$1;
	exports.interpolateRainbow = rainbow$1;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;
	exports.scaleSequential = sequential;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-array/ Version 1.2.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};
	
	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};
	
	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}
	
	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;
	
	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};
	
	function pair(a, b) {
	  return [a, b];
	}
	
	var cross = function(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;
	
	  if (reduce == null) reduce = pair;
	
	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }
	
	  return values;
	};
	
	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};
	
	var number = function(x) {
	  return x === null ? NaN : +x;
	};
	
	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  if (m > 1) return sum / (m - 1);
	};
	
	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};
	
	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return [min, max];
	};
	
	var array = Array.prototype;
	
	var slice = array.slice;
	var map = array.map;
	
	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var identity = function(x) {
	  return x;
	};
	
	var range = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);
	
	  while (++i < n) {
	    range[i] = start + i * step;
	  }
	
	  return range;
	};
	
	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);
	
	var ticks = function(start, stop, count) {
	  var reverse = stop < start,
	      i = -1,
	      n,
	      ticks,
	      step;
	
	  if (reverse) n = start, start = stop, stop = n;
	
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
	
	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }
	
	  if (reverse) ticks.reverse();
	
	  return ticks;
	};
	
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}
	
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}
	
	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};
	
	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;
	
	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);
	
	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }
	
	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }
	
	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;
	
	    var bins = new Array(m + 1),
	        bin;
	
	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }
	
	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }
	
	    return bins;
	  }
	
	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };
	
	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };
	
	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };
	
	  return histogram;
	};
	
	var quantile = function(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};
	
	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};
	
	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};
	
	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return max;
	};
	
	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }
	
	  if (m) return sum / m;
	};
	
	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  return quantile(numbers.sort(ascending), 0.5);
	};
	
	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;
	
	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);
	
	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }
	
	  return merged;
	};
	
	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  return min;
	};
	
	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};
	
	var scan = function(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];
	
	  if (compare == null) compare = ascending;
	
	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }
	
	  if (compare(xj, xj) === 0) return j;
	};
	
	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;
	
	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }
	
	  return array;
	};
	
	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }
	
	  return sum;
	};
	
	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};
	
	function length(d) {
	  return d.length;
	}
	
	var zip = function() {
	  return transpose(arguments);
	};
	
	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = quantile;
	exports.range = range;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-collection/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var prefix = "$";
	
	function Map() {}
	
	Map.prototype = map.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};
	
	function map(object, f) {
	  var map = new Map;
	
	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });
	
	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;
	
	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }
	
	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);
	
	  return map;
	}
	
	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;
	
	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) return rollup != null
	        ? rollup(array) : (sortValues != null
	        ? array.sort(sortValues)
	        : array);
	
	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map(),
	        values,
	        result = createResult();
	
	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }
	
	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });
	
	    return result;
	  }
	
	  function entries(map$$1, depth) {
	    if (++depth > keys.length) return map$$1;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map$$1.entries();
	    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }
	
	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};
	
	function createObject() {
	  return {};
	}
	
	function setObject(object, key, value) {
	  object[key] = value;
	}
	
	function createMap() {
	  return map();
	}
	
	function setMap(map$$1, key, value) {
	  map$$1.set(key, value);
	}
	
	function Set() {}
	
	var proto = map.prototype;
	
	Set.prototype = set.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};
	
	function set(object, f) {
	  var set = new Set;
	
	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });
	
	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }
	
	  return set;
	}
	
	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};
	
	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};
	
	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};
	
	exports.nest = nest;
	exports.set = set;
	exports.map = map;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-interpolate/ Version 1.1.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(151)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Color) { 'use strict';
	
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}
	
	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}
	
	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	
	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
	}
	
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
	  };
	}
	
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
	}
	
	var rgb$1 = ((function rgbGamma(y) {
	  var color$$1 = gamma(y);
	
	  function rgb$$1(start, end) {
	    var r = color$$1((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	
	  rgb$$1.gamma = rgbGamma;
	
	  return rgb$$1;
	}))(1);
	
	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = d3Color.rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}
	
	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);
	
	var array = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(nb),
	      c = new Array(nb),
	      i;
	
	  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];
	
	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};
	
	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};
	
	var number = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};
	
	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;
	
	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};
	
	  for (k in b) {
	    if (k in a) {
	      i[k] = value(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }
	
	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};
	
	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");
	
	function zero(b) {
	  return function() {
	    return b;
	  };
	}
	
	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}
	
	var string = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators
	
	  // Coerce inputs to strings.
	  a = a + "", b = b + "";
	
	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: number(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }
	
	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }
	
	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};
	
	var value = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant(b)
	      : (t === "number" ? number
	      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb$1) : string)
	      : b instanceof d3Color.color ? rgb$1
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array
	      : isNaN(b) ? object
	      : number)(a, b);
	};
	
	var round = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};
	
	var degrees = 180 / Math.PI;
	
	var identity = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	
	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};
	
	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;
	
	function parseCss(value) {
	  if (value === "none") return identity;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	
	function parseSvg(value) {
	  if (value == null) return identity;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}
	
	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }
	
	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }
	
	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }
	
	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }
	
	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }
	
	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}
	
	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
	
	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;
	
	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}
	
	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}
	
	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}
	
	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var zoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;
	
	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }
	
	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }
	
	  i.duration = S * 1000;
	
	  return i;
	};
	
	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);
	
	function lab$1(start, end) {
	  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}
	
	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);
	
	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;
	
	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }
	
	    cubehelix$$1.gamma = cubehelixGamma;
	
	    return cubehelix$$1;
	  })(1);
	}
	
	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);
	
	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};
	
	exports.interpolate = value;
	exports.interpolateArray = array;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = number;
	exports.interpolateObject = object;
	exports.interpolateRound = round;
	exports.interpolateString = string;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = zoom;
	exports.interpolateRgb = rgb$1;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-color/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};
	
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}
	
	function Color() {}
	
	var darker = 0.7;
	var brighter = 1 / darker;
	
	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	
	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});
	
	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}
	
	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}
	
	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}
	
	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	
	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}
	
	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}
	
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));
	
	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}
	
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;
	
	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;
	
	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}
	
	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}
	
	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));
	
	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}
	
	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}
	
	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}
	
	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}
	
	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}
	
	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));
	
	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;
	
	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}
	
	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));
	
	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.cubehelix = cubehelix;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-format/ Version 1.2.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);
	
	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};
	
	var exponent = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};
	
	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;
	
	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }
	
	    return t.reverse().join(thousands);
	  };
	};
	
	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};
	
	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);
	
	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }
	
	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};
	
	var prefixExponent;
	
	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};
	
	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};
	
	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};
	
	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
	
	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}
	
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
	
	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	
	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";
	
	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";
	
	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";
	
	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";
	
	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}
	
	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};
	
	var identity = function(x) {
	  return x;
	};
	
	var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];
	
	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,
	      percent = locale.percent || "%";
	
	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;
	
	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";
	
	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);
	
	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));
	
	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;
	
	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;
	
	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);
	
	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;
	
	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");
	
	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }
	
	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);
	
	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";
	
	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
	
	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }
	
	      return numerals(value);
	    }
	
	    format.toString = function() {
	      return specifier + "";
	    };
	
	    return format;
	  }
	
	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }
	
	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};
	
	var locale;
	
	
	
	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	
	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  exports.format = locale.format;
	  exports.formatPrefix = locale.formatPrefix;
	  return locale;
	}
	
	var precisionFixed = function(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	};
	
	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	};
	
	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	};
	
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time/ Version 1.0.6. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var t0 = new Date;
	var t1 = new Date;
	
	function newInterval(floori, offseti, count, field) {
	
	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }
	
	  interval.floor = interval;
	
	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };
	
	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };
	
	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };
	
	  interval.range = function(start, stop, step) {
	    var range = [];
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
	    return range;
	  };
	
	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
	    });
	  };
	
	  if (count) {
	    interval.count = function(start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };
	
	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }
	
	  return interval;
	}
	
	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});
	
	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	
	var milliseconds = millisecond.range;
	
	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;
	
	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond) * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	
	var seconds = second.range;
	
	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute) * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});
	
	var minutes = minute.range;
	
	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
	  if (offset < 0) offset += durationHour;
	  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});
	
	var hours = hour.range;
	
	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});
	
	var days = day.range;
	
	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}
	
	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);
	
	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;
	
	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	
	var months = month.range;
	
	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});
	
	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	
	var years = year.range;
	
	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	
	var utcMinutes = utcMinute.range;
	
	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});
	
	var utcHours = utcHour.range;
	
	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	
	var utcDays = utcDay.range;
	
	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}
	
	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);
	
	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;
	
	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	
	var utcMonths = utcMonth.range;
	
	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});
	
	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	
	var utcYears = utcYear.range;
	
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time-format/ Version 2.0.5. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(153)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Time) { 'use strict';
	
	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}
	
	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}
	
	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}
	
	function formatLocale(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "S": formatSeconds,
	    "U": formatWeekNumberSunday,
	    "w": formatWeekdayNumber,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "S": formatUTCSeconds,
	    "U": formatUTCWeekNumberSunday,
	    "w": formatUTCWeekdayNumber,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "S": parseSeconds,
	    "U": parseWeekNumberSunday,
	    "w": parseWeekdayNumber,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };
	
	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);
	
	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	
	      if (!(date instanceof Date)) date = new Date(+date);
	
	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }
	
	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }
	
	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0);
	      if (i != string.length) return null;
	
	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;
	
	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	        var day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
	      }
	
	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }
	
	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }
	
	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;
	
	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }
	
	    return j;
	  }
	
	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }
	
	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }
	
	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }
	
	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }
	
	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }
	
	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }
	
	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }
	
	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }
	
	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }
	
	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }
	
	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }
	
	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }
	
	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }
	
	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}
	
	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	
	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}
	
	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}
	
	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}
	
	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}
	
	function parseWeekdayNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}
	
	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}
	
	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}
	
	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}
	
	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}
	
	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}
	
	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}
	
	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}
	
	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}
	
	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}
	
	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}
	
	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}
	
	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}
	
	function formatDayOfYear(d, p) {
	  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
	}
	
	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}
	
	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}
	
	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}
	
	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}
	
	function formatWeekNumberSunday(d, p) {
	  return pad(d3Time.timeSunday.count(d3Time.timeYear(d), d), p, 2);
	}
	
	function formatWeekdayNumber(d) {
	  return d.getDay();
	}
	
	function formatWeekNumberMonday(d, p) {
	  return pad(d3Time.timeMonday.count(d3Time.timeYear(d), d), p, 2);
	}
	
	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}
	
	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}
	
	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}
	
	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}
	
	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}
	
	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}
	
	function formatUTCDayOfYear(d, p) {
	  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
	}
	
	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}
	
	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}
	
	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}
	
	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}
	
	function formatUTCWeekNumberSunday(d, p) {
	  return pad(d3Time.utcSunday.count(d3Time.utcYear(d), d), p, 2);
	}
	
	function formatUTCWeekdayNumber(d) {
	  return d.getUTCDay();
	}
	
	function formatUTCWeekNumberMonday(d, p) {
	  return pad(d3Time.utcMonday.count(d3Time.utcYear(d), d), p, 2);
	}
	
	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}
	
	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}
	
	function formatUTCZone() {
	  return "+0000";
	}
	
	function formatLiteralPercent() {
	  return "%";
	}
	
	var locale$1;
	
	
	
	
	
	defaultLocale({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	
	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  exports.timeFormat = locale$1.format;
	  exports.timeParse = locale$1.parse;
	  exports.utcFormat = locale$1.utcFormat;
	  exports.utcParse = locale$1.utcParse;
	  return locale$1;
	}
	
	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
	
	function formatIsoNative(date) {
	  return date.toISOString();
	}
	
	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);
	
	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}
	
	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);
	
	exports.timeFormatDefaultLocale = defaultLocale;
	exports.timeFormatLocale = formatLocale;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org Version 4.8.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var version = "4.8.0";
	
	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};
	
	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};
	
	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}
	
	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;
	
	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};
	
	function pair(a, b) {
	  return [a, b];
	}
	
	var cross = function(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;
	
	  if (reduce == null) reduce = pair;
	
	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }
	
	  return values;
	};
	
	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};
	
	var number = function(x) {
	  return x === null ? NaN : +x;
	};
	
	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  if (m > 1) return sum / (m - 1);
	};
	
	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};
	
	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return [min, max];
	};
	
	var array = Array.prototype;
	
	var slice = array.slice;
	var map = array.map;
	
	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var identity = function(x) {
	  return x;
	};
	
	var sequence = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);
	
	  while (++i < n) {
	    range[i] = start + i * step;
	  }
	
	  return range;
	};
	
	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);
	
	var ticks = function(start, stop, count) {
	  var reverse = stop < start,
	      i = -1,
	      n,
	      ticks,
	      step;
	
	  if (reverse) n = start, start = stop, stop = n;
	
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
	
	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }
	
	  if (reverse) ticks.reverse();
	
	  return ticks;
	};
	
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}
	
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}
	
	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};
	
	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;
	
	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);
	
	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }
	
	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = sequence(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }
	
	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;
	
	    var bins = new Array(m + 1),
	        bin;
	
	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }
	
	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }
	
	    return bins;
	  }
	
	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };
	
	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };
	
	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };
	
	  return histogram;
	};
	
	var threshold = function(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};
	
	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};
	
	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};
	
	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return max;
	};
	
	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }
	
	  if (m) return sum / m;
	};
	
	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  return threshold(numbers.sort(ascending), 0.5);
	};
	
	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;
	
	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);
	
	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }
	
	  return merged;
	};
	
	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  return min;
	};
	
	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};
	
	var scan = function(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];
	
	  if (compare == null) compare = ascending;
	
	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }
	
	  if (compare(xj, xj) === 0) return j;
	};
	
	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;
	
	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }
	
	  return array;
	};
	
	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }
	
	  return sum;
	};
	
	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};
	
	function length(d) {
	  return d.length;
	}
	
	var zip = function() {
	  return transpose(arguments);
	};
	
	var slice$1 = Array.prototype.slice;
	
	var identity$1 = function(x) {
	  return x;
	};
	
	var top = 1;
	var right = 2;
	var bottom = 3;
	var left = 4;
	var epsilon = 1e-6;
	
	function translateX(x) {
	  return "translate(" + x + ",0)";
	}
	
	function translateY(y) {
	  return "translate(0," + y + ")";
	}
	
	function center(scale) {
	  var offset = scale.bandwidth() / 2;
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return scale(d) + offset;
	  };
	}
	
	function entering() {
	  return !this.__axis;
	}
	
	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      k = orient === top || orient === left ? -1 : 1,
	      x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x"),
	      transform = orient === top || orient === bottom ? translateX : translateY;
	
	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = range[0] + 0.5,
	        range1 = range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : identity$1)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");
	
	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));
	
	    tick = tick.merge(tickEnter);
	
	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner)
	        .attr(y + "1", 0.5)
	        .attr(y + "2", 0.5));
	
	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr(y, 0.5)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
	
	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);
	
	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });
	
	      tickEnter
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
	    }
	
	    tickExit.remove();
	
	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);
	
	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position(d)); });
	
	    line
	        .attr(x + "2", k * tickSizeInner);
	
	    text
	        .attr(x, k * spacing)
	        .text(format);
	
	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
	
	    selection
	        .each(function() { this.__axis = position; });
	  }
	
	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };
	
	  axis.ticks = function() {
	    return tickArguments = slice$1.call(arguments), axis;
	  };
	
	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
	  };
	
	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
	  };
	
	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };
	
	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };
	
	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };
	
	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };
	
	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };
	
	  return axis;
	}
	
	function axisTop(scale) {
	  return axis(top, scale);
	}
	
	function axisRight(scale) {
	  return axis(right, scale);
	}
	
	function axisBottom(scale) {
	  return axis(bottom, scale);
	}
	
	function axisLeft(scale) {
	  return axis(left, scale);
	}
	
	var noop = {value: function() {}};
	
	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}
	
	function Dispatch(_) {
	  this._ = _;
	}
	
	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}
	
	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;
	
	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }
	
	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
	    }
	
	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};
	
	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}
	
	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}
	
	var xhtml = "http://www.w3.org/1999/xhtml";
	
	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};
	
	var namespace = function(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	};
	
	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}
	
	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}
	
	var creator = function(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	};
	
	var nextId = 0;
	
	function local$1() {
	  return new Local;
	}
	
	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}
	
	Local.prototype = local$1.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};
	
	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}
	
	var matcher$1 = matcher;
	
	var filterEvents = {};
	
	exports.event = null;
	
	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}
	
	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}
	
	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}
	
	function parseTypenames$1(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}
	
	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}
	
	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}
	
	var selection_on = function(typename, value, capture) {
	  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;
	
	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }
	
	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	};
	
	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}
	
	var sourceEvent = function() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	};
	
	var point = function(node, event) {
	  var svg = node.ownerSVGElement || node;
	
	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }
	
	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	};
	
	var mouse = function(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	};
	
	function none() {}
	
	var selector = function(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	};
	
	var selection_select = function(select) {
	  if (typeof select !== "function") select = selector(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	};
	
	function empty$1() {
	  return [];
	}
	
	var selectorAll = function(selector) {
	  return selector == null ? empty$1 : function() {
	    return this.querySelectorAll(selector);
	  };
	};
	
	var selection_selectAll = function(select) {
	  if (typeof select !== "function") select = selectorAll(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, parents);
	};
	
	var selection_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	};
	
	var sparse = function(update) {
	  return new Array(update.length);
	};
	
	var selection_enter = function() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	};
	
	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}
	
	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};
	
	var constant$1 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var keyPrefix = "$"; // Protect against keys like “__proto__”.
	
	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;
	
	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}
	
	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;
	
	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }
	
	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}
	
	var selection_data = function(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }
	
	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;
	
	  if (typeof value !== "function") value = constant$1(value);
	
	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);
	
	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
	
	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }
	
	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	};
	
	var selection_exit = function() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	};
	
	var selection_merge = function(selection) {
	
	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }
	
	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }
	
	  return new Selection(merges, this._parents);
	};
	
	var selection_order = function() {
	
	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }
	
	  return this;
	};
	
	var selection_sort = function(compare) {
	  if (!compare) compare = ascending$1;
	
	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }
	
	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }
	
	  return new Selection(sortgroups, this._parents).order();
	};
	
	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}
	
	var selection_call = function() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	};
	
	var selection_nodes = function() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	};
	
	var selection_node = function() {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }
	
	  return null;
	};
	
	var selection_size = function() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	};
	
	var selection_empty = function() {
	  return !this.node();
	};
	
	var selection_each = function(callback) {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }
	
	  return this;
	};
	
	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}
	
	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}
	
	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}
	
	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}
	
	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}
	
	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}
	
	var selection_attr = function(name, value) {
	  var fullname = namespace(name);
	
	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }
	
	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	};
	
	var window = function(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	};
	
	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}
	
	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}
	
	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}
	
	var selection_style = function(name, value, priority) {
	  var node;
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : window(node = this.node())
	          .getComputedStyle(node, null)
	          .getPropertyValue(name);
	};
	
	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}
	
	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}
	
	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}
	
	var selection_property = function(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	};
	
	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}
	
	function classList(node) {
	  return node.classList || new ClassList(node);
	}
	
	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}
	
	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};
	
	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}
	
	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}
	
	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}
	
	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}
	
	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}
	
	var selection_classed = function(name, value) {
	  var names = classArray(name + "");
	
	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }
	
	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	};
	
	function textRemove() {
	  this.textContent = "";
	}
	
	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}
	
	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}
	
	var selection_text = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	};
	
	function htmlRemove() {
	  this.innerHTML = "";
	}
	
	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}
	
	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}
	
	var selection_html = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	};
	
	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}
	
	var selection_raise = function() {
	  return this.each(raise);
	};
	
	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}
	
	var selection_lower = function() {
	  return this.each(lower);
	};
	
	var selection_append = function(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	};
	
	function constantNull() {
	  return null;
	}
	
	var selection_insert = function(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	};
	
	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}
	
	var selection_remove = function() {
	  return this.each(remove);
	};
	
	var selection_datum = function(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	};
	
	function dispatchEvent(node, type, params) {
	  var window$$1 = window(node),
	      event = window$$1.CustomEvent;
	
	  if (event) {
	    event = new event(type, params);
	  } else {
	    event = window$$1.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }
	
	  node.dispatchEvent(event);
	}
	
	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}
	
	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}
	
	var selection_dispatch = function(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	};
	
	var root = [null];
	
	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}
	
	function selection() {
	  return new Selection([[document.documentElement]], root);
	}
	
	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};
	
	var select = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	};
	
	var selectAll = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	};
	
	var touch = function(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;
	
	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }
	
	  return null;
	};
	
	var touches = function(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;
	
	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }
	
	  return points;
	};
	
	function nopropagation() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	var dragDisable = function(view) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", noevent, true);
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", noevent, true);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	};
	
	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", null);
	  if (noclick) {
	    selection$$1.on("click.drag", noevent, true);
	    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
	  }
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}
	
	var constant$2 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
	  this.target = target;
	  this.type = type;
	  this.subject = subject;
	  this.identifier = id;
	  this.active = active;
	  this.x = x;
	  this.y = y;
	  this.dx = dx;
	  this.dy = dy;
	  this._ = dispatch;
	}
	
	DragEvent.prototype.on = function() {
	  var value = this._.on.apply(this._, arguments);
	  return value === this._ ? this : value;
	};
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter$1() {
	  return !exports.event.button;
	}
	
	function defaultContainer() {
	  return this.parentNode;
	}
	
	function defaultSubject(d) {
	  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
	}
	
	var drag = function() {
	  var filter = defaultFilter$1,
	      container = defaultContainer,
	      subject = defaultSubject,
	      gestures = {},
	      listeners = dispatch("start", "drag", "end"),
	      active = 0,
	      mousemoving,
	      touchending;
	
	  function drag(selection$$1) {
	    selection$$1
	        .on("mousedown.drag", mousedowned)
	        .on("touchstart.drag", touchstarted)
	        .on("touchmove.drag", touchmoved)
	        .on("touchend.drag touchcancel.drag", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }
	
	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
	    if (!gesture) return;
	    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
	    dragDisable(exports.event.view);
	    nopropagation();
	    mousemoving = false;
	    gesture("start");
	  }
	
	  function mousemoved() {
	    noevent();
	    mousemoving = true;
	    gestures.mouse("drag");
	  }
	
	  function mouseupped() {
	    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(exports.event.view, mousemoving);
	    noevent();
	    gestures.mouse("end");
	  }
	
	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var touches$$1 = exports.event.changedTouches,
	        c = container.apply(this, arguments),
	        n = touches$$1.length, i, gesture;
	
	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
	        nopropagation();
	        gesture("start");
	      }
	    }
	  }
	
	  function touchmoved() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;
	
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        noevent();
	        gesture("drag");
	      }
	    }
	  }
	
	  function touchended() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;
	
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        nopropagation();
	        gesture("end");
	      }
	    }
	  }
	
	  function beforestart(id, container, point, that, args) {
	    var p = point(container, id), s, dx, dy,
	        sublisteners = listeners.copy();
	
	    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
	      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
	      dx = s.x - p[0] || 0;
	      dy = s.y - p[1] || 0;
	      return true;
	    })) return;
	
	    return function gesture(type) {
	      var p0 = p, n;
	      switch (type) {
	        case "start": gestures[id] = gesture, n = active++; break;
	        case "end": delete gestures[id], --active; // nobreak
	        case "drag": p = point(container, id), n = active; break;
	      }
	      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
	    };
	  }
	
	  drag.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
	  };
	
	  drag.container = function(_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
	  };
	
	  drag.subject = function(_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
	  };
	
	  drag.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };
	
	  return drag;
	};
	
	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};
	
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}
	
	function Color() {}
	
	var darker = 0.7;
	var brighter = 1 / darker;
	
	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	
	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});
	
	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}
	
	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}
	
	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}
	
	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	
	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}
	
	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}
	
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));
	
	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}
	
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;
	
	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;
	
	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}
	
	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}
	
	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));
	
	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}
	
	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}
	
	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}
	
	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}
	
	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}
	
	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));
	
	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;
	
	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}
	
	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));
	
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}
	
	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var constant$3 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}
	
	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	
	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
	}
	
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
	  };
	}
	
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
	}
	
	var interpolateRgb = ((function rgbGamma(y) {
	  var color$$1 = gamma(y);
	
	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	
	  rgb$$1.gamma = rgbGamma;
	
	  return rgb$$1;
	}))(1);
	
	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}
	
	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);
	
	var array$1 = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(nb),
	      c = new Array(nb),
	      i;
	
	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];
	
	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};
	
	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};
	
	var reinterpolate = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};
	
	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;
	
	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};
	
	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }
	
	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};
	
	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");
	
	function zero(b) {
	  return function() {
	    return b;
	  };
	}
	
	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}
	
	var interpolateString = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators
	
	  // Coerce inputs to strings.
	  a = a + "", b = b + "";
	
	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: reinterpolate(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }
	
	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }
	
	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};
	
	var interpolateValue = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$3(b)
	      : (t === "number" ? reinterpolate
	      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
	      : b instanceof color ? interpolateRgb
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$1
	      : isNaN(b) ? object
	      : reinterpolate)(a, b);
	};
	
	var interpolateRound = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};
	
	var degrees = 180 / Math.PI;
	
	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	
	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};
	
	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;
	
	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	
	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}
	
	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }
	
	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }
	
	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }
	
	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }
	
	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }
	
	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}
	
	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
	
	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;
	
	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}
	
	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}
	
	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}
	
	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var interpolateZoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;
	
	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }
	
	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }
	
	  i.duration = S * 1000;
	
	  return i;
	};
	
	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);
	
	function lab$1(start, end) {
	  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}
	
	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);
	
	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;
	
	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }
	
	    cubehelix$$1.gamma = cubehelixGamma;
	
	    return cubehelix$$1;
	  })(1);
	}
	
	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);
	
	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};
	
	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };
	
	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}
	
	function clearNow() {
	  clockNow = 0;
	}
	
	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}
	
	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};
	
	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}
	
	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}
	
	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}
	
	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}
	
	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}
	
	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow;
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, delay);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}
	
	var timeout$1 = function(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	};
	
	var interval$1 = function(callback, delay, time) {
	  var t = new Timer, total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? now() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	};
	
	var emptyOn = dispatch("start", "end", "interrupt");
	var emptyTween = [];
	
	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;
	
	var schedule = function(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	};
	
	function init(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
	  return schedule;
	}
	
	function set$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
	  return schedule;
	}
	
	function get$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
	  return schedule;
	}
	
	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;
	
	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);
	
	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);
	
	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }
	
	  function start(elapsed) {
	    var i, j, n, o;
	
	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();
	
	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;
	
	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return timeout$1(start);
	
	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }
	
	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }
	
	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    timeout$1(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });
	
	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;
	
	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }
	
	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;
	
	    while (++i < n) {
	      tween[i].call(null, t);
	    }
	
	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }
	
	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}
	
	var interrupt = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;
	
	  if (!schedules) return;
	
	  name = name == null ? null : name + "";
	
	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }
	
	  if (empty) delete node.__transition;
	};
	
	var selection_interrupt = function(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	};
	
	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;
	
	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }
	
	    schedule.tween = tween1;
	  };
	}
	
	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;
	
	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }
	
	    schedule.tween = tween1;
	  };
	}
	
	var transition_tween = function(name, value) {
	  var id = this._id;
	
	  name += "";
	
	  if (arguments.length < 2) {
	    var tween = get$1(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }
	
	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	};
	
	function tweenValue(transition, name, value) {
	  var id = transition._id;
	
	  transition.each(function() {
	    var schedule = set$1(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });
	
	  return function(node) {
	    return get$1(node, id).value[name];
	  };
	}
	
	var interpolate$$1 = function(a, b) {
	  var c;
	  return (typeof b === "number" ? reinterpolate
	      : b instanceof color ? interpolateRgb
	      : (c = color(b)) ? (b = c, interpolateRgb)
	      : interpolateString)(a, b);
	};
	
	function attrRemove$1(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}
	
	function attrRemoveNS$1(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}
	
	function attrConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}
	
	function attrConstantNS$1(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}
	
	function attrFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}
	
	function attrFunctionNS$1(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}
	
	var transition_attr = function(name, value) {
	  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$$1;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
	      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));
	};
	
	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	var transition_attrTween = function(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	};
	
	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}
	
	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}
	
	var transition_delay = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get$1(this.node(), id).delay;
	};
	
	function durationFunction(id, value) {
	  return function() {
	    set$1(this, id).duration = +value.apply(this, arguments);
	  };
	}
	
	function durationConstant(id, value) {
	  return value = +value, function() {
	    set$1(this, id).duration = value;
	  };
	}
	
	var transition_duration = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get$1(this.node(), id).duration;
	};
	
	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set$1(this, id).ease = value;
	  };
	}
	
	var transition_ease = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get$1(this.node(), id).ease;
	};
	
	var transition_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }
	
	  return new Transition(subgroups, this._parents, this._name, this._id);
	};
	
	var transition_merge = function(transition) {
	  if (transition._id !== this._id) throw new Error;
	
	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }
	
	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }
	
	  return new Transition(merges, this._parents, this._name, this._id);
	};
	
	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}
	
	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set$1;
	  return function() {
	    var schedule = sit(this, id),
	        on = schedule.on;
	
	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
	
	    schedule.on = on1;
	  };
	}
	
	var transition_on = function(name, listener) {
	  var id = this._id;
	
	  return arguments.length < 2
	      ? get$1(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	};
	
	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}
	
	var transition_remove = function() {
	  return this.on("end.remove", removeFunction(this._id));
	};
	
	var transition_select = function(select$$1) {
	  var name = this._name,
	      id = this._id;
	
	  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
	      }
	    }
	  }
	
	  return new Transition(subgroups, this._parents, name, id);
	};
	
	var transition_selectAll = function(select$$1) {
	  var name = this._name,
	      id = this._id;
	
	  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);
	
	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }
	
	  return new Transition(subgroups, parents, name, id);
	};
	
	var Selection$1 = selection.prototype.constructor;
	
	var transition_selection = function() {
	  return new Selection$1(this._groups, this._parents);
	};
	
	function styleRemove$1(name, interpolate$$2) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}
	
	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}
	
	function styleConstant$1(name, interpolate$$2, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value1);
	  };
	}
	
	function styleFunction$1(name, interpolate$$2, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}
	
	var transition_style = function(name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$$1;
	  return value == null ? this
	          .styleTween(name, styleRemove$1(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant$1(name, i, value + ""), priority);
	};
	
	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	var transition_styleTween = function(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	};
	
	function textConstant$1(value) {
	  return function() {
	    this.textContent = value;
	  };
	}
	
	function textFunction$1(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}
	
	var transition_text = function(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction$1(tweenValue(this, "text", value))
	      : textConstant$1(value == null ? "" : value + ""));
	};
	
	var transition_transition = function() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();
	
	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$1(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }
	
	  return new Transition(groups, this._parents, name, id1);
	};
	
	var id = 0;
	
	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}
	
	function transition(name) {
	  return selection().transition(name);
	}
	
	function newId() {
	  return ++id;
	}
	
	var selection_prototype = selection.prototype;
	
	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};
	
	function linear$1(t) {
	  return +t;
	}
	
	function quadIn(t) {
	  return t * t;
	}
	
	function quadOut(t) {
	  return t * (2 - t);
	}
	
	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}
	
	function cubicIn(t) {
	  return t * t * t;
	}
	
	function cubicOut(t) {
	  return --t * t * t + 1;
	}
	
	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}
	
	var exponent = 3;
	
	var polyIn = (function custom(e) {
	  e = +e;
	
	  function polyIn(t) {
	    return Math.pow(t, e);
	  }
	
	  polyIn.exponent = custom;
	
	  return polyIn;
	})(exponent);
	
	var polyOut = (function custom(e) {
	  e = +e;
	
	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }
	
	  polyOut.exponent = custom;
	
	  return polyOut;
	})(exponent);
	
	var polyInOut = (function custom(e) {
	  e = +e;
	
	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }
	
	  polyInOut.exponent = custom;
	
	  return polyInOut;
	})(exponent);
	
	var pi = Math.PI;
	var halfPi = pi / 2;
	
	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}
	
	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}
	
	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}
	
	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}
	
	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}
	
	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}
	
	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}
	
	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}
	
	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}
	
	var b1 = 4 / 11;
	var b2 = 6 / 11;
	var b3 = 8 / 11;
	var b4 = 3 / 4;
	var b5 = 9 / 11;
	var b6 = 10 / 11;
	var b7 = 15 / 16;
	var b8 = 21 / 22;
	var b9 = 63 / 64;
	var b0 = 1 / b1 / b1;
	
	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}
	
	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}
	
	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}
	
	var overshoot = 1.70158;
	
	var backIn = (function custom(s) {
	  s = +s;
	
	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }
	
	  backIn.overshoot = custom;
	
	  return backIn;
	})(overshoot);
	
	var backOut = (function custom(s) {
	  s = +s;
	
	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }
	
	  backOut.overshoot = custom;
	
	  return backOut;
	})(overshoot);
	
	var backInOut = (function custom(s) {
	  s = +s;
	
	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }
	
	  backInOut.overshoot = custom;
	
	  return backInOut;
	})(overshoot);
	
	var tau = 2 * Math.PI;
	var amplitude = 1;
	var period = 0.3;
	
	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }
	
	  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
	  elasticIn.period = function(p) { return custom(a, p); };
	
	  return elasticIn;
	})(amplitude, period);
	
	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }
	
	  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticOut.period = function(p) { return custom(a, p); };
	
	  return elasticOut;
	})(amplitude, period);
	
	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }
	
	  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticInOut.period = function(p) { return custom(a, p); };
	
	  return elasticInOut;
	})(amplitude, period);
	
	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};
	
	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = now(), defaultTiming;
	    }
	  }
	  return timing;
	}
	
	var selection_transition = function(name) {
	  var id,
	      timing;
	
	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
	  }
	
	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }
	
	  return new Transition(groups, this._parents, name, id);
	};
	
	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;
	
	var root$1 = [null];
	
	var active = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;
	
	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
	        return new Transition([[node]], root$1, name, +i);
	      }
	    }
	  }
	
	  return null;
	};
	
	var constant$4 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var BrushEvent = function(target, type, selection) {
	  this.target = target;
	  this.type = type;
	  this.selection = selection;
	};
	
	function nopropagation$1() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent$1 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	var MODE_DRAG = {name: "drag"};
	var MODE_SPACE = {name: "space"};
	var MODE_HANDLE = {name: "handle"};
	var MODE_CENTER = {name: "center"};
	
	var X = {
	  name: "x",
	  handles: ["e", "w"].map(type),
	  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
	  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
	};
	
	var Y = {
	  name: "y",
	  handles: ["n", "s"].map(type),
	  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
	  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
	};
	
	var XY = {
	  name: "xy",
	  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
	  input: function(xy) { return xy; },
	  output: function(xy) { return xy; }
	};
	
	var cursors = {
	  overlay: "crosshair",
	  selection: "move",
	  n: "ns-resize",
	  e: "ew-resize",
	  s: "ns-resize",
	  w: "ew-resize",
	  nw: "nwse-resize",
	  ne: "nesw-resize",
	  se: "nwse-resize",
	  sw: "nesw-resize"
	};
	
	var flipX = {
	  e: "w",
	  w: "e",
	  nw: "ne",
	  ne: "nw",
	  se: "sw",
	  sw: "se"
	};
	
	var flipY = {
	  n: "s",
	  s: "n",
	  nw: "sw",
	  ne: "se",
	  se: "ne",
	  sw: "nw"
	};
	
	var signsX = {
	  overlay: +1,
	  selection: +1,
	  n: null,
	  e: +1,
	  s: null,
	  w: -1,
	  nw: -1,
	  ne: +1,
	  se: +1,
	  sw: -1
	};
	
	var signsY = {
	  overlay: +1,
	  selection: +1,
	  n: -1,
	  e: null,
	  s: +1,
	  w: null,
	  nw: -1,
	  ne: -1,
	  se: +1,
	  sw: +1
	};
	
	function type(t) {
	  return {type: t};
	}
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !exports.event.button;
	}
	
	function defaultExtent() {
	  var svg = this.ownerSVGElement || this;
	  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
	}
	
	// Like d3.local, but with the name “__brush” rather than auto-generated.
	function local$$1(node) {
	  while (!node.__brush) if (!(node = node.parentNode)) return;
	  return node.__brush;
	}
	
	function empty(extent) {
	  return extent[0][0] === extent[1][0]
	      || extent[0][1] === extent[1][1];
	}
	
	function brushSelection(node) {
	  var state = node.__brush;
	  return state ? state.dim.output(state.selection) : null;
	}
	
	function brushX() {
	  return brush$1(X);
	}
	
	function brushY() {
	  return brush$1(Y);
	}
	
	var brush = function() {
	  return brush$1(XY);
	};
	
	function brush$1(dim) {
	  var extent = defaultExtent,
	      filter = defaultFilter,
	      listeners = dispatch(brush, "start", "brush", "end"),
	      handleSize = 6,
	      touchending;
	
	  function brush(group) {
	    var overlay = group
	        .property("__brush", initialize)
	      .selectAll(".overlay")
	      .data([type("overlay")]);
	
	    overlay.enter().append("rect")
	        .attr("class", "overlay")
	        .attr("pointer-events", "all")
	        .attr("cursor", cursors.overlay)
	      .merge(overlay)
	        .each(function() {
	          var extent = local$$1(this).extent;
	          select(this)
	              .attr("x", extent[0][0])
	              .attr("y", extent[0][1])
	              .attr("width", extent[1][0] - extent[0][0])
	              .attr("height", extent[1][1] - extent[0][1]);
	        });
	
	    group.selectAll(".selection")
	      .data([type("selection")])
	      .enter().append("rect")
	        .attr("class", "selection")
	        .attr("cursor", cursors.selection)
	        .attr("fill", "#777")
	        .attr("fill-opacity", 0.3)
	        .attr("stroke", "#fff")
	        .attr("shape-rendering", "crispEdges");
	
	    var handle = group.selectAll(".handle")
	      .data(dim.handles, function(d) { return d.type; });
	
	    handle.exit().remove();
	
	    handle.enter().append("rect")
	        .attr("class", function(d) { return "handle handle--" + d.type; })
	        .attr("cursor", function(d) { return cursors[d.type]; });
	
	    group
	        .each(redraw)
	        .attr("fill", "none")
	        .attr("pointer-events", "all")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .on("mousedown.brush touchstart.brush", started);
	  }
	
	  brush.move = function(group, selection$$1) {
	    if (group.selection) {
	      group
	          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
	          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
	          .tween("brush", function() {
	            var that = this,
	                state = that.__brush,
	                emit = emitter(that, arguments),
	                selection0 = state.selection,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
	                i = interpolateValue(selection0, selection1);
	
	            function tween(t) {
	              state.selection = t === 1 && empty(selection1) ? null : i(t);
	              redraw.call(that);
	              emit.brush();
	            }
	
	            return selection0 && selection1 ? tween : tween(1);
	          });
	    } else {
	      group
	          .each(function() {
	            var that = this,
	                args = arguments,
	                state = that.__brush,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
	                emit = emitter(that, args).beforestart();
	
	            interrupt(that);
	            state.selection = selection1 == null || empty(selection1) ? null : selection1;
	            redraw.call(that);
	            emit.start().brush().end();
	          });
	    }
	  };
	
	  function redraw() {
	    var group = select(this),
	        selection$$1 = local$$1(this).selection;
	
	    if (selection$$1) {
	      group.selectAll(".selection")
	          .style("display", null)
	          .attr("x", selection$$1[0][0])
	          .attr("y", selection$$1[0][1])
	          .attr("width", selection$$1[1][0] - selection$$1[0][0])
	          .attr("height", selection$$1[1][1] - selection$$1[0][1]);
	
	      group.selectAll(".handle")
	          .style("display", null)
	          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
	          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
	          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
	          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
	    }
	
	    else {
	      group.selectAll(".selection,.handle")
	          .style("display", "none")
	          .attr("x", null)
	          .attr("y", null)
	          .attr("width", null)
	          .attr("height", null);
	    }
	  }
	
	  function emitter(that, args) {
	    return that.__brush.emitter || new Emitter(that, args);
	  }
	
	  function Emitter(that, args) {
	    this.that = that;
	    this.args = args;
	    this.state = that.__brush;
	    this.active = 0;
	  }
	
	  Emitter.prototype = {
	    beforestart: function() {
	      if (++this.active === 1) this.state.emitter = this, this.starting = true;
	      return this;
	    },
	    start: function() {
	      if (this.starting) this.starting = false, this.emit("start");
	      return this;
	    },
	    brush: function() {
	      this.emit("brush");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) delete this.state.emitter, this.emit("end");
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };
	
	  function started() {
	    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
	    else if (touchending) return;
	    if (!filter.apply(this, arguments)) return;
	
	    var that = this,
	        type = exports.event.target.__data__.type,
	        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
	        signX = dim === Y ? null : signsX[type],
	        signY = dim === X ? null : signsY[type],
	        state = local$$1(that),
	        extent = state.extent,
	        selection$$1 = state.selection,
	        W = extent[0][0], w0, w1,
	        N = extent[0][1], n0, n1,
	        E = extent[1][0], e0, e1,
	        S = extent[1][1], s0, s1,
	        dx,
	        dy,
	        moving,
	        shifting = signX && signY && exports.event.shiftKey,
	        lockX,
	        lockY,
	        point0 = mouse(that),
	        point = point0,
	        emit = emitter(that, arguments).beforestart();
	
	    if (type === "overlay") {
	      state.selection = selection$$1 = [
	        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
	        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
	      ];
	    } else {
	      w0 = selection$$1[0][0];
	      n0 = selection$$1[0][1];
	      e0 = selection$$1[1][0];
	      s0 = selection$$1[1][1];
	    }
	
	    w1 = w0;
	    n1 = n0;
	    e1 = e0;
	    s1 = s0;
	
	    var group = select(that)
	        .attr("pointer-events", "none");
	
	    var overlay = group.selectAll(".overlay")
	        .attr("cursor", cursors[type]);
	
	    if (exports.event.touches) {
	      group
	          .on("touchmove.brush", moved, true)
	          .on("touchend.brush touchcancel.brush", ended, true);
	    } else {
	      var view = select(exports.event.view)
	          .on("keydown.brush", keydowned, true)
	          .on("keyup.brush", keyupped, true)
	          .on("mousemove.brush", moved, true)
	          .on("mouseup.brush", ended, true);
	
	      dragDisable(exports.event.view);
	    }
	
	    nopropagation$1();
	    interrupt(that);
	    redraw.call(that);
	    emit.start();
	
	    function moved() {
	      var point1 = mouse(that);
	      if (shifting && !lockX && !lockY) {
	        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
	        else lockX = true;
	      }
	      point = point1;
	      moving = true;
	      noevent$1();
	      move();
	    }
	
	    function move() {
	      var t;
	
	      dx = point[0] - point0[0];
	      dy = point[1] - point0[1];
	
	      switch (mode) {
	        case MODE_SPACE:
	        case MODE_DRAG: {
	          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
	          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
	          break;
	        }
	        case MODE_HANDLE: {
	          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
	          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
	          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
	          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
	          break;
	        }
	        case MODE_CENTER: {
	          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
	          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
	          break;
	        }
	      }
	
	      if (e1 < w1) {
	        signX *= -1;
	        t = w0, w0 = e0, e0 = t;
	        t = w1, w1 = e1, e1 = t;
	        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
	      }
	
	      if (s1 < n1) {
	        signY *= -1;
	        t = n0, n0 = s0, s0 = t;
	        t = n1, n1 = s1, s1 = t;
	        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
	      }
	
	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!
	      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];
	      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];
	
	      if (selection$$1[0][0] !== w1
	          || selection$$1[0][1] !== n1
	          || selection$$1[1][0] !== e1
	          || selection$$1[1][1] !== s1) {
	        state.selection = [[w1, n1], [e1, s1]];
	        redraw.call(that);
	        emit.brush();
	      }
	    }
	
	    function ended() {
	      nopropagation$1();
	      if (exports.event.touches) {
	        if (exports.event.touches.length) return;
	        if (touchending) clearTimeout(touchending);
	        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
	      } else {
	        yesdrag(exports.event.view, moving);
	        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
	      }
	      group.attr("pointer-events", "all");
	      overlay.attr("cursor", cursors.overlay);
	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!
	      if (empty(selection$$1)) state.selection = null, redraw.call(that);
	      emit.end();
	    }
	
	    function keydowned() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          shifting = signX && signY;
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_HANDLE) {
	            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	            mode = MODE_CENTER;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE; takes priority over ALT
	          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
	            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
	            mode = MODE_SPACE;
	            overlay.attr("cursor", cursors.selection);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	
	    function keyupped() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          if (shifting) {
	            lockX = lockY = shifting = false;
	            move();
	          }
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	            mode = MODE_HANDLE;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE
	          if (mode === MODE_SPACE) {
	            if (exports.event.altKey) {
	              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	              mode = MODE_CENTER;
	            } else {
	              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	              mode = MODE_HANDLE;
	            }
	            overlay.attr("cursor", cursors[type]);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	  }
	
	  function initialize() {
	    var state = this.__brush || {selection: null};
	    state.extent = extent.apply(this, arguments);
	    state.dim = dim;
	    return state;
	  }
	
	  brush.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
	  };
	
	  brush.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
	  };
	
	  brush.handleSize = function(_) {
	    return arguments.length ? (handleSize = +_, brush) : handleSize;
	  };
	
	  brush.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? brush : value;
	  };
	
	  return brush;
	}
	
	var cos = Math.cos;
	var sin = Math.sin;
	var pi$1 = Math.PI;
	var halfPi$1 = pi$1 / 2;
	var tau$1 = pi$1 * 2;
	var max$1 = Math.max;
	
	function compareValue(compare) {
	  return function(a, b) {
	    return compare(
	      a.source.value + a.target.value,
	      b.source.value + b.target.value
	    );
	  };
	}
	
	var chord = function() {
	  var padAngle = 0,
	      sortGroups = null,
	      sortSubgroups = null,
	      sortChords = null;
	
	  function chord(matrix) {
	    var n = matrix.length,
	        groupSums = [],
	        groupIndex = sequence(n),
	        subgroupIndex = [],
	        chords = [],
	        groups = chords.groups = new Array(n),
	        subgroups = new Array(n * n),
	        k,
	        x,
	        x0,
	        dx,
	        i,
	        j;
	
	    // Compute the sum.
	    k = 0, i = -1; while (++i < n) {
	      x = 0, j = -1; while (++j < n) {
	        x += matrix[i][j];
	      }
	      groupSums.push(x);
	      subgroupIndex.push(sequence(n));
	      k += x;
	    }
	
	    // Sort groups…
	    if (sortGroups) groupIndex.sort(function(a, b) {
	      return sortGroups(groupSums[a], groupSums[b]);
	    });
	
	    // Sort subgroups…
	    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
	      d.sort(function(a, b) {
	        return sortSubgroups(matrix[i][a], matrix[i][b]);
	      });
	    });
	
	    // Convert the sum to scaling factor for [0, 2pi].
	    // TODO Allow start and end angle to be specified?
	    // TODO Allow padding to be specified as percentage?
	    k = max$1(0, tau$1 - padAngle * n) / k;
	    dx = k ? padAngle : tau$1 / n;
	
	    // Compute the start and end angle for each group and subgroup.
	    // Note: Opera has a bug reordering object literal properties!
	    x = 0, i = -1; while (++i < n) {
	      x0 = x, j = -1; while (++j < n) {
	        var di = groupIndex[i],
	            dj = subgroupIndex[di][j],
	            v = matrix[di][dj],
	            a0 = x,
	            a1 = x += v * k;
	        subgroups[dj * n + di] = {
	          index: di,
	          subindex: dj,
	          startAngle: a0,
	          endAngle: a1,
	          value: v
	        };
	      }
	      groups[di] = {
	        index: di,
	        startAngle: x0,
	        endAngle: x,
	        value: groupSums[di]
	      };
	      x += dx;
	    }
	
	    // Generate chords for each (non-empty) subgroup-subgroup link.
	    i = -1; while (++i < n) {
	      j = i - 1; while (++j < n) {
	        var source = subgroups[j * n + i],
	            target = subgroups[i * n + j];
	        if (source.value || target.value) {
	          chords.push(source.value < target.value
	              ? {source: target, target: source}
	              : {source: source, target: target});
	        }
	      }
	    }
	
	    return sortChords ? chords.sort(sortChords) : chords;
	  }
	
	  chord.padAngle = function(_) {
	    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
	  };
	
	  chord.sortGroups = function(_) {
	    return arguments.length ? (sortGroups = _, chord) : sortGroups;
	  };
	
	  chord.sortSubgroups = function(_) {
	    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
	  };
	
	  chord.sortChords = function(_) {
	    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
	  };
	
	  return chord;
	};
	
	var slice$2 = Array.prototype.slice;
	
	var constant$5 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var pi$2 = Math.PI;
	var tau$2 = 2 * pi$2;
	var epsilon$1 = 1e-6;
	var tauEpsilon = tau$2 - epsilon$1;
	
	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}
	
	function path() {
	  return new Path;
	}
	
	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon$1)) {}
	
	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;
	
	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon$1) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }
	
	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }
	
	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
	      this._ += "L" + x0 + "," + y0;
	    }
	
	    // Is this arc empty? We’re done.
	    if (!r) return;
	
	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau$2 + tau$2;
	
	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }
	
	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon$1) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	function defaultSource(d) {
	  return d.source;
	}
	
	function defaultTarget(d) {
	  return d.target;
	}
	
	function defaultRadius(d) {
	  return d.radius;
	}
	
	function defaultStartAngle(d) {
	  return d.startAngle;
	}
	
	function defaultEndAngle(d) {
	  return d.endAngle;
	}
	
	var ribbon = function() {
	  var source = defaultSource,
	      target = defaultTarget,
	      radius = defaultRadius,
	      startAngle = defaultStartAngle,
	      endAngle = defaultEndAngle,
	      context = null;
	
	  function ribbon() {
	    var buffer,
	        argv = slice$2.call(arguments),
	        s = source.apply(this, argv),
	        t = target.apply(this, argv),
	        sr = +radius.apply(this, (argv[0] = s, argv)),
	        sa0 = startAngle.apply(this, argv) - halfPi$1,
	        sa1 = endAngle.apply(this, argv) - halfPi$1,
	        sx0 = sr * cos(sa0),
	        sy0 = sr * sin(sa0),
	        tr = +radius.apply(this, (argv[0] = t, argv)),
	        ta0 = startAngle.apply(this, argv) - halfPi$1,
	        ta1 = endAngle.apply(this, argv) - halfPi$1;
	
	    if (!context) context = buffer = path();
	
	    context.moveTo(sx0, sy0);
	    context.arc(0, 0, sr, sa0, sa1);
	    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
	      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
	      context.arc(0, 0, tr, ta0, ta1);
	    }
	    context.quadraticCurveTo(0, 0, sx0, sy0);
	    context.closePath();
	
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  ribbon.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
	  };
	
	  ribbon.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
	  };
	
	  ribbon.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
	  };
	
	  ribbon.source = function(_) {
	    return arguments.length ? (source = _, ribbon) : source;
	  };
	
	  ribbon.target = function(_) {
	    return arguments.length ? (target = _, ribbon) : target;
	  };
	
	  ribbon.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
	  };
	
	  return ribbon;
	};
	
	var prefix = "$";
	
	function Map() {}
	
	Map.prototype = map$1.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};
	
	function map$1(object, f) {
	  var map = new Map;
	
	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });
	
	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;
	
	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }
	
	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);
	
	  return map;
	}
	
	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;
	
	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) return rollup != null
	        ? rollup(array) : (sortValues != null
	        ? array.sort(sortValues)
	        : array);
	
	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map$1(),
	        values,
	        result = createResult();
	
	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }
	
	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });
	
	    return result;
	  }
	
	  function entries(map, depth) {
	    if (++depth > keys.length) return map;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map.entries();
	    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }
	
	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};
	
	function createObject() {
	  return {};
	}
	
	function setObject(object, key, value) {
	  object[key] = value;
	}
	
	function createMap() {
	  return map$1();
	}
	
	function setMap(map, key, value) {
	  map.set(key, value);
	}
	
	function Set() {}
	
	var proto = map$1.prototype;
	
	Set.prototype = set$2.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};
	
	function set$2(object, f) {
	  var set = new Set;
	
	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });
	
	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }
	
	  return set;
	}
	
	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};
	
	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};
	
	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};
	
	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}
	
	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}
	
	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];
	
	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });
	
	  return columns;
	}
	
	var dsv = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      delimiterCode = delimiter.charCodeAt(0);
	
	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns;
	    return rows;
	  }
	
	  function parseRows(text, f) {
	    var EOL = {}, // sentinel value for end-of-line
	        EOF = {}, // sentinel value for end-of-file
	        rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // the current line number
	        t, // the current token
	        eol; // is the current token followed by EOL?
	
	    function token() {
	      if (I >= N) return EOF; // special case: end of file
	      if (eol) return eol = false, EOL; // special case: end of line
	
	      // special case: quotes
	      var j = I, c;
	      if (text.charCodeAt(j) === 34) {
	        var i = j;
	        while (i++ < N) {
	          if (text.charCodeAt(i) === 34) {
	            if (text.charCodeAt(i + 1) !== 34) break;
	            ++i;
	          }
	        }
	        I = i + 2;
	        c = text.charCodeAt(i + 1);
	        if (c === 13) {
	          eol = true;
	          if (text.charCodeAt(i + 2) === 10) ++I;
	        } else if (c === 10) {
	          eol = true;
	        }
	        return text.slice(j + 1, i).replace(/""/g, "\"");
	      }
	
	      // common case: find next delimiter or newline
	      while (I < N) {
	        var k = 1;
	        c = text.charCodeAt(I++);
	        if (c === 10) eol = true; // \n
	        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
	        else if (c !== delimiterCode) continue;
	        return text.slice(j, I - k);
	      }
	
	      // special case: last token before EOF
	      return text.slice(j);
	    }
	
	    while ((t = token()) !== EOF) {
	      var a = [];
	      while (t !== EOL && t !== EOF) {
	        a.push(t);
	        t = token();
	      }
	      if (f && (a = f(a, n++)) == null) continue;
	      rows.push(a);
	    }
	
	    return rows;
	  }
	
	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }
	
	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }
	
	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }
	
	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
	        : text;
	  }
	
	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};
	
	var csv = dsv(",");
	
	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;
	
	var tsv = dsv("\t");
	
	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;
	
	var center$1 = function(x, y) {
	  var nodes;
	
	  if (x == null) x = 0;
	  if (y == null) y = 0;
	
	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }
	
	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };
	
	  return force;
	};
	
	var constant$6 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};
	
	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	};
	
	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
	
	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;
	
	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }
	
	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
	
	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}
	
	function addAll(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;
	
	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }
	
	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;
	
	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);
	
	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }
	
	  return this;
	}
	
	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
	
	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;
	
	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }
	
	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;
	
	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }
	
	    if (this._root && this._root.length) this._root = node;
	  }
	
	  // If the quadtree covers the point already, just return.
	  else return this;
	
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};
	
	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};
	
	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};
	
	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};
	
	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;
	
	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }
	
	  while (q = quads.pop()) {
	
	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;
	
	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;
	
	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );
	
	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }
	
	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }
	
	  return data;
	};
	
	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
	
	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;
	
	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }
	
	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;
	
	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;
	
	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;
	
	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];
	
	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }
	
	  return this;
	};
	
	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}
	
	var tree_root = function() {
	  return this._root;
	};
	
	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};
	
	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};
	
	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};
	
	function defaultX(d) {
	  return d[0];
	}
	
	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};
	
	function defaultY(d) {
	  return d[1];
	}
	
	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};
	
	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}
	
	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}
	
	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}
	
	var treeProto = quadtree.prototype = Quadtree.prototype;
	
	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;
	
	  if (!node) return copy;
	
	  if (!node.length) return copy._root = leaf_copy(node), copy;
	
	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }
	
	  return copy;
	};
	
	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;
	
	function x(d) {
	  return d.x + d.vx;
	}
	
	function y(d) {
	  return d.y + d.vy;
	}
	
	var collide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;
	
	  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);
	
	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;
	
	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x, y).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }
	
	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }
	
	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };
	
	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
	  };
	
	  return force;
	};
	
	function index(d) {
	  return d.index;
	}
	
	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}
	
	var link = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant$6(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;
	
	  if (links == null) links = [];
	
	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }
	
	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	
	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = map$1(nodes, id),
	        link;
	
	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }
	
	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }
	
	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }
	
	  function initializeStrength() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }
	
	  function initializeDistance() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };
	
	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
	  };
	
	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
	  };
	
	  return force;
	};
	
	function x$1(d) {
	  return d.x;
	}
	
	function y$1(d) {
	  return d.y;
	}
	
	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));
	
	var simulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = map$1(),
	      stepper = timer(step),
	      event = dispatch("tick", "end");
	
	  if (nodes == null) nodes = [];
	
	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }
	
	  function tick() {
	    var i, n = nodes.length, node;
	
	    alpha += (alphaTarget - alpha) * alphaDecay;
	
	    forces.each(function(force) {
	      force(alpha);
	    });
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }
	
	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }
	
	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }
	
	  initializeNodes();
	
	  return simulation = {
	    tick: tick,
	
	    restart: function() {
	      return stepper.restart(step), simulation;
	    },
	
	    stop: function() {
	      return stepper.stop(), simulation;
	    },
	
	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },
	
	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },
	
	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },
	
	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },
	
	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },
	
	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },
	
	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },
	
	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;
	
	      if (radius == null) radius = Infinity;
	      else radius *= radius;
	
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }
	
	      return closest;
	    },
	
	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};
	
	var manyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant$6(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;
	
	  function force(_) {
	    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }
	
	  function accumulate(quad) {
	    var strength = 0, q, c, x$$1, y$$1, i;
	
	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = q.value)) {
	          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;
	        }
	      }
	      quad.x = x$$1 / strength;
	      quad.y = y$$1 / strength;
	    }
	
	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }
	
	    quad.value = strength;
	  }
	
	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;
	
	    var x$$1 = quad.x - node.x,
	        y$$1 = quad.y - node.y,
	        w = x2 - x1,
	        l = x$$1 * x$$1 + y$$1 * y$$1;
	
	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x$$1 * quad.value * alpha / l;
	        node.vy += y$$1 * quad.value * alpha / l;
	      }
	      return true;
	    }
	
	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;
	
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }
	
	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x$$1 * w;
	      node.vy += y$$1 * w;
	    } while (quad = quad.next);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };
	
	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };
	
	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };
	
	  return force;
	};
	
	var x$2 = function(x) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      xz;
	
	  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
	  };
	
	  return force;
	};
	
	var y$2 = function(y) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      yz;
	
	  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
	  };
	
	  return force;
	};
	
	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);
	
	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};
	
	var exponent$1 = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};
	
	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;
	
	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }
	
	    return t.reverse().join(thousands);
	  };
	};
	
	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};
	
	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);
	
	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }
	
	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};
	
	var prefixExponent;
	
	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};
	
	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};
	
	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};
	
	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
	
	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}
	
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
	
	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	
	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";
	
	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";
	
	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";
	
	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";
	
	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}
	
	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};
	
	var identity$3 = function(x) {
	  return x;
	};
	
	var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];
	
	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3,
	      percent = locale.percent || "%";
	
	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;
	
	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";
	
	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);
	
	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));
	
	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;
	
	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;
	
	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);
	
	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;
	
	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");
	
	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }
	
	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);
	
	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";
	
	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
	
	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }
	
	      return numerals(value);
	    }
	
	    format.toString = function() {
	      return specifier + "";
	    };
	
	    return format;
	  }
	
	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }
	
	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};
	
	var locale$1;
	
	
	
	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	
	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  exports.format = locale$1.format;
	  exports.formatPrefix = locale$1.formatPrefix;
	  return locale$1;
	}
	
	var precisionFixed = function(step) {
	  return Math.max(0, -exponent$1(Math.abs(step)));
	};
	
	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
	};
	
	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
	};
	
	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/
	
	var adder = function() {
	  return new Adder;
	};
	
	function Adder() {
	  this.reset();
	}
	
	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add$1(temp, y, this.t);
	    add$1(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};
	
	var temp = new Adder;
	
	function add$1(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}
	
	var epsilon$2 = 1e-6;
	var epsilon2$1 = 1e-12;
	var pi$3 = Math.PI;
	var halfPi$2 = pi$3 / 2;
	var quarterPi = pi$3 / 4;
	var tau$3 = pi$3 * 2;
	
	var degrees$1 = 180 / pi$3;
	var radians = pi$3 / 180;
	
	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos$1 = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;
	
	var log = Math.log;
	var pow = Math.pow;
	var sin$1 = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;
	
	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
	}
	
	function asin(x) {
	  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
	}
	
	function haversin(x) {
	  return (x = sin$1(x / 2)) * x;
	}
	
	function noop$1() {}
	
	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}
	
	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};
	
	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};
	
	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}
	
	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}
	
	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};
	
	var areaRingSum = adder();
	
	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;
	
	var areaStream = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop$1;
	  },
	  sphere: function() {
	    areaSum.add(tau$3);
	  }
	};
	
	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}
	
	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}
	
	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
	}
	
	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole
	
	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos$1(phi),
	      sinPhi = sin$1(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
	      v = k * sdLambda * sin$1(adLambda);
	  areaRingSum.add(atan2(v, u));
	
	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}
	
	var area = function(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	};
	
	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}
	
	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
	  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
	}
	
	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	
	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}
	
	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}
	
	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}
	
	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}
	
	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range;
	
	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon$2) phi1 = 90;
	    else if (deltaSum < -epsilon$2) phi0 = -90;
	    range[0] = lambda0$1, range[1] = lambda1;
	  }
	};
	
	function boundsPoint(lambda, phi) {
	  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}
	
	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees$1 * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees$1;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees$1;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}
	
	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}
	
	function boundsLineEnd() {
	  range[0] = lambda0$1, range[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}
	
	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}
	
	function boundsRingStart() {
	  areaStream.lineStart();
	}
	
	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
	  range[0] = lambda0$1, range[1] = lambda1;
	  p0 = null;
	}
	
	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}
	
	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}
	
	function rangeContains(range, x) {
	  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	}
	
	var bounds = function(feature) {
	  var i, n, a, b, merged, deltaMax, delta;
	
	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);
	
	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);
	
	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }
	
	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }
	
	  ranges = range = null;
	
	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	};
	
	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point
	
	var centroidStream = {
	  sphere: noop$1,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};
	
	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
	}
	
	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}
	
	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}
	
	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}
	
	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}
	
	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}
	
	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}
	
	var centroid = function(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);
	
	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;
	
	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2$1) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2$1) return [NaN, NaN];
	  }
	
	  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];
	};
	
	var constant$7 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var compose = function(a, b) {
	
	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }
	
	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };
	
	  return compose;
	};
	
	function rotationIdentity(lambda, phi) {
	  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	}
	
	rotationIdentity.invert = rotationIdentity;
	
	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}
	
	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	  };
	}
	
	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}
	
	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos$1(deltaPhi),
	      sinDeltaPhi = sin$1(deltaPhi),
	      cosDeltaGamma = cos$1(deltaGamma),
	      sinDeltaGamma = sin$1(deltaGamma);
	
	  function rotation(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }
	
	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };
	
	  return rotation;
	}
	
	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
	
	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }
	
	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };
	
	  return forward;
	};
	
	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos$1(radius),
	      sinRadius = sin$1(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau$3;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
	    stream.point(point[0], point[1]);
	  }
	}
	
	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;
	}
	
	var circle = function() {
	  var center = constant$7([0, 0]),
	      radius = constant$7(90),
	      precision = constant$7(6),
	      ring,
	      rotate,
	      stream = {point: point};
	
	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees$1, x[1] *= degrees$1;
	  }
	
	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }
	
	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;
	  };
	
	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;
	  };
	
	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;
	  };
	
	  return circle;
	};
	
	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$1,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};
	
	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};
	
	var pointEqual = function(a, b) {
	  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;
	};
	
	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}
	
	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;
	
	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;
	
	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }
	
	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });
	
	  if (!subject.length) return;
	
	  clip.sort(compareIntersection);
	  link$1(subject);
	  link$1(clip);
	
	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }
	
	  var start = subject[0],
	      points,
	      point;
	
	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};
	
	function link$1(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}
	
	var clipMax = 1e9;
	var clipMin = -clipMax;
	
	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
	
	function clipExtent(x0, y0, x1, y1) {
	
	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }
	
	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }
	
	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }
	
	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }
	
	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }
	
	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;
	
	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };
	
	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }
	
	    function polygonInside() {
	      var winding = 0;
	
	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }
	
	      return winding;
	    }
	
	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }
	
	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }
	
	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }
	
	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }
	
	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }
	
	    return clipStream;
	  };
	}
	
	var extent$1 = function() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;
	
	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	};
	
	var sum$1 = adder();
	
	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin$1(lambda), -cos$1(lambda), 0],
	      angle = 0,
	      winding = 0;
	
	  sum$1.reset();
	
	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin$1(phi0),
	        cosPhi0 = cos$1(phi0);
	
	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin$1(phi1),
	          cosPhi1 = cos$1(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi$3,
	          k = sinPhi0 * sinPhi1;
	
	      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;
	
	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }
	
	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.
	
	  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
	};
	
	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;
	
	var lengthStream = {
	  sphere: noop$1,
	  point: noop$1,
	  lineStart: lengthLineStart,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1
	};
	
	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}
	
	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop$1;
	}
	
	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
	  lengthStream.point = lengthPoint;
	}
	
	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin$1(phi),
	      cosPhi = cos$1(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos$1(delta),
	      sinDelta = sin$1(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}
	
	var length$1 = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};
	
	var coordinates = [null, null];
	var object$1 = {type: "LineString", coordinates: coordinates};
	
	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length$1(object$1);
	};
	
	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};
	
	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};
	
	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}
	
	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}
	
	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon$2;
	}
	
	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}
	
	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}
	
	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}
	
	var contains = function(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	};
	
	function graticuleX(y0, y1, dy) {
	  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}
	
	function graticuleY(x0, x1, dx) {
	  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}
	
	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;
	
	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }
	
	  function lines() {
	    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))
	        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));
	  }
	
	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };
	
	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };
	
	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };
	
	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };
	
	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };
	
	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };
	
	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };
	
	  return graticule
	      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
	      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
	}
	
	function graticule10() {
	  return graticule()();
	}
	
	var interpolate$1 = function(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos$1(y0),
	      sy0 = sin$1(y0),
	      cy1 = cos$1(y1),
	      sy1 = sin$1(y1),
	      kx0 = cy0 * cos$1(x0),
	      ky0 = cy0 * sin$1(x0),
	      kx1 = cy1 * cos$1(x1),
	      ky1 = cy1 * sin$1(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin$1(d);
	
	  var interpolate = d ? function(t) {
	    var B = sin$1(t *= d) / k,
	        A = sin$1(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees$1,
	      atan2(z, sqrt(x * x + y * y)) * degrees$1
	    ];
	  } : function() {
	    return [x0 * degrees$1, y0 * degrees$1];
	  };
	
	  interpolate.distance = d;
	
	  return interpolate;
	};
	
	var identity$4 = function(x) {
	  return x;
	};
	
	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;
	
	var areaStream$1 = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};
	
	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}
	
	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}
	
	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}
	
	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}
	
	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;
	
	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};
	
	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}
	
	// TODO Enforce positive area for exterior, negative area for interior?
	
	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;
	
	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};
	
	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}
	
	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}
	
	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}
	
	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}
	
	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}
	
	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}
	
	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);
	
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	
	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function PathContext(context) {
	  this._context = context;
	}
	
	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau$3);
	        break;
	      }
	    }
	  },
	  result: noop$1
	};
	
	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;
	
	var lengthStream$1 = {
	  point: noop$1,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop$1;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};
	
	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}
	
	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}
	
	function PathString() {
	  this._string = [];
	}
	
	PathString.prototype = {
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    return this._circle = circle$1(_), this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    }
	  }
	};
	
	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}
	
	var index$1 = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;
	
	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }
	
	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };
	
	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };
	
	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };
	
	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };
	
	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
	  };
	
	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };
	
	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };
	
	  return path.projection(projection).context(context);
	};
	
	var clip = function(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;
	
	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };
	
	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }
	
	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }
	
	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }
	
	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }
	
	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }
	
	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }
	
	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();
	
	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;
	
	      ring.pop();
	      polygon.push(ring);
	      ring = null;
	
	      if (!n) return;
	
	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }
	
	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	
	      segments.push(ringSegments.filter(validSegment));
	    }
	
	    return clip;
	  };
	};
	
	function validSegment(segment) {
	  return segment.length > 1;
	}
	
	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
	}
	
	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi$3, -halfPi$2]
	);
	
	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections
	
	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}
	
	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon$2
	      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
	          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}
	
	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi$2;
	    stream.point(-pi$3, phi);
	    stream.point(0, phi);
	    stream.point(pi$3, phi);
	    stream.point(pi$3, 0);
	    stream.point(pi$3, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$3, -phi);
	    stream.point(-pi$3, 0);
	    stream.point(-pi$3, phi);
	  } else if (abs(from[0] - to[0]) > epsilon$2) {
	    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}
	
	var clipCircle = function(radius, delta) {
	  var cr = cos$1(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case
	
	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }
	
	  function visible(lambda, phi) {
	    return cos$1(lambda) * cos$1(phi) > cr;
	  }
	
	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon$2;
	            point1[1] += epsilon$2;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }
	
	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);
	
	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;
	
	    // Two polar points.
	    if (!determinant) return !two && a;
	
	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);
	
	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);
	
	    if (t2 < 0) return;
	
	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);
	
	    if (!two) return q;
	
	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;
	
	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
	
	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi$3) < epsilon$2,
	        meridian = polar || delta < epsilon$2;
	
	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
	
	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }
	
	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$3 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }
	
	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
	};
	
	var transform = function(methods) {
	  return {
	    stream: transformer(methods)
	  };
	};
	
	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}
	
	function TransformStream() {}
	
	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};
	
	function fitExtent(projection, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = projection.clipExtent && projection.clipExtent();
	
	  projection
	      .scale(150)
	      .translate([0, 0]);
	
	  if (clip != null) projection.clipExtent(null);
	
	  geoStream(object, projection.stream(boundsStream$1));
	
	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	
	  if (clip != null) projection.clipExtent(clip);
	
	  return projection
	      .scale(k * 150)
	      .translate([x, y]);
	}
	
	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}
	
	var maxDepth = 16;
	var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)
	
	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};
	
	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}
	
	function resample$1(project, delta2) {
	
	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point
	
	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };
	
	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }
	
	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }
	
	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }
	
	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }
	
	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }
	
	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }
	
	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }
	
	    return resampleStream;
	  };
	}
	
	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});
	
	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}
	
	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;
	
	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }
	
	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }
	
	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }
	
	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };
	
	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };
	
	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };
	
	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };
	
	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };
	
	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };
	
	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };
	
	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };
	
	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };
	
	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };
	
	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }
	
	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }
	
	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}
	
	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi$3 / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);
	
	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
	  };
	
	  return p;
	}
	
	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos$1(phi0);
	
	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
	  }
	
	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };
	
	  return forward;
	}
	
	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;
	
	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);
	
	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;
	
	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin$1(y)) / n;
	    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
	  }
	
	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };
	
	  return project;
	}
	
	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};
	
	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};
	
	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}
	
	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var albersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};
	
	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }
	
	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };
	
	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };
	
	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };
	
	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };
	
	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];
	
	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);
	
	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    return reset();
	  };
	
	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };
	
	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };
	
	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }
	
	  return albersUsa.scale(1070);
	};
	
	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos$1(x),
	        cy = cos$1(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin$1(x),
	      k * sin$1(y)
	    ];
	  }
	}
	
	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin$1(c),
	        cc = cos$1(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}
	
	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});
	
	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});
	
	var azimuthalEqualArea = function() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};
	
	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin$1(c);
	});
	
	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});
	
	var azimuthalEquidistant = function() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};
	
	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi$2 + phi) / 2))];
	}
	
	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi$2];
	};
	
	var mercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau$3);
	};
	
	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent
	
	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };
	
	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };
	
	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };
	
	  m.clipExtent = function(_) {
	    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };
	
	  function reclip() {
	    var k = pi$3 * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }
	
	  return reclip();
	}
	
	function tany(y) {
	  return tan((halfPi$2 + y) / 2);
	}
	
	function conicConformalRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;
	
	  if (!n) return mercatorRaw;
	
	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
	    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
	    var r = f / pow(tany(y), n);
	    return [r * sin$1(n * x), f - r * cos$1(n * x)];
	  }
	
	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];
	  };
	
	  return project;
	}
	
	var conicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};
	
	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}
	
	equirectangularRaw.invert = equirectangularRaw;
	
	var equirectangular = function() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	};
	
	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
	      g = cy0 / n + y0;
	
	  if (abs(n) < epsilon$2) return equirectangularRaw;
	
	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin$1(nx), g - gy * cos$1(nx)];
	  }
	
	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };
	
	  return project;
	}
	
	var conicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};
	
	function gnomonicRaw(x, y) {
	  var cy = cos$1(y), k = cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	gnomonicRaw.invert = azimuthalInvert(atan);
	
	var gnomonic = function() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};
	
	function scaleTranslate(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}
	
	var identity$5 = function() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect
	      x0 = null, y0, x1, y1, clip = identity$4, // clip extent
	      cache,
	      cacheStream,
	      projection;
	
	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }
	
	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    }
	  };
	};
	
	function orthographicRaw(x, y) {
	  return [cos$1(y) * sin$1(x), sin$1(y)];
	}
	
	orthographicRaw.invert = azimuthalInvert(asin);
	
	var orthographic = function() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon$2);
	};
	
	function stereographicRaw(x, y) {
	  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});
	
	var stereographic = function() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};
	
	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi$2 + phi) / 2)), -lambda];
	}
	
	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi$2];
	};
	
	var transverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;
	
	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };
	
	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };
	
	  return rotate([0, 0, 90])
	      .scale(159.155);
	};
	
	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}
	
	function meanXReduce(x, c) {
	  return x + c.x;
	}
	
	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}
	
	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}
	
	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}
	
	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}
	
	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;
	
	  function cluster(root) {
	    var previousNode,
	        x = 0;
	
	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });
	
	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;
	
	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }
	
	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };
	
	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };
	
	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return cluster;
	};
	
	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}
	
	var node_count = function() {
	  return this.eachAfter(count);
	};
	
	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};
	
	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};
	
	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};
	
	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};
	
	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};
	
	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};
	
	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}
	
	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};
	
	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};
	
	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};
	
	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};
	
	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;
	
	  if (children == null) children = defaultChildren;
	
	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }
	
	  return root.eachBefore(computeHeight);
	}
	
	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}
	
	function defaultChildren(d) {
	  return d.children;
	}
	
	function copyData(node) {
	  node.data = node.data.data;
	}
	
	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}
	
	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}
	
	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};
	
	function Node$2(value) {
	  this._ = value;
	  this.next = null;
	}
	
	var shuffle$1 = function(array) {
	  var i,
	      n = (array = array.slice()).length,
	      head = null,
	      node = head;
	
	  while (n) {
	    var next = new Node$2(array[n - 1]);
	    if (node) node = node.next = next;
	    else node = head = next;
	    array[i] = array[--n];
	  }
	
	  return {
	    head: head,
	    tail: node
	  };
	};
	
	var enclose = function(circles) {
	  return encloseN(shuffle$1(circles), []);
	};
	
	function encloses(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r - b.r;
	  return dr * dr + 1e-6 > dx * dx + dy * dy;
	}
	
	// Returns the smallest circle that contains circles L and intersects circles B.
	function encloseN(L, B) {
	  var circle,
	      l0 = null,
	      l1 = L.head,
	      l2,
	      p1;
	
	  switch (B.length) {
	    case 1: circle = enclose1(B[0]); break;
	    case 2: circle = enclose2(B[0], B[1]); break;
	    case 3: circle = enclose3(B[0], B[1], B[2]); break;
	  }
	
	  while (l1) {
	    p1 = l1._, l2 = l1.next;
	    if (!circle || !encloses(circle, p1)) {
	
	      // Temporarily truncate L before l1.
	      if (l0) L.tail = l0, l0.next = null;
	      else L.head = L.tail = null;
	
	      B.push(p1);
	      circle = encloseN(L, B); // Note: reorders L!
	      B.pop();
	
	      // Move l1 to the front of L and reconnect the truncated list L.
	      if (L.head) l1.next = L.head, L.head = l1;
	      else l1.next = null, L.head = L.tail = l1;
	      l0 = L.tail, l0.next = l2;
	
	    } else {
	      l0 = l1;
	    }
	    l1 = l2;
	  }
	
	  L.tail = l0;
	  return circle;
	}
	
	function enclose1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}
	
	function enclose2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}
	
	function enclose3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = 2 * (x1 - x2),
	      b2 = 2 * (y1 - y2),
	      c2 = 2 * (r2 - r1),
	      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
	      a3 = 2 * (x1 - x3),
	      b3 = 2 * (y1 - y3),
	      c3 = 2 * (r3 - r1),
	      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / ab - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / ab - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (xa * xb + ya * yb + r1),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
	  return {
	    x: xa + xb * r + x1,
	    y: ya + yb * r + y1,
	    r: r
	  };
	}
	
	function place(a, b, c) {
	  var ax = a.x,
	      ay = a.y,
	      da = b.r + c.r,
	      db = a.r + c.r,
	      dx = b.x - ax,
	      dy = b.y - ay,
	      dc = dx * dx + dy * dy;
	  if (dc) {
	    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
	        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	    c.x = ax + x * dx + y * dy;
	    c.y = ay + x * dy - y * dx;
	  } else {
	    c.x = ax + db;
	    c.y = ay;
	  }
	}
	
	function intersects(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r + b.r;
	  return dr * dr - 1e-6 > dx * dx + dy * dy;
	}
	
	function distance2(node, x, y) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab - x,
	      dy = (a.y * b.r + b.y * a.r) / ab - y;
	  return dx * dx + dy * dy;
	}
	
	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}
	
	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;
	
	  var a, b, c, n;
	
	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;
	
	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;
	
	  // Place the third circle.
	  place(b, a, c = circles[2]);
	
	  // Initialize the weighted centroid.
	  var aa = a.r * a.r,
	      ba = b.r * b.r,
	      ca = c.r * c.r,
	      oa = aa + ba + ca,
	      ox = aa * a.x + ba * b.x + ca * c.x,
	      oy = aa * a.y + ba * b.y + ca * c.y,
	      cx, cy, i, j, k, sj, sk;
	
	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;
	
	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);
	
	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);
	
	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;
	
	    // Update the weighted centroid.
	    oa += ca = c._.r * c._.r;
	    ox += ca * c._.x;
	    oy += ca * c._.y;
	
	    // Compute the new closest circle pair to the centroid.
	    aa = distance2(a, cx = ox / oa, cy = oy / oa);
	    while ((c = c.next) !== b) {
	      if ((ca = distance2(c, cx, cy)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }
	
	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);
	
	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;
	
	  return c.r;
	}
	
	var siblings = function(circles) {
	  packEnclose(circles);
	  return circles;
	};
	
	function optional(f) {
	  return f == null ? null : required(f);
	}
	
	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}
	
	function constantZero() {
	  return 0;
	}
	
	var constant$8 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function defaultRadius$1(d) {
	  return Math.sqrt(d.value);
	}
	
	var index$2 = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;
	
	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius$1))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }
	
	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };
	
	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };
	
	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;
	  };
	
	  return pack;
	};
	
	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}
	
	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;
	
	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}
	
	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}
	
	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};
	
	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};
	
	var partition = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;
	
	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }
	
	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };
	
	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };
	
	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };
	
	  return partition;
	};
	
	var keyPrefix$1 = "$";
	var preroot = {depth: -1};
	var ambiguous = {};
	
	function defaultId(d) {
	  return d.id;
	}
	
	function defaultParentId(d) {
	  return d.parentId;
	}
	
	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;
	
	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};
	
	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix$1 + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix$1 + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }
	
	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");
	
	    return root;
	  }
	
	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };
	
	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };
	
	  return stratify;
	};
	
	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }
	
	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}
	
	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}
	
	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}
	
	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}
	
	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}
	
	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}
	
	TreeNode.prototype = Object.create(Node.prototype);
	
	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;
	
	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }
	
	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}
	
	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;
	
	  function tree(root) {
	    var t = treeRoot(root);
	
	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);
	
	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);
	
	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }
	
	    return root;
	  }
	
	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }
	
	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }
	
	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }
	
	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }
	
	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };
	
	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };
	
	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return tree;
	};
	
	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};
	
	var phi = (1 + Math.sqrt(5)) / 2;
	
	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;
	
	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;
	
	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);
	
	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }
	
	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }
	
	  return rows;
	}
	
	var squarify = ((function custom(ratio) {
	
	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }
	
	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return squarify;
	}))(phi);
	
	var index$3 = function() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;
	
	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }
	
	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };
	
	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };
	
	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };
	
	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };
	
	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;
	  };
	
	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };
	
	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;
	  };
	
	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;
	  };
	
	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
	  };
	
	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;
	  };
	
	  return treemap;
	};
	
	var binary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);
	
	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }
	
	  partition(0, n, parent.value, x0, y0, x1, y1);
	
	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }
	
	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;
	
	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }
	
	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;
	
	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;
	
	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	};
	
	var sliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};
	
	var resquarify = ((function custom(ratio) {
	
	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;
	
	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }
	
	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return resquarify;
	}))(phi);
	
	var area$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      a,
	      b = polygon[n - 1],
	      area = 0;
	
	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    area += a[1] * b[0] - a[0] * b[1];
	  }
	
	  return area / 2;
	};
	
	var centroid$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      x = 0,
	      y = 0,
	      a,
	      b = polygon[n - 1],
	      c,
	      k = 0;
	
	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    k += c = a[0] * b[1] - b[0] * a[1];
	    x += (a[0] + b[0]) * c;
	    y += (a[1] + b[1]) * c;
	  }
	
	  return k *= 3, [x / k, y / k];
	};
	
	// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
	// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
	// right, +y is up). Returns a positive value if ABC is counter-clockwise,
	// negative if clockwise, and zero if the points are collinear.
	var cross$1 = function(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	};
	
	function lexicographicOrder(a, b) {
	  return a[0] - b[0] || a[1] - b[1];
	}
	
	// Computes the upper convex hull per the monotone chain algorithm.
	// Assumes points.length >= 3, is sorted by x, unique in y.
	// Returns an array of indices into points in left-to-right order.
	function computeUpperHullIndexes(points) {
	  var n = points.length,
	      indexes = [0, 1],
	      size = 2;
	
	  for (var i = 2; i < n; ++i) {
	    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
	    indexes[size++] = i;
	  }
	
	  return indexes.slice(0, size); // remove popped points
	}
	
	var hull = function(points) {
	  if ((n = points.length) < 3) return null;
	
	  var i,
	      n,
	      sortedPoints = new Array(n),
	      flippedPoints = new Array(n);
	
	  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
	  sortedPoints.sort(lexicographicOrder);
	  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];
	
	  var upperIndexes = computeUpperHullIndexes(sortedPoints),
	      lowerIndexes = computeUpperHullIndexes(flippedPoints);
	
	  // Construct the hull polygon, removing possible duplicate endpoints.
	  var skipLeft = lowerIndexes[0] === upperIndexes[0],
	      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
	      hull = [];
	
	  // Add upper hull in right-to-l order.
	  // Then add lower hull in left-to-right order.
	  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
	  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
	
	  return hull;
	};
	
	var contains$1 = function(polygon, point) {
	  var n = polygon.length,
	      p = polygon[n - 1],
	      x = point[0], y = point[1],
	      x0 = p[0], y0 = p[1],
	      x1, y1,
	      inside = false;
	
	  for (var i = 0; i < n; ++i) {
	    p = polygon[i], x1 = p[0], y1 = p[1];
	    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
	    x0 = x1, y0 = y1;
	  }
	
	  return inside;
	};
	
	var length$2 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      b = polygon[n - 1],
	      xa,
	      ya,
	      xb = b[0],
	      yb = b[1],
	      perimeter = 0;
	
	  while (++i < n) {
	    xa = xb;
	    ya = yb;
	    b = polygon[i];
	    xb = b[0];
	    yb = b[1];
	    xa -= xb;
	    ya -= yb;
	    perimeter += Math.sqrt(xa * xa + ya * ya);
	  }
	
	  return perimeter;
	};
	
	var slice$3 = [].slice;
	
	var noabort = {};
	
	function Queue(size) {
	  if (!(size >= 1)) throw new Error;
	  this._size = size;
	  this._call =
	  this._error = null;
	  this._tasks = [];
	  this._data = [];
	  this._waiting =
	  this._active =
	  this._ended =
	  this._start = 0; // inside a synchronous task callback?
	}
	
	Queue.prototype = queue.prototype = {
	  constructor: Queue,
	  defer: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    if (this._error != null) return this;
	    var t = slice$3.call(arguments, 1);
	    t.push(callback);
	    ++this._waiting, this._tasks.push(t);
	    poke$1(this);
	    return this;
	  },
	  abort: function() {
	    if (this._error == null) abort(this, new Error("abort"));
	    return this;
	  },
	  await: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
	    maybeNotify(this);
	    return this;
	  },
	  awaitAll: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = callback;
	    maybeNotify(this);
	    return this;
	  }
	};
	
	function poke$1(q) {
	  if (!q._start) {
	    try { start$1(q); } // let the current task complete
	    catch (e) {
	      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
	      else if (!q._data) throw e; // await callback errored synchronously
	    }
	  }
	}
	
	function start$1(q) {
	  while (q._start = q._waiting && q._active < q._size) {
	    var i = q._ended + q._active,
	        t = q._tasks[i],
	        j = t.length - 1,
	        c = t[j];
	    t[j] = end(q, i);
	    --q._waiting, ++q._active;
	    t = c.apply(null, t);
	    if (!q._tasks[i]) continue; // task finished synchronously
	    q._tasks[i] = t || noabort;
	  }
	}
	
	function end(q, i) {
	  return function(e, r) {
	    if (!q._tasks[i]) return; // ignore multiple callbacks
	    --q._active, ++q._ended;
	    q._tasks[i] = null;
	    if (q._error != null) return; // ignore secondary errors
	    if (e != null) {
	      abort(q, e);
	    } else {
	      q._data[i] = r;
	      if (q._waiting) poke$1(q);
	      else maybeNotify(q);
	    }
	  };
	}
	
	function abort(q, e) {
	  var i = q._tasks.length, t;
	  q._error = e; // ignore active callbacks
	  q._data = undefined; // allow gc
	  q._waiting = NaN; // prevent starting
	
	  while (--i >= 0) {
	    if (t = q._tasks[i]) {
	      q._tasks[i] = null;
	      if (t.abort) {
	        try { t.abort(); }
	        catch (e) { /* ignore */ }
	      }
	    }
	  }
	
	  q._active = NaN; // allow notification
	  maybeNotify(q);
	}
	
	function maybeNotify(q) {
	  if (!q._active && q._call) {
	    var d = q._data;
	    q._data = undefined; // allow gc
	    q._call(q._error, d);
	  }
	}
	
	function queue(concurrency) {
	  return new Queue(arguments.length ? +concurrency : Infinity);
	}
	
	var uniform = function(min, max) {
	  min = min == null ? 0 : +min;
	  max = max == null ? 1 : +max;
	  if (arguments.length === 1) max = min, min = 0;
	  else max -= min;
	  return function() {
	    return Math.random() * max + min;
	  };
	};
	
	var normal = function(mu, sigma) {
	  var x, r;
	  mu = mu == null ? 0 : +mu;
	  sigma = sigma == null ? 1 : +sigma;
	  return function() {
	    var y;
	
	    // If available, use the second previously-generated uniform random.
	    if (x != null) y = x, x = null;
	
	    // Otherwise, generate a new x and y.
	    else do {
	      x = Math.random() * 2 - 1;
	      y = Math.random() * 2 - 1;
	      r = x * x + y * y;
	    } while (!r || r > 1);
	
	    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
	  };
	};
	
	var logNormal = function() {
	  var randomNormal = normal.apply(this, arguments);
	  return function() {
	    return Math.exp(randomNormal());
	  };
	};
	
	var irwinHall = function(n) {
	  return function() {
	    for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
	    return sum;
	  };
	};
	
	var bates = function(n) {
	  var randomIrwinHall = irwinHall(n);
	  return function() {
	    return randomIrwinHall() / n;
	  };
	};
	
	var exponential$1 = function(lambda) {
	  return function() {
	    return -Math.log(1 - Math.random()) / lambda;
	  };
	};
	
	var request = function(url, callback) {
	  var request,
	      event = dispatch("beforesend", "progress", "load", "error"),
	      mimeType,
	      headers = map$1(),
	      xhr = new XMLHttpRequest,
	      user = null,
	      password = null,
	      response,
	      responseType,
	      timeout = 0;
	
	  // If IE does not support CORS, use XDomainRequest.
	  if (typeof XDomainRequest !== "undefined"
	      && !("withCredentials" in xhr)
	      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;
	
	  "onload" in xhr
	      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
	      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };
	
	  function respond(o) {
	    var status = xhr.status, result;
	    if (!status && hasResponse(xhr)
	        || status >= 200 && status < 300
	        || status === 304) {
	      if (response) {
	        try {
	          result = response.call(request, xhr);
	        } catch (e) {
	          event.call("error", request, e);
	          return;
	        }
	      } else {
	        result = xhr;
	      }
	      event.call("load", request, result);
	    } else {
	      event.call("error", request, o);
	    }
	  }
	
	  xhr.onprogress = function(e) {
	    event.call("progress", request, e);
	  };
	
	  request = {
	    header: function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers.get(name);
	      if (value == null) headers.remove(name);
	      else headers.set(name, value + "");
	      return request;
	    },
	
	    // If mimeType is non-null and no Accept header is set, a default is used.
	    mimeType: function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return request;
	    },
	
	    // Specifies what type the response value should take;
	    // for instance, arraybuffer, blob, document, or text.
	    responseType: function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return request;
	    },
	
	    timeout: function(value) {
	      if (!arguments.length) return timeout;
	      timeout = +value;
	      return request;
	    },
	
	    user: function(value) {
	      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
	    },
	
	    password: function(value) {
	      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
	    },
	
	    // Specify how to convert the response content to a specific type;
	    // changes the callback value on "load" events.
	    response: function(value) {
	      response = value;
	      return request;
	    },
	
	    // Alias for send("GET", …).
	    get: function(data, callback) {
	      return request.send("GET", data, callback);
	    },
	
	    // Alias for send("POST", …).
	    post: function(data, callback) {
	      return request.send("POST", data, callback);
	    },
	
	    // If callback is non-null, it will be used for error and load events.
	    send: function(method, data, callback) {
	      xhr.open(method, url, true, user, password);
	      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
	      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
	      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
	      if (responseType != null) xhr.responseType = responseType;
	      if (timeout > 0) xhr.timeout = timeout;
	      if (callback == null && typeof data === "function") callback = data, data = null;
	      if (callback != null && callback.length === 1) callback = fixCallback(callback);
	      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
	      event.call("beforesend", request, xhr);
	      xhr.send(data == null ? null : data);
	      return request;
	    },
	
	    abort: function() {
	      xhr.abort();
	      return request;
	    },
	
	    on: function() {
	      var value = event.on.apply(event, arguments);
	      return value === event ? request : value;
	    }
	  };
	
	  if (callback != null) {
	    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    return request.get(callback);
	  }
	
	  return request;
	};
	
	function fixCallback(callback) {
	  return function(error, xhr) {
	    callback(error == null ? xhr : null);
	  };
	}
	
	function hasResponse(xhr) {
	  var type = xhr.responseType;
	  return type && type !== "text"
	      ? xhr.response // null on error
	      : xhr.responseText; // "" on error
	}
	
	var type$1 = function(defaultMimeType, response) {
	  return function(url, callback) {
	    var r = request(url).mimeType(defaultMimeType).response(response);
	    if (callback != null) {
	      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	      return r.get(callback);
	    }
	    return r;
	  };
	};
	
	var html = type$1("text/html", function(xhr) {
	  return document.createRange().createContextualFragment(xhr.responseText);
	});
	
	var json = type$1("application/json", function(xhr) {
	  return JSON.parse(xhr.responseText);
	});
	
	var text = type$1("text/plain", function(xhr) {
	  return xhr.responseText;
	});
	
	var xml = type$1("application/xml", function(xhr) {
	  var xml = xhr.responseXML;
	  if (!xml) throw new Error("parse error");
	  return xml;
	});
	
	var dsv$1 = function(defaultMimeType, parse) {
	  return function(url, row, callback) {
	    if (arguments.length < 3) callback = row, row = null;
	    var r = request(url).mimeType(defaultMimeType);
	    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
	    r.row(row);
	    return callback ? r.get(callback) : r;
	  };
	};
	
	function responseOf(parse, row) {
	  return function(request$$1) {
	    return parse(request$$1.responseText, row);
	  };
	}
	
	var csv$1 = dsv$1("text/csv", csvParse);
	
	var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);
	
	var array$2 = Array.prototype;
	
	var map$3 = array$2.map;
	var slice$4 = array$2.slice;
	
	var implicit = {name: "implicit"};
	
	function ordinal(range) {
	  var index = map$1(),
	      domain = [],
	      unknown = implicit;
	
	  range = range == null ? [] : slice$4.call(range);
	
	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$1();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$4.call(_), scale) : range.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return scale;
	}
	
	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;
	
	  delete scale.unknown;
	
	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };
	
	  scale.bandwidth = function() {
	    return bandwidth;
	  };
	
	  scale.step = function() {
	    return step;
	  };
	
	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };
	
	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };
	
	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };
	
	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };
	
	  return rescale();
	}
	
	function pointish(scale) {
	  var copy = scale.copy;
	
	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;
	
	  scale.copy = function() {
	    return pointish(copy());
	  };
	
	  return scale;
	}
	
	function point$1() {
	  return pointish(band().paddingInner(1));
	}
	
	var constant$9 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var number$1 = function(x) {
	  return +x;
	};
	
	var unit = [0, 1];
	
	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$9(b);
	}
	
	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}
	
	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}
	
	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}
	
	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;
	
	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }
	
	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }
	
	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}
	
	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}
	
	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = interpolateValue,
	      clamp = false,
	      piecewise,
	      output,
	      input;
	
	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }
	
	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }
	
	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale();
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };
	
	  return rescale();
	}
	
	var tickFormat = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return exports.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return exports.format(specifier);
	};
	
	function linearish(scale) {
	  var domain = scale.domain;
	
	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };
	
	  scale.nice = function(count) {
	    var d = domain(),
	        i = d.length - 1,
	        n = count == null ? 10 : count,
	        start = d[0],
	        stop = d[i],
	        step = tickStep(start, stop, n);
	
	    if (step) {
	      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
	      d[0] = Math.floor(start / step) * step;
	      d[i] = Math.ceil(stop / step) * step;
	      domain(d);
	    }
	
	    return scale;
	  };
	
	  return scale;
	}
	
	function linear$2() {
	  var scale = continuous(deinterpolateLinear, reinterpolate);
	
	  scale.copy = function() {
	    return copy(scale, linear$2());
	  };
	
	  return linearish(scale);
	}
	
	function identity$6() {
	  var domain = [0, 1];
	
	  function scale(x) {
	    return +x;
	  }
	
	  scale.invert = scale;
	
	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();
	  };
	
	  scale.copy = function() {
	    return identity$6().domain(domain);
	  };
	
	  return linearish(scale);
	}
	
	var nice = function(domain, interval) {
	  domain = domain.slice();
	
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;
	
	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }
	
	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};
	
	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$9(b);
	}
	
	function reinterpolate$1(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}
	
	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}
	
	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}
	
	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}
	
	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}
	
	function log$1() {
	  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);
	
	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }
	
	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	
	    if (r = v < u) i = u, u = v, v = i;
	
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];
	
	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }
	
	    return r ? z.reverse() : z;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = exports.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };
	
	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };
	
	  scale.copy = function() {
	    return copy(scale, log$1().base(base));
	  };
	
	  return scale;
	}
	
	function raise$1(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}
	
	function pow$1() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;
	
	  function deinterpolate(a, b) {
	    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
	        ? function(x) { return (raise$1(x, exponent) - a) / b; }
	        : constant$9(b);
	  }
	
	  function reinterpolate(a, b) {
	    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
	    return function(t) { return raise$1(a + b * t, 1 / exponent); };
	  }
	
	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };
	
	  scale.copy = function() {
	    return copy(scale, pow$1().exponent(exponent));
	  };
	
	  return linearish(scale);
	}
	
	function sqrt$1() {
	  return pow$1().exponent(0.5);
	}
	
	function quantile$$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];
	
	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }
	
	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
	  }
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.quantiles = function() {
	    return thresholds.slice();
	  };
	
	  scale.copy = function() {
	    return quantile$$1()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	function quantize$1() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];
	
	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }
	
	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return quantize$1()
	        .domain([x0, x1])
	        .range(range$$1);
	  };
	
	  return linearish(scale);
	}
	
	function threshold$1() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;
	
	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	var t0$1 = new Date;
	var t1$1 = new Date;
	
	function newInterval(floori, offseti, count, field) {
	
	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }
	
	  interval.floor = interval;
	
	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };
	
	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };
	
	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };
	
	  interval.range = function(start, stop, step) {
	    var range = [];
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
	    return range;
	  };
	
	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
	    });
	  };
	
	  if (count) {
	    interval.count = function(start, end) {
	      t0$1.setTime(+start), t1$1.setTime(+end);
	      floori(t0$1), floori(t1$1);
	      return Math.floor(count(t0$1, t1$1));
	    };
	
	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }
	
	  return interval;
	}
	
	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});
	
	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	
	var milliseconds = millisecond.range;
	
	var durationSecond$1 = 1e3;
	var durationMinute$1 = 6e4;
	var durationHour$1 = 36e5;
	var durationDay$1 = 864e5;
	var durationWeek$1 = 6048e5;
	
	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond$1);
	}, function(start, end) {
	  return (end - start) / durationSecond$1;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	
	var seconds = second.range;
	
	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getMinutes();
	});
	
	var minutes = minute.range;
	
	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
	  if (offset < 0) offset += durationHour$1;
	  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getHours();
	});
	
	var hours = hour.range;
	
	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;
	}, function(date) {
	  return date.getDate() - 1;
	});
	
	var days = day.range;
	
	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
	  });
	}
	
	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);
	
	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;
	
	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	
	var months = month.range;
	
	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});
	
	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	
	var years = year.range;
	
	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	
	var utcMinutes = utcMinute.range;
	
	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getUTCHours();
	});
	
	var utcHours = utcHour.range;
	
	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay$1;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	
	var utcDays = utcDay.range;
	
	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek$1;
	  });
	}
	
	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);
	
	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;
	
	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	
	var utcMonths = utcMonth.range;
	
	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});
	
	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	
	var utcYears = utcYear.range;
	
	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}
	
	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}
	
	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}
	
	function formatLocale$1(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "S": formatSeconds,
	    "U": formatWeekNumberSunday,
	    "w": formatWeekdayNumber,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "S": formatUTCSeconds,
	    "U": formatUTCWeekNumberSunday,
	    "w": formatUTCWeekdayNumber,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "S": parseSeconds,
	    "U": parseWeekNumberSunday,
	    "w": parseWeekdayNumber,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };
	
	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);
	
	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	
	      if (!(date instanceof Date)) date = new Date(+date);
	
	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }
	
	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }
	
	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0);
	      if (i != string.length) return null;
	
	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;
	
	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }
	
	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }
	
	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }
	
	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;
	
	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }
	
	    return j;
	  }
	
	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }
	
	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }
	
	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }
	
	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }
	
	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }
	
	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }
	
	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }
	
	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }
	
	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }
	
	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }
	
	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }
	
	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }
	
	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }
	
	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}
	
	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	
	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}
	
	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}
	
	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}
	
	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}
	
	function parseWeekdayNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}
	
	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}
	
	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}
	
	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}
	
	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}
	
	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}
	
	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}
	
	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}
	
	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}
	
	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}
	
	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}
	
	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}
	
	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}
	
	function formatDayOfYear(d, p) {
	  return pad(1 + day.count(year(d), d), p, 3);
	}
	
	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}
	
	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}
	
	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}
	
	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}
	
	function formatWeekNumberSunday(d, p) {
	  return pad(sunday.count(year(d), d), p, 2);
	}
	
	function formatWeekdayNumber(d) {
	  return d.getDay();
	}
	
	function formatWeekNumberMonday(d, p) {
	  return pad(monday.count(year(d), d), p, 2);
	}
	
	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}
	
	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}
	
	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}
	
	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}
	
	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}
	
	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}
	
	function formatUTCDayOfYear(d, p) {
	  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
	}
	
	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}
	
	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}
	
	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}
	
	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}
	
	function formatUTCWeekNumberSunday(d, p) {
	  return pad(utcSunday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCWeekdayNumber(d) {
	  return d.getUTCDay();
	}
	
	function formatUTCWeekNumberMonday(d, p) {
	  return pad(utcMonday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}
	
	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}
	
	function formatUTCZone() {
	  return "+0000";
	}
	
	function formatLiteralPercent() {
	  return "%";
	}
	
	var locale$2;
	
	
	
	
	
	defaultLocale$1({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	
	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  exports.timeFormat = locale$2.format;
	  exports.timeParse = locale$2.parse;
	  exports.utcFormat = locale$2.utcFormat;
	  exports.utcParse = locale$2.utcParse;
	  return locale$2;
	}
	
	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
	
	function formatIsoNative(date) {
	  return date.toISOString();
	}
	
	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);
	
	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}
	
	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);
	
	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;
	
	function date$1(t) {
	  return new Date(t);
	}
	
	function number$2(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}
	
	function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, reinterpolate),
	      invert = scale.invert,
	      domain = scale.domain;
	
	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");
	
	  var tickIntervals = [
	    [second$$1,  1,      durationSecond],
	    [second$$1,  5,  5 * durationSecond],
	    [second$$1, 15, 15 * durationSecond],
	    [second$$1, 30, 30 * durationSecond],
	    [minute$$1,  1,      durationMinute],
	    [minute$$1,  5,  5 * durationMinute],
	    [minute$$1, 15, 15 * durationMinute],
	    [minute$$1, 30, 30 * durationMinute],
	    [  hour$$1,  1,      durationHour  ],
	    [  hour$$1,  3,  3 * durationHour  ],
	    [  hour$$1,  6,  6 * durationHour  ],
	    [  hour$$1, 12, 12 * durationHour  ],
	    [   day$$1,  1,      durationDay   ],
	    [   day$$1,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];
	
	  function tickFormat(date) {
	    return (second$$1(date) < date ? formatMillisecond
	        : minute$$1(date) < date ? formatSecond
	        : hour$$1(date) < date ? formatMinute
	        : day$$1(date) < date ? formatHour
	        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year$$1(date) < date ? formatMonth
	        : formatYear)(date);
	  }
	
	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;
	
	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = tickStep(start, stop, interval);
	        interval = millisecond$$1;
	      }
	    }
	
	    return step == null ? interval : interval.every(step);
	  }
	
	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
	  };
	
	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };
	
	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };
	
	  scale.copy = function() {
	    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };
	
	  return scale;
	}
	
	var time = function() {
	  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};
	
	var utcTime = function() {
	  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};
	
	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};
	
	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
	
	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
	
	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
	
	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
	
	var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));
	
	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var rainbow = cubehelix();
	
	var rainbow$1 = function(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	};
	
	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}
	
	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
	
	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
	
	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
	
	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
	
	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;
	
	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };
	
	  return linearish(scale);
	}
	
	var constant$10 = function(x) {
	  return function constant() {
	    return x;
	  };
	};
	
	var abs$1 = Math.abs;
	var atan2$1 = Math.atan2;
	var cos$2 = Math.cos;
	var max$2 = Math.max;
	var min$1 = Math.min;
	var sin$2 = Math.sin;
	var sqrt$2 = Math.sqrt;
	
	var epsilon$3 = 1e-12;
	var pi$4 = Math.PI;
	var halfPi$3 = pi$4 / 2;
	var tau$4 = 2 * pi$4;
	
	function acos$1(x) {
	  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
	}
	
	function asin$1(x) {
	  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
	}
	
	function arcInnerRadius(d) {
	  return d.innerRadius;
	}
	
	function arcOuterRadius(d) {
	  return d.outerRadius;
	}
	
	function arcStartAngle(d) {
	  return d.startAngle;
	}
	
	function arcEndAngle(d) {
	  return d.endAngle;
	}
	
	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}
	
	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}
	
	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;
	
	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	
	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}
	
	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant$10(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;
	
	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi$3,
	        a1 = endAngle.apply(this, arguments) - halfPi$3,
	        da = abs$1(a1 - a0),
	        cw = a1 > a0;
	
	    if (!context) context = buffer = path();
	
	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;
	
	    // Is it a point?
	    if (!(r1 > epsilon$3)) context.moveTo(0, 0);
	
	    // Or is it a circle or annulus?
	    else if (da > tau$4 - epsilon$3) {
	      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$3) {
	        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }
	
	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
	          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;
	
	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$3) {
	        var p0 = asin$1(rp / r0 * sin$2(ap)),
	            p1 = asin$1(rp / r1 * sin$2(ap));
	        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }
	
	      var x01 = r1 * cos$2(a01),
	          y01 = r1 * sin$2(a01),
	          x10 = r0 * cos$2(a10),
	          y10 = r0 * sin$2(a10);
	
	      // Apply rounded corners?
	      if (rc > epsilon$3) {
	        var x11 = r1 * cos$2(a11),
	            y11 = r1 * sin$2(a11),
	            x00 = r0 * cos$2(a00),
	            y00 = r0 * sin$2(a00);
	
	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$4) {
	          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
	              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min$1(rc, (r0 - lc) / (kc - 1));
	          rc1 = min$1(rc, (r1 - lc) / (kc + 1));
	        }
	      }
	
	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);
	
	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$3) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
	
	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
	
	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);
	
	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$3) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
	
	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }
	
	    context.closePath();
	
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
	    return [cos$2(a) * r, sin$2(a) * r];
	  };
	
	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;
	  };
	
	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;
	  };
	
	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;
	  };
	
	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
	  };
	
	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;
	  };
	
	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;
	  };
	
	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;
	  };
	
	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };
	
	  return arc;
	};
	
	function Linear(context) {
	  this._context = context;
	}
	
	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};
	
	var curveLinear = function(context) {
	  return new Linear(context);
	};
	
	function x$3(p) {
	  return p[0];
	}
	
	function y$3(p) {
	  return p[1];
	}
	
	var line = function() {
	  var x$$1 = x$3,
	      y$$1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : x$$1;
	  };
	
	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : y$$1;
	  };
	
	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;
	  };
	
	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };
	
	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };
	
	  return line;
	};
	
	var area$2 = function() {
	  var x0 = x$3,
	      x1 = null,
	      y0 = constant$10(0),
	      y1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }
	
	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;
	  };
	
	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;
	  };
	
	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;
	  };
	
	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;
	  };
	
	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;
	  };
	
	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;
	  };
	
	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };
	
	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };
	
	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };
	
	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;
	  };
	
	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };
	
	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };
	
	  return area;
	};
	
	var descending$1 = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};
	
	var identity$7 = function(d) {
	  return d;
	};
	
	var pie = function() {
	  var value = identity$7,
	      sortValues = descending$1,
	      sort = null,
	      startAngle = constant$10(0),
	      endAngle = constant$10(tau$4),
	      padAngle = constant$10(0);
	
	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;
	
	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }
	
	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });
	
	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }
	
	    return arcs;
	  }
	
	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;
	  };
	
	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };
	
	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };
	
	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;
	  };
	
	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;
	  };
	
	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;
	  };
	
	  return pie;
	};
	
	var curveRadialLinear = curveRadial(curveLinear);
	
	function Radial(curve) {
	  this._curve = curve;
	}
	
	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};
	
	function curveRadial(curve) {
	
	  function radial(context) {
	    return new Radial(curve(context));
	  }
	
	  radial._curve = curve;
	
	  return radial;
	}
	
	function radialLine(l) {
	  var c = l.curve;
	
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	
	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };
	
	  return l;
	}
	
	var radialLine$1 = function() {
	  return radialLine(line().curve(curveRadialLinear));
	};
	
	var radialArea = function() {
	  var a = area$2().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;
	
	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;
	
	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };
	
	  return a;
	};
	
	var circle$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$4);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$4);
	  }
	};
	
	var cross$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};
	
	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;
	
	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};
	
	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
	var kx = Math.sin(tau$4 / 10) * kr;
	var ky = -Math.cos(tau$4 / 10) * kr;
	
	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$4 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};
	
	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};
	
	var sqrt3 = Math.sqrt(3);
	
	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};
	
	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;
	
	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};
	
	var symbols = [
	  circle$2,
	  cross$2,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];
	
	var symbol = function() {
	  var type = constant$10(circle$2),
	      size = constant$10(64),
	      context = null;
	
	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;
	  };
	
	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;
	  };
	
	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };
	
	  return symbol;
	};
	
	var noop$2 = function() {};
	
	function point$2(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}
	
	function Basis(context) {
	  this._context = context;
	}
	
	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point$2(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basis$2 = function(context) {
	  return new Basis(context);
	};
	
	function BasisClosed(context) {
	  this._context = context;
	}
	
	BasisClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basisClosed$1 = function(context) {
	  return new BasisClosed(context);
	};
	
	function BasisOpen(context) {
	  this._context = context;
	}
	
	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};
	
	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}
	
	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;
	
	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;
	
	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }
	
	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	var bundle = ((function custom(beta) {
	
	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }
	
	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };
	
	  return bundle;
	}))(0.85);
	
	function point$3(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}
	
	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$3(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinal = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinalClosed = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinalOpen = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function point$4(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;
	
	  if (that._l01_a > epsilon$3) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }
	
	  if (that._l23_a > epsilon$3) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }
	
	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}
	
	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRom = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRomClosed = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRomOpen = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function LinearClosed(context) {
	  this._context = context;
	}
	
	LinearClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};
	
	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};
	
	function sign$1(x) {
	  return x < 0 ? -1 : 1;
	}
	
	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}
	
	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}
	
	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$5(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}
	
	function MonotoneX(context) {
	  this._context = context;
	}
	
	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;
	
	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;
	    }
	
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};
	
	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}
	
	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};
	
	function ReflectContext(context) {
	  this._context = context;
	}
	
	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};
	
	function monotoneX(context) {
	  return new MonotoneX(context);
	}
	
	function monotoneY(context) {
	  return new MonotoneY(context);
	}
	
	function Natural(context) {
	  this._context = context;
	}
	
	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;
	
	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }
	
	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}
	
	var natural = function(context) {
	  return new Natural(context);
	};
	
	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}
	
	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};
	
	var step = function(context) {
	  return new Step(context, 0.5);
	};
	
	function stepBefore(context) {
	  return new Step(context, 0);
	}
	
	function stepAfter(context) {
	  return new Step(context, 1);
	}
	
	var slice$5 = Array.prototype.slice;
	
	var none$1 = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (var j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};
	
	var none$2 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};
	
	function stackValue(d, key) {
	  return d[key];
	}
	
	var stack = function() {
	  var keys = constant$10([]),
	      order = none$2,
	      offset = none$1,
	      value = stackValue;
	
	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;
	
	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }
	
	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }
	
	    offset(sz, oz);
	    return sz;
	  }
	
	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : keys;
	  };
	
	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;
	  };
	
	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : order;
	  };
	
	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
	  };
	
	  return stack;
	};
	
	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none$1(series, order);
	};
	
	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none$1(series, order);
	};
	
	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none$1(series, order);
	};
	
	var ascending$2 = function(series) {
	  var sums = series.map(sum$2);
	  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};
	
	function sum$2(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}
	
	var descending$2 = function(series) {
	  return ascending$2(series).reverse();
	};
	
	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum$2),
	      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];
	
	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }
	
	  return bottoms.reverse().concat(tops);
	};
	
	var reverse = function(series) {
	  return none$2(series).reverse();
	};
	
	var constant$11 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function x$4(d) {
	  return d[0];
	}
	
	function y$4(d) {
	  return d[1];
	}
	
	function RedBlackTree() {
	  this._ = null; // root node
	}
	
	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}
	
	RedBlackTree.prototype = {
	  constructor: RedBlackTree,
	
	  insert: function(after, node) {
	    var parent, grandpa, uncle;
	
	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;
	
	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },
	
	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;
	
	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;
	
	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);
	
	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }
	
	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }
	
	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }
	
	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);
	
	    if (node) node.C = false;
	  }
	};
	
	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}
	
	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}
	
	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}
	
	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}
	
	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}
	
	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}
	
	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?
	
	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}
	
	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;
	
	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;
	
	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }
	
	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}
	
	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;
	
	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
	      delete edges[i];
	    }
	  }
	}
	
	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}
	
	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}
	
	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}
	
	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}
	
	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}
	
	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;
	
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;
	
	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }
	
	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
	              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
	              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }
	
	      if (nHalfedges) cover = false;
	    }
	  }
	
	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;
	
	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }
	
	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }
	
	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}
	
	var circlePool = [];
	
	var firstCircle;
	
	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}
	
	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;
	
	  if (!lArc || !rArc) return;
	
	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;
	
	  if (lSite === rSite) return;
	
	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;
	
	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2$2) return;
	
	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;
	
	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom
	
	  arc.circle = circle;
	
	  var before = null,
	      node = circles._;
	
	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }
	
	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}
	
	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}
	
	var beachPool = [];
	
	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}
	
	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}
	
	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}
	
	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];
	
	  detachBeach(beach);
	
	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon$4
	      && Math.abs(y - lArc.circle.cy) < epsilon$4) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }
	
	  disappearing.unshift(lArc);
	  detachCircle(lArc);
	
	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon$4
	      && Math.abs(y - rArc.circle.cy) < epsilon$4) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }
	
	  disappearing.push(rArc);
	  detachCircle(rArc);
	
	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }
	
	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
	
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;
	
	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon$4) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon$4) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon$4) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon$4) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }
	
	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);
	
	  if (!lArc && !rArc) return;
	
	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }
	
	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }
	
	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);
	
	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
	
	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;
	
	  if (!pby2) return rfocx;
	
	  var lArc = arc.P;
	  if (!lArc) return -Infinity;
	
	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;
	
	  if (!plby2) return lfocx;
	
	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;
	
	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	
	  return (rfocx + lfocx) / 2;
	}
	
	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}
	
	var epsilon$4 = 1e-6;
	var epsilon2$2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;
	
	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}
	
	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}
	
	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;
	
	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;
	
	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }
	
	  sortCellHalfedges();
	
	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }
	
	  this.edges = edges;
	  this.cells = cells;
	
	  beaches =
	  circles =
	  edges =
	  cells = null;
	}
	
	Diagram.prototype = {
	  constructor: Diagram,
	
	  polygons: function() {
	    var edges = this.edges;
	
	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },
	
	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;
	
	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;
	
	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });
	
	    return triangles;
	  },
	
	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },
	
	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;
	
	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;
	
	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);
	
	    that._found = i0;
	
	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};
	
	var voronoi = function() {
	  var x$$1 = x$4,
	      y$$1 = y$4,
	      extent = null;
	
	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4, Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }
	
	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };
	
	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };
	
	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };
	
	  voronoi.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x$$1;
	  };
	
	  voronoi.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y$$1;
	  };
	
	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };
	
	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };
	
	  return voronoi;
	};
	
	var constant$12 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function ZoomEvent(target, type, transform) {
	  this.target = target;
	  this.type = type;
	  this.transform = transform;
	}
	
	function Transform(k, x, y) {
	  this.k = k;
	  this.x = x;
	  this.y = y;
	}
	
	Transform.prototype = {
	  constructor: Transform,
	  scale: function(k) {
	    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
	  },
	  translate: function(x, y) {
	    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
	  },
	  apply: function(point) {
	    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
	  },
	  applyX: function(x) {
	    return x * this.k + this.x;
	  },
	  applyY: function(y) {
	    return y * this.k + this.y;
	  },
	  invert: function(location) {
	    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
	  },
	  invertX: function(x) {
	    return (x - this.x) / this.k;
	  },
	  invertY: function(y) {
	    return (y - this.y) / this.k;
	  },
	  rescaleX: function(x) {
	    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
	  },
	  rescaleY: function(y) {
	    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
	  },
	  toString: function() {
	    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
	  }
	};
	
	var identity$8 = new Transform(1, 0, 0);
	
	transform$1.prototype = Transform.prototype;
	
	function transform$1(node) {
	  return node.__zoom || identity$8;
	}
	
	function nopropagation$2() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent$2 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter$2() {
	  return !exports.event.button;
	}
	
	function defaultExtent$1() {
	  var e = this, w, h;
	  if (e instanceof SVGElement) {
	    e = e.ownerSVGElement || e;
	    w = e.width.baseVal.value;
	    h = e.height.baseVal.value;
	  } else {
	    w = e.clientWidth;
	    h = e.clientHeight;
	  }
	  return [[0, 0], [w, h]];
	}
	
	function defaultTransform() {
	  return this.__zoom || identity$8;
	}
	
	var zoom = function() {
	  var filter = defaultFilter$2,
	      extent = defaultExtent$1,
	      k0 = 0,
	      k1 = Infinity,
	      x0 = -k1,
	      x1 = k1,
	      y0 = x0,
	      y1 = x1,
	      duration = 250,
	      interpolate$$1 = interpolateZoom,
	      gestures = [],
	      listeners = dispatch("start", "zoom", "end"),
	      touchstarting,
	      touchending,
	      touchDelay = 500,
	      wheelDelay = 150;
	
	  function zoom(selection$$1) {
	    selection$$1
	        .on("wheel.zoom", wheeled)
	        .on("mousedown.zoom", mousedowned)
	        .on("dblclick.zoom", dblclicked)
	        .on("touchstart.zoom", touchstarted)
	        .on("touchmove.zoom", touchmoved)
	        .on("touchend.zoom touchcancel.zoom", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .property("__zoom", defaultTransform);
	  }
	
	  zoom.transform = function(collection, transform) {
	    var selection$$1 = collection.selection ? collection.selection() : collection;
	    selection$$1.property("__zoom", defaultTransform);
	    if (collection !== selection$$1) {
	      schedule(collection, transform);
	    } else {
	      selection$$1.interrupt().each(function() {
	        gesture(this, arguments)
	            .start()
	            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
	            .end();
	      });
	    }
	  };
	
	  zoom.scaleBy = function(selection$$1, k) {
	    zoom.scaleTo(selection$$1, function() {
	      var k0 = this.__zoom.k,
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return k0 * k1;
	    });
	  };
	
	  zoom.scaleTo = function(selection$$1, k) {
	    zoom.transform(selection$$1, function() {
	      var e = extent.apply(this, arguments),
	          t0 = this.__zoom,
	          p0 = centroid(e),
	          p1 = t0.invert(p0),
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return constrain(translate(scale(t0, k1), p0, p1), e);
	    });
	  };
	
	  zoom.translateBy = function(selection$$1, x, y) {
	    zoom.transform(selection$$1, function() {
	      return constrain(this.__zoom.translate(
	        typeof x === "function" ? x.apply(this, arguments) : x,
	        typeof y === "function" ? y.apply(this, arguments) : y
	      ), extent.apply(this, arguments));
	    });
	  };
	
	  function scale(transform, k) {
	    k = Math.max(k0, Math.min(k1, k));
	    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
	  }
	
	  function translate(transform, p0, p1) {
	    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
	    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
	  }
	
	  function constrain(transform, extent) {
	    var dx0 = transform.invertX(extent[0][0]) - x0,
	        dx1 = transform.invertX(extent[1][0]) - x1,
	        dy0 = transform.invertY(extent[0][1]) - y0,
	        dy1 = transform.invertY(extent[1][1]) - y1;
	    return transform.translate(
	      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
	      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
	    );
	  }
	
	  function centroid(extent) {
	    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
	  }
	
	  function schedule(transition$$1, transform, center) {
	    transition$$1
	        .on("start.zoom", function() { gesture(this, arguments).start(); })
	        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
	        .tween("zoom", function() {
	          var that = this,
	              args = arguments,
	              g = gesture(that, args),
	              e = extent.apply(that, args),
	              p = center || centroid(e),
	              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
	              a = that.__zoom,
	              b = typeof transform === "function" ? transform.apply(that, args) : transform,
	              i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
	          return function(t) {
	            if (t === 1) t = b; // Avoid rounding error on end.
	            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
	            g.zoom(null, t);
	          };
	        });
	  }
	
	  function gesture(that, args) {
	    for (var i = 0, n = gestures.length, g; i < n; ++i) {
	      if ((g = gestures[i]).that === that) {
	        return g;
	      }
	    }
	    return new Gesture(that, args);
	  }
	
	  function Gesture(that, args) {
	    this.that = that;
	    this.args = args;
	    this.index = -1;
	    this.active = 0;
	    this.extent = extent.apply(that, args);
	  }
	
	  Gesture.prototype = {
	    start: function() {
	      if (++this.active === 1) {
	        this.index = gestures.push(this) - 1;
	        this.emit("start");
	      }
	      return this;
	    },
	    zoom: function(key, transform) {
	      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
	      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
	      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
	      this.that.__zoom = transform;
	      this.emit("zoom");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) {
	        gestures.splice(this.index, 1);
	        this.index = -1;
	        this.emit("end");
	      }
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };
	
	  function wheeled() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        t = this.__zoom,
	        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
	        p = mouse(this);
	
	    // If the mouse is in the same location as before, reuse it.
	    // If there were recent wheel events, reset the wheel idle timeout.
	    if (g.wheel) {
	      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
	        g.mouse[1] = t.invert(g.mouse[0] = p);
	      }
	      clearTimeout(g.wheel);
	    }
	
	    // If this wheel event won’t trigger a transform change, ignore it.
	    else if (t.k === k) return;
	
	    // Otherwise, capture the mouse point and location at the start.
	    else {
	      g.mouse = [p, t.invert(p)];
	      interrupt(this);
	      g.start();
	    }
	
	    noevent$2();
	    g.wheel = setTimeout(wheelidled, wheelDelay);
	    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
	
	    function wheelidled() {
	      g.wheel = null;
	      g.end();
	    }
	  }
	
	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
	        p = mouse(this);
	
	    dragDisable(exports.event.view);
	    nopropagation$2();
	    g.mouse = [p, this.__zoom.invert(p)];
	    interrupt(this);
	    g.start();
	
	    function mousemoved() {
	      noevent$2();
	      g.moved = true;
	      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
	    }
	
	    function mouseupped() {
	      v.on("mousemove.zoom mouseup.zoom", null);
	      yesdrag(exports.event.view, g.moved);
	      noevent$2();
	      g.end();
	    }
	  }
	
	  function dblclicked() {
	    if (!filter.apply(this, arguments)) return;
	    var t0 = this.__zoom,
	        p0 = mouse(this),
	        p1 = t0.invert(p0),
	        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
	        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
	
	    noevent$2();
	    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
	    else select(this).call(zoom.transform, t1);
	  }
	
	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        started,
	        n = touches$$1.length, i, t, p;
	
	    nopropagation$2();
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      p = [p, this.__zoom.invert(p), t.identifier];
	      if (!g.touch0) g.touch0 = p, started = true;
	      else if (!g.touch1) g.touch1 = p;
	    }
	
	    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
	    if (touchstarting) {
	      touchstarting = clearTimeout(touchstarting);
	      if (!g.touch1) {
	        g.end();
	        p = select(this).on("dblclick.zoom");
	        if (p) p.apply(this, arguments);
	        return;
	      }
	    }
	
	    if (started) {
	      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
	      interrupt(this);
	      g.start();
	    }
	  }
	
	  function touchmoved() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t, p, l;
	
	    noevent$2();
	    if (touchstarting) touchstarting = clearTimeout(touchstarting);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
	      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
	    }
	    t = g.that.__zoom;
	    if (g.touch1) {
	      var p0 = g.touch0[0], l0 = g.touch0[1],
	          p1 = g.touch1[0], l1 = g.touch1[1],
	          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
	          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
	      t = scale(t, Math.sqrt(dp / dl));
	      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	    }
	    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
	    else return;
	    g.zoom("touch", constrain(translate(t, p, l), g.extent));
	  }
	
	  function touchended() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t;
	
	    nopropagation$2();
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, touchDelay);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i];
	      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
	      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
	    }
	    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
	    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
	    else g.end();
	  }
	
	  zoom.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;
	  };
	
	  zoom.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
	  };
	
	  zoom.scaleExtent = function(_) {
	    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
	  };
	
	  zoom.translateExtent = function(_) {
	    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
	  };
	
	  zoom.duration = function(_) {
	    return arguments.length ? (duration = +_, zoom) : duration;
	  };
	
	  zoom.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1;
	  };
	
	  zoom.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? zoom : value;
	  };
	
	  return zoom;
	};
	
	exports.version = version;
	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = threshold;
	exports.range = sequence;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	exports.axisTop = axisTop;
	exports.axisRight = axisRight;
	exports.axisBottom = axisBottom;
	exports.axisLeft = axisLeft;
	exports.brush = brush;
	exports.brushX = brushX;
	exports.brushY = brushY;
	exports.brushSelection = brushSelection;
	exports.chord = chord;
	exports.ribbon = ribbon;
	exports.nest = nest;
	exports.set = set$2;
	exports.map = map$1;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;
	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.cubehelix = cubehelix;
	exports.dispatch = dispatch;
	exports.drag = drag;
	exports.dragDisable = dragDisable;
	exports.dragEnable = yesdrag;
	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;
	exports.easeLinear = linear$1;
	exports.easeQuad = quadInOut;
	exports.easeQuadIn = quadIn;
	exports.easeQuadOut = quadOut;
	exports.easeQuadInOut = quadInOut;
	exports.easeCubic = cubicInOut;
	exports.easeCubicIn = cubicIn;
	exports.easeCubicOut = cubicOut;
	exports.easeCubicInOut = cubicInOut;
	exports.easePoly = polyInOut;
	exports.easePolyIn = polyIn;
	exports.easePolyOut = polyOut;
	exports.easePolyInOut = polyInOut;
	exports.easeSin = sinInOut;
	exports.easeSinIn = sinIn;
	exports.easeSinOut = sinOut;
	exports.easeSinInOut = sinInOut;
	exports.easeExp = expInOut;
	exports.easeExpIn = expIn;
	exports.easeExpOut = expOut;
	exports.easeExpInOut = expInOut;
	exports.easeCircle = circleInOut;
	exports.easeCircleIn = circleIn;
	exports.easeCircleOut = circleOut;
	exports.easeCircleInOut = circleInOut;
	exports.easeBounce = bounceOut;
	exports.easeBounceIn = bounceIn;
	exports.easeBounceOut = bounceOut;
	exports.easeBounceInOut = bounceInOut;
	exports.easeBack = backInOut;
	exports.easeBackIn = backIn;
	exports.easeBackOut = backOut;
	exports.easeBackInOut = backInOut;
	exports.easeElastic = elasticOut;
	exports.easeElasticIn = elasticIn;
	exports.easeElasticOut = elasticOut;
	exports.easeElasticInOut = elasticInOut;
	exports.forceCenter = center$1;
	exports.forceCollide = collide;
	exports.forceLink = link;
	exports.forceManyBody = manyBody;
	exports.forceSimulation = simulation;
	exports.forceX = x$2;
	exports.forceY = y$2;
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent$1;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate$1;
	exports.geoLength = length$1;
	exports.geoPath = index$1;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$5;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;
	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index$2;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$3;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;
	exports.interpolate = interpolateValue;
	exports.interpolateArray = array$1;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = reinterpolate;
	exports.interpolateObject = object;
	exports.interpolateRound = interpolateRound;
	exports.interpolateString = interpolateString;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = interpolateZoom;
	exports.interpolateRgb = interpolateRgb;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;
	exports.path = path;
	exports.polygonArea = area$1;
	exports.polygonCentroid = centroid$1;
	exports.polygonHull = hull;
	exports.polygonContains = contains$1;
	exports.polygonLength = length$2;
	exports.quadtree = quadtree;
	exports.queue = queue;
	exports.randomUniform = uniform;
	exports.randomNormal = normal;
	exports.randomLogNormal = logNormal;
	exports.randomBates = bates;
	exports.randomIrwinHall = irwinHall;
	exports.randomExponential = exponential$1;
	exports.request = request;
	exports.html = html;
	exports.json = json;
	exports.text = text;
	exports.xml = xml;
	exports.csv = csv$1;
	exports.tsv = tsv$1;
	exports.scaleBand = band;
	exports.scalePoint = point$1;
	exports.scaleIdentity = identity$6;
	exports.scaleLinear = linear$2;
	exports.scaleLog = log$1;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow$1;
	exports.scaleSqrt = sqrt$1;
	exports.scaleQuantile = quantile$$1;
	exports.scaleQuantize = quantize$1;
	exports.scaleThreshold = threshold$1;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.schemeCategory10 = category10;
	exports.schemeCategory20b = category20b;
	exports.schemeCategory20c = category20c;
	exports.schemeCategory20 = category20;
	exports.interpolateCubehelixDefault = cubehelix$3;
	exports.interpolateRainbow = rainbow$1;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;
	exports.scaleSequential = sequential;
	exports.creator = creator;
	exports.local = local$1;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = window;
	exports.customEvent = customEvent;
	exports.arc = arc;
	exports.area = area$2;
	exports.line = line;
	exports.pie = pie;
	exports.radialArea = radialArea;
	exports.radialLine = radialLine$1;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle$2;
	exports.symbolCross = cross$2;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed$1;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis$2;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetNone = none$1;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending$2;
	exports.stackOrderDescending = descending$2;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$2;
	exports.stackOrderReverse = reverse;
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	exports.timeFormatDefaultLocale = defaultLocale$1;
	exports.timeFormatLocale = formatLocale$1;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	exports.now = now;
	exports.timer = timer;
	exports.timerFlush = timerFlush;
	exports.timeout = timeout$1;
	exports.interval = interval$1;
	exports.transition = transition;
	exports.active = active;
	exports.interrupt = interrupt;
	exports.voronoi = voronoi;
	exports.zoom = zoom;
	exports.zoomTransform = transform$1;
	exports.zoomIdentity = identity$8;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var ResponsiveComponentsManager_1 = __webpack_require__(136);
	var ResponsiveComponentsUtils_1 = __webpack_require__(140);
	var Component_1 = __webpack_require__(107);
	var Logger_1 = __webpack_require__(11);
	var Strings_1 = __webpack_require__(35);
	var Utils_1 = __webpack_require__(13);
	var Facet_1 = __webpack_require__(157);
	var FacetSlider_1 = __webpack_require__(145);
	var ResponsiveDropdown_1 = __webpack_require__(144);
	var ResponsiveDropdownContent_1 = __webpack_require__(142);
	var ResponsiveDropdownHeader_1 = __webpack_require__(143);
	var QueryEvents_1 = __webpack_require__(48);
	var SearchInterface_1 = __webpack_require__(108);
	var ResponsiveComponents_1 = __webpack_require__(17);
	var _ = __webpack_require__(14);
	var ResponsiveFacets = (function () {
	    function ResponsiveFacets(coveoRoot, ID, options, responsiveDropdown) {
	        this.coveoRoot = coveoRoot;
	        this.ID = ID;
	        this.facets = [];
	        this.facetSliders = [];
	        this.preservePositionOriginalValues = [];
	        this.dropdownHeaderLabel = this.getDropdownHeaderLabel();
	        this.dropdown = this.buildDropdown(responsiveDropdown);
	        this.searchInterface = Component_1.Component.get(this.coveoRoot.el, SearchInterface_1.SearchInterface, false);
	        this.bindDropdownContentEvents();
	        this.registerOnOpenHandler();
	        this.registerOnCloseHandler();
	        this.registerQueryEvents();
	        this.logger = new Logger_1.Logger(this);
	        if (Utils_1.Utils.isNullOrUndefined(options.responsiveBreakpoint)) {
	            this.breakpoint = this.searchInterface ? this.searchInterface.responsiveComponents.getMediumScreenWidth() : new ResponsiveComponents_1.ResponsiveComponents().getMediumScreenWidth();
	        }
	        else {
	            this.breakpoint = options.responsiveBreakpoint;
	        }
	    }
	    ResponsiveFacets.init = function (root, component, options) {
	        if (!Dom_1.$$(root).find('.coveo-facet-column')) {
	            var logger = new Logger_1.Logger('ResponsiveFacets');
	            logger.info('No element with class coveo-facet-column. Responsive facets cannot be enabled');
	            return;
	        }
	        ResponsiveComponentsManager_1.ResponsiveComponentsManager.register(ResponsiveFacets, Dom_1.$$(root), Facet_1.Facet.ID, component, options);
	    };
	    ResponsiveFacets.prototype.registerComponent = function (accept) {
	        if (accept instanceof Facet_1.Facet) {
	            this.facets.push(accept);
	            this.preservePositionOriginalValues.push(accept.options.preservePosition);
	            return true;
	        }
	        else if (accept instanceof FacetSlider_1.FacetSlider) {
	            this.facetSliders.push(accept);
	            return false;
	        }
	        return false;
	    };
	    ResponsiveFacets.prototype.needDropdownWrapper = function () {
	        return this.needSmallMode();
	    };
	    ResponsiveFacets.prototype.handleResizeEvent = function () {
	        if (this.needSmallMode() && !ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallFacetActivated(this.coveoRoot)) {
	            this.changeToSmallMode();
	        }
	        else if (!this.needSmallMode() && ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallFacetActivated(this.coveoRoot)) {
	            this.changeToLargeMode();
	        }
	        if (this.dropdown.isOpened) {
	            this.dropdown.dropdownContent.positionDropdown();
	        }
	    };
	    ResponsiveFacets.prototype.dismissFacetSearches = function () {
	        _.each(this.facets, function (facet) {
	            if (facet.facetSearch && facet.facetSearch.currentlyDisplayedResults) {
	                facet.facetSearch.completelyDismissSearch();
	            }
	        });
	    };
	    ResponsiveFacets.prototype.drawFacetSliderGraphs = function () {
	        _.each(this.facetSliders, function (facetSlider) { return facetSlider.drawDelayedGraphData(); });
	    };
	    ResponsiveFacets.prototype.needSmallMode = function () {
	        return this.coveoRoot.width() <= this.breakpoint;
	    };
	    ResponsiveFacets.prototype.changeToSmallMode = function () {
	        this.dropdown.close();
	        this.disableFacetPreservePosition();
	        Dom_1.$$(this.coveoRoot.find("." + ResponsiveComponentsManager_1.ResponsiveComponentsManager.DROPDOWN_HEADER_WRAPPER_CSS_CLASS)).append(this.dropdown.dropdownHeader.element.el);
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.activateSmallFacet(this.coveoRoot);
	    };
	    ResponsiveFacets.prototype.changeToLargeMode = function () {
	        this.restoreFacetPreservePositionValue();
	        this.dropdown.cleanUp();
	        ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.deactivateSmallFacet(this.coveoRoot);
	    };
	    ResponsiveFacets.prototype.buildDropdown = function (responsiveDropdown) {
	        var dropdownContent = this.buildDropdownContent();
	        var dropdownHeader = this.buildDropdownHeader();
	        var dropdown = responsiveDropdown ? responsiveDropdown : new ResponsiveDropdown_1.ResponsiveDropdown(dropdownContent, dropdownHeader, this.coveoRoot);
	        return dropdown;
	    };
	    ResponsiveFacets.prototype.buildDropdownContent = function () {
	        var dropdownContentElement = Dom_1.$$(this.coveoRoot.find('.coveo-facet-column'));
	        var filterByContainer = Dom_1.$$('div', { className: 'coveo-facet-header-filter-by-container', style: 'display: none' });
	        var filterBy = Dom_1.$$('div', { className: 'coveo-facet-header-filter-by' });
	        filterBy.text(Strings_1.l('Filter by:'));
	        filterByContainer.append(filterBy.el);
	        dropdownContentElement.prepend(filterByContainer.el);
	        var dropdownContent = new ResponsiveDropdownContent_1.ResponsiveDropdownContent('facet', dropdownContentElement, this.coveoRoot, ResponsiveFacets.DROPDOWN_MIN_WIDTH, ResponsiveFacets.DROPDOWN_WIDTH_RATIO);
	        return dropdownContent;
	    };
	    ResponsiveFacets.prototype.buildDropdownHeader = function () {
	        var dropdownHeaderElement = Dom_1.$$('a');
	        var content = Dom_1.$$('p');
	        content.text(this.dropdownHeaderLabel);
	        dropdownHeaderElement.el.appendChild(content.el);
	        var dropdownHeader = new ResponsiveDropdownHeader_1.ResponsiveDropdownHeader('facet', dropdownHeaderElement);
	        return dropdownHeader;
	    };
	    ResponsiveFacets.prototype.registerOnOpenHandler = function () {
	        this.dropdown.registerOnOpenHandler(this.drawFacetSliderGraphs, this);
	    };
	    ResponsiveFacets.prototype.registerOnCloseHandler = function () {
	        this.dropdown.registerOnCloseHandler(this.dismissFacetSearches, this);
	    };
	    ResponsiveFacets.prototype.registerQueryEvents = function () {
	        var _this = this;
	        this.coveoRoot.on(QueryEvents_1.QueryEvents.noResults, function () { return _this.handleNoResults(); });
	        this.coveoRoot.on(QueryEvents_1.QueryEvents.querySuccess, function (e, data) { return _this.handleQuerySuccess(data); });
	        this.coveoRoot.on(QueryEvents_1.QueryEvents.queryError, function () { return _this.handleQueryError(); });
	    };
	    ResponsiveFacets.prototype.bindDropdownContentEvents = function () {
	        var _this = this;
	        this.dropdown.dropdownContent.element.on('scroll', _.debounce(function () {
	            _.each(_this.facets, function (facet) {
	                var facetSearch = facet.facetSearch;
	                if (facetSearch && facetSearch.currentlyDisplayedResults && !_this.isFacetSearchScrolledIntoView(facetSearch.search)) {
	                    facet.facetSearch.positionSearchResults(_this.dropdown.dropdownContent.element.el);
	                }
	                else if (facetSearch && facet.facetSearch.currentlyDisplayedResults) {
	                    facet.facetSearch.positionSearchResults();
	                }
	            });
	        }, ResponsiveFacets.DEBOUNCE_SCROLL_WAIT));
	    };
	    ResponsiveFacets.prototype.restoreFacetPreservePositionValue = function () {
	        var _this = this;
	        _.each(this.facets, function (facet, index) { return facet.options.preservePosition = _this.preservePositionOriginalValues[index]; });
	    };
	    ResponsiveFacets.prototype.disableFacetPreservePosition = function () {
	        _.each(this.facets, function (facet) { return facet.options.preservePosition = false; });
	    };
	    ResponsiveFacets.prototype.isFacetSearchScrolledIntoView = function (facetSearchElement) {
	        var facetTop = facetSearchElement.getBoundingClientRect().top;
	        var facetBottom = facetSearchElement.getBoundingClientRect().bottom;
	        var dropdownTop = this.dropdown.dropdownContent.element.el.getBoundingClientRect().top;
	        var dropdownBottom = this.dropdown.dropdownContent.element.el.getBoundingClientRect().bottom;
	        dropdownTop = dropdownTop >= 0 ? dropdownTop : 0;
	        return (facetTop >= dropdownTop) && (facetBottom <= dropdownBottom);
	    };
	    ResponsiveFacets.prototype.getDropdownHeaderLabel = function () {
	        var dropdownHeaderLabel;
	        var selector = "." + Component_1.Component.computeCssClassName(Facet_1.Facet) + ", ." + Component_1.Component.computeCssClassName(FacetSlider_1.FacetSlider);
	        _.each(Dom_1.$$(this.coveoRoot.find('.coveo-facet-column')).findAll(selector), function (facetElement) {
	            var facet;
	            if (Dom_1.$$(facetElement).hasClass(Component_1.Component.computeCssClassName(Facet_1.Facet))) {
	                facet = Component_1.Component.get(facetElement, Facet_1.Facet);
	            }
	            else {
	                facet = Component_1.Component.get(facetElement, FacetSlider_1.FacetSlider);
	            }
	            if (!dropdownHeaderLabel && facet.options.dropdownHeaderLabel) {
	                dropdownHeaderLabel = facet.options.dropdownHeaderLabel;
	            }
	        });
	        if (!dropdownHeaderLabel) {
	            dropdownHeaderLabel = Strings_1.l(ResponsiveFacets.DROPDOWN_HEADER_LABEL_DEFAULT_VALUE);
	        }
	        return dropdownHeaderLabel;
	    };
	    ResponsiveFacets.prototype.handleNoResults = function () {
	        this.dropdown.dropdownHeader.hide();
	    };
	    ResponsiveFacets.prototype.handleQueryError = function () {
	        this.dropdown.dropdownHeader.hide();
	    };
	    ResponsiveFacets.prototype.handleQuerySuccess = function (data) {
	        if (data.results.totalCount === 0) {
	            this.dropdown.dropdownHeader.hide();
	        }
	        else {
	            this.dropdown.dropdownHeader.show();
	        }
	    };
	    return ResponsiveFacets;
	}());
	ResponsiveFacets.DEBOUNCE_SCROLL_WAIT = 250;
	ResponsiveFacets.DROPDOWN_MIN_WIDTH = 280;
	ResponsiveFacets.DROPDOWN_WIDTH_RATIO = 0.35; // Used to set the width relative to the coveo root.
	ResponsiveFacets.DROPDOWN_HEADER_LABEL_DEFAULT_VALUE = 'Filters';
	exports.ResponsiveFacets = ResponsiveFacets;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="../../controllers/HierarchicalFacetQueryController.ts" />
	/// <reference path="../../controllers/FacetQueryController.ts" />
	/// <reference path="FacetSearch.ts" />
	/// <reference path="FacetSettings.ts" />
	/// <reference path="FacetSort.ts" />
	/// <reference path="FacetHeader.ts" />
	/// <reference path="BreadcrumbValueElement.ts" />
	/// <reference path="ValueElementRenderer.ts" />
	/// <reference path="FacetSearchParameters.ts" />
	/// <reference path="../HierarchicalFacet/HierarchicalFacet.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var FacetValues_1 = __webpack_require__(158);
	var ComponentOptions_1 = __webpack_require__(109);
	var DeviceUtils_1 = __webpack_require__(16);
	var Strings_1 = __webpack_require__(35);
	var FacetQueryController_1 = __webpack_require__(91);
	var FacetSearch_1 = __webpack_require__(159);
	var FacetSettings_1 = __webpack_require__(164);
	var FacetSort_1 = __webpack_require__(165);
	var FacetValuesList_1 = __webpack_require__(166);
	var FacetHeader_1 = __webpack_require__(167);
	var FacetUtils_1 = __webpack_require__(93);
	var InitializationEvents_1 = __webpack_require__(45);
	var QueryEvents_1 = __webpack_require__(48);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Utils_1 = __webpack_require__(13);
	var BreadcrumbValueElement_1 = __webpack_require__(168);
	var BreadcrumbValuesList_1 = __webpack_require__(169);
	var FacetValueElement_1 = __webpack_require__(160);
	var FacetSearchValuesList_1 = __webpack_require__(170);
	var Defer_1 = __webpack_require__(32);
	var QueryStateModel_1 = __webpack_require__(101);
	var Model_1 = __webpack_require__(98);
	var OmniboxEvents_1 = __webpack_require__(46);
	var OmniboxValueElement_1 = __webpack_require__(171);
	var OmniboxValuesList_1 = __webpack_require__(172);
	var ValueElementRenderer_1 = __webpack_require__(162);
	var FacetSearchParameters_1 = __webpack_require__(92);
	var Initialization_1 = __webpack_require__(106);
	var BreadcrumbEvents_1 = __webpack_require__(42);
	var ResponsiveFacets_1 = __webpack_require__(156);
	var KeyboardUtils_1 = __webpack_require__(68);
	var FacetValuesOrder_1 = __webpack_require__(163);
	var SearchAlertEvents_1 = __webpack_require__(51);
	var _ = __webpack_require__(14);
	/**
	 * The Facet component displays a *facet* of the results for the current query. A facet consists of a list of values for
	 * a given field occurring in the results, ordered using a configurable criteria.
	 *
	 * The list of values is obtained using an {@link IGroupByRequest} operation performed at the same time as the main
	 * query.
	 *
	 * The Facet component allows the user to drill down inside results by restricting them to certain field values. It also
	 * allows filtering out values from the Facet itself, and can provide a search box to look for specific values inside
	 * larger sets.
	 *
	 * This is probably the most complex component in the Coveo JavaScript Search Framework and as such, it allows for many
	 * different configuration options.
	 *
	 * See also {@link FacetRange} and {@link HierarchicalFacet} (which extend this component), and {@link FacetSlider}
	 * (which does not properly extend this component, but is very similar).
	 */
	var Facet = (function (_super) {
	    __extends(Facet, _super);
	    /**
	     * Creates a new Facet component. Binds multiple query events as well.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the Facet component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     * @param facetClassId The ID to use for this facet (as Facet inherited from by other component
	     * (e.g.: {@link FacetRange}). Default value is `Facet`.
	     */
	    function Facet(element, options, bindings, facetClassId) {
	        if (facetClassId === void 0) { facetClassId = Facet.ID; }
	        var _this = _super.call(this, element, facetClassId, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.keepDisplayedValuesNextTime = false;
	        _this.values = new FacetValues_1.FacetValues();
	        _this.currentPage = 0;
	        _this.firstQuery = true;
	        _this.canFetchMore = true;
	        _this.showingWaitAnimation = false;
	        _this.listenToQueryStateChange = true;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Facet, options);
	        if (_this.options.valueCaption != null) {
	            _this.options.availableSorts = _.filter(_this.options.availableSorts, function (sort) { return !/^alpha.*$/.test(sort); });
	        }
	        ResponsiveFacets_1.ResponsiveFacets.init(_this.root, _this, _this.options);
	        // Serves as a way to render facet in the omnibox in the order in which they are instantiated
	        _this.omniboxZIndex = Facet.omniboxIndex;
	        Facet.omniboxIndex--;
	        _this.checkForComputedFieldAndSort();
	        _this.checkForValueCaptionType();
	        _this.checkForCustomSort();
	        _this.initFacetQueryController();
	        _this.initQueryEvents();
	        _this.initQueryStateEvents();
	        _this.initComponentStateEvents();
	        _this.initOmniboxEvents();
	        _this.initBreadCrumbEvents();
	        _this.initSearchAlertEvents();
	        _this.updateNumberOfValues();
	        _this.resize = function () {
	            if (!_this.disabled) {
	                FacetUtils_1.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(_this);
	            }
	        };
	        window.addEventListener('resize', _.debounce(_this.resize, 200));
	        _this.bind.onRootElement(InitializationEvents_1.InitializationEvents.nuke, function () { return _this.handleNuke(); });
	        _this.bind.oneRootElement(QueryEvents_1.QueryEvents.querySuccess, function () {
	            _this.firstQuery = false;
	        });
	        return _this;
	    }
	    Facet.prototype.createDom = function () {
	        var _this = this;
	        this.initBottomAndTopSpacer();
	        this.buildFacetContent();
	        this.updateAppearanceDependingOnState();
	        // After the facet has been created (and before the first query is applied)
	        // Try to load a state from the setting, if it's available
	        // Execute only _.once (only the first query, or the first time the user switch to a tab that contains a newly set of active facet)
	        if (this.facetSettings && this.options.enableSettingsFacetState) {
	            var loadOnce = _.once(function () {
	                _this.facetSettings.loadSavedState.apply(_this.facetSettings);
	            });
	            this.bind.onRootElement(QueryEvents_1.QueryEvents.newQuery, loadOnce);
	        }
	    };
	    Facet.prototype.selectValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Selecting facet value', this.facetValuesList.select(value));
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.selectMultipleValues = function (values) {
	        var _this = this;
	        Assert_1.Assert.exists(values);
	        this.ensureDom();
	        _.each(values, function (value) {
	            _this.logger.info('Selecting facet value', _this.facetValuesList.select(value));
	        });
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.deselectValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Deselecting facet value', this.facetValuesList.unselect(value));
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.deselectMultipleValues = function (values) {
	        var _this = this;
	        Assert_1.Assert.exists(values);
	        this.ensureDom();
	        _.each(values, function (value) {
	            _this.logger.info('Deselecting facet value', _this.facetValuesList.unselect(value));
	        });
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.excludeValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Excluding facet value', this.facetValuesList.exclude(value));
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.excludeMultipleValues = function (values) {
	        var _this = this;
	        Assert_1.Assert.exists(values);
	        this.ensureDom();
	        _.each(values, function (value) {
	            _this.logger.info('Excluding facet value', _this.facetValuesList.exclude(value));
	        });
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.unexcludeValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Unexcluding facet value', this.facetValuesList.unExclude(value));
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.unexcludeMultipleValues = function (values) {
	        var _this = this;
	        Assert_1.Assert.exists(values);
	        this.ensureDom();
	        _.each(values, function (value) {
	            _this.logger.info('Unexcluding facet value', _this.facetValuesList.unExclude(value));
	        });
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.toggleSelectValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Toggle select facet value', this.facetValuesList.toggleSelect(value));
	        this.facetValueHasChanged();
	    };
	    Facet.prototype.toggleExcludeValue = function (value) {
	        Assert_1.Assert.exists(value);
	        this.ensureDom();
	        this.logger.info('Toggle exclude facet value', this.facetValuesList.toggleExclude(value));
	        this.facetValueHasChanged();
	    };
	    /**
	     * Returns the currently displayed values as a string array.
	     *
	     * @returns {any[]} The currently displayed values.
	     */
	    Facet.prototype.getDisplayedValues = function () {
	        return _.pluck(this.getDisplayedFacetValues(), 'value');
	    };
	    /**
	     * Returns the currently displayed values as an array of {@link FacetValue}.
	     *
	     * @returns {T[]} The currently displayed values.
	     */
	    Facet.prototype.getDisplayedFacetValues = function () {
	        this.ensureDom();
	        var displayed = this.facetValuesList.getAllCurrentlyDisplayed();
	        return _.map(displayed, function (value) {
	            return value.facetValue;
	        });
	    };
	    /**
	     * Returns the currently selected values as an array of string.
	     * @returns {string[]} The currently selected values.
	     */
	    Facet.prototype.getSelectedValues = function () {
	        this.ensureDom();
	        return _.map(this.values.getSelected(), function (value) { return value.value; });
	    };
	    /**
	     * Returns the currently excluded values as an array of string.
	     * @returns {string[]} The currently excluded values.
	     */
	    Facet.prototype.getExcludedValues = function () {
	        this.ensureDom();
	        return _.map(this.values.getExcluded(), function (value) { return value.value; });
	    };
	    /**
	     * Resets the Facet by un-selecting all values, une-xcluding all values, and redrawing the Facet.
	     */
	    Facet.prototype.reset = function () {
	        this.ensureDom();
	        this.values.reset();
	        this.rebuildValueElements();
	        this.updateAppearanceDependingOnState();
	        this.updateQueryStateModel();
	    };
	    /**
	     * Switches the Facet to `AND` mode.
	     *
	     * See {@link Facet.options.useAnd} and {@link Facet.options.enableTogglingOperator}.
	     */
	    Facet.prototype.switchToAnd = function () {
	        this.ensureDom();
	        this.logger.info('Switching to AND');
	        this.facetHeader.switchToAnd();
	    };
	    /**
	     * Switches the Facet to `OR` mode.
	     *
	     * See {@link Facet.options.useAnd} and {@link Facet.options.enableTogglingOperator}.
	     */
	    Facet.prototype.switchToOr = function () {
	        this.ensureDom();
	        this.logger.info('Switching to OR');
	        this.facetHeader.switchToOr();
	    };
	    /**
	     * Returns the endpoint for the Facet.
	     * @returns {ISearchEndpoint} The endpoint for the Facet.
	     */
	    Facet.prototype.getEndpoint = function () {
	        return this.queryController.getEndpoint();
	    };
	    /**
	     * Changes the sort parameter for the Facet.
	     *
	     * See {@link Facet.options.availableSorts} for the list of possible values.
	     *
	     * Also triggers a new query.
	     *
	     * @param criteria The new sort parameter for the Facet.
	     */
	    Facet.prototype.updateSort = function (criteria) {
	        this.ensureDom();
	        if (this.options.sortCriteria != criteria) {
	            this.options.sortCriteria = criteria;
	            this.triggerNewQuery();
	        }
	    };
	    Facet.prototype.unfadeInactiveValuesInMainList = function () {
	        Dom_1.$$(this.element).removeClass('coveo-facet-fade');
	    };
	    Facet.prototype.fadeInactiveValuesInMainList = function (delay) {
	        Dom_1.$$(this.element).addClass('coveo-facet-fade');
	    };
	    /**
	     * Shows a waiting animation in the Facet header (a spinner).
	     */
	    Facet.prototype.showWaitingAnimation = function () {
	        this.ensureDom();
	        if (!this.showingWaitAnimation) {
	            // in old design : icon before the facet title needs to be hidden to show animation
	            // new design : no need to hide this icon since it's not there
	            if (!this.searchInterface.isNewDesign()) {
	                Dom_1.$$(this.headerElement).find('.coveo-icon').style.display = 'none';
	                Dom_1.$$(this.headerElement).find('.coveo-facet-header-wait-animation').style.display = '';
	            }
	            else {
	                Dom_1.$$(this.headerElement).find('.coveo-facet-header-wait-animation').style.visibility = 'visible';
	            }
	            this.showingWaitAnimation = true;
	        }
	    };
	    /**
	     * Hides the waiting animation in the Facet header.
	     */
	    Facet.prototype.hideWaitingAnimation = function () {
	        this.ensureDom();
	        if (this.showingWaitAnimation) {
	            Dom_1.$$(this.headerElement).find('.coveo-icon').style.display = '';
	            if (!this.searchInterface.isNewDesign()) {
	                Dom_1.$$(this.headerElement).find('.coveo-facet-header-wait-animation').style.display = 'none';
	            }
	            else {
	                Dom_1.$$(this.headerElement).find('.coveo-facet-header-wait-animation').style.visibility = 'hidden';
	            }
	            this.showingWaitAnimation = false;
	        }
	    };
	    Facet.prototype.processFacetSearchAllResultsSelected = function (facetValues) {
	        var _this = this;
	        var valuesForAnalytics = [];
	        _.each(facetValues, function (facetValue) {
	            _this.ensureFacetValueIsInList(facetValue);
	            valuesForAnalytics.push(facetValue.value);
	        });
	        // Calculate the correct number of values from the current selected/excluded values (those will stay no matter what next rendering)
	        // add the new one that will be selected (and are not already selected in the facet)
	        // The minimum number of values is the number of values set in the option
	        var valuesThatStays = this.values.getSelected().concat(this.values.getExcluded());
	        this.numberOfValues = valuesThatStays.length + _.difference(valuesThatStays, facetValues).length;
	        this.numberOfValues = Math.max(this.numberOfValues, this.options.numberOfValues);
	        // Then, we set current page as the last "full" page (math.floor)
	        // This is so there is no additional values displayed requested to fill the current page
	        // Also, when the user hit more, it will request the current page and fill it with more values
	        this.currentPage = Math.floor((this.numberOfValues - this.options.numberOfValues) / this.options.pageSize);
	        this.updateQueryStateModel();
	        this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetSelectAll, {
	            facetId: _this.options.id,
	            facetTitle: _this.options.title
	        }); });
	    };
	    Facet.prototype.pinFacetPosition = function () {
	        if (this.options.preservePosition) {
	            this.pinnedViewportPosition = this.element.getBoundingClientRect().top;
	        }
	    };
	    Facet.prototype.getValueCaption = function (facetValue) {
	        Assert_1.Assert.exists(facetValue);
	        var lookupValue = facetValue.lookupValue || facetValue.value;
	        var ret = lookupValue;
	        ret = FacetUtils_1.FacetUtils.tryToGetTranslatedCaption(this.options.field, lookupValue);
	        if (Utils_1.Utils.exists(this.options.valueCaption)) {
	            if (typeof this.options.valueCaption == 'object') {
	                ret = this.options.valueCaption[lookupValue] || ret;
	            }
	            if (typeof this.options.valueCaption == 'function') {
	                this.values.get(lookupValue);
	                ret = this.options.valueCaption.call(this, this.facetValuesList.get(lookupValue).facetValue);
	            }
	        }
	        return ret;
	    };
	    /**
	     * Shows the next page of results in the Facet.
	     *
	     * Triggers a query if needed, or displays the already available values.
	     */
	    Facet.prototype.showMore = function () {
	        this.currentPage++;
	        this.updateNumberOfValues();
	        if (this.nbAvailableValues >= this.numberOfValues || !this.canFetchMore) {
	            this.rebuildValueElements();
	        }
	        else {
	            this.triggerMoreQuery();
	        }
	    };
	    /**
	     * Shows less elements in the Facet (up to the original number of values).
	     *
	     * See {@link Facet.options.numberOfValues}.
	     */
	    Facet.prototype.showLess = function () {
	        Dom_1.$$(this.lessElement).removeClass('coveo-active');
	        this.currentPage = 0;
	        this.updateNumberOfValues();
	        Dom_1.$$(this.moreElement).addClass('coveo-active');
	        this.values.sortValuesDependingOnStatus(this.numberOfValues);
	        this.rebuildValueElements();
	    };
	    /**
	     * Collapses the Facet.
	     */
	    Facet.prototype.collapse = function () {
	        this.ensureDom();
	        if (this.facetHeader) {
	            this.facetHeader.collapseFacet();
	        }
	    };
	    /**
	     * Expands the facet.
	     */
	    Facet.prototype.expand = function () {
	        this.ensureDom();
	        if (this.facetHeader) {
	            this.facetHeader.expandFacet();
	        }
	    };
	    Facet.prototype.triggerNewQuery = function (beforeExecuteQuery) {
	        if (!beforeExecuteQuery) {
	            this.queryController.executeQuery({ ignoreWarningSearchEvent: true });
	        }
	        else {
	            this.queryController.executeQuery({ beforeExecuteQuery: beforeExecuteQuery });
	        }
	        this.showWaitingAnimation();
	    };
	    Facet.prototype.handleDeferredQuerySuccess = function (data) {
	        Assert_1.Assert.exists(data);
	        this.unfadeInactiveValuesInMainList();
	        this.hideWaitingAnimation();
	        this.updateVisibilityBasedOnDependsOn();
	        var groupByResult = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
	        this.facetQueryController.lastGroupByResult = groupByResult;
	        if (!groupByResult) {
	            this.keepDisplayedValuesNextTime = false;
	        }
	        this.processNewGroupByResults(groupByResult);
	    };
	    Facet.prototype.handlePopulateBreadcrumb = function (args) {
	        Assert_1.Assert.exists(args);
	        if (this.values.hasSelectedOrExcludedValues()) {
	            var element = new BreadcrumbValuesList_1.BreadcrumbValueList(this, this.values.getSelected().concat(this.values.getExcluded()), BreadcrumbValueElement_1.BreadcrumbValueElement).build();
	            args.breadcrumbs.push({
	                element: element
	            });
	        }
	    };
	    Facet.prototype.handlePopulateSearchAlerts = function (args) {
	        if (this.values.hasSelectedOrExcludedValues()) {
	            var excludedValues = this.values.getExcluded();
	            var selectedValues = this.values.getSelected();
	            if (!_.isEmpty(excludedValues)) {
	                args.text.push({
	                    value: new BreadcrumbValuesList_1.BreadcrumbValueList(this, excludedValues, BreadcrumbValueElement_1.BreadcrumbValueElement).buildAsString(),
	                    lineThrough: true
	                });
	            }
	            if (!_.isEmpty(selectedValues)) {
	                args.text.push({
	                    value: new BreadcrumbValuesList_1.BreadcrumbValueList(this, selectedValues, BreadcrumbValueElement_1.BreadcrumbValueElement).buildAsString(),
	                    lineThrough: false
	                });
	            }
	        }
	    };
	    Facet.prototype.initFacetQueryController = function () {
	        this.facetQueryController = new FacetQueryController_1.FacetQueryController(this);
	    };
	    Facet.prototype.initFacetValuesList = function () {
	        this.facetValuesList = new FacetValuesList_1.FacetValuesList(this, FacetValueElement_1.FacetValueElement);
	        this.element.appendChild(this.facetValuesList.build());
	    };
	    Facet.prototype.initFacetSearch = function () {
	        this.facetSearch = new FacetSearch_1.FacetSearch(this, FacetSearchValuesList_1.FacetSearchValuesList, this.root);
	        this.element.appendChild(this.facetSearch.build());
	    };
	    Facet.prototype.facetValueHasChanged = function () {
	        var _this = this;
	        this.updateQueryStateModel();
	        this.rebuildValueElements();
	        Defer_1.Defer.defer(function () {
	            _this.updateAppearanceDependingOnState();
	        });
	    };
	    Facet.prototype.updateAppearanceDependingOnState = function () {
	        Dom_1.$$(this.element).toggleClass('coveo-active', this.values.hasSelectedOrExcludedValues());
	        Dom_1.$$(this.element).toggleClass('coveo-facet-empty', !this.isAnyValueCurrentlyDisplayed());
	        if (this.searchInterface.isNewDesign()) {
	            Dom_1.$$(this.facetHeader.eraserElement).toggleClass('coveo-facet-header-eraser-visible', this.values.hasSelectedOrExcludedValues());
	        }
	        else {
	            Dom_1.$$(this.facetHeader.eraserElement).toggle(this.values.hasSelectedOrExcludedValues());
	        }
	    };
	    Facet.prototype.initQueryEvents = function () {
	        var _this = this;
	        this.bind.onRootElement(QueryEvents_1.QueryEvents.duringQuery, function () { return _this.handleDuringQuery(); });
	        this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        this.bind.onRootElement(QueryEvents_1.QueryEvents.doneBuildingQuery, function (args) { return _this.handleDoneBuildingQuery(args); });
	        this.bind.onRootElement(QueryEvents_1.QueryEvents.deferredQuerySuccess, function (args) { return _this.handleDeferredQuerySuccess(args); });
	    };
	    Facet.prototype.initQueryStateEvents = function () {
	        var _this = this;
	        this.includedAttributeId = QueryStateModel_1.QueryStateModel.getFacetId(this.options.id);
	        this.excludedAttributeId = QueryStateModel_1.QueryStateModel.getFacetId(this.options.id, false);
	        this.operatorAttributeId = QueryStateModel_1.QueryStateModel.getFacetOperator(this.options.id);
	        this.lookupValueAttributeId = QueryStateModel_1.QueryStateModel.getFacetLookupValue(this.options.id);
	        this.queryStateModel.registerNewAttribute(this.includedAttributeId, []);
	        this.queryStateModel.registerNewAttribute(this.excludedAttributeId, []);
	        this.queryStateModel.registerNewAttribute(this.operatorAttributeId, '');
	        this.queryStateModel.registerNewAttribute(this.lookupValueAttributeId, {});
	        this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE, undefined, function (args) { return _this.handleQueryStateChanged(args); });
	    };
	    Facet.prototype.initComponentStateEvents = function () {
	        this.componentStateId = QueryStateModel_1.QueryStateModel.getFacetId(this.options.id);
	        this.componentStateModel.registerComponent(this.componentStateId, this);
	    };
	    Facet.prototype.initOmniboxEvents = function () {
	        var _this = this;
	        if (this.options.includeInOmnibox) {
	            this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.populateOmnibox, function (args) { return _this.handlePopulateOmnibox(args); });
	        }
	    };
	    Facet.prototype.initBreadCrumbEvents = function () {
	        var _this = this;
	        if (this.options.includeInBreadcrumb) {
	            this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.populateBreadcrumb, function (args) { return _this.handlePopulateBreadcrumb(args); });
	            this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.clearBreadcrumb, function (args) { return _this.handleClearBreadcrumb(); });
	        }
	    };
	    Facet.prototype.initSearchAlertEvents = function () {
	        var _this = this;
	        this.bind.onRootElement(SearchAlertEvents_1.SearchAlertsEvents.searchAlertsPopulateMessage, function (args) { return _this.handlePopulateSearchAlerts(args); });
	    };
	    Facet.prototype.handleOmniboxWithStaticValue = function (eventArg) {
	        var _this = this;
	        var regex = new RegExp('^' + eventArg.completeQueryExpression.regex.source, 'i');
	        var match = _.first(_.filter(this.getDisplayedValues(), function (displayedValue) {
	            var value = _this.getValueCaption(_this.facetValuesList.get(displayedValue).facetValue);
	            return regex.test(value);
	        }), this.options.numberOfValuesInOmnibox);
	        var facetValues = _.map(match, function (gotAMatch) {
	            return _this.facetValuesList.get(gotAMatch).facetValue;
	        });
	        var element = new OmniboxValuesList_1.OmniboxValuesList(this, facetValues, eventArg, OmniboxValueElement_1.OmniboxValueElement).build();
	        eventArg.rows.push({
	            element: element,
	            zIndex: this.omniboxZIndex
	        });
	    };
	    Facet.prototype.processNewGroupByResults = function (groupByResult) {
	        this.logger.trace('Displaying group by results', groupByResult);
	        if (groupByResult != undefined && groupByResult.values != undefined) {
	            this.nbAvailableValues = groupByResult.values.length;
	        }
	        var newFacetValues = new FacetValues_1.FacetValues(groupByResult);
	        this.updateValues(newFacetValues);
	        this.canFetchMore = this.numberOfValues < this.nbAvailableValues;
	        if (this.values.hasSelectedOrExcludedValues() && !this.options.useAnd && this.options.isMultiValueField) {
	            this.triggerUpdateDeltaQuery(_.filter(this.values.getAll(), function (facetValue) {
	                return !facetValue.selected && !facetValue.excluded;
	            }));
	        }
	        else if (this.values.getSelected().length > 0 && !this.options.useAnd) {
	            this.values.updateDeltaWithFilteredFacetValues(new FacetValues_1.FacetValues());
	        }
	        if (!this.values.hasSelectedOrExcludedValues() || this.options.useAnd || !this.options.isMultiValueField) {
	            this.rebuildValueElements();
	            this.updateAppearanceDependingOnState();
	            this.ensurePinnedFacetHasntMoved();
	        }
	        this.keepDisplayedValuesNextTime = false;
	    };
	    Facet.prototype.updateQueryStateModel = function () {
	        this.listenToQueryStateChange = false;
	        this.updateExcludedQueryStateModel();
	        this.updateIncludedQueryStateModel();
	        this.facetHeader.updateOperatorQueryStateModel();
	        this.updateLookupValueQueryStateModel();
	        this.listenToQueryStateChange = true;
	    };
	    Facet.prototype.rebuildValueElements = function () {
	        this.updateNumberOfValues();
	        this.facetValuesList.rebuild(this.numberOfValues);
	        if (this.searchInterface.isNewDesign()) {
	            if (this.shouldRenderMoreLess()) {
	                this.updateMoreLess();
	                if (this.shouldRenderFacetSearch()) {
	                    this.updateSearchInNewDesign(this.nbAvailableValues > this.numberOfValues);
	                }
	            }
	            else if (this.shouldRenderFacetSearch()) {
	                this.updateSearchInNewDesign();
	            }
	        }
	        else {
	            if (this.shouldRenderMoreLess()) {
	                this.updateMoreLess();
	            }
	        }
	    };
	    Facet.prototype.updateSearchInNewDesign = function (moreValuesAvailable) {
	        var _this = this;
	        if (moreValuesAvailable === void 0) { moreValuesAvailable = true; }
	        if (this.searchInterface.isNewDesign() && moreValuesAvailable) {
	            var renderer = new ValueElementRenderer_1.ValueElementRenderer(this, FacetValues_1.FacetValue.create(Strings_1.l('Search')));
	            var searchButton_1 = renderer.build().withNo([renderer.excludeIcon, renderer.icon]);
	            Dom_1.$$(searchButton_1.listItem).addClass('coveo-facet-search-button');
	            searchButton_1.stylishCheckbox.removeAttribute('tabindex');
	            // Mobile do not like label. Use click event
	            if (DeviceUtils_1.DeviceUtils.isMobileDevice()) {
	                Dom_1.$$(searchButton_1.label).on('click', function (e) {
	                    if (searchButton_1.checkbox.getAttribute('checked')) {
	                        searchButton_1.checkbox.removeAttribute('checked');
	                    }
	                    else {
	                        searchButton_1.checkbox.setAttribute('checked', 'checked');
	                    }
	                    Dom_1.$$(searchButton_1.checkbox).trigger('change');
	                    e.stopPropagation();
	                    e.preventDefault();
	                });
	            }
	            Dom_1.$$(searchButton_1.checkbox).on('change', function () {
	                Dom_1.$$(_this.element).addClass('coveo-facet-searching');
	                _this.facetSearch.focus();
	            });
	            this.facetValuesList.valueContainer.appendChild(searchButton_1.listItem);
	        }
	    };
	    Facet.prototype.updateMoreLess = function (lessElementIsShown, moreValuesAvailable) {
	        if (lessElementIsShown === void 0) { lessElementIsShown = this.getMinimumNumberOfValuesToDisplay() < this.numberOfValues; }
	        if (moreValuesAvailable === void 0) { moreValuesAvailable = this.nbAvailableValues > this.numberOfValues; }
	        if (lessElementIsShown) {
	            Dom_1.$$(this.lessElement).addClass('coveo-active');
	        }
	        else {
	            Dom_1.$$(this.lessElement).removeClass('coveo-active');
	        }
	        if (moreValuesAvailable) {
	            Dom_1.$$(this.moreElement).addClass('coveo-active');
	        }
	        else {
	            Dom_1.$$(this.moreElement).removeClass('coveo-active');
	        }
	        if (lessElementIsShown || moreValuesAvailable) {
	            Dom_1.$$(this.footerElement).removeClass('coveo-facet-empty');
	        }
	        else {
	            Dom_1.$$(this.footerElement).addClass('coveo-facet-empty');
	        }
	    };
	    Facet.prototype.handleClickMore = function () {
	        this.showMore();
	    };
	    Facet.prototype.handleClickLess = function () {
	        this.showLess();
	    };
	    Facet.prototype.handleNuke = function () {
	        window.removeEventListener('resize', this.resize);
	    };
	    Facet.prototype.checkForComputedFieldAndSort = function () {
	        if (this.options.sortCriteria.toLowerCase().indexOf('computedfield') != -1 && Utils_1.Utils.isNullOrUndefined(this.options.computedField)) {
	            this.logger.warn('Sort criteria is specified as ComputedField, but the facet uses no computed field. Facet will always be empty !', this);
	        }
	    };
	    Facet.prototype.checkForValueCaptionType = function () {
	        if (this.options.valueCaption && typeof this.options.valueCaption == 'function') {
	            this.options.enableFacetSearch = false;
	            this.options.includeInOmnibox = false;
	            this.logger.warn('Using a function as valueCaption is now deprecated. Use a json key value pair instead. Facet search and omnibox has been disabled for this facet', this);
	        }
	    };
	    Facet.prototype.checkForCustomSort = function () {
	        if (this.options.customSort != undefined && !_.contains(this.options.availableSorts, 'custom')) {
	            this.options.availableSorts.unshift('custom');
	        }
	        if (this.options.availableSorts[0] == 'custom') {
	            this.options.sortCriteria = 'nosort';
	        }
	    };
	    Facet.prototype.initBottomAndTopSpacer = function () {
	        var _this = this;
	        var bottomSpace = Dom_1.$$(this.options.paddingContainer).find('.coveo-bottomSpace');
	        var topSpace = Dom_1.$$(this.options.paddingContainer).find('.coveo-topSpace');
	        if (this.options.preservePosition) {
	            Dom_1.$$(this.options.paddingContainer).on('mouseleave', function () { return _this.unpinFacetPosition(); });
	            this.pinnedTopSpace = topSpace;
	            this.pinnedBottomSpace = bottomSpace;
	            if (!this.pinnedTopSpace) {
	                this.pinnedTopSpace = document.createElement('div');
	                Dom_1.$$(this.pinnedTopSpace).addClass('coveo-topSpace');
	                Dom_1.$$(this.pinnedTopSpace).insertBefore(this.options.paddingContainer.firstChild);
	            }
	            if (!this.pinnedBottomSpace) {
	                this.pinnedBottomSpace = document.createElement('div');
	                Dom_1.$$(this.pinnedBottomSpace).addClass('coveo-bottomSpace');
	                this.options.paddingContainer.appendChild(this.pinnedBottomSpace);
	            }
	        }
	    };
	    Facet.prototype.updateIncludedQueryStateModel = function () {
	        var selectedValues = {
	            included: this.getSelectedValues(),
	            title: this.includedAttributeId
	        };
	        this.queryStateModel.set(this.includedAttributeId, selectedValues.included);
	    };
	    Facet.prototype.updateExcludedQueryStateModel = function () {
	        var excludedValues = {
	            title: this.excludedAttributeId,
	            excluded: this.getExcludedValues()
	        };
	        this.queryStateModel.set(this.excludedAttributeId, excludedValues.excluded);
	    };
	    Facet.prototype.updateLookupValueQueryStateModel = function () {
	        if (this.options.lookupField) {
	            var valueToSet_1 = {};
	            _.each(this.values.getSelected().concat(this.values.getExcluded()), function (value) {
	                valueToSet_1[value.value] = value.lookupValue;
	            });
	            this.queryStateModel.set(this.lookupValueAttributeId, valueToSet_1);
	        }
	    };
	    Facet.prototype.handleQueryStateChangedOperator = function (operator) {
	        if (operator == 'and') {
	            this.switchToAnd();
	        }
	        else if (operator == 'or') {
	            this.switchToOr();
	        }
	    };
	    Facet.prototype.handleQueryStateChangedIncluded = function (includedChanged) {
	        var toUnSelect = _.difference(this.getSelectedValues(), includedChanged);
	        if (Utils_1.Utils.isNonEmptyArray(toUnSelect)) {
	            this.deselectMultipleValues(toUnSelect);
	        }
	        if (!Utils_1.Utils.arrayEqual(this.getSelectedValues(), includedChanged, false)) {
	            this.selectMultipleValues(includedChanged);
	        }
	    };
	    Facet.prototype.handleQueryStateChangedExcluded = function (excludedChanged) {
	        var toUnExclude = _.difference(this.getExcludedValues(), excludedChanged);
	        if (Utils_1.Utils.isNonEmptyArray(toUnExclude)) {
	            this.unexcludeMultipleValues(toUnExclude);
	        }
	        if (!Utils_1.Utils.arrayEqual(this.getExcludedValues(), excludedChanged, false)) {
	            this.excludeMultipleValues(excludedChanged);
	        }
	    };
	    Facet.prototype.handleLookupvalueChanged = function (lookupFieldChanged) {
	        var _this = this;
	        _.each(lookupFieldChanged, function (lookupvalue, value) {
	            _this.facetValuesList.get(decodeURIComponent(value)).facetValue.lookupValue = decodeURIComponent(lookupvalue);
	        });
	    };
	    Facet.prototype.handleQueryStateChanged = function (data) {
	        Assert_1.Assert.exists(data);
	        this.ensureDom();
	        var queryStateAttributes = data.attributes;
	        var includedChanged = queryStateAttributes[this.includedAttributeId];
	        var excludedChanged = queryStateAttributes[this.excludedAttributeId];
	        var operator = queryStateAttributes[this.operatorAttributeId];
	        var lookupValueChanged = queryStateAttributes[this.lookupValueAttributeId];
	        if (this.listenToQueryStateChange) {
	            if (!Utils_1.Utils.isNullOrEmptyString(operator)) {
	                this.handleQueryStateChangedOperator(operator);
	            }
	            if (!Utils_1.Utils.isNullOrUndefined(includedChanged)) {
	                this.handleQueryStateChangedIncluded(includedChanged);
	            }
	            if (!Utils_1.Utils.isNullOrUndefined(excludedChanged)) {
	                this.handleQueryStateChangedExcluded(excludedChanged);
	            }
	            if (!Utils_1.Utils.isNullOrUndefined(lookupValueChanged)) {
	                this.handleLookupvalueChanged(lookupValueChanged);
	            }
	        }
	    };
	    Facet.prototype.handlePopulateOmnibox = function (data) {
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.completeQueryExpression);
	        // The omnibox calls can come in before a first query was executed (atypical, but
	        // if no query is auto-triggered on initialization). To ensure that we've got the
	        // proper filters, we ensure that at least a dumbshow query builder run occured
	        // before proceeding.
	        this.queryController.ensureCreatedQueryBuilder();
	        if (this.canFetchMore) {
	            this.handleOmniboxWithSearchInFacet(data);
	        }
	        else {
	            this.handleOmniboxWithStaticValue(data);
	        }
	    };
	    Facet.prototype.handleOmniboxWithSearchInFacet = function (eventArg) {
	        var _this = this;
	        var regex = new RegExp('^' + eventArg.completeQueryExpression.regex.source, 'i');
	        var promise = new Promise(function (resolve, reject) {
	            var searchParameters = new FacetSearchParameters_1.FacetSearchParameters(_this);
	            searchParameters.setValueToSearch(eventArg.completeQueryExpression.word);
	            searchParameters.nbResults = _this.options.numberOfValuesInOmnibox;
	            _this.facetQueryController.search(searchParameters).then(function (fieldValues) {
	                var facetValues = _.map(_.filter(fieldValues, function (fieldValue) {
	                    return regex.test(fieldValue.lookupValue);
	                }), function (fieldValue) {
	                    return _this.values.get(fieldValue.lookupValue) || FacetValues_1.FacetValue.create(fieldValue);
	                });
	                var element = new OmniboxValuesList_1.OmniboxValuesList(_this, facetValues, eventArg, OmniboxValueElement_1.OmniboxValueElement).build();
	                resolve({
	                    element: element,
	                    zIndex: _this.omniboxZIndex
	                });
	            }).catch(function () {
	                resolve({ element: undefined });
	            });
	        });
	        eventArg.rows.push({ deferred: promise });
	    };
	    Facet.prototype.handleDuringQuery = function () {
	        this.ensureDom();
	        if (!this.keepDisplayedValuesNextTime) {
	            this.fadeInactiveValuesInMainList(this.options.facetSearchDelay);
	        }
	    };
	    Facet.prototype.handleBuildingQuery = function (data) {
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.queryBuilder);
	        this.facetQueryController.prepareForNewQuery();
	        if (this.values.hasSelectedOrExcludedValues()) {
	            var expression = this.facetQueryController.computeOurFilterExpression();
	            this.logger.trace('Putting filter in query', expression);
	            data.queryBuilder.advancedExpression.add(expression);
	        }
	    };
	    Facet.prototype.handleDoneBuildingQuery = function (data) {
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.queryBuilder);
	        var queryBuilder = data.queryBuilder;
	        this.facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
	    };
	    Facet.prototype.handleClearBreadcrumb = function () {
	        this.reset();
	    };
	    Facet.prototype.updateValues = function (facetValues) {
	        Assert_1.Assert.exists(facetValues);
	        if (this.keepDisplayedValuesNextTime) {
	            this.values.updateCountsFromNewValues(facetValues);
	        }
	        else {
	            facetValues.importActiveValuesFromOtherList(this.values);
	            facetValues.sortValuesDependingOnStatus(this.numberOfValues);
	            this.values = facetValues;
	        }
	        this.updateNumberOfValues();
	    };
	    Facet.prototype.ensureFacetValueIsInList = function (facetValue) {
	        Assert_1.Assert.exists(facetValue);
	        if (!this.values.contains(facetValue.value)) {
	            this.values.add(facetValue);
	        }
	    };
	    Facet.prototype.isAnyValueCurrentlyDisplayed = function () {
	        return !this.values.isEmpty();
	    };
	    Facet.prototype.buildFacetContent = function () {
	        this.headerElement = this.buildHeader();
	        this.element.appendChild(this.headerElement);
	        this.initFacetValuesList();
	        if (this.shouldRenderFacetSearch()) {
	            this.initFacetSearch();
	        }
	        if (this.shouldRenderMoreLess()) {
	            this.moreElement = this.buildMore();
	            this.lessElement = this.buildLess();
	        }
	        this.footerElement = this.buildFooter();
	        this.element.appendChild(this.footerElement);
	        if (this.searchInterface.isNewDesign() && this.lessElement && this.moreElement) {
	            this.footerElement.appendChild(this.lessElement);
	            this.footerElement.appendChild(this.moreElement);
	        }
	        else if (this.moreElement && this.lessElement) {
	            this.footerElement.appendChild(this.moreElement);
	            this.footerElement.appendChild(this.lessElement);
	        }
	    };
	    Facet.prototype.buildHeader = function () {
	        var icon = this.options.headerIcon;
	        if (this.searchInterface.isNewDesign() && this.options.headerIcon == this.options.field) {
	            icon = undefined;
	        }
	        this.facetHeader = new FacetHeader_1.FacetHeader({
	            facetElement: this.element,
	            title: this.options.title,
	            icon: icon,
	            field: this.options.field,
	            enableClearElement: true,
	            enableCollapseElement: this.options.enableCollapse,
	            facet: this,
	            settingsKlass: this.options.enableSettings ? FacetSettings_1.FacetSettings : undefined,
	            sortKlass: FacetSort_1.FacetSort,
	            availableSorts: this.options.availableSorts,
	            isNewDesign: this.getBindings().searchInterface.isNewDesign()
	        });
	        var built = this.facetHeader.build();
	        this.facetSettings = this.facetHeader.settings;
	        this.facetSort = this.facetHeader.sort;
	        return built;
	    };
	    Facet.prototype.unpinFacetPosition = function () {
	        if (this.shouldFacetUnpin() && this.options.preservePosition) {
	            Dom_1.$$(this.pinnedTopSpace).addClass('coveo-with-animation');
	            Dom_1.$$(this.pinnedBottomSpace).addClass('coveo-with-animation');
	            this.pinnedTopSpace.style.height = '0px';
	            this.pinnedBottomSpace.style.height = '0px';
	        }
	        this.unpinnedViewportPosition = undefined;
	        this.pinnedViewportPosition = undefined;
	    };
	    Facet.prototype.isFacetPinned = function () {
	        return Utils_1.Utils.exists(this.pinnedViewportPosition);
	    };
	    Facet.prototype.shouldFacetUnpin = function () {
	        return Utils_1.Utils.exists(this.unpinnedViewportPosition);
	    };
	    Facet.prototype.ensurePinnedFacetHasntMoved = function () {
	        var _this = this;
	        if (this.isFacetPinned()) {
	            Assert_1.Assert.exists(this.pinnedViewportPosition);
	            Dom_1.$$(this.pinnedTopSpace).removeClass('coveo-with-animation');
	            Dom_1.$$(this.pinnedBottomSpace).removeClass('coveo-with-animation');
	            this.pinnedTopSpace.style.height = '0px';
	            this.pinnedBottomSpace.style.height = '0px';
	            // Under firefox scrolling the body doesn't work, but window does
	            // on all browser, so we substitute those here when needed.
	            var elementToScroll_1 = this.options.scrollContainer == document.body ? window : this.options.scrollContainer;
	            var currentViewportPosition_1 = this.element.getBoundingClientRect().top;
	            var offset_1 = currentViewportPosition_1 - this.pinnedViewportPosition;
	            var scrollToOffset_1 = function () {
	                if (elementToScroll_1 instanceof Window) {
	                    window.scrollTo(0, window.scrollY + offset_1);
	                }
	                else {
	                    elementToScroll_1.scrollTop = elementToScroll_1.scrollTop + offset_1;
	                }
	            };
	            // First try to adjust position by scrolling the page
	            scrollToOffset_1();
	            currentViewportPosition_1 = this.element.getBoundingClientRect().top;
	            offset_1 = currentViewportPosition_1 - this.pinnedViewportPosition;
	            // If scrolling has worked (offset == 0), we're good to go, nothing to do anymore.
	            // Otherwise try other voodoo magic.
	            if (offset_1 < 0) {
	                // This means the facet element is scrolled up in the viewport,
	                // scroll it down by adding space in the top container
	                this.pinnedTopSpace.style.height = (offset_1 * -1) + 'px';
	            }
	            else {
	                // Here, this means the facet element is scrolled down in the viewport,
	                // and there is not enough scroll space in the page / window to scroll far enough
	                // we need to add space at the bottom so that we can finally scroll there.
	                _.defer(function () {
	                    var heightBottom = 0;
	                    var attempts = 0;
	                    while (offset_1 > 0 && attempts++ < 100) {
	                        heightBottom += 100;
	                        _this.pinnedBottomSpace.style.height = heightBottom + 'px';
	                        currentViewportPosition_1 = _this.element.getBoundingClientRect().top;
	                        offset_1 = currentViewportPosition_1 - _this.pinnedViewportPosition;
	                        scrollToOffset_1();
	                    }
	                });
	            }
	            this.unpinnedViewportPosition = this.pinnedViewportPosition;
	            this.pinnedViewportPosition = null;
	        }
	    };
	    Facet.prototype.buildFooter = function () {
	        return Dom_1.$$('div', { className: 'coveo-facet-footer' }).el;
	    };
	    Facet.prototype.buildMore = function () {
	        var _this = this;
	        var more;
	        if (this.searchInterface.isNewDesign()) {
	            more = Dom_1.$$('div', { className: 'coveo-facet-more', tabindex: 0 }, Dom_1.$$('span', { className: 'coveo-icon' })).el;
	        }
	        else {
	            more = Dom_1.$$('a', { className: 'coveo-facet-more' }, Strings_1.l('More')).el;
	        }
	        var moreAction = function () { return _this.handleClickMore(); };
	        Dom_1.$$(more).on('click', moreAction);
	        Dom_1.$$(more).on('keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, moreAction));
	        return more;
	    };
	    Facet.prototype.buildLess = function () {
	        var _this = this;
	        var less;
	        if (this.searchInterface.isNewDesign()) {
	            less = Dom_1.$$('div', { className: 'coveo-facet-less', tabindex: 0 }, Dom_1.$$('span', { className: 'coveo-icon' })).el;
	        }
	        else {
	            less = Dom_1.$$('a', { className: 'coveo-facet-less' }, Strings_1.l('Less')).el;
	        }
	        var lessAction = function () { return _this.handleClickLess(); };
	        Dom_1.$$(less).on('click', lessAction);
	        Dom_1.$$(less).on('keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, lessAction));
	        return less;
	    };
	    Facet.prototype.triggerMoreQuery = function () {
	        var _this = this;
	        this.logger.info('Triggering new facet more query');
	        this.showWaitingAnimation();
	        // fetch 1 more value than we need, so we can see if there is more value to fetch still or if we have reached
	        // the end of the availables values
	        this.facetQueryController.fetchMore(this.numberOfValues + 1).then(function (queryResults) {
	            var facetValues = new FacetValues_1.FacetValues(queryResults.groupByResults[0]);
	            facetValues.importActiveValuesFromOtherList(_this.values);
	            facetValues.sortValuesDependingOnStatus(_this.numberOfValues);
	            _this.values = facetValues;
	            _this.nbAvailableValues = _this.values.size();
	            _this.updateNumberOfValues();
	            _this.canFetchMore = _this.numberOfValues < _this.nbAvailableValues;
	            if (_this.values.hasSelectedOrExcludedValues() && !_this.options.useAnd && _this.options.isMultiValueField) {
	                _this.triggerUpdateDeltaQuery(_.filter(_this.values.getAll(), function (facetValue) { return !facetValue.selected && !facetValue.excluded; }));
	            }
	            else {
	                if (_this.values.hasSelectedOrExcludedValues() && !_this.options.useAnd) {
	                    _this.values.updateDeltaWithFilteredFacetValues(new FacetValues_1.FacetValues());
	                    _this.hideWaitingAnimation();
	                }
	                else {
	                    _this.hideWaitingAnimation();
	                }
	                _this.rebuildValueElements();
	            }
	        }).catch(function () { return _this.hideWaitingAnimation(); });
	    };
	    Facet.prototype.triggerUpdateDeltaQuery = function (facetValues) {
	        var _this = this;
	        this.showWaitingAnimation();
	        this.facetQueryController.searchInFacetToUpdateDelta(facetValues).then(function (queryResults) {
	            var values = new FacetValues_1.FacetValues();
	            _.each(queryResults.groupByResults, function (groupByResult) {
	                _.each(groupByResult.values, function (groupByValue) {
	                    if (!values.contains(groupByValue.value)) {
	                        values.add(FacetValues_1.FacetValue.createFromGroupByValue(groupByValue));
	                    }
	                });
	            });
	            _this.values.updateDeltaWithFilteredFacetValues(values);
	            _this.rebuildValueElements();
	            _this.hideWaitingAnimation();
	        });
	    };
	    Facet.prototype.updateNumberOfValues = function () {
	        if (this.currentPage <= 0) {
	            // We're on the first page, let's reset the number of values to a minimum.
	            this.currentPage = 0;
	            this.numberOfValues = 0;
	        }
	        else {
	            // Calculate the number of value with the current page.
	            this.numberOfValues = this.options.numberOfValues + (this.currentPage * this.options.pageSize);
	        }
	        // Make sure we have at least the absolute minimum of value to display.
	        this.numberOfValues = Math.max(this.numberOfValues, this.getMinimumNumberOfValuesToDisplay());
	    };
	    Facet.prototype.getMinimumNumberOfValuesToDisplay = function () {
	        // The min value is the number of used values.
	        var minValue = this.values.getExcluded().length + this.values.getSelected().length;
	        // When using a custom sort, we have to show all values between the selected ones.
	        // Thus, we must find the last selected value after a reorder and use that value as the number of value.
	        if (this.options.customSort != null && this.facetSort != null && this.options.customSort.length > 0) {
	            var lastSelectedValueIndex_1 = -1;
	            new FacetValuesOrder_1.FacetValuesOrder(this, this.facetSort).reorderValues(this.values.getAll()).forEach(function (facetValue, index) {
	                if (facetValue.selected) {
	                    lastSelectedValueIndex_1 = index;
	                }
	            });
	            minValue = lastSelectedValueIndex_1 + 1;
	        }
	        return Math.max(minValue, this.options.numberOfValues);
	    };
	    Facet.prototype.updateVisibilityBasedOnDependsOn = function () {
	        if (Utils_1.Utils.isNonEmptyString(this.options.dependsOn)) {
	            Dom_1.$$(this.element).toggleClass('coveo-facet-dependent', !this.doesParentFacetHasSelectedValue() && !this.values.hasSelectedOrExcludedValues());
	        }
	    };
	    Facet.prototype.doesParentFacetHasSelectedValue = function () {
	        var id = QueryStateModel_1.QueryStateModel.getFacetId(this.options.dependsOn);
	        var values = this.queryStateModel.get(id);
	        return values != null && values.length != 0;
	    };
	    Facet.prototype.shouldRenderFacetSearch = function () {
	        return this.options.enableFacetSearch;
	    };
	    Facet.prototype.shouldRenderMoreLess = function () {
	        return this.options.enableMoreLess;
	    };
	    Facet.prototype.debugInfo = function () {
	        var info = {};
	        info[this['constructor']['ID']] = {
	            component: this,
	            groupByRequest: this.facetQueryController.lastGroupByRequest,
	            groupByResult: this.facetQueryController.lastGroupByResult
	        };
	        return info;
	    };
	    return Facet;
	}(Component_1.Component));
	Facet.ID = 'Facet';
	Facet.omniboxIndex = 50;
	/**
	 * The possible options for a facet
	 * @componentOptions
	 */
	Facet.options = {
	    /**
	     * Specifies the title to display at the top of the Facet.
	     *
	     * Default value is the localized string for `"NoTitle"`.
	     */
	    title: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({
	        defaultValue: Strings_1.l('NoTitle'),
	        section: 'Identification',
	        priority: 10
	    }),
	    /**
	     * Specifies the index field whose values the Facet should use.
	     *
	     * This requires the given field to be configured correctly in the index as a Facet field (see
	     * [Adding Fields to a Source](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=137)).
	     *
	     * Specifying a value for this option is required for the Facet component to work.
	     */
	    field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true, groupByField: true, section: 'Identification' }),
	    headerIcon: ComponentOptions_1.ComponentOptions.buildIconOption({ deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    /**
	     * Specifies a unique identifier for the Facet. Among other things, this identifier serves the purpose of saving the
	     * facet state in the URL hash.
	     *
	     * If you have two facets with the same field on the same page, you should specify an id value for at least one of
	     * those two facets. This id must be unique in the page.
	     *
	     * Default value is the {@link Facet.options.field} option value.
	     */
	    id: ComponentOptions_1.ComponentOptions.buildStringOption({
	        postProcessing: function (value, options) { return value || options.field; }
	    }),
	    /**
	     * Specifies whether the field is configured in the index as a multi-value field (semicolon separated values such as
	     * `abc;def;ghi`).
	     *
	     * Default value is `false`.
	     */
	    isMultiValueField: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    lookupField: ComponentOptions_1.ComponentOptions.buildFieldOption({ deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    /**
	     * Specifies whether to display the Facet **Settings** menu.
	     *
	     * See also {@link Facet.options.enableSettingsFacetState}, {@link Facet.options.availableSorts} and
	     * {@link Facet.options.enableCollapse}.
	     *
	     * Default value is `true`.
	     */
	    enableSettings: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true, section: 'SettingsMenu', priority: 9 }),
	    /**
	     * If {@link Facet.options.enableSettings} is `true`, specifies whether the **Save state** menu option is available
	     * in the Facet **Settings** menu.
	     *
	     * Default value is `false`.
	     */
	    enableSettingsFacetState: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableSettings' }),
	    /**
	     * If {@link Facet.options.enableSettings} is `true`, specifies the sort criteria options to display in the Facet
	     * **Settings** menu.
	     *
	     * Possible values are:
	     * - `"occurrences"`
	     * - `"score"`
	     * - `"alphaAscending"`
	     * - `alphaDescending`
	     * - `"computedfieldascending"`
	     * - `"computedfielddescending"`
	     * - `"custom"`
	     *
	     * Default value is `"occurrences,score,alphaAscending,alphaDescending"`.
	     */
	    availableSorts: ComponentOptions_1.ComponentOptions.buildListOption({
	        defaultValue: ['occurrences', 'score', 'alphaAscending', 'alphaDescending'],
	        values: ['Occurrences', 'Score', 'AlphaAscending', 'AlphaDescending', 'ComputedFieldAscending', 'ComputedFieldDescending', 'ChiSquare', 'NoSort'],
	        depend: 'enableSettings'
	    }),
	    /**
	     * Specifies the criteria to use to sort the Facet values.
	     *
	     * See {@link IGroupByRequest} for the list of possible values.
	     *
	     * Default value is the first sort criteria specified in the {@link Facet.options.availableSorts} option, or
	     * `"occurrences"` if no sort criteria is specified.
	     */
	    sortCriteria: ComponentOptions_1.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || (options.availableSorts.length > 0 ? options.availableSorts[0] : 'occurrences'); } }),
	    /**
	     * Specifies a custom order by which to sort the Facet values.
	     *
	     * For example, you could use this to specify a logical order for support tickets, such as
	     * `customSort : ["New","Opened","Feedback","Resolved","Feedback"]`
	     */
	    customSort: ComponentOptions_1.ComponentOptions.buildListOption({ section: 'Identification' }),
	    /**
	     * Specifies the maximum number of field values to display by default in the Facet before the user
	     * clicks **More**.
	     *
	     * Default value is `5`. Minimum value is `0`.
	     */
	    numberOfValues: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 0, section: 'Identification' }),
	    /**
	     * Specifies the *injection depth* to use for the {@link IGroupByRequest} operation.
	     *
	     * The injection depth determines how many results to scan in the index to ensure that the facet lists all potential
	     * facet values. Increasing this value enhances the accuracy of the listed values at the cost of performance.
	     *
	     * Default value is `1000`. Minimum value is `0`.
	     */
	    injectionDepth: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 1000, min: 0 }),
	    showIcon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    /**
	     * Specifies whether to use the `AND` operator in the resulting filter when multiple values are selected in the
	     * Facet.
	     *
	     * Setting this option to `true` means that documents must have all of the selected values to match the resulting
	     * query.
	     *
	     * Default value is `false`, which means that the filter uses the `OR` operator. Thus, by default, documents must
	     * have at least one of the selected values to match the query.
	     */
	    useAnd: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether to allow the user to toggle between the `OR` and `AND` modes in the Facet.
	     *
	     * Setting this option to `true` displays an icon in the top right corner of the Facet. The user can click this icon
	     * to toggle between between the two modes.
	     *
	     * Default value is `false`.
	     */
	    enableTogglingOperator: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, alias: 'allowTogglingOperator' }),
	    /**
	     * Specifies whether to display a search box at the bottom of the Facet for searching among the available values.
	     *
	     * See also {@link Facet.options.facetSearchDelay}, {@link Facet.options.facetSearchIgnoreAccents},
	     * {@link Facet.options.numberOfValuesInFacetSearch}.
	     *
	     * Default value is `true`.
	     */
	    enableFacetSearch: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true, section: 'FacetSearch', priority: 8 }),
	    /**
	     * If {@link Facet.options.enableFacetSearch} is `true`, specifies the delay (in milliseconds) before sending a
	     * search request to the server when the user starts typing in the Facet search box.
	     *
	     * Specifying a smaller value means results will arrive faster. However, chances of having to cancel many requests
	     * sent to the server will increase as the user keeps on typing new characters.
	     *
	     * Default value is `100`. Minimum value is `0`.
	     */
	    facetSearchDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 100, min: 0, depend: 'enableFacetSearch' }),
	    /**
	     * If {@link Facet.options.enableFacetSearch} is `true`, specifies whether to ignore accents in the Facet search
	     * box.
	     *
	     * Default value is `false`.
	     */
	    facetSearchIgnoreAccents: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableFacetSearch' }),
	    /**
	     * If {@link Facet.options.enableFacetSearch} is `true`, specifies the number of values to display in the Facet
	     * search results popup.
	     *
	     * Default value is `15`. Minimum value is `1`.
	     */
	    numberOfValuesInFacetSearch: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 15, min: 1 }),
	    /**
	     * Specifies whether the Facet should push data to the {@link Breadcrumb} component.
	     *
	     * See also {@link Facet.options.numberOfValuesInBreadcrumb}.
	     *
	     * Default value is `true`.
	     */
	    includeInBreadcrumb: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * If {@link Facet.options.includeInBreadcrumb} is `true`, specifies the maximum number of values that the Facet
	     * should display in the {@link Breadcrumb} before outputting a **See more** button.
	     *
	     * Default value is `5` on a desktop computer and `3` on a mobile device. Minimum value is `0`.
	     */
	    numberOfValuesInBreadcrumb: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultFunction: function () { return DeviceUtils_1.DeviceUtils.isMobileDevice() ? 3 : 5; }, min: 0, depend: 'includeInBreadcrumb' }),
	    includeInOmnibox: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    numberOfValuesInOmnibox: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultFunction: function () { return DeviceUtils_1.DeviceUtils.isMobileDevice() ? 3 : 5; }, min: 0, depend: 'includeInOmnibox', deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    /**
	     * Specifies the name of a field on which to execute an aggregate operation for all distinct values of the Facet
	     * field.
	     *
	     * The Facet displays the result of the operation along with the number of occurrences for each value.
	     *
	     * You can use this option to compute the sum of a field (like a money amount) for each listed Facet value.
	     *
	     * Works in conjunction with {@link Facet.options.computedFieldOperation},
	     * {@link Facet.options.computedFieldFormat} and {@link Facet.options.computedFieldCaption}.
	     */
	    computedField: ComponentOptions_1.ComponentOptions.buildFieldOption({ section: 'ComputedField', priority: 7 }),
	    /**
	     * Specifies the type of aggregate operation to perform on the {@link Facet.options.computedField}.
	     *
	     * The possible values are:
	     * - `"sum"` - Computes the sum of the computed field values.
	     * - `"average"` - Computes the average of the computed field values.
	     * - `"minimum"` - Finds the minimum value of the computed field values.
	     * - `"maximum"` - Finds the maximum value of the computed field values.
	     *
	     * Default value is `"sum"`.
	     */
	    computedFieldOperation: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'sum', section: 'ComputedField' }),
	    /**
	     * Specifies how to format the values resulting from a {@link Facet.options.computedFieldOperation}.
	     *
	     * The Globalize library defines all available formats (see
	     * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-)).
	     *
	     * The most commonly used formats are:
	     * - `"c0"` - Formats the value as a currency.
	     * - `"n0"` - Formats the value as an integer.
	     * - `"n2"` - Formats the value as a floating point with 2 decimal digits.
	     *
	     * Default value is `"c0"`.
	     */
	    computedFieldFormat: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'c0', section: 'ComputedField' }),
	    /**
	     * Specifies what the caption of the {@link Facet.options.computedField} should be in the settings menu for sorting.
	     *
	     * For example, setting this option to `"Money"` will display `"Money Ascending"` for computed field ascending.
	     *
	     * Default value is the localized string for `"ComputedField"`.
	     */
	    computedFieldCaption: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ defaultValue: Strings_1.l('ComputedField'), section: 'ComputedField' }),
	    /**
	     * Specifies whether the Facet should remain stable in its current position in the viewport while the mouse cursor
	     * is over it.
	     *
	     * Whenever the value selection changes in a facet, the search interface automatically performs a query. This new
	     * query might cause other elements in the page to resize themselves (typically, other facets above or below the
	     * one the user is interacting with).
	     *
	     * This option is responsible for adding the `<div class='coveo-topSpace'>` and
	     * `<div class='coveo-bottomSpace'>` around the Facet container. The Facet adjusts the scroll amount of the page to
	     * ensure that it does not move relatively to the mouse when the results are updated.
	     *
	     * In some cases, the Facet also adds margins to the scrollContainer, if scrolling alone is not enough to
	     * preserve position.
	     *
	     * See also {@link Facet.options.paddingContainer} and {@link Facet.options.scrollContainer}.
	     *
	     * Default value is `true`.
	     */
	    preservePosition: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the parent container of the facets.
	     *
	     * Used by the {@link Facet.options.preservePosition}.
	     *
	     * Default value is `element.parentElement`.
	     */
	    paddingContainer: ComponentOptions_1.ComponentOptions.buildSelectorOption({ defaultFunction: function (element) { return element.parentElement; } }),
	    /**
	     * Specifies the HTML element (through a CSS selector) whose scroll amount the Facet should adjust to preserve its
	     * position when results are updated.
	     *
	     * Used by {@link Facet.options.preservePosition}.
	     *
	     * Default value is `document.body`.
	     */
	    scrollContainer: ComponentOptions_1.ComponentOptions.buildSelectorOption({ defaultFunction: function (element) { return document.body; } }),
	    /**
	     * Specifies whether to enable the **More** and **Less** buttons in the Facet.
	     *
	     * See also {@link Facet.options.pageSize}.
	     *
	     * Default value is `true`.
	     */
	    enableMoreLess: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * If {@link Facet.options.enableMoreLess} is `true`, specifies the number of additional results to fetch when
	     * clicking on the **More** button in the Facet.
	     *
	     * Default value is `10`. Minimum value is `1`.
	     */
	    pageSize: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 10, min: 1, depend: 'enableMoreLess' }),
	    /**
	     * If {@link Facet.options.enableSettings} is `true`, specifies whether the **Collapse \ Expand** menu option is
	     * available in the Facet **Settings** menu.
	     *
	     * Default value is `true`.
	     */
	    enableCollapse: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true, depend: 'enableSettings' }),
	    /**
	     * Specifies an explicit list of {@link IGroupByRequest.allowedValues} in the {@link IGroupByRequest}.
	     *
	     * This will whitelist the Facet content to some specific values.
	     *
	     * Example: `["File", "People"]`.
	     */
	    allowedValues: ComponentOptions_1.ComponentOptions.buildListOption(),
	    /**
	     * Specifies an additional query expression (query override) to add to each {@link IGroupByRequest} that this Facet
	     * performs.
	     *
	     * Example: `@date>=2014/01/01`
	     */
	    additionalFilter: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies whether this Facet only appears when a value is selected in its "parent" Facet.
	     *
	     * To specify the parent Facet, use its [id]{@link Facet.options.id}.
	     *
	     * Remember that by default, a Facet id is the same as its [field]{@link Facet.options.field}.
	     *
	     * **Examples:**
	     *
	     * First case: the "parent" Facet has no custom `id`:
	     * ```html
	     * <!-- "Parent" Facet: -->
	     * <div class='CoveoFacet' data-field='@myfield' data-title='My Parent Facet'></div>
	     *
	     * <!-- The "dependent" Facet must refer to the default `id` of its "parent" Facet, which is the name of its field. -->
	     * <div class='CoveoFacet' data-field='@myotherfield' data-title='My Dependent Facet' data-depends-on='@myfield'></div>
	     * ```
	     *
	     * Second case: the "parent" Facet has a custom `id`:
	     * ```html
	     * <!-- "Parent" Facet: -->
	     * <div class='CoveoFacet' data-field='@myfield' data-title='My Parent Facet' data-id='myParentCustomId'></div>
	     *
	     * <!-- The "dependent" Facet must refer to the custom `id` of its "parent" Facet, which is 'myParentCustomId'. -->
	     * <div class='CoveoFacet' data-field='@myotherfield data-title='My Dependent Facet' data-depends-on='myParentCustomId'></div>
	     * ```
	     *
	     * Default value is `undefined`
	     */
	    dependsOn: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies a JSON object describing a mapping of Facet values to their desired captions.
	     *
	     * You can only set this option in the {@link init} call of your search interface. You cannot set it directly in the
	     * markup as an HTML attribute.
	     *
	     * Example:
	     * ```
	     * // Using a Facet for file types
	     * var myValueCaption = {  "txt": "Text files","html": "Web page", [ etc ... ]};
	     *
	     * // You can set the option in the 'init' call using 'pure' JavaScript:
	     * Coveo.init(document.querySelector('#search'), {
	     *    Facet : {
	     *      valueCaption: myValueCaption
	     *    }
	     * })
	     *
	     * // Or  the jQuery extension
	     * $("#search").coveo("init", {
	     *    Facet: {
	     *      valueCaption: myValueCaption
	     *    }
	     * })
	     * ```
	     */
	    valueCaption: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {
	        return null;
	    }),
	    /**
	     * Specifies whether to enable *responsive mode* for facets. Setting this options to `false` on any Facet or
	     * {@link FacetSlider} in a search interface disables responsive mode for all other facets in the search interface.
	     *
	     * Responsive mode displays all facets under a single dropdown button whenever the width of the HTML element which
	     * the search interface is bound to reaches or falls behind a certain threshold (see
	     * {@link SearchInterface.responsiveComponents}).
	     *
	     * See also {@link Facet.options.dropdownHeaderLabel}.
	     *
	     * Default value is `true`.
	     */
	    enableResponsiveMode: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    responsiveBreakpoint: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 800, deprecated: 'This option is exposed for legacy reasons, and the recommendation is to not use this option.' }),
	    /**
	     * If {@link Facet.options.enableResponsiveMode} is `true` for all facets and
	     * {@link FacetSlider.options.enableResponsiveMode} is also `true` for all sliders, specifies the label of the
	     * dropdown button that allows to display the facets when in responsive mode.
	     *
	     * If more than one Facet or {@link FacetSlider} in the search interface specifies a value for this option, then the
	     * framework uses the first occurrence of the option.
	     *
	     * Default value is `Filters`.
	     */
	    dropdownHeaderLabel: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption()
	};
	exports.Facet = Facet;
	Initialization_1.Initialization.registerAutoCreateComponent(Facet);


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var Globalize = __webpack_require__(28);
	var _ = __webpack_require__(14);
	/**
	 * A class which holds information and operation available on a single facet value returned by a {@link IGroupByRequest}.<br/>
	 * This class is used extensibely in the {@link Facet} component.
	 */
	var FacetValue = (function () {
	    function FacetValue() {
	        this.selected = false;
	        this.excluded = false;
	        this.waitingForDelta = false;
	    }
	    FacetValue.prototype.reset = function () {
	        this.selected = false;
	        this.excluded = false;
	    };
	    FacetValue.prototype.updateCountsFromNewValue = function (newValue) {
	        Assert_1.Assert.exists(newValue);
	        this.occurrences = newValue.occurrences;
	        this.delta = newValue.delta;
	        this.computedField = newValue.computedField;
	    };
	    FacetValue.prototype.cloneWithZeroOccurrences = function () {
	        this.occurrences = 0;
	        this.computedField = undefined;
	        this.delta = undefined;
	        return this;
	    };
	    FacetValue.prototype.cloneWithDelta = function (count, delta) {
	        Assert_1.Assert.isLargerOrEqualsThan(0, count);
	        var clone = this.cloneWithZeroOccurrences();
	        clone.delta = delta;
	        clone.occurrences = count;
	        return clone;
	    };
	    FacetValue.prototype.getFormattedCount = function () {
	        var count = undefined;
	        if (Utils_1.Utils.exists(this.delta) && this.delta > 0) {
	            count = '+' + Globalize.format(this.delta, 'n0');
	        }
	        else {
	            if (this.occurrences > 0) {
	                count = Globalize.format(this.occurrences, 'n0');
	            }
	        }
	        return count;
	    };
	    FacetValue.prototype.getFormattedComputedField = function (format) {
	        if (this.computedField != 0) {
	            return Globalize.format(this.computedField, format);
	        }
	        else {
	            return undefined;
	        }
	    };
	    FacetValue.create = function (value) {
	        if (_.isString(value)) {
	            return FacetValue.createFromValue(value);
	        }
	        else if (_.isObject(value)) {
	            if ('computedFieldResults' in value) {
	                return FacetValue.createFromGroupByValue(value);
	            }
	            else {
	                return FacetValue.createFromFieldValue(value);
	            }
	        }
	        else {
	            throw new Error('Can\'t create value from ' + value);
	        }
	    };
	    FacetValue.createFromValue = function (value) {
	        Assert_1.Assert.isNonEmptyString(value);
	        var facetValue = new FacetValue();
	        facetValue.value = value;
	        facetValue.lookupValue = value;
	        return facetValue;
	    };
	    FacetValue.createFromGroupByValue = function (groupByValue) {
	        Assert_1.Assert.exists(groupByValue);
	        Assert_1.Assert.exists(groupByValue);
	        var facetValue = new FacetValue();
	        facetValue.value = groupByValue.value;
	        facetValue.lookupValue = Utils_1.Utils.exists(groupByValue.lookupValue) ? groupByValue.lookupValue : groupByValue.value;
	        facetValue.occurrences = groupByValue.numberOfResults;
	        facetValue.computedField = Utils_1.Utils.isNonEmptyArray(groupByValue.computedFieldResults) ? groupByValue.computedFieldResults[0] : undefined;
	        facetValue.score = groupByValue.score;
	        return facetValue;
	    };
	    FacetValue.createFromFieldValue = function (fieldValue) {
	        Assert_1.Assert.exists(fieldValue);
	        var facetValue = new FacetValue();
	        facetValue.value = fieldValue.value;
	        facetValue.lookupValue = fieldValue.lookupValue;
	        facetValue.occurrences = fieldValue.numberOfResults;
	        return facetValue;
	    };
	    return FacetValue;
	}());
	exports.FacetValue = FacetValue;
	var FacetValues = (function () {
	    function FacetValues(groupByResult) {
	        if (Utils_1.Utils.exists(groupByResult)) {
	            this.values = _.map(groupByResult.values, function (groupByValue) { return FacetValue.createFromGroupByValue(groupByValue); });
	        }
	        else {
	            this.values = [];
	        }
	    }
	    FacetValues.prototype.add = function (facetValue) {
	        Assert_1.Assert.exists(facetValue);
	        Assert_1.Assert.check(!this.contains(facetValue.value));
	        this.values.push(facetValue);
	    };
	    FacetValues.prototype.remove = function (value) {
	        Assert_1.Assert.isNonEmptyString(value);
	        value = value;
	        this.values = _.filter(this.values, function (elem) { return elem.value != value; });
	    };
	    FacetValues.prototype.size = function () {
	        return this.values.length;
	    };
	    FacetValues.prototype.isEmpty = function () {
	        return this.values.length == 0;
	    };
	    FacetValues.prototype.at = function (index) {
	        Assert_1.Assert.isLargerOrEqualsThan(0, index);
	        Assert_1.Assert.isSmallerThan(this.values.length, index);
	        return this.values[index];
	    };
	    FacetValues.prototype.get = function (value) {
	        return _.find(this.values, function (elem) { return elem.value.toLowerCase() == value.toLowerCase(); });
	    };
	    FacetValues.prototype.contains = function (value) {
	        return Utils_1.Utils.exists(this.get(value));
	    };
	    FacetValues.prototype.getAll = function () {
	        return this.values;
	    };
	    FacetValues.prototype.getSelected = function () {
	        return _.filter(this.values, function (value) { return value.selected; });
	    };
	    FacetValues.prototype.getExcluded = function () {
	        return _.filter(this.values, function (value) { return value.excluded; });
	    };
	    FacetValues.prototype.hasSelectedOrExcludedValues = function () {
	        return this.getSelected().length != 0 || this.getExcluded().length != 0;
	    };
	    FacetValues.prototype.reset = function () {
	        _.each(this.values, function (elem) { return elem.reset(); });
	    };
	    FacetValues.prototype.importActiveValuesFromOtherList = function (other) {
	        var _this = this;
	        Assert_1.Assert.exists(other);
	        _.each(other.getSelected(), function (otherValue) {
	            var myValue = _this.get(otherValue.value);
	            if (Utils_1.Utils.exists(myValue)) {
	                myValue.selected = true;
	            }
	            else {
	                _this.values.push(otherValue.cloneWithZeroOccurrences());
	            }
	        });
	        _.each(other.getExcluded(), function (otherValue) {
	            var myValue = _this.get(otherValue.value);
	            if (Utils_1.Utils.exists(myValue)) {
	                myValue.excluded = true;
	            }
	            else if (otherValue.occurrences != 0) {
	                var occurrences = otherValue.occurrences;
	                var clone = otherValue.cloneWithZeroOccurrences();
	                clone.occurrences = occurrences;
	                _this.values.push(clone);
	            }
	            else {
	                _this.values.push(otherValue.cloneWithZeroOccurrences());
	            }
	        });
	    };
	    FacetValues.prototype.updateCountsFromNewValues = function (newValues) {
	        Assert_1.Assert.exists(newValues);
	        this.values = _.map(this.values, function (myValue) {
	            var newValue = newValues.get(myValue.value);
	            if (Utils_1.Utils.exists(newValue)) {
	                myValue.updateCountsFromNewValue(newValue);
	                return myValue;
	            }
	            else {
	                return myValue.cloneWithZeroOccurrences();
	            }
	        });
	    };
	    FacetValues.prototype.updateDeltaWithFilteredFacetValues = function (filtered) {
	        Assert_1.Assert.exists(filtered);
	        _.each(this.values, function (unfilteredValue) {
	            var filteredValue = filtered.get(unfilteredValue.value);
	            unfilteredValue.waitingForDelta = false;
	            if (Utils_1.Utils.exists(filteredValue)) {
	                if (unfilteredValue.occurrences - filteredValue.occurrences > 0) {
	                    unfilteredValue.delta = unfilteredValue.occurrences - filteredValue.occurrences;
	                }
	                else {
	                    unfilteredValue.delta = null;
	                }
	            }
	            else if (!unfilteredValue.selected && !unfilteredValue.excluded) {
	                unfilteredValue.delta = unfilteredValue.occurrences;
	            }
	        });
	    };
	    FacetValues.prototype.mergeWithUnfilteredFacetValues = function (unfiltered) {
	        var _this = this;
	        Assert_1.Assert.exists(unfiltered);
	        var values = [];
	        _.each(unfiltered.values, function (unfilteredValue) {
	            var filteredValue = _this.get(unfilteredValue.value);
	            if (Utils_1.Utils.exists(filteredValue)) {
	                if (filteredValue.occurrences == unfilteredValue.occurrences) {
	                    values.push(filteredValue);
	                }
	                else {
	                    values.push(unfilteredValue.cloneWithDelta(unfilteredValue.occurrences, unfilteredValue.occurrences - filteredValue.occurrences));
	                }
	            }
	            else {
	                values.push(unfilteredValue.cloneWithDelta(unfilteredValue.occurrences, unfilteredValue.occurrences));
	            }
	        });
	        var index = 0;
	        _.each(this.values, function (value) {
	            var unfilteredValue = unfiltered.get(value.value);
	            if (!Utils_1.Utils.exists(unfilteredValue)) {
	                if (value.selected || value.excluded) {
	                    values.splice(index, 0, value);
	                    index++;
	                }
	            }
	            else {
	                for (var i = 0; i < values.length; i++) {
	                    if (values[i].value == value.value) {
	                        index = i + 1;
	                        break;
	                    }
	                }
	            }
	        });
	        this.values = values;
	    };
	    FacetValues.prototype.sortValuesDependingOnStatus = function (excludeLastIndex) {
	        this.values = _.sortBy(this.values, function (value) {
	            if (value.selected) {
	                return 1;
	            }
	            else if (value.excluded) {
	                return 3;
	            }
	            else {
	                return 2;
	            }
	        });
	        if (excludeLastIndex != null && excludeLastIndex < this.values.length) {
	            var nbExclude = this.getExcluded().length;
	            var excludes = this.values.splice(this.values.length - nbExclude, nbExclude);
	            Array.prototype.splice.apply(this.values, [excludeLastIndex - nbExclude, 0].concat(excludes));
	        }
	    };
	    return FacetValues;
	}());
	exports.FacetValues = FacetValues;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Facet_1 = __webpack_require__(157);
	var Dom_1 = __webpack_require__(59);
	var Utils_1 = __webpack_require__(13);
	var InitializationEvents_1 = __webpack_require__(45);
	var DeviceUtils_1 = __webpack_require__(16);
	var EventsUtils_1 = __webpack_require__(139);
	var FacetSearchParameters_1 = __webpack_require__(92);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Component_1 = __webpack_require__(107);
	var DomUtils_1 = __webpack_require__(60);
	var PopupUtils_1 = __webpack_require__(71);
	var Strings_1 = __webpack_require__(35);
	var Assert_1 = __webpack_require__(12);
	var KeyboardUtils_1 = __webpack_require__(68);
	var FacetUtils_1 = __webpack_require__(93);
	var FacetValues_1 = __webpack_require__(158);
	var StringUtils_1 = __webpack_require__(62);
	var FacetValueElement_1 = __webpack_require__(160);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var SearchInterface_1 = __webpack_require__(108);
	var ResponsiveComponentsUtils_1 = __webpack_require__(140);
	var FacetValuesOrder_1 = __webpack_require__(163);
	var _ = __webpack_require__(14);
	/**
	 * Used by the {@link Facet} component to render and handle the facet search part of each facet.
	 */
	var FacetSearch = (function () {
	    function FacetSearch(facet, facetSearchValuesListKlass, root) {
	        var _this = this;
	        this.facet = facet;
	        this.facetSearchValuesListKlass = facetSearchValuesListKlass;
	        this.root = root;
	        this.showingFacetSearchWaitAnimation = false;
	        this.moreValuesToFetch = true;
	        this.searchBarIsAnimating = false;
	        this.lastSearchWasEmpty = true;
	        this.searchResults = document.createElement('ul');
	        Dom_1.$$(this.searchResults).addClass('coveo-facet-search-results');
	        this.onResize = _.debounce(function () {
	            // Mitigate issues in UT where the window in phantom js might get resized in the scope of another test.
	            // These would point to random instance of a test karma object, and not a real search interface.
	            if (_this.facet instanceof Facet_1.Facet && _this.facet.searchInterface instanceof SearchInterface_1.SearchInterface) {
	                if (_this.shouldPositionSearchResults()) {
	                    _this.positionSearchResults();
	                }
	            }
	        }, 250);
	        this.onDocumentClick = function (e) {
	            _this.handleClickElsewhere(e);
	        };
	        window.addEventListener('resize', function () { return _this.onResize(); });
	        document.addEventListener('click', function (e) { return _this.onDocumentClick(e); });
	        Dom_1.$$(facet.root).on(InitializationEvents_1.InitializationEvents.nuke, function () { return _this.handleNuke(); });
	    }
	    FacetSearch.prototype.isMobileDevice = function () {
	        return DeviceUtils_1.DeviceUtils.isMobileDevice() && !this.facet.searchInterface.isNewDesign();
	    };
	    /**
	     * Build the search component and return an `HTMLElement` which can be appended to the {@link Facet}.
	     * @returns {HTMLElement}
	     */
	    FacetSearch.prototype.build = function () {
	        if (this.isMobileDevice()) {
	            return this.buildSearchMobile();
	        }
	        else {
	            return this.buildBaseSearch();
	        }
	    };
	    /**
	     * Position the search results at the footer of the facet.
	     */
	    FacetSearch.prototype.positionSearchResults = function (nextTo) {
	        if (nextTo === void 0) { nextTo = this.search; }
	        if (this.searchResults != null) {
	            if (!this.isMobileDevice()) {
	                this.searchResults.style.display = 'block';
	                this.searchResults.style.width = this.facet.element.clientWidth - 40 + 'px';
	            }
	            if (Dom_1.$$(this.searchResults).css('display') == 'none') {
	                this.searchResults.style.display = '';
	            }
	            var searchBar = Dom_1.$$(this.search);
	            if (searchBar.css('display') == 'none' || this.searchBarIsAnimating) {
	                if (Dom_1.$$(this.searchResults).css('display') == 'none') {
	                    this.searchResults.style.display = '';
	                }
	                var self_1 = this;
	                EventsUtils_1.EventsUtils.addPrefixedEvent(this.search, 'AnimationEnd', function (evt) {
	                    PopupUtils_1.PopupUtils.positionPopup(self_1.searchResults, nextTo, self_1.root, { horizontal: PopupUtils_1.HorizontalAlignment.CENTER, vertical: PopupUtils_1.VerticalAlignment.BOTTOM });
	                    EventsUtils_1.EventsUtils.removePrefixedEvent(self_1.search, 'AnimationEnd', this);
	                });
	            }
	            else {
	                PopupUtils_1.PopupUtils.positionPopup(this.searchResults, nextTo, this.root, { horizontal: PopupUtils_1.HorizontalAlignment.CENTER, vertical: PopupUtils_1.VerticalAlignment.BOTTOM });
	            }
	        }
	    };
	    /**
	     * Dismiss the search results
	     */
	    FacetSearch.prototype.completelyDismissSearch = function () {
	        this.cancelAnyPendingSearchOperation();
	        this.facet.unfadeInactiveValuesInMainList();
	        Dom_1.$$(this.searchResults).empty();
	        this.moreValuesToFetch = true;
	        Dom_1.$$(this.search).removeClass('coveo-facet-search-no-results');
	        Dom_1.$$(this.facet.element).removeClass('coveo-facet-searching');
	        this.hideSearchResultsElement();
	        this.input.value = '';
	        Dom_1.$$(this.clear).hide();
	        this.currentlyDisplayedResults = undefined;
	    };
	    /**
	     * Trigger a new facet search, and display the results.
	     * @param params
	     */
	    FacetSearch.prototype.triggerNewFacetSearch = function (params) {
	        var _this = this;
	        this.cancelAnyPendingSearchOperation();
	        this.showFacetSearchWaitingAnimation();
	        this.facet.logger.info('Triggering new facet search');
	        this.facetSearchPromise = this.facet.facetQueryController.search(params);
	        if (this.facetSearchPromise) {
	            this.facetSearchPromise.then(function (fieldValues) {
	                _this.facet.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetSearch, {
	                    facetId: _this.facet.options.id,
	                    facetTitle: _this.facet.options.title
	                }, _this.facet.root);
	                _this.facet.logger.debug('Received field values', fieldValues);
	                _this.processNewFacetSearchResults(fieldValues, params);
	                _this.hideFacetSearchWaitingAnimation();
	                _this.facetSearchPromise = undefined;
	            }).catch(function (error) {
	                // The request might be normally cancelled if another search is triggered.
	                // In this case we do not hide the animation to prevent flicking.
	                if (Utils_1.Utils.exists(error)) {
	                    _this.facet.logger.error('Error while retrieving facet values', error);
	                    _this.hideFacetSearchWaitingAnimation();
	                }
	                _this.facetSearchPromise = undefined;
	                return null;
	            });
	        }
	    };
	    /**
	     * Trigger the event associated with the focus of the search input.
	     */
	    FacetSearch.prototype.focus = function () {
	        this.input.focus();
	        this.handleFacetSearchFocus();
	    };
	    FacetSearch.prototype.shouldPositionSearchResults = function () {
	        return !this.isMobileDevice() && !ResponsiveComponentsUtils_1.ResponsiveComponentsUtils.isSmallFacetActivated(Dom_1.$$(this.root))
	            && Dom_1.$$(this.facet.element).hasClass('coveo-facet-searching');
	    };
	    FacetSearch.prototype.buildBaseSearch = function () {
	        var _this = this;
	        this.search = document.createElement('div');
	        Dom_1.$$(this.search).addClass('coveo-facet-search');
	        this.magnifier = document.createElement('div');
	        Dom_1.$$(this.magnifier).addClass('coveo-facet-search-magnifier');
	        this.search.appendChild(this.magnifier);
	        this.wait = document.createElement('div');
	        Dom_1.$$(this.wait).addClass('coveo-facet-search-wait-animation');
	        this.search.appendChild(this.wait);
	        this.hideFacetSearchWaitingAnimation();
	        this.clear = document.createElement('div');
	        Dom_1.$$(this.clear).addClass('coveo-facet-search-clear');
	        this.clear.setAttribute('title', Strings_1.l('Clear', Strings_1.l('Search')));
	        this.clear.style.display = 'none';
	        this.search.appendChild(this.clear);
	        this.clearIcon = document.createElement('span');
	        Dom_1.$$(this.clearIcon).addClass('coveo-icon');
	        this.clear.appendChild(this.clearIcon);
	        this.middle = document.createElement('div');
	        Dom_1.$$(this.middle).addClass('coveo-facet-search-middle');
	        this.search.appendChild(this.middle);
	        this.input = document.createElement('input');
	        this.input.setAttribute('type', 'text');
	        this.input.setAttribute('autocapitalize', 'off');
	        this.input.setAttribute('autocorrect', 'off');
	        this.input.setAttribute('placeholder', this.facet.searchInterface.isNewDesign() ? '' : Strings_1.l('SearchIn', this.facet.options.title));
	        Dom_1.$$(this.input).addClass('coveo-facet-search-input');
	        Component_1.Component.pointElementsToDummyForm(this.input);
	        this.middle.appendChild(this.input);
	        Dom_1.$$(this.input).on('keyup', function (e) { return _this.handleFacetSearchKeyUp(e); });
	        Dom_1.$$(this.clear).on('click', function (e) { return _this.handleFacetSearchClear(); });
	        Dom_1.$$(this.input).on('focus', function (e) { return _this.handleFacetSearchFocus(); });
	        this.detectSearchBarAnimation();
	        this.root.appendChild(this.searchResults);
	        this.searchResults.style.display = 'none';
	        return this.search;
	    };
	    FacetSearch.prototype.buildSearchMobile = function () {
	        var _this = this;
	        var button = document.createElement('div');
	        Dom_1.$$(button).addClass('coveo-facet-search-button-mobile');
	        Dom_1.$$(button).text(Strings_1.l('Search'));
	        this.search = this.buildBaseSearch();
	        Dom_1.$$(button).on('click', function () {
	            var toOpen = document.createElement('div');
	            toOpen.appendChild(_this.search);
	            ExternalModulesShim_1.ModalBox.open(toOpen, {
	                title: DomUtils_1.DomUtils.getPopUpCloseButton(Strings_1.l('Close'), Strings_1.l('SearchIn', _this.facet.options.title)),
	                validation: function () {
	                    _this.completelyDismissSearch();
	                    return true;
	                },
	                className: 'coveo-mobile-facet-search',
	                titleClose: true
	            });
	            _this.input.value = '';
	            _this.input.focus();
	        });
	        return button;
	    };
	    FacetSearch.prototype.handleFacetSearchKeyUp = function (event) {
	        Assert_1.Assert.exists(event);
	        var isEmpty = this.input.value.trim() == '';
	        this.showOrHideClearElement(isEmpty);
	        if (!this.isMobileDevice()) {
	            this.handleKeyboardNavigation(event, isEmpty);
	        }
	        else {
	            this.startNewSearchTimeout(this.buildParamsForNormalSearch());
	        }
	    };
	    FacetSearch.prototype.handleNuke = function () {
	        window.removeEventListener('resize', this.onResize);
	        document.removeEventListener('click', this.onDocumentClick);
	    };
	    FacetSearch.prototype.handleFacetSearchFocus = function () {
	        if (!this.isMobileDevice()) {
	            if (this.facet.searchInterface.isNewDesign()) {
	                // Trigger a query only if the results are not already rendered.
	                // Protect against the case where user can "focus" out of the search box by clicking not directly on a search results
	                // Then re-focusing the search box
	                if (this.currentlyDisplayedResults == null) {
	                    this.startNewSearchTimeout(this.buildParamsForExcludingCurrentlyDisplayedValues());
	                }
	            }
	            else {
	                this.startNewSearchTimeout(this.buildParamsForNormalSearch());
	            }
	        }
	    };
	    FacetSearch.prototype.handleClickElsewhere = function (event) {
	        if (this.currentlyDisplayedResults && !this.isMobileDevice() && this.search != event.target && this.searchResults != event.target && this.input != event.target) {
	            this.completelyDismissSearch();
	        }
	    };
	    FacetSearch.prototype.handleFacetSearchClear = function () {
	        this.input.value = '';
	        Dom_1.$$(this.clear).hide();
	        this.completelyDismissSearch();
	    };
	    FacetSearch.prototype.showOrHideClearElement = function (isEmpty) {
	        if (!isEmpty) {
	            Dom_1.$$(this.clear).show();
	        }
	        else {
	            Dom_1.$$(this.clear).hide();
	            Dom_1.$$(this.search).removeClass('coveo-facet-search-no-results');
	        }
	    };
	    FacetSearch.prototype.handleKeyboardNavigation = function (event, isEmpty) {
	        switch (event.which) {
	            case KeyboardUtils_1.KEYBOARD.ENTER:
	                this.keyboardNavigationEnterPressed(event, isEmpty);
	                break;
	            case KeyboardUtils_1.KEYBOARD.DELETE:
	                this.keyboardNavigationDeletePressed(event);
	                break;
	            case KeyboardUtils_1.KEYBOARD.ESCAPE:
	                this.completelyDismissSearch();
	                break;
	            case KeyboardUtils_1.KEYBOARD.DOWN_ARROW:
	                this.moveCurrentResultDown();
	                break;
	            case KeyboardUtils_1.KEYBOARD.UP_ARROW:
	                this.moveCurrentResultUp();
	                break;
	            default:
	                this.moreValuesToFetch = true;
	                this.highlightCurrentQueryWithinSearchResults();
	                if (!isEmpty) {
	                    this.lastSearchWasEmpty = false;
	                    this.startNewSearchTimeout(this.buildParamsForNormalSearch());
	                }
	                else if (!this.lastSearchWasEmpty) {
	                    // This normally happen if a user delete the search box content to go back to "empty" state.
	                    this.currentlyDisplayedResults = undefined;
	                    Dom_1.$$(this.searchResults).empty();
	                    this.lastSearchWasEmpty = true;
	                    this.startNewSearchTimeout(this.buildParamsForFetchingMore());
	                }
	                break;
	        }
	    };
	    FacetSearch.prototype.keyboardNavigationEnterPressed = function (event, isEmpty) {
	        if (event.shiftKey) {
	            this.triggerNewFacetSearch(this.buildParamsForNormalSearch());
	        }
	        else {
	            if (this.searchResults.style.display != 'none') {
	                this.performSelectActionOnCurrentSearchResult();
	                this.completelyDismissSearch();
	            }
	            else if (Dom_1.$$(this.search).is('.coveo-facet-search-no-results') && !isEmpty) {
	                this.selectAllValuesMatchingSearch();
	            }
	        }
	    };
	    FacetSearch.prototype.keyboardNavigationDeletePressed = function (event) {
	        if (event.shiftKey) {
	            this.performExcludeActionOnCurrentSearchResult();
	            this.completelyDismissSearch();
	            this.input.value = '';
	        }
	    };
	    FacetSearch.prototype.startNewSearchTimeout = function (params) {
	        var _this = this;
	        this.cancelAnyPendingSearchOperation();
	        this.facetSearchTimeout = setTimeout(function () {
	            var valueInInput = _this.getValueInInputForFacetSearch();
	            if (valueInInput == '') {
	                if (params.searchEvenIfEmpty) {
	                    _this.triggerNewFacetSearch(params);
	                }
	                else {
	                    _this.completelyDismissSearch();
	                }
	            }
	            else {
	                _this.triggerNewFacetSearch(params);
	            }
	        }, this.facet.options.facetSearchDelay);
	    };
	    FacetSearch.prototype.cancelAnyPendingSearchOperation = function () {
	        if (Utils_1.Utils.exists(this.facetSearchTimeout)) {
	            clearTimeout(this.facetSearchTimeout);
	            this.facetSearchTimeout = undefined;
	        }
	        if (Utils_1.Utils.exists(this.facetSearchPromise)) {
	            Promise.reject(this.facetSearchPromise).catch(function () {
	            });
	            this.facetSearchPromise = undefined;
	        }
	        this.hideFacetSearchWaitingAnimation();
	    };
	    FacetSearch.prototype.processNewFacetSearchResults = function (fieldValues, facetSearchParameters) {
	        Assert_1.Assert.exists(fieldValues);
	        fieldValues = new FacetValuesOrder_1.FacetValuesOrder(this.facet, this.facet.facetSort).reorderValues(fieldValues);
	        if (fieldValues.length > 0) {
	            Dom_1.$$(this.search).removeClass('coveo-facet-search-no-results');
	            this.facet.fadeInactiveValuesInMainList(this.facet.options.facetSearchDelay);
	            this.rebuildSearchResults(fieldValues, facetSearchParameters);
	            if (!facetSearchParameters.fetchMore) {
	                this.showSearchResultsElement();
	            }
	            this.highlightCurrentQueryWithinSearchResults();
	            FacetUtils_1.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this.facet, true);
	            this.makeFirstSearchResultTheCurrentOne();
	        }
	        else {
	            if (facetSearchParameters.fetchMore) {
	                this.moreValuesToFetch = false;
	            }
	            else {
	                this.hideSearchResultsElement();
	                Dom_1.$$(this.search).addClass('coveo-facet-search-no-results');
	            }
	        }
	    };
	    FacetSearch.prototype.rebuildSearchResults = function (fieldValues, facetSearchParameters) {
	        var _this = this;
	        Assert_1.Assert.exists(fieldValues);
	        if (!facetSearchParameters.fetchMore) {
	            Dom_1.$$(this.searchResults).empty();
	        }
	        var selectAll = document.createElement('li');
	        if (Utils_1.Utils.isNonEmptyString(facetSearchParameters.valueToSearch)) {
	            Dom_1.$$(selectAll).addClass(['coveo-facet-selectable', 'coveo-facet-search-selectable', 'coveo-facet-search-select-all']);
	            Dom_1.$$(selectAll).text(Strings_1.l('SelectAll'));
	            Dom_1.$$(selectAll).on('click', function () { return _this.selectAllValuesMatchingSearch(); });
	            if (!this.isMobileDevice()) {
	                this.searchResults.appendChild(selectAll);
	            }
	        }
	        var facetValues = _.map(fieldValues, function (fieldValue) {
	            return FacetValues_1.FacetValue.create(fieldValue);
	        });
	        _.each(new this.facetSearchValuesListKlass(this.facet, FacetValueElement_1.FacetValueElement).build(facetValues), function (listElement) {
	            _this.searchResults.appendChild(listElement);
	        });
	        if (this.currentlyDisplayedResults) {
	            this.currentlyDisplayedResults = this.currentlyDisplayedResults.concat(_.pluck(facetValues, 'value'));
	        }
	        else {
	            this.currentlyDisplayedResults = _.pluck(facetValues, 'value');
	        }
	        if (this.isMobileDevice()) {
	            var selectAllMobile = document.createElement('span');
	            Dom_1.$$(selectAllMobile).addClass('coveo-mobile-facet-search-select-all');
	            selectAll.appendChild(selectAllMobile);
	            this.searchResults.appendChild(selectAll);
	        }
	        _.each(Dom_1.$$(this.searchResults).findAll('.coveo-facet-selectable'), function (elem) {
	            Dom_1.$$(elem).addClass('coveo-facet-search-selectable');
	            _this.setupFacetSearchResultsEvents(elem);
	        });
	        if (this.facet.searchInterface.isNewDesign()) {
	            Dom_1.$$(this.searchResults).on('scroll', function () { return _this.handleFacetSearchResultsScroll(); });
	        }
	    };
	    FacetSearch.prototype.setupFacetSearchResultsEvents = function (elem) {
	        var _this = this;
	        Dom_1.$$(elem).on('mousemove', function () {
	            _this.makeCurrentResult(elem);
	        });
	        // Prevent closing the search results on the end of a touch drag
	        var touchDragging = false;
	        var mouseDragging = false;
	        Dom_1.$$(elem).on('mousedown', function () { return mouseDragging = false; });
	        Dom_1.$$(elem).on('mousemove', function () { return mouseDragging = true; });
	        Dom_1.$$(elem).on('touchmove', function () { return touchDragging = true; });
	        Dom_1.$$(elem).on('mouseup touchend', function () {
	            if (!touchDragging && !mouseDragging) {
	                setTimeout(function () {
	                    _this.completelyDismissSearch();
	                }, 0); // setTimeout is to give time to trigger the click event before hiding the search menu.
	            }
	            touchDragging = false;
	            mouseDragging = false;
	        });
	    };
	    FacetSearch.prototype.handleFacetSearchResultsScroll = function () {
	        if (this.facetSearchPromise || this.getValueInInputForFacetSearch() != '' || !this.moreValuesToFetch) {
	            return;
	        }
	        var elementHeight = this.searchResults.clientHeight;
	        var scrollHeight = this.searchResults.scrollHeight;
	        var bottomPosition = this.searchResults.scrollTop + elementHeight;
	        if ((scrollHeight - bottomPosition) < elementHeight / 2) {
	            this.triggerNewFacetSearch(this.buildParamsForFetchingMore());
	        }
	    };
	    FacetSearch.prototype.buildParamsForNormalSearch = function () {
	        var params = new FacetSearchParameters_1.FacetSearchParameters(this.facet);
	        params.setValueToSearch(this.getValueInInputForFacetSearch());
	        params.fetchMore = false;
	        return params;
	    };
	    FacetSearch.prototype.buildParamsForFetchingMore = function () {
	        var params = this.buildParamsForExcludingCurrentlyDisplayedValues();
	        params.fetchMore = true;
	        return params;
	    };
	    FacetSearch.prototype.buildParamsForExcludingCurrentlyDisplayedValues = function () {
	        var params = new FacetSearchParameters_1.FacetSearchParameters(this.facet);
	        params.excludeCurrentlyDisplayedValuesInSearch(this.searchResults);
	        params.setValueToSearch(this.getValueInInputForFacetSearch());
	        return params;
	    };
	    FacetSearch.prototype.showSearchResultsElement = function () {
	        this.positionSearchResults();
	    };
	    FacetSearch.prototype.hideSearchResultsElement = function () {
	        this.searchResults.style.display = 'none';
	    };
	    FacetSearch.prototype.highlightCurrentQueryWithinSearchResults = function () {
	        var _this = this;
	        var captions = Dom_1.$$(this.searchResults).findAll('.coveo-facet-value-caption');
	        _.each(captions, function (captionElement) {
	            var search = _this.getValueInInputForFacetSearch();
	            var regex = new RegExp('(' + StringUtils_1.StringUtils.wildcardsToRegex(search, _this.facet.options.facetSearchIgnoreAccents) + ')', 'ig');
	            var text = Dom_1.$$(captionElement).text();
	            var highlighted = text.replace(regex, '<span class="coveo-highlight">$1</span>');
	            captionElement.innerHTML = highlighted;
	        });
	    };
	    FacetSearch.prototype.makeFirstSearchResultTheCurrentOne = function () {
	        this.makeCurrentResult(this.getSelectables()[0]);
	    };
	    FacetSearch.prototype.makeCurrentResult = function (result) {
	        _.each(this.getSelectables(), function (selectable) {
	            Dom_1.$$(selectable).removeClass('coveo-current');
	        });
	        Dom_1.$$(result).addClass('coveo-current');
	    };
	    FacetSearch.prototype.moveCurrentResultDown = function () {
	        var current = Dom_1.$$(this.searchResults).find('.coveo-current');
	        _.each(this.getSelectables(), function (selectable) {
	            Dom_1.$$(selectable).removeClass('coveo-current');
	        });
	        var allSelectables = this.getSelectables();
	        var idx = _.indexOf(allSelectables, current);
	        var target;
	        if (idx < allSelectables.length - 1) {
	            target = Dom_1.$$(allSelectables[idx + 1]);
	        }
	        else {
	            target = Dom_1.$$(allSelectables[0]);
	        }
	        this.highlightAndShowCurrentResultWithKeyboard(target);
	    };
	    FacetSearch.prototype.moveCurrentResultUp = function () {
	        var current = Dom_1.$$(this.searchResults).find('.coveo-current');
	        _.each(Dom_1.$$(this.searchResults).findAll('.coveo-facet-selectable'), function (s) {
	            Dom_1.$$(s).removeClass('coveo-current');
	        });
	        var allSelectables = this.getSelectables();
	        var idx = _.indexOf(allSelectables, current);
	        var target;
	        if (idx > 0) {
	            target = Dom_1.$$(allSelectables[idx - 1]);
	        }
	        else {
	            target = Dom_1.$$(allSelectables[allSelectables.length - 1]);
	        }
	        this.highlightAndShowCurrentResultWithKeyboard(target);
	    };
	    FacetSearch.prototype.highlightAndShowCurrentResultWithKeyboard = function (target) {
	        target.addClass('coveo-current');
	        this.searchResults.scrollTop = target.el.offsetTop;
	    };
	    FacetSearch.prototype.getSelectables = function (target) {
	        if (target === void 0) { target = this.searchResults; }
	        return Dom_1.$$(target).findAll('.coveo-facet-selectable');
	    };
	    FacetSearch.prototype.performSelectActionOnCurrentSearchResult = function () {
	        var current = Dom_1.$$(this.searchResults).find('.coveo-current');
	        Assert_1.Assert.check(current != undefined);
	        var checkbox = Dom_1.$$(current).find('input[type="checkbox"]');
	        if (checkbox != undefined) {
	            checkbox.checked = true;
	            Dom_1.$$(checkbox).trigger('change');
	        }
	        else {
	            current.click();
	        }
	    };
	    FacetSearch.prototype.performExcludeActionOnCurrentSearchResult = function () {
	        var current = Dom_1.$$(this.searchResults).find('.coveo-current');
	        Assert_1.Assert.check(current != null);
	        var valueCaption = Dom_1.$$(current).find('.coveo-facet-value-caption');
	        var valueElement = this.facet.facetValuesList.get(Dom_1.$$(valueCaption).text());
	        valueElement.toggleExcludeWithUA();
	    };
	    FacetSearch.prototype.getValueInInputForFacetSearch = function () {
	        return this.input.value.trim();
	    };
	    FacetSearch.prototype.selectAllValuesMatchingSearch = function () {
	        var _this = this;
	        this.facet.showWaitingAnimation();
	        var searchParameters = new FacetSearchParameters_1.FacetSearchParameters(this.facet);
	        searchParameters.nbResults = 1000;
	        searchParameters.setValueToSearch(this.getValueInInputForFacetSearch());
	        this.facet.facetQueryController.search(searchParameters).then(function (fieldValues) {
	            _this.completelyDismissSearch();
	            ExternalModulesShim_1.ModalBox.close(true);
	            var facetValues = _.map(fieldValues, function (fieldValue) {
	                var facetValue = _this.facet.values.get(fieldValue.value);
	                if (!Utils_1.Utils.exists(facetValue)) {
	                    facetValue = FacetValues_1.FacetValue.create(fieldValue);
	                }
	                facetValue.selected = true;
	                facetValue.excluded = false;
	                return facetValue;
	            });
	            _this.facet.processFacetSearchAllResultsSelected(facetValues);
	        });
	        this.completelyDismissSearch();
	    };
	    FacetSearch.prototype.showFacetSearchWaitingAnimation = function () {
	        Dom_1.$$(this.magnifier).hide();
	        Dom_1.$$(this.wait).show();
	        this.showingFacetSearchWaitAnimation = true;
	    };
	    FacetSearch.prototype.hideFacetSearchWaitingAnimation = function () {
	        Dom_1.$$(this.magnifier).show();
	        Dom_1.$$(this.wait).hide();
	        this.showingFacetSearchWaitAnimation = false;
	    };
	    FacetSearch.prototype.detectSearchBarAnimation = function () {
	        var _this = this;
	        EventsUtils_1.EventsUtils.addPrefixedEvent(this.search, 'AnimationStart', function (event) {
	            if (event.animationName == 'grow') {
	                _this.searchBarIsAnimating = true;
	            }
	        });
	        EventsUtils_1.EventsUtils.addPrefixedEvent(this.search, 'AnimationEnd', function (event) {
	            if (event.animationName == 'grow') {
	                _this.searchBarIsAnimating = false;
	            }
	        });
	    };
	    return FacetSearch;
	}());
	exports.FacetSearch = FacetSearch;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var QueryEvents_1 = __webpack_require__(48);
	var Dom_1 = __webpack_require__(59);
	var ValueElement_1 = __webpack_require__(161);
	var FacetValueElement = (function (_super) {
	    __extends(FacetValueElement, _super);
	    function FacetValueElement(facet, facetValue, keepDisplayedValueNextTime) {
	        var _this = _super.call(this, facet, facetValue) || this;
	        _this.facet = facet;
	        _this.facetValue = facetValue;
	        _this.keepDisplayedValueNextTime = keepDisplayedValueNextTime;
	        _this.firstQuery = true;
	        // The analytics code expect a first query to be made to link the user action with a query UID
	        Dom_1.$$(facet.root).one(QueryEvents_1.QueryEvents.querySuccess, function () {
	            _this.firstQuery = false;
	        });
	        return _this;
	    }
	    FacetValueElement.prototype.bindEvent = function () {
	        _super.prototype.bindEvent.call(this, { displayNextTime: this.keepDisplayedValueNextTime, pinFacet: this.facet.options.preservePosition });
	    };
	    return FacetValueElement;
	}(ValueElement_1.ValueElement));
	exports.FacetValueElement = FacetValueElement;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ValueElementRenderer_1 = __webpack_require__(162);
	var Utils_1 = __webpack_require__(13);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Dom_1 = __webpack_require__(59);
	var DeviceUtils_1 = __webpack_require__(16);
	var Defer_1 = __webpack_require__(32);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var KeyboardUtils_1 = __webpack_require__(68);
	var ValueElement = (function () {
	    function ValueElement(facet, facetValue, onSelect, onExclude) {
	        this.facet = facet;
	        this.facetValue = facetValue;
	        this.onSelect = onSelect;
	        this.onExclude = onExclude;
	    }
	    ValueElement.prototype.build = function () {
	        this.renderer = new ValueElementRenderer_1.ValueElementRenderer(this.facet, this.facetValue).build();
	        this.bindEvent({ displayNextTime: true, pinFacet: this.facet.options.preservePosition });
	        return this;
	    };
	    ValueElement.prototype.bindEvent = function (eventBindings) {
	        if (!Utils_1.Utils.isNullOrUndefined(eventBindings.omniboxObject)) {
	            this.isOmnibox = true;
	        }
	        else {
	            this.isOmnibox = false;
	        }
	        this.handleEventForCheckboxChange(eventBindings);
	        if (this.facetValue.excluded) {
	            this.handleEventForExcludedValueElement(eventBindings);
	        }
	        else {
	            this.handleEventForValueElement(eventBindings);
	        }
	    };
	    ValueElement.prototype.select = function () {
	        this.facetValue.selected = true;
	        this.facetValue.excluded = false;
	        this.renderer.setCssClassOnListValueElement();
	    };
	    ValueElement.prototype.unselect = function () {
	        this.facetValue.selected = false;
	        this.facetValue.excluded = false;
	        this.renderer.setCssClassOnListValueElement();
	    };
	    ValueElement.prototype.exclude = function () {
	        this.facetValue.selected = false;
	        this.facetValue.excluded = true;
	        this.renderer.setCssClassOnListValueElement();
	    };
	    ValueElement.prototype.unexclude = function () {
	        this.facetValue.selected = false;
	        this.facetValue.excluded = false;
	        this.renderer.setCssClassOnListValueElement();
	    };
	    ValueElement.prototype.toggleExcludeWithUA = function () {
	        var _this = this;
	        var actionCause;
	        if (this.facetValue.excluded) {
	            actionCause = this.isOmnibox ? AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFacetUnexclude : AnalyticsActionListMeta_1.analyticsActionCauseList.facetUnexclude;
	        }
	        else {
	            actionCause = this.isOmnibox ? AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFacetExclude : AnalyticsActionListMeta_1.analyticsActionCauseList.facetExclude;
	        }
	        this.facet.toggleExcludeValue(this.facetValue);
	        if (this.onExclude) {
	            this.facet.triggerNewQuery(function () { return _this.onExclude(_this, actionCause); });
	        }
	        else {
	            this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(actionCause, _this.getAnalyticsFacetMeta()); });
	        }
	    };
	    ValueElement.prototype.handleSelectValue = function (eventBindings) {
	        var _this = this;
	        this.facet.keepDisplayedValuesNextTime = eventBindings.displayNextTime && !this.facet.options.useAnd;
	        var actionCause;
	        if (this.facetValue.excluded) {
	            actionCause = this.isOmnibox ? AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFacetUnexclude : AnalyticsActionListMeta_1.analyticsActionCauseList.facetUnexclude;
	            this.facet.unexcludeValue(this.facetValue);
	        }
	        else {
	            if (this.facetValue.selected) {
	                actionCause = this.isOmnibox ? AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFacetDeselect : AnalyticsActionListMeta_1.analyticsActionCauseList.facetDeselect;
	            }
	            else {
	                actionCause = this.isOmnibox ? AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFacetSelect : AnalyticsActionListMeta_1.analyticsActionCauseList.facetSelect;
	            }
	            this.facet.toggleSelectValue(this.facetValue);
	        }
	        if (this.onSelect) {
	            this.facet.triggerNewQuery(function () { return _this.onSelect(_this, actionCause); });
	        }
	        else {
	            this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(actionCause, _this.getAnalyticsFacetMeta()); });
	        }
	    };
	    ValueElement.prototype.handleExcludeClick = function (eventBindings) {
	        this.facet.keepDisplayedValuesNextTime = eventBindings.displayNextTime && !this.facet.options.useAnd;
	        this.toggleExcludeWithUA();
	    };
	    ValueElement.prototype.handleEventForExcludedValueElement = function (eventBindings) {
	        var _this = this;
	        var clickEvent = function (event) {
	            if (eventBindings.pinFacet) {
	                _this.facet.pinFacetPosition();
	            }
	            if (eventBindings.omniboxObject) {
	                _this.omniboxCloseEvent(eventBindings.omniboxObject);
	            }
	            _this.handleSelectValue(eventBindings);
	            return false;
	        };
	        Dom_1.$$(this.renderer.label).on('click', function (e) {
	            e.stopPropagation();
	            clickEvent(e);
	        });
	        Dom_1.$$(this.renderer.stylishCheckbox).on('keydown', KeyboardUtils_1.KeyboardUtils.keypressAction([
	            KeyboardUtils_1.KEYBOARD.SPACEBAR,
	            KeyboardUtils_1.KEYBOARD.ENTER
	        ], clickEvent));
	    };
	    ValueElement.prototype.handleEventForValueElement = function (eventBindings) {
	        var _this = this;
	        var excludeAction = function (event) {
	            if (eventBindings.omniboxObject) {
	                _this.omniboxCloseEvent(eventBindings.omniboxObject);
	            }
	            event.stopPropagation();
	            event.preventDefault();
	            _this.handleExcludeClick(eventBindings);
	            if (_this.facet && _this.facet.facetSearch && _this.facet.facetSearch.completelyDismissSearch) {
	                _this.facet.facetSearch.completelyDismissSearch();
	            }
	            return false;
	        };
	        Dom_1.$$(this.renderer.excludeIcon).on('click', excludeAction);
	        Dom_1.$$(this.renderer.excludeIcon).on('keydown', KeyboardUtils_1.KeyboardUtils.keypressAction([
	            KeyboardUtils_1.KEYBOARD.SPACEBAR,
	            KeyboardUtils_1.KEYBOARD.ENTER
	        ], excludeAction));
	        var selectAction = function (event) {
	            if (eventBindings.pinFacet) {
	                _this.facet.pinFacetPosition();
	            }
	            event.preventDefault();
	            Dom_1.$$(_this.renderer.checkbox).trigger('change');
	            return false;
	        };
	        Dom_1.$$(this.renderer.label).on('click', selectAction);
	        Dom_1.$$(this.renderer.stylishCheckbox).on('keydown', KeyboardUtils_1.KeyboardUtils.keypressAction([
	            KeyboardUtils_1.KEYBOARD.SPACEBAR,
	            KeyboardUtils_1.KEYBOARD.ENTER
	        ], selectAction));
	    };
	    ValueElement.prototype.handleEventForCheckboxChange = function (eventBindings) {
	        var _this = this;
	        Dom_1.$$(this.renderer.checkbox).on('change', function () {
	            if (eventBindings.omniboxObject) {
	                _this.omniboxCloseEvent(eventBindings.omniboxObject);
	            }
	            _this.handleSelectValue(eventBindings);
	            if (DeviceUtils_1.DeviceUtils.isMobileDevice() && !_this.facet.searchInterface.isNewDesign() && _this.facet.options.enableFacetSearch) {
	                Defer_1.Defer.defer(function () {
	                    ExternalModulesShim_1.ModalBox.close(true);
	                    _this.facet.facetSearch.completelyDismissSearch();
	                });
	            }
	        });
	    };
	    ValueElement.prototype.omniboxCloseEvent = function (eventArg) {
	        eventArg.closeOmnibox();
	        eventArg.clear();
	    };
	    ValueElement.prototype.getAnalyticsFacetMeta = function () {
	        return {
	            facetId: this.facet.options.id,
	            facetValue: this.facetValue.value,
	            facetTitle: this.facet.options.title
	        };
	    };
	    return ValueElement;
	}());
	exports.ValueElement = ValueElement;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var Component_1 = __webpack_require__(107);
	var _ = __webpack_require__(14);
	var ValueElementRenderer = (function () {
	    function ValueElementRenderer(facet, facetValue) {
	        this.facet = facet;
	        this.facetValue = facetValue;
	    }
	    ValueElementRenderer.prototype.withNo = function (element) {
	        if (_.isArray(element)) {
	            _.each(element, function (e) {
	                if (e) {
	                    Dom_1.$$(e).detach();
	                }
	            });
	        }
	        else {
	            if (element) {
	                Dom_1.$$(element).detach();
	            }
	        }
	        return this;
	    };
	    ValueElementRenderer.prototype.build = function () {
	        var _this = this;
	        this.listItem = Dom_1.$$('li', {
	            className: 'coveo-facet-value coveo-facet-selectable'
	        }).el;
	        this.listItem.setAttribute('data-value', this.facetValue.value);
	        if (!this.facet.searchInterface.isNewDesign()) {
	            this.excludeIcon = this.buildExcludeIcon();
	            this.listItem.appendChild(this.excludeIcon);
	        }
	        this.label = Dom_1.$$('label', {
	            className: 'coveo-facet-value-label'
	        }).el;
	        this.listItem.appendChild(this.label);
	        if (this.facet.searchInterface.isNewDesign()) {
	            this.excludeIcon = this.buildExcludeIcon();
	            this.listItem.appendChild(this.excludeIcon);
	            Dom_1.$$(this.excludeIcon).on('mouseover', function () {
	                Dom_1.$$(_this.listItem).addClass('coveo-facet-value-will-exclude');
	            });
	            Dom_1.$$(this.excludeIcon).on('mouseout', function () {
	                Dom_1.$$(_this.listItem).removeClass('coveo-facet-value-will-exclude');
	            });
	        }
	        if (Utils_1.Utils.exists(this.facetValue.computedField)) {
	            this.computedField = this.buildValueComputedField();
	            if (this.computedField) {
	                this.label.appendChild(this.computedField);
	            }
	            Dom_1.$$(this.label).addClass('coveo-with-computed-field');
	        }
	        var labelDiv = Dom_1.$$('div', {
	            className: 'coveo-facet-value-label-wrapper'
	        }).el;
	        this.label.appendChild(labelDiv);
	        this.checkbox = this.buildValueCheckbox();
	        labelDiv.appendChild(this.checkbox);
	        this.stylishCheckbox = this.buildValueStylishCheckbox();
	        labelDiv.appendChild(this.stylishCheckbox);
	        if (this.facet.options.showIcon && !this.facet.searchInterface.isNewDesign()) {
	            this.icon = this.buildValueIcon();
	            labelDiv.appendChild(this.icon);
	        }
	        if (this.facet.searchInterface.isNewDesign()) {
	            this.valueCount = this.buildValueCount();
	            if (this.valueCount) {
	                labelDiv.appendChild(this.valueCount);
	            }
	            this.valueCaption = this.buildValueCaption();
	            labelDiv.appendChild(this.valueCaption);
	        }
	        else {
	            this.valueCaption = this.buildValueCaption();
	            labelDiv.appendChild(this.valueCaption);
	            this.valueCount = this.buildValueCount();
	            if (this.valueCount) {
	                labelDiv.appendChild(this.valueCount);
	            }
	        }
	        this.setCssClassOnListValueElement();
	        return this;
	    };
	    ValueElementRenderer.prototype.setCssClassOnListValueElement = function () {
	        Dom_1.$$(this.listItem).toggleClass('coveo-selected', this.facetValue.selected);
	        Dom_1.$$(this.listItem).toggleClass('coveo-excluded', this.facetValue.excluded);
	    };
	    ValueElementRenderer.prototype.buildExcludeIcon = function () {
	        var excludeIcon = Dom_1.$$('div', {
	            title: Strings_1.l('Exclude', this.facet.getValueCaption(this.facetValue)),
	            className: 'coveo-facet-value-exclude',
	            tabindex: 0
	        }).el;
	        this.addFocusAndBlurEventListeners(excludeIcon);
	        if (this.facet.searchInterface.isNewDesign()) {
	            excludeIcon.appendChild(Dom_1.$$('span', {
	                className: 'coveo-icon'
	            }).el);
	        }
	        if (Utils_1.Utils.exists(this.facetValue.computedField)) {
	            Dom_1.$$(excludeIcon).addClass('coveo-facet-value-exclude-with-computed-field');
	        }
	        return excludeIcon;
	    };
	    ValueElementRenderer.prototype.buildValueComputedField = function () {
	        var computedField = this.facetValue.getFormattedComputedField(this.facet.options.computedFieldFormat);
	        if (Utils_1.Utils.isNonEmptyString(computedField)) {
	            var elem = Dom_1.$$('span', {
	                className: 'coveo-facet-value-computed-field'
	            }).el;
	            Dom_1.$$(elem).text(computedField);
	            return elem;
	        }
	        else {
	            return undefined;
	        }
	    };
	    ValueElementRenderer.prototype.buildValueCheckbox = function () {
	        var checkbox = Dom_1.$$('input', {
	            type: 'checkbox'
	        }).el;
	        if (this.facetValue.selected) {
	            checkbox.setAttribute('checked', 'checked');
	        }
	        else {
	            checkbox.removeAttribute('checked');
	        }
	        if (this.facetValue.excluded) {
	            checkbox.setAttribute('disabled', 'disabled');
	        }
	        else {
	            checkbox.removeAttribute('disabled');
	        }
	        Component_1.Component.pointElementsToDummyForm(checkbox);
	        return checkbox;
	    };
	    ValueElementRenderer.prototype.buildValueStylishCheckbox = function () {
	        var checkbox = Dom_1.$$('div', {
	            className: 'coveo-facet-value-checkbox',
	            tabindex: 0
	        }, Dom_1.$$('span')).el;
	        this.addFocusAndBlurEventListeners(checkbox);
	        return checkbox;
	    };
	    ValueElementRenderer.prototype.buildValueIcon = function () {
	        var icon = this.getValueIcon();
	        if (Utils_1.Utils.exists(icon)) {
	            return Dom_1.$$('img', {
	                className: 'coveo-facet-value-icon coveo-icon',
	                src: this.getValueIcon()
	            }).el;
	        }
	        else {
	            return this.buildValueIconFromSprite();
	        }
	    };
	    ValueElementRenderer.prototype.getValueIcon = function () {
	        if (Utils_1.Utils.exists(this.facet.options.valueIcon)) {
	            return this.facet.options.valueIcon(this.facetValue);
	        }
	        else {
	            return undefined;
	        }
	    };
	    ValueElementRenderer.prototype.buildValueIconFromSprite = function () {
	        return Dom_1.$$('div', {
	            className: 'coveo-facet-value-icon coveo-icon ' + this.facet.options.field.substr(1) + ' ' + this.facetValue.value
	        }).el;
	    };
	    ValueElementRenderer.prototype.buildValueCaption = function () {
	        var caption = this.facet.getValueCaption(this.facetValue);
	        var valueCaption = Dom_1.$$('span', {
	            className: 'coveo-facet-value-caption',
	            title: caption
	        }).el;
	        Dom_1.$$(valueCaption).text(caption);
	        return valueCaption;
	    };
	    ValueElementRenderer.prototype.buildValueCount = function () {
	        var count = this.facetValue.getFormattedCount();
	        if (Utils_1.Utils.isNonEmptyString(count)) {
	            var countElement = Dom_1.$$('span', {
	                className: 'coveo-facet-value-count'
	            }).el;
	            Dom_1.$$(countElement).text(count);
	            return countElement;
	        }
	        else {
	            return undefined;
	        }
	    };
	    ValueElementRenderer.prototype.addFocusAndBlurEventListeners = function (elem) {
	        var _this = this;
	        Dom_1.$$(elem).on('focus', function () { return Dom_1.$$(_this.listItem).addClass('coveo-focused'); });
	        Dom_1.$$(elem).on('blur', function () { return Dom_1.$$(_this.listItem).removeClass('coveo-focused'); });
	    };
	    return ValueElementRenderer;
	}());
	exports.ValueElementRenderer = ValueElementRenderer;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var StringUtils_1 = __webpack_require__(62);
	var _ = __webpack_require__(14);
	var FacetValuesOrder = (function () {
	    function FacetValuesOrder(facet, facetSort) {
	        this.facet = facet;
	        this.facetSort = facetSort;
	    }
	    FacetValuesOrder.prototype.reorderValues = function (facetValues) {
	        if (this.facetSort && this.facetSort.activeSort) {
	            if (this.facetSort.activeSort.name == 'custom' && this.facet.options.customSort != undefined) {
	                return this.reorderValuesWithCustomOrder(facetValues);
	            }
	            else if (this.facetSort.activeSort.name.indexOf('alpha') != -1) {
	                return this.reorderValuesWithCustomCaption(facetValues);
	            }
	        }
	        return facetValues;
	    };
	    FacetValuesOrder.prototype.reorderValuesWithCustomOrder = function (facetValues) {
	        var customSortsLowercase = _.map(this.facet.options.customSort, function (customSort) { return customSort.toLowerCase(); });
	        var valueIndexPair = _.map(facetValues, function (facetValue, i) {
	            // Get the index of the current value in the custom sort array.
	            // If it's not found, put it's index to it's original value + the length of customSort so that's always after the specified custom sort order.
	            var index = _.findIndex(customSortsLowercase, function (customSort) {
	                return StringUtils_1.StringUtils.equalsCaseInsensitive(customSort, facetValue.value) || (facetValue.lookupValue != null && StringUtils_1.StringUtils.equalsCaseInsensitive(customSort, facetValue.lookupValue));
	            });
	            if (index == -1) {
	                index = i + customSortsLowercase.length;
	            }
	            return { facetValue: facetValue, index: index };
	        });
	        var sorted = _.sortBy(valueIndexPair, 'index');
	        sorted = this.facetSort.customSortDirection == 'ascending' ? sorted : sorted.reverse();
	        return _.pluck(sorted, 'facetValue');
	    };
	    FacetValuesOrder.prototype.reorderValuesWithCustomCaption = function (facetValues) {
	        var _this = this;
	        var sorted = _.sortBy(facetValues, function (facetValue) {
	            return _this.facet.getValueCaption(facetValue).toLowerCase();
	        });
	        if (this.facetSort.activeSort.name.indexOf('descending') != -1) {
	            sorted = sorted.reverse();
	        }
	        return sorted;
	    };
	    return FacetValuesOrder;
	}());
	exports.FacetValuesOrder = FacetValuesOrder;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var FacetSort_1 = __webpack_require__(165);
	var Dom_1 = __webpack_require__(59);
	var LocalStorageUtils_1 = __webpack_require__(69);
	var Utils_1 = __webpack_require__(13);
	var Strings_1 = __webpack_require__(35);
	var QueryStateModel_1 = __webpack_require__(101);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var DeviceUtils_1 = __webpack_require__(16);
	var PopupUtils_1 = __webpack_require__(71);
	var _ = __webpack_require__(14);
	/**
	 * Handle the rendering of the {@link Facet} settings menu (typically the ... in the facet header).
	 */
	var FacetSettings = (function (_super) {
	    __extends(FacetSettings, _super);
	    function FacetSettings(sorts, facet) {
	        var _this = _super.call(this, sorts, facet) || this;
	        _this.sorts = sorts;
	        _this.facet = facet;
	        _this.customSortDirectionChange = false;
	        _this.enabledSortsIgnoreRenderBecauseOfPairs = [];
	        _this.filterDuplicateForRendering();
	        return _this;
	    }
	    /**
	     * Build the menu, hook click events.
	     * @returns {HTMLElement}
	     */
	    FacetSettings.prototype.build = function () {
	        var _this = this;
	        this.settingsButton = Dom_1.$$('div', {
	            className: 'coveo-facet-header-settings',
	            title: Strings_1.l('Settings'),
	        }).el;
	        this.settingsIcon = Dom_1.$$('span', { className: 'coveo-icon' }).el;
	        this.settingsButton.appendChild(this.settingsIcon);
	        this.settingsPopup = Dom_1.$$('div', { className: 'coveo-facet-settings-popup' }).el;
	        if (Utils_1.Utils.isNonEmptyArray(this.enabledSorts)) {
	            this.sortSection = this.buildSortSection();
	            if (this.enabledSortsAllowDirection()) {
	                this.directionSection = this.buildDirectionSection();
	            }
	        }
	        if (this.facet.options.enableSettingsFacetState) {
	            this.saveStateSection = this.buildSaveStateSection();
	            this.clearStateSection = this.buildClearStateSection();
	        }
	        if (this.facet.options.enableCollapse) {
	            this.hideSection = this.buildHideSection();
	            this.showSection = this.buildShowSection();
	        }
	        var appendCommon = function () {
	            _this.appendIfNotUndefined(_this.saveStateSection);
	            _this.appendIfNotUndefined(_this.clearStateSection);
	            _this.appendIfNotUndefined(_this.hideSection);
	            _this.appendIfNotUndefined(_this.showSection);
	        };
	        this.handleMouseEventOnButton(this.sortSection);
	        if (Utils_1.Utils.isNonEmptyArray(this.enabledSorts)) {
	            this.settingsPopup.appendChild(this.sortSection.element);
	            _.each(this.directionSection, function (d) {
	                _this.appendIfNotUndefined(d);
	            });
	            appendCommon();
	        }
	        else {
	            appendCommon();
	        }
	        return this.settingsButton;
	    };
	    /**
	     * Restore the facet state from local storage, and apply it in the query state model.
	     */
	    FacetSettings.prototype.loadSavedState = function () {
	        if (this.facetStateLocalStorage) {
	            // set the state from the settings only if there is nothing
	            // in the query state model for the current facet
	            var state = this.facetStateLocalStorage.load();
	            var currentStateIncluded = this.facet.queryStateModel.get(this.includedStateAttribute);
	            var currentStateExcluded = this.facet.queryStateModel.get(this.excludedStateAttribute);
	            var currentStateOperator = this.facet.queryStateModel.get(this.operatorStateAttribute);
	            if (!Utils_1.Utils.isNullOrUndefined(state)
	                && Utils_1.Utils.isEmptyArray(currentStateIncluded)
	                && Utils_1.Utils.isEmptyArray(currentStateExcluded)
	                && !Utils_1.Utils.isNonEmptyString(currentStateOperator)) {
	                var toSet = {};
	                toSet[this.includedStateAttribute] = state.included;
	                toSet[this.excludedStateAttribute] = state.excluded;
	                toSet[this.operatorStateAttribute] = state.operator;
	                this.facet.queryStateModel.setMultiple(toSet);
	                this.loadedFromSettings = toSet;
	            }
	        }
	        else {
	            this.facet.logger.info('Facet state local storage not enabled : See Facet.options.enableSettingsFacetState');
	        }
	    };
	    /**
	     * Take the current state of the facet and save it in the local storage.
	     */
	    FacetSettings.prototype.saveState = function () {
	        if (this.facetStateLocalStorage) {
	            this.facetStateLocalStorage.save({
	                included: this.facet.queryStateModel.get(this.includedStateAttribute),
	                excluded: this.facet.queryStateModel.get(this.excludedStateAttribute),
	                operator: this.facet.queryStateModel.get(this.operatorStateAttribute),
	            });
	        }
	        else {
	            this.facet.logger.info('Facet state local storage not enabled : See Facet.options.enableSettingsFacetState');
	        }
	    };
	    /**
	     * Close the settings menu
	     */
	    FacetSettings.prototype.close = function () {
	        Dom_1.$$(this.settingsPopup).detach();
	    };
	    /**
	     * Open the settings menu
	     */
	    FacetSettings.prototype.open = function () {
	        var _this = this;
	        PopupUtils_1.PopupUtils.positionPopup(this.settingsPopup, this.settingsButton, this.facet.root, this.getPopupAlignment(), this.facet.root);
	        if (this.hideSection && this.showSection) {
	            Dom_1.$$(this.hideSection).toggle(!Dom_1.$$(this.facet.element).hasClass('coveo-facet-collapsed'));
	            Dom_1.$$(this.showSection).toggle(Dom_1.$$(this.facet.element).hasClass('coveo-facet-collapsed'));
	        }
	        if (this.facet.options.enableSettingsFacetState) {
	            Dom_1.$$(this.clearStateSection).toggle(!Utils_1.Utils.isNullOrUndefined(this.facetStateLocalStorage.load()));
	        }
	        _.each(this.enabledSorts, function (criteria, i) {
	            if (!Utils_1.Utils.isNullOrUndefined(_this.sortSection.sortItems[i])) {
	                if (_this.activeSort.name == criteria.name.toLowerCase() || _this.activeSort.relatedSort == criteria.name.toLowerCase()) {
	                    _this.selectItem(_this.sortSection.sortItems[i]);
	                }
	                else {
	                    _this.unselectItem(_this.sortSection.sortItems[i]);
	                }
	            }
	        });
	    };
	    FacetSettings.prototype.buildSortSection = function () {
	        var sortSection = this.buildSection('coveo-facet-settings-section-sort');
	        var sortSectionIcon = this.buildIcon();
	        var sortSectionItems = this.buildItems();
	        if (this.facet.searchInterface.isNewDesign()) {
	            var sortTitle = document.createElement('div');
	            Dom_1.$$(sortTitle).addClass('coveo-facet-settings-section-sort-title');
	            Dom_1.$$(sortTitle).text(Strings_1.l('SortBy') + ' :');
	            sortSectionItems.appendChild(sortTitle);
	        }
	        var sortItems = this.buildSortSectionItems();
	        _.each(sortItems, function (s) {
	            sortSectionItems.appendChild(s);
	        });
	        sortSection.appendChild(sortSectionIcon);
	        sortSection.appendChild(sortSectionItems);
	        return { element: sortSection, sortItems: sortItems };
	    };
	    FacetSettings.prototype.buildSortSectionItems = function () {
	        var _this = this;
	        var elems = _.map(this.enabledSorts, function (enabledSort) {
	            if (_.contains(_this.enabledSortsIgnoreRenderBecauseOfPairs, enabledSort)) {
	                return undefined;
	            }
	            else {
	                var elem = _this.buildItem(Strings_1.l(enabledSort.label), enabledSort.description);
	                Dom_1.$$(elem).on('click', function (e) { return _this.handleClickSortButton(e, enabledSort); });
	                return elem;
	            }
	        });
	        elems = _.compact(elems);
	        return elems;
	    };
	    FacetSettings.prototype.closePopupAndUpdateSort = function () {
	        this.close();
	        if (this.activeSort.name != 'custom') {
	            this.facet.updateSort(this.activeSort.name);
	        }
	        else {
	            this.facet.updateSort('nosort');
	            if (this.customSortDirectionChange) {
	                this.customSortDirectionChange = false;
	                this.facet.queryController.executeQuery();
	            }
	        }
	    };
	    FacetSettings.prototype.enabledSortsAllowDirection = function () {
	        return _.some(this.enabledSorts, function (facetSortDescription) {
	            return facetSortDescription.directionToggle;
	        });
	    };
	    FacetSettings.prototype.buildDirectionSection = function () {
	        var _this = this;
	        if (this.facet.searchInterface.isNewDesign()) {
	            var directionAscendingSection = this.buildAscendingOrDescendingSection('Ascending');
	            var iconAscending = this.buildIcon();
	            var iconDescending = this.buildIcon();
	            var directionItemsAscending = this.buildItems();
	            var ascending = this.buildAscendingOrDescending('Ascending');
	            directionItemsAscending.appendChild(ascending);
	            directionAscendingSection.appendChild(iconAscending);
	            directionAscendingSection.appendChild(directionItemsAscending);
	            Dom_1.$$(directionAscendingSection).on('click', function (e) { return _this.handleDirectionClick(e, 'ascending'); });
	            var directionDescendingSection = this.buildAscendingOrDescendingSection('Descending');
	            var directionItemsDescending = this.buildItems();
	            var descending = this.buildAscendingOrDescending('Descending');
	            directionItemsDescending.appendChild(descending);
	            directionDescendingSection.appendChild(iconDescending);
	            directionDescendingSection.appendChild(directionItemsDescending);
	            Dom_1.$$(directionDescendingSection).on('click', function (e) { return _this.handleDirectionClick(e, 'descending'); });
	            if (!this.activeSort.directionToggle) {
	                Dom_1.$$(directionAscendingSection).addClass('coveo-facet-settings-disabled');
	                Dom_1.$$(directionDescendingSection).addClass('coveo-facet-settings-disabled');
	            }
	            else {
	                this.selectItem(this.getItems(directionAscendingSection)[0]);
	            }
	            return [directionAscendingSection, directionDescendingSection];
	        }
	        else {
	            var directionSection = this.buildSection('coveo-facet-settings-section-direction');
	            var icon = this.buildIcon();
	            var directionItems = this.buildItems();
	            var ascending = this.buildAscendingOrDescending('Ascending');
	            Dom_1.$$(ascending).on('click', function (e) { return _this.handleDirectionClick(e, 'ascending'); });
	            var descending = this.buildAscendingOrDescending('Descending');
	            Dom_1.$$(descending).on('click', function (e) { return _this.handleDirectionClick(e, 'descending'); });
	            directionItems.appendChild(ascending);
	            directionItems.appendChild(descending);
	            directionSection.appendChild(icon);
	            directionSection.appendChild(directionItems);
	            if (!this.activeSort.directionToggle) {
	                Dom_1.$$(directionSection).addClass('coveo-facet-settings-disabled');
	            }
	            else {
	                this.selectItem(this.getCurrentDirectionItem([directionSection]));
	            }
	            return [directionSection];
	        }
	    };
	    FacetSettings.prototype.buildSaveStateSection = function () {
	        var _this = this;
	        var saveStateSection = this.buildSection('coveo-facet-settings-section-save-state');
	        var icon = this.buildIcon();
	        var saveStateItems = this.buildItems();
	        this.facetStateLocalStorage = new LocalStorageUtils_1.LocalStorageUtils('facet-state-' + this.facet.options.id);
	        this.includedStateAttribute = QueryStateModel_1.QueryStateModel.getFacetId(this.facet.options.id);
	        this.excludedStateAttribute = QueryStateModel_1.QueryStateModel.getFacetId(this.facet.options.id, false);
	        this.operatorStateAttribute = QueryStateModel_1.QueryStateModel.getFacetOperator(this.facet.options.id);
	        var saveStateItem = document.createElement('div');
	        Dom_1.$$(saveStateItem).addClass('coveo-facet-settings-item');
	        saveStateItem.setAttribute('title', _.escape(Strings_1.l('SaveFacetState')));
	        Dom_1.$$(saveStateItem).text(_.escape(Strings_1.l('SaveFacetState')));
	        saveStateItems.appendChild(saveStateItem);
	        saveStateSection.appendChild(icon);
	        saveStateSection.appendChild(saveStateItems);
	        Dom_1.$$(saveStateSection).on('click', function (e) { return _this.handleSaveStateClick(); });
	        return saveStateSection;
	    };
	    FacetSettings.prototype.buildClearStateSection = function () {
	        var _this = this;
	        var clearStateSection = this.buildSection('coveo-facet-settings-section-clear-state');
	        var icon = this.buildIcon();
	        var clearStateItems = this.buildItems();
	        var clearStateItem = this.buildItem(Strings_1.l('ClearFacetState'));
	        clearStateItems.appendChild(clearStateItem);
	        clearStateSection.appendChild(icon);
	        clearStateSection.appendChild(clearStateItems);
	        Dom_1.$$(clearStateSection).on('click', function (e) { return _this.handleClearStateClick(); });
	        return clearStateSection;
	    };
	    FacetSettings.prototype.buildHideSection = function () {
	        var _this = this;
	        var hideSection = this.buildSection('coveo-facet-settings-section-hide');
	        var icon = this.buildIcon();
	        var hideItems = this.buildItems();
	        var hideItem = this.buildItem(Strings_1.l('Collapse'));
	        hideItems.appendChild(hideItem);
	        hideSection.appendChild(icon);
	        hideSection.appendChild(hideItems);
	        Dom_1.$$(hideSection).on('click', function (e) {
	            _this.facet.facetHeader.collapseFacet();
	            _this.close();
	        });
	        return hideSection;
	    };
	    FacetSettings.prototype.buildShowSection = function () {
	        var _this = this;
	        var showSection = this.buildSection('coveo-facet-settings-section-show');
	        var icon = this.buildIcon();
	        var showItems = this.buildItems();
	        var showItem = this.buildItem(Strings_1.l('Expand'));
	        showItems.appendChild(showItem);
	        showSection.appendChild(icon);
	        showSection.appendChild(showItems);
	        Dom_1.$$(showSection).on('click', function (e) {
	            _this.facet.facetHeader.expandFacet();
	            _this.close();
	        });
	        return showSection;
	    };
	    FacetSettings.prototype.buildIcon = function () {
	        if (this.facet.searchInterface.isNewDesign()) {
	            var icon = document.createElement('div');
	            Dom_1.$$(icon).addClass('coveo-icon-container');
	            var insideIcon = document.createElement('div');
	            Dom_1.$$(insideIcon).addClass('coveo-icon');
	            icon.appendChild(insideIcon);
	            return icon;
	        }
	        else {
	            var icon = document.createElement('div');
	            Dom_1.$$(icon).addClass('coveo-icon');
	            return icon;
	        }
	    };
	    FacetSettings.prototype.buildAscendingOrDescending = function (direction) {
	        var elem = this.buildItem(Strings_1.l(direction));
	        elem.setAttribute('data-direction', direction.toLowerCase());
	        return elem;
	    };
	    FacetSettings.prototype.buildAscendingOrDescendingSection = function (direction) {
	        return this.buildSection('coveo-facet-settings-section-direction-' + direction.toLowerCase());
	    };
	    FacetSettings.prototype.buildItem = function (label, title) {
	        if (title === void 0) { title = label; }
	        return Dom_1.$$('div', {
	            className: 'coveo-facet-settings-item',
	            title: _.escape(title),
	        }, _.escape(label)).el;
	    };
	    FacetSettings.prototype.buildItems = function () {
	        var elem = document.createElement('div');
	        Dom_1.$$(elem).addClass('coveo-facet-settings-items');
	        return elem;
	    };
	    FacetSettings.prototype.buildSection = function (className) {
	        var section = document.createElement('div');
	        Dom_1.$$(section).addClass(['coveo-facet-settings-section', className]);
	        return section;
	    };
	    FacetSettings.prototype.handleClickSettingsButtons = function (event, sortSection) {
	        if (!Utils_1.Utils.isNullOrUndefined(this.settingsPopup.parentElement)) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    FacetSettings.prototype.handleClickSortButton = function (e, enabledSort) {
	        if (this.activeSort != enabledSort && this.activeSort.relatedSort != enabledSort.name) {
	            this.activeSort = enabledSort;
	            if (enabledSort.directionToggle && _.contains(this.enabledSorts, FacetSettings.availableSorts[this.activeSort.relatedSort])) {
	                this.activateDirectionSection();
	            }
	            else {
	                this.disableDirectionSection();
	            }
	            this.selectItem(e.target);
	            this.closePopupAndUpdateSort();
	        }
	    };
	    FacetSettings.prototype.handleDirectionClick = function (e, direction) {
	        var _this = this;
	        if (!Dom_1.$$(e.target.parentElement.parentElement).hasClass('coveo-facet-settings-disabled') && this.activeSort.name.indexOf(direction) == -1) {
	            this.activeSort = FacetSettings.availableSorts[this.activeSort.relatedSort];
	            _.each(this.directionSection, function (d) {
	                _this.unselectSection(d);
	            });
	            this.selectItem(e.target);
	            if (this.activeSort.name == 'custom' && this.customSortDirection != direction) {
	                this.customSortDirection = direction;
	                this.customSortDirectionChange = true;
	            }
	            this.closePopupAndUpdateSort();
	        }
	    };
	    FacetSettings.prototype.handleSaveStateClick = function () {
	        this.saveState();
	        this.close();
	    };
	    FacetSettings.prototype.handleClearStateClick = function () {
	        var _this = this;
	        this.facetStateLocalStorage.remove();
	        this.facet.reset();
	        this.close();
	        this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetClearAll, {
	            facetId: _this.facet.options.id,
	            facetTitle: _this.facet.options.title
	        }); });
	    };
	    FacetSettings.prototype.handleMouseEventOnButton = function (sortSection) {
	        var _this = this;
	        var closeTimeout;
	        Dom_1.$$(this.settingsButton).on('click', function (e) { return _this.handleClickSettingsButtons(e, sortSection); });
	        var mouseLeave = function () {
	            closeTimeout = setTimeout(function () {
	                _this.close();
	            }, 300);
	        };
	        var mouseEnter = function () {
	            clearTimeout(closeTimeout);
	        };
	        Dom_1.$$(this.settingsIcon).on('mouseleave', mouseLeave);
	        Dom_1.$$(this.settingsPopup).on('mouseleave', mouseLeave);
	        Dom_1.$$(this.settingsIcon).on('mouseenter', mouseEnter);
	        Dom_1.$$(this.settingsPopup).on('mouseenter', mouseEnter);
	    };
	    FacetSettings.prototype.getCurrentDirectionItem = function (directionSection) {
	        var _this = this;
	        if (directionSection === void 0) { directionSection = this.directionSection; }
	        var found;
	        _.each(directionSection, function (direction) {
	            if (!found) {
	                found = _.find(_this.getItems(direction), function (direction) {
	                    return _this.activeSort.name.indexOf(direction.getAttribute('data-direction')) != -1;
	                });
	            }
	        });
	        if (!found) {
	            found = directionSection[0];
	        }
	        return found;
	    };
	    FacetSettings.prototype.activateDirectionSection = function () {
	        var _this = this;
	        _.each(this.directionSection, function (direction) {
	            Dom_1.$$(direction).removeClass('coveo-facet-settings-disabled');
	            _this.unselectSection(direction);
	        });
	        this.selectItem(this.getCurrentDirectionItem());
	    };
	    FacetSettings.prototype.disableDirectionSection = function () {
	        var _this = this;
	        _.each(this.directionSection, function (direction) {
	            Dom_1.$$(direction).addClass('coveo-facet-settings-disabled');
	            _this.unselectSection(direction);
	        });
	    };
	    FacetSettings.prototype.getItems = function (section) {
	        return Dom_1.$$(section).findAll('.coveo-facet-settings-item');
	    };
	    FacetSettings.prototype.unselectSection = function (section) {
	        _.each(this.getItems(section), function (i) {
	            Dom_1.$$(i).removeClass('coveo-selected');
	        });
	    };
	    FacetSettings.prototype.selectItem = function (item) {
	        Dom_1.$$(item).addClass('coveo-selected');
	    };
	    FacetSettings.prototype.unselectItem = function (item) {
	        Dom_1.$$(item).removeClass('coveo-selected');
	    };
	    FacetSettings.prototype.getPopupAlignment = function () {
	        var alignmentHorizontal = DeviceUtils_1.DeviceUtils.isMobileDevice() ? PopupUtils_1.HorizontalAlignment.CENTER : PopupUtils_1.HorizontalAlignment.INNERLEFT;
	        var alignmentVertical = PopupUtils_1.VerticalAlignment.BOTTOM;
	        return {
	            horizontal: alignmentHorizontal,
	            vertical: alignmentVertical
	        };
	    };
	    FacetSettings.prototype.filterDuplicateForRendering = function () {
	        var _this = this;
	        _.each(this.enabledSorts, function (enabledSort, i) {
	            if (enabledSort.relatedSort != null) {
	                for (var j = i + 1; j < _this.enabledSorts.length; j++) {
	                    if (_this.enabledSorts[j].name == enabledSort.relatedSort) {
	                        _this.enabledSortsIgnoreRenderBecauseOfPairs.push(_this.enabledSorts[j]);
	                        break;
	                    }
	                }
	            }
	        });
	    };
	    FacetSettings.prototype.appendIfNotUndefined = function (toAppend) {
	        if (!Utils_1.Utils.isNullOrUndefined(toAppend)) {
	            this.settingsPopup.appendChild(toAppend);
	        }
	    };
	    return FacetSettings;
	}(FacetSort_1.FacetSort));
	exports.FacetSettings = FacetSettings;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Strings_1 = __webpack_require__(35);
	var FacetSettings_1 = __webpack_require__(164);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var FacetSort = (function () {
	    function FacetSort(sorts, facet) {
	        var _this = this;
	        this.facet = facet;
	        this.enabledSorts = [];
	        this.customSortDirection = 'ascending';
	        _.each(sorts, function (sortToActivate) {
	            var newSortToEnable = FacetSettings_1.FacetSettings.availableSorts[sortToActivate.toLowerCase()];
	            if (newSortToEnable != undefined) {
	                _this.enabledSorts.push(newSortToEnable);
	            }
	        });
	        this.removeEnabledSortsBasedOnFacetType();
	        if (Utils_1.Utils.isNonEmptyArray(this.enabledSorts)) {
	            if (this.facet.options.sortCriteria != undefined) {
	                this.activeSort = _.find(this.enabledSorts, function (enabledSort) {
	                    return enabledSort.name == _this.facet.options.sortCriteria;
	                });
	            }
	            if (!this.activeSort) {
	                this.activeSort = this.enabledSorts[0];
	            }
	        }
	    }
	    FacetSort.prototype.removeEnabledSortsBasedOnFacetType = function () {
	        if (Coveo.FacetRange && this.facet instanceof Coveo.FacetRange) {
	            var facetRange = this.facet;
	            if (facetRange.options['slider']) {
	                this.enabledSorts = [];
	            }
	        }
	    };
	    return FacetSort;
	}());
	FacetSort.availableSorts = {
	    score: {
	        label: Strings_1.l('Score'),
	        directionToggle: false,
	        description: Strings_1.l('ScoreDescription'),
	        name: 'score'
	    },
	    occurrences: {
	        label: Strings_1.l('Occurrences'),
	        directionToggle: false,
	        description: Strings_1.l('OccurrencesDescription'),
	        name: 'occurrences'
	    },
	    alphaascending: {
	        label: Strings_1.l('Label'),
	        directionToggle: true,
	        description: Strings_1.l('LabelDescription'),
	        name: 'alphaascending',
	        relatedSort: 'alphadescending'
	    },
	    alphadescending: {
	        label: Strings_1.l('Label'),
	        directionToggle: true,
	        description: Strings_1.l('LabelDescription'),
	        name: 'alphadescending',
	        relatedSort: 'alphaascending'
	    },
	    computedfieldascending: {
	        label: Strings_1.l('Value'),
	        directionToggle: true,
	        description: Strings_1.l('ValueDescription'),
	        name: 'computedfieldascending',
	        relatedSort: 'computedfielddescending'
	    },
	    computedfielddescending: {
	        label: Strings_1.l('Value'),
	        directionToggle: true,
	        description: Strings_1.l('ValueDescription'),
	        name: 'computedfielddescending',
	        relatedSort: 'computedfieldascending'
	    },
	    chisquare: {
	        label: Strings_1.l('RelativeFrequency'),
	        directionToggle: false,
	        description: Strings_1.l('RelativeFrequencyDescription'),
	        name: 'chisquare'
	    },
	    nosort: {
	        label: Strings_1.l('Nosort'),
	        directionToggle: false,
	        description: Strings_1.l('NosortDescription'),
	        name: 'nosort'
	    },
	    custom: {
	        label: Strings_1.l('Custom'),
	        directionToggle: true,
	        description: Strings_1.l('CustomDescription'),
	        name: 'custom',
	        relatedSort: 'custom'
	    }
	};
	exports.FacetSort = FacetSort;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FacetValueElement_1 = __webpack_require__(160);
	var Dom_1 = __webpack_require__(59);
	var FacetValues_1 = __webpack_require__(158);
	var Utils_1 = __webpack_require__(13);
	var FacetUtils_1 = __webpack_require__(93);
	var FacetValuesOrder_1 = __webpack_require__(163);
	var _ = __webpack_require__(14);
	var FacetValuesList = (function () {
	    function FacetValuesList(facet, facetValueElementKlass) {
	        this.facet = facet;
	        this.facetValueElementKlass = facetValueElementKlass;
	        // Dictionary of values. The key is always in lowercase.
	        this.valueList = {};
	        this.currentlyDisplayed = [];
	    }
	    FacetValuesList.prototype.build = function () {
	        this.valueContainer = document.createElement('ul');
	        Dom_1.$$(this.valueContainer).addClass('coveo-facet-values');
	        return this.valueContainer;
	    };
	    FacetValuesList.prototype.getAllCurrentlyDisplayed = function () {
	        return this.currentlyDisplayed;
	    };
	    FacetValuesList.prototype.getAll = function () {
	        return _.toArray(this.valueList);
	    };
	    FacetValuesList.prototype.getAllFacetValue = function () {
	        return _.map(this.getAll(), function (v) {
	            return v.facetValue;
	        });
	    };
	    FacetValuesList.prototype.get = function (value) {
	        var getter;
	        if (value instanceof FacetValues_1.FacetValue) {
	            getter = value.value;
	        }
	        else {
	            value = Utils_1.Utils.anyTypeToString(value);
	            getter = value;
	        }
	        this.ensureFacetValueIsInList(value);
	        return this.valueList[getter.toLowerCase()];
	    };
	    FacetValuesList.prototype.select = function (value) {
	        var valueElement = this.get(value);
	        valueElement.select();
	        return valueElement;
	    };
	    FacetValuesList.prototype.unselect = function (value) {
	        var valueElement = this.get(value);
	        valueElement.unselect();
	        return valueElement;
	    };
	    FacetValuesList.prototype.exclude = function (value) {
	        var valueElement = this.get(value);
	        valueElement.exclude();
	        return valueElement;
	    };
	    FacetValuesList.prototype.unExclude = function (value) {
	        var valueElement = this.get(value);
	        valueElement.unexclude();
	        return valueElement;
	    };
	    FacetValuesList.prototype.toggleSelect = function (value) {
	        var valueElement = this.get(value);
	        if (valueElement.facetValue.selected) {
	            valueElement.unselect();
	        }
	        else {
	            valueElement.select();
	        }
	        return valueElement;
	    };
	    FacetValuesList.prototype.toggleExclude = function (value) {
	        var valueElement = this.get(value);
	        if (valueElement.facetValue.excluded) {
	            valueElement.unexclude();
	        }
	        else {
	            valueElement.exclude();
	        }
	        return valueElement;
	    };
	    FacetValuesList.prototype.rebuild = function (numberOfValues) {
	        var _this = this;
	        Dom_1.$$(this.valueContainer).empty();
	        this.currentlyDisplayed = [];
	        var allValues = this.getValuesToBuildWith();
	        var toCompare = numberOfValues;
	        var docFragment = document.createDocumentFragment();
	        _.each(allValues, function (facetValue, index, list) {
	            if (_this.facetValueShouldBeRemoved(facetValue)) {
	                _this.facet.values.remove(facetValue.value);
	                toCompare += 1;
	            }
	            else if (index < toCompare) {
	                var valueElement = new _this.facetValueElementKlass(_this.facet, facetValue, true);
	                _this.valueList[facetValue.value.toLowerCase()] = valueElement;
	                var valueListElement = valueElement.build().renderer.listItem;
	                docFragment.appendChild(valueListElement);
	                _this.currentlyDisplayed.push(valueElement);
	            }
	        });
	        this.valueContainer.appendChild(docFragment);
	        FacetUtils_1.FacetUtils.addNoStateCssClassToFacetValues(this.facet, this.valueContainer);
	        FacetUtils_1.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this.facet);
	    };
	    FacetValuesList.prototype.getValuesToBuildWith = function () {
	        if (this.facet.facetSort) {
	            return new FacetValuesOrder_1.FacetValuesOrder(this.facet, this.facet.facetSort).reorderValues(this.facet.values.getAll());
	        }
	        else {
	            return this.facet.values.getAll();
	        }
	    };
	    FacetValuesList.prototype.facetValueShouldBeRemoved = function (facetValue) {
	        return facetValue.occurrences == 0 &&
	            (facetValue.delta == 0 || facetValue.delta == undefined) &&
	            !facetValue.selected &&
	            !facetValue.excluded &&
	            !this.facet.keepDisplayedValuesNextTime;
	    };
	    FacetValuesList.prototype.ensureFacetValueIsInList = function (value) {
	        var facetValue;
	        if (value instanceof FacetValues_1.FacetValue) {
	            facetValue = this.facet.values.get(value.value);
	            if (facetValue == null) {
	                this.facet.values.add(value);
	                facetValue = value;
	            }
	        }
	        else {
	            facetValue = this.facet.values.get(value);
	            if (facetValue == null) {
	                facetValue = FacetValues_1.FacetValue.createFromValue(value);
	                this.facet.values.add(facetValue);
	            }
	        }
	        var key = facetValue.value.toLowerCase();
	        var found = this.valueList[key];
	        if (found == undefined) {
	            found = this.valueList[key] = new FacetValueElement_1.FacetValueElement(this.facet, facetValue, true);
	            found.build();
	        }
	        else {
	            found.facetValue = facetValue;
	        }
	    };
	    return FacetValuesList;
	}());
	exports.FacetValuesList = FacetValuesList;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	/// <reference path="FacetSettings.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var FacetUtils_1 = __webpack_require__(93);
	var Strings_1 = __webpack_require__(35);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var FacetHeader = (function () {
	    function FacetHeader(options) {
	        this.options = options;
	        this.element = document.createElement('div');
	        Dom_1.$$(this.element).addClass('coveo-facet-header');
	    }
	    FacetHeader.prototype.build = function () {
	        if (this.options.isNewDesign) {
	            return this.buildNewDesign();
	        }
	        else {
	            return this.buildOldDesign();
	        }
	    };
	    FacetHeader.prototype.switchToAnd = function () {
	        if (this.options.facet) {
	            this.options.facet.options.useAnd = true;
	            this.rebuildOperatorToggle();
	            this.updateOperatorQueryStateModel();
	        }
	    };
	    FacetHeader.prototype.switchToOr = function () {
	        if (this.options.facet) {
	            this.options.facet.options.useAnd = false;
	            this.rebuildOperatorToggle();
	            this.updateOperatorQueryStateModel();
	        }
	    };
	    FacetHeader.prototype.collapseFacet = function () {
	        if (this.collapseElement && this.expandElement) {
	            Dom_1.$$(this.collapseElement).hide();
	            Dom_1.$$(this.expandElement).show();
	        }
	        Dom_1.$$(this.options.facetElement).addClass('coveo-facet-collapsed');
	    };
	    FacetHeader.prototype.expandFacet = function () {
	        if (this.collapseElement && this.expandElement) {
	            Dom_1.$$(this.expandElement).hide();
	            Dom_1.$$(this.collapseElement).show();
	        }
	        Dom_1.$$(this.options.facetElement).removeClass('coveo-facet-collapsed');
	        if (this.options.facet) {
	            FacetUtils_1.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this.options.facet);
	        }
	    };
	    FacetHeader.prototype.updateOperatorQueryStateModel = function () {
	        if (this.options.facet && this.options.facet.options.enableTogglingOperator) {
	            var valueToSet = '';
	            if (this.options.facet.getSelectedValues().length != 0 || this.options.facet.getExcludedValues().length != 0) {
	                valueToSet = this.options.facet.options.useAnd ? 'and' : 'or';
	            }
	            this.options.facet.queryStateModel.set(this.options.facet.operatorAttributeId, valueToSet);
	        }
	    };
	    FacetHeader.prototype.buildNewDesign = function () {
	        var titleSection = Dom_1.$$('div', {
	            className: 'coveo-facet-header-title-section'
	        });
	        if (this.options.icon != undefined) {
	            this.iconElement = this.buildIcon();
	            titleSection.append(this.iconElement);
	        }
	        titleSection.append(this.buildTitle());
	        this.waitElement = this.buildWaitAnimation();
	        titleSection.append(this.waitElement);
	        this.element.appendChild(titleSection.el);
	        var settingsSection = Dom_1.$$('div', {
	            className: 'coveo-facet-header-settings-section'
	        });
	        this.eraserElement = this.buildEraser();
	        settingsSection.append(this.eraserElement);
	        if (this.options.facet) {
	            this.operatorElement = this.buildOperatorToggle();
	            settingsSection.append(this.operatorElement);
	            Dom_1.$$(this.operatorElement).toggle(this.options.facet.options.enableTogglingOperator);
	        }
	        if (this.options.settingsKlass) {
	            this.sort = this.settings = new this.options.settingsKlass(this.options.availableSorts, this.options.facet);
	            settingsSection.append(this.settings.build());
	        }
	        else if (this.options.sortKlass) {
	            this.sort = new this.options.sortKlass(this.options.availableSorts, this.options.facet);
	        }
	        this.element.appendChild(settingsSection.el);
	        return this.element;
	    };
	    FacetHeader.prototype.buildOldDesign = function () {
	        this.element.appendChild(this.buildIcon());
	        this.element.appendChild(this.buildWaitAnimation());
	        if (this.options.settingsKlass) {
	            this.sort = this.settings = new this.options.settingsKlass(this.options.availableSorts, this.options.facet);
	            this.element.appendChild(this.settings.build());
	        }
	        else if (this.options.sortKlass) {
	            this.sort = new this.options.sortKlass(this.options.availableSorts, this.options.facet);
	        }
	        if (this.options.enableCollapseElement) {
	            this.collapseElement = this.buildCollapse();
	            this.element.appendChild(this.collapseElement);
	            this.expandElement = this.buildExpand();
	            this.element.appendChild(this.expandElement);
	        }
	        if (this.options.facet) {
	            this.operatorElement = this.buildOperatorToggle();
	            this.element.appendChild(this.operatorElement);
	            Dom_1.$$(this.operatorElement).toggle(this.options.facet.options.enableTogglingOperator);
	        }
	        this.eraserElement = this.buildEraser();
	        this.element.appendChild(this.eraserElement);
	        this.element.appendChild(this.buildTitle());
	        return this.element;
	    };
	    FacetHeader.prototype.rebuildOperatorToggle = function () {
	        var newElement = this.buildOperatorToggle();
	        if (this.operatorElement) {
	            Dom_1.$$(this.operatorElement).replaceWith(newElement);
	        }
	        this.operatorElement = newElement;
	    };
	    FacetHeader.prototype.buildIcon = function () {
	        var cssClassForIcon;
	        if (this.options.icon) {
	            cssClassForIcon = 'coveo-icon-custom ' + this.options.icon;
	        }
	        else {
	            cssClassForIcon = 'coveo-icon ' + this.options.field.substr(1);
	        }
	        this.iconElement = document.createElement('div');
	        Dom_1.$$(this.iconElement).addClass(cssClassForIcon);
	        return this.iconElement;
	    };
	    FacetHeader.prototype.buildWaitAnimation = function () {
	        this.waitElement = document.createElement('div');
	        Dom_1.$$(this.waitElement).addClass('coveo-facet-header-wait-animation');
	        if (this.options.isNewDesign) {
	            this.waitElement.style.visibility = 'hidden';
	        }
	        else {
	            Dom_1.$$(this.waitElement).hide();
	        }
	        return this.waitElement;
	    };
	    FacetHeader.prototype.buildCollapse = function () {
	        var _this = this;
	        var icon = document.createElement('span');
	        Dom_1.$$(icon).addClass('coveo-icon');
	        var collapse = document.createElement('div');
	        collapse.setAttribute('title', Strings_1.l('Collapse'));
	        Dom_1.$$(collapse).addClass('coveo-facet-header-collapse');
	        collapse.appendChild(icon);
	        Dom_1.$$(collapse).on('click', function () { return _this.collapseFacet(); });
	        return collapse;
	    };
	    FacetHeader.prototype.buildExpand = function () {
	        var _this = this;
	        var icon = document.createElement('span');
	        Dom_1.$$(icon).addClass('coveo-icon');
	        var expand = document.createElement('div');
	        expand.setAttribute('title', Strings_1.l('Expand'));
	        Dom_1.$$(expand).hide();
	        Dom_1.$$(expand).addClass('coveo-facet-header-expand');
	        expand.appendChild(icon);
	        Dom_1.$$(expand).on('click', function () { return _this.expandFacet(); });
	        return expand;
	    };
	    FacetHeader.prototype.buildOperatorToggle = function () {
	        var _this = this;
	        var icon = document.createElement('span');
	        Dom_1.$$(icon).addClass(['coveo-' + (this.options.facet.options.useAnd ? 'and' : 'or'), 'coveo-icon']);
	        var toggle = document.createElement('div');
	        toggle.setAttribute('title', Strings_1.l('SwitchTo', this.options.facet.options.useAnd ? Strings_1.l('Or') : Strings_1.l('And')));
	        Dom_1.$$(toggle).addClass('coveo-facet-header-operator');
	        toggle.appendChild(icon);
	        Dom_1.$$(toggle).on('click', function () { return _this.handleOperatorClick(); });
	        return toggle;
	    };
	    FacetHeader.prototype.handleOperatorClick = function () {
	        var _this = this;
	        if (this.options.facet.options.useAnd) {
	            this.options.facet.switchToOr();
	        }
	        else {
	            this.options.facet.switchToAnd();
	        }
	        if (this.options.facet.getSelectedValues().length != 0) {
	            var operatorNow = this.options.facet.options.useAnd ? 'AND' : 'OR';
	            var operatorBefore = this.options.facet.options.useAnd ? 'OR' : 'AND';
	            this.options.facet.triggerNewQuery(function () { return _this.options.facet.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetToggle, {
	                facetId: _this.options.facet.options.id,
	                facetOperatorBefore: operatorBefore,
	                facetOperatorAfter: operatorNow,
	                facetTitle: _this.options.title
	            }); });
	        }
	    };
	    FacetHeader.prototype.buildTitle = function () {
	        var title = Dom_1.$$('div', {
	            title: this.options.title,
	            className: 'coveo-facet-header-title'
	        });
	        title.text(this.options.title);
	        return title.el;
	    };
	    FacetHeader.prototype.buildEraser = function () {
	        var _this = this;
	        var icon = document.createElement('span');
	        Dom_1.$$(icon).addClass('coveo-icon');
	        var eraser = document.createElement('div');
	        eraser.setAttribute('title', Strings_1.l('Clear', this.options.title));
	        eraser.appendChild(icon);
	        Dom_1.$$(eraser).addClass('coveo-facet-header-eraser');
	        Dom_1.$$(eraser).on('click', function () {
	            var cmp = _this.options.facet || _this.options.facetSlider;
	            cmp.reset();
	            cmp.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.facetClearAll, {
	                facetId: cmp.options.id,
	                facetTitle: cmp.options.title
	            });
	            cmp.queryController.executeQuery();
	        });
	        return eraser;
	    };
	    return FacetHeader;
	}());
	exports.FacetHeader = FacetHeader;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var DeviceUtils_1 = __webpack_require__(16);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	var BreadcrumbValueElement = (function () {
	    function BreadcrumbValueElement(facet, facetValue) {
	        this.facet = facet;
	        this.facetValue = facetValue;
	    }
	    BreadcrumbValueElement.prototype.build = function (tooltip) {
	        var _this = this;
	        if (tooltip === void 0) { tooltip = true; }
	        Assert_1.Assert.exists(this.facetValue);
	        var elem = DeviceUtils_1.DeviceUtils.isMobileDevice() ? Dom_1.$$('div') : Dom_1.$$('span');
	        elem.addClass('coveo-facet-breadcrumb-value');
	        elem.toggleClass('coveo-selected', this.facetValue.selected);
	        elem.toggleClass('coveo-excluded', this.facetValue.excluded);
	        elem.el.setAttribute('title', this.getBreadcrumbTooltip());
	        var caption = Dom_1.$$('span', {
	            className: 'coveo-facet-breadcrumb-caption'
	        });
	        caption.text(this.facet.getValueCaption(this.facetValue));
	        elem.el.appendChild(caption.el);
	        var clear = Dom_1.$$('span', {
	            className: 'coveo-facet-breadcrumb-clear'
	        });
	        elem.el.appendChild(clear.el);
	        var clicked = false;
	        elem.on('click', function () {
	            if (!clicked) {
	                clicked = true;
	                if (_this.facetValue.excluded) {
	                    _this.facet.unexcludeValue(_this.facetValue.value);
	                }
	                else {
	                    _this.facet.deselectValue(_this.facetValue.value);
	                }
	                _this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.breadcrumbFacet, {
	                    facetId: _this.facet.options.id,
	                    facetValue: _this.facetValue.value,
	                    facetTitle: _this.facet.options.title
	                }); });
	            }
	        });
	        return elem;
	    };
	    BreadcrumbValueElement.prototype.getBreadcrumbTooltip = function () {
	        var tooltipParts = [this.facet.getValueCaption(this.facetValue), this.facetValue.getFormattedCount(), this.facetValue.getFormattedComputedField(this.facet.options.computedFieldFormat)];
	        return _.compact(tooltipParts).join(' ');
	    };
	    return BreadcrumbValueElement;
	}());
	exports.BreadcrumbValueElement = BreadcrumbValueElement;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DeviceUtils_1 = __webpack_require__(16);
	var Assert_1 = __webpack_require__(12);
	var Strings_1 = __webpack_require__(35);
	var Dom_1 = __webpack_require__(59);
	var Globalize = __webpack_require__(28);
	var _ = __webpack_require__(14);
	var BreadcrumbValueList = (function () {
	    function BreadcrumbValueList(facet, facetValues, breadcrumbValueElementKlass) {
	        this.facet = facet;
	        this.facetValues = facetValues;
	        this.breadcrumbValueElementKlass = breadcrumbValueElementKlass;
	        this.setExpandedAndCollapsed();
	        this.elem = Dom_1.$$('div', {
	            className: 'coveo-facet-breadcrumb'
	        }).el;
	        var title = Dom_1.$$('span');
	        title.addClass('coveo-facet-breadcrumb-title');
	        title.text(this.facet.options.title + ':');
	        this.elem.appendChild(title.el);
	        this.valueContainer = Dom_1.$$('span', {
	            className: 'coveo-facet-breadcrumb-values'
	        }).el;
	        this.elem.appendChild(this.valueContainer);
	    }
	    BreadcrumbValueList.prototype.build = function () {
	        this.buildExpanded();
	        if (this.collapsed.length != 0) {
	            this.buildCollapsed();
	        }
	        return this.elem;
	    };
	    BreadcrumbValueList.prototype.buildAsString = function () {
	        this.build();
	        if (this.elem) {
	            return this.facet.options.title + ": " + _.map(Dom_1.$$(this.elem).findAll('.coveo-facet-breadcrumb-value'), function (value) {
	                return Dom_1.$$(value).text();
	            }).join(', ');
	        }
	        return '';
	    };
	    BreadcrumbValueList.prototype.buildExpanded = function () {
	        var _this = this;
	        _.each(this.expanded, function (value, index) {
	            if (index != 0 && !DeviceUtils_1.DeviceUtils.isMobileDevice() && !_this.facet.searchInterface.isNewDesign()) {
	                var separator = Dom_1.$$('span', {
	                    className: 'coveo-facet-breadcrumb-separator'
	                });
	                separator.text(', ');
	                _this.valueContainer.appendChild(separator.el);
	            }
	            var elementBreadcrumb = new _this.breadcrumbValueElementKlass(_this.facet, value).build();
	            _this.valueContainer.appendChild(elementBreadcrumb.el);
	        });
	    };
	    BreadcrumbValueList.prototype.buildCollapsed = function () {
	        var _this = this;
	        var numberOfSelected = _.filter(this.collapsed, function (value) { return value.selected; }).length;
	        var numberOfExcluded = _.filter(this.collapsed, function (value) { return value.excluded; }).length;
	        Assert_1.Assert.check(numberOfSelected + numberOfExcluded == this.collapsed.length);
	        var elem = Dom_1.$$('div', {
	            className: 'coveo-facet-breadcrumb-value'
	        });
	        if (!DeviceUtils_1.DeviceUtils.isMobileDevice() && !this.facet.searchInterface.isNewDesign()) {
	            var sep = Dom_1.$$('span', {
	                className: 'coveo-separator'
	            });
	            sep.text(', ');
	            elem.el.appendChild(sep.el);
	        }
	        if (numberOfSelected > 0) {
	            var multi = Dom_1.$$('span', {
	                className: 'coveo-facet-breadcrumb-multi-count'
	            });
	            multi.text(Strings_1.l('NMore', Globalize.format(numberOfSelected, 'n0')));
	            elem.el.appendChild(multi.el);
	            var multiIcon = Dom_1.$$('div', {
	                className: 'coveo-selected coveo-facet-breadcrumb-multi-icon'
	            });
	            elem.el.appendChild(multiIcon.el);
	        }
	        if (numberOfExcluded > 0) {
	            var multiExcluded = Dom_1.$$('span', {
	                className: 'coveo-facet-breadcrumb-multi-count'
	            });
	            multiExcluded.text(Strings_1.l('NMore', Globalize.format(numberOfExcluded, 'n0')));
	            elem.el.appendChild(multiExcluded.el);
	            var multiExcludedIcon = Dom_1.$$('div', {
	                className: 'coveo-excluded coveo-facet-breadcrumb-multi-icon'
	            });
	            elem.el.appendChild(multiExcludedIcon.el);
	        }
	        var valueElements = _.map(this.collapsed, function (facetValue) {
	            return new _this.breadcrumbValueElementKlass(_this.facet, facetValue);
	        });
	        var toolTips = _.map(valueElements, function (valueElement) {
	            return valueElement.getBreadcrumbTooltip();
	        });
	        elem.el.setAttribute('title', toolTips.join('\n'));
	        elem.on('click', function () {
	            var elements = [];
	            _.forEach(valueElements, function (valueElement) {
	                if (!DeviceUtils_1.DeviceUtils.isMobileDevice() && !_this.facet.searchInterface.isNewDesign()) {
	                    var separatorsClicked = Dom_1.$$('span', {
	                        className: 'coveo-facet-breadcrumb-separator'
	                    });
	                    separatorsClicked.text(', ');
	                    elements.push(separatorsClicked.el);
	                }
	                elements.push(valueElement.build(false).el);
	            });
	            _.each(elements, function (el) {
	                Dom_1.$$(el).insertBefore(elem.el);
	            });
	            elem.detach();
	        });
	        this.valueContainer.appendChild(elem.el);
	    };
	    BreadcrumbValueList.prototype.setExpandedAndCollapsed = function () {
	        if (this.facetValues.length > this.facet.options.numberOfValuesInBreadcrumb) {
	            this.collapsed = _.rest(this.facetValues, this.facet.options.numberOfValuesInBreadcrumb - 1);
	            this.expanded = _.first(this.facetValues, this.facet.options.numberOfValuesInBreadcrumb - 1);
	        }
	        else {
	            this.collapsed = [];
	            this.expanded = this.facetValues;
	        }
	    };
	    return BreadcrumbValueList;
	}());
	exports.BreadcrumbValueList = BreadcrumbValueList;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var FacetSearchValuesList = (function () {
	    function FacetSearchValuesList(facet, facetValueElementKlass) {
	        this.facet = facet;
	        this.facetValueElementKlass = facetValueElementKlass;
	    }
	    FacetSearchValuesList.prototype.build = function (facetValues) {
	        var _this = this;
	        var valuesToBuildWith = _.map(facetValues, function (facetValue) {
	            return _.find(_this.facet.values.getAll(), function (valueAlreadyInFacet) {
	                return valueAlreadyInFacet.value == facetValue.value;
	            }) || facetValue;
	        });
	        return _.map(valuesToBuildWith, function (facetValue) {
	            return new _this.facetValueElementKlass(_this.facet, facetValue, _this.facet.keepDisplayedValuesNextTime).build().renderer.listItem;
	        });
	    };
	    return FacetSearchValuesList;
	}());
	exports.FacetSearchValuesList = FacetSearchValuesList;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/// <reference path="Facet.ts" />
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ValueElement_1 = __webpack_require__(161);
	var OmniboxValueElement = (function (_super) {
	    __extends(OmniboxValueElement, _super);
	    function OmniboxValueElement(facet, facetValue, eventArg, onSelect, onExclude) {
	        var _this = _super.call(this, facet, facetValue, onSelect, onExclude) || this;
	        _this.facet = facet;
	        _this.facetValue = facetValue;
	        _this.eventArg = eventArg;
	        return _this;
	    }
	    OmniboxValueElement.prototype.bindEvent = function () {
	        _super.prototype.bindEvent.call(this, { displayNextTime: false, pinFacet: false, omniboxObject: this.eventArg });
	    };
	    return OmniboxValueElement;
	}(ValueElement_1.ValueElement));
	exports.OmniboxValueElement = OmniboxValueElement;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var Utils_1 = __webpack_require__(13);
	var FacetUtils_1 = __webpack_require__(93);
	var _ = __webpack_require__(14);
	var OmniboxValuesList = (function () {
	    function OmniboxValuesList(facet, facetValues, omniboxObject, omniboxValueElementKlass) {
	        this.facet = facet;
	        this.facetValues = facetValues;
	        this.omniboxObject = omniboxObject;
	        this.omniboxValueElementKlass = omniboxValueElementKlass;
	    }
	    OmniboxValuesList.prototype.build = function () {
	        var _this = this;
	        var rows = [];
	        _.each(this.facetValues, function (facetValue) {
	            rows.push(_this.buildOmniboxForOneRow(facetValue, _this.omniboxObject));
	        });
	        return this.buildFinalOmniboxElement(rows);
	    };
	    OmniboxValuesList.prototype.buildOmniboxForOneRow = function (facetValue, omniboxObject) {
	        var _this = this;
	        var selectCallback = function (elem, cause) { return _this.logAnalyticsEvent(elem, cause); };
	        var excludeCallback = function (elem, cause) { return _this.logAnalyticsEvent(elem, cause); };
	        var omniboxValueElement = new this.omniboxValueElementKlass(this.facet, facetValue, omniboxObject, selectCallback, excludeCallback);
	        var omniboxRowContent = omniboxValueElement.build().renderer.listItem;
	        var regex = omniboxObject.completeQueryExpression.regex;
	        var valueToSearch = omniboxObject.completeQueryExpression.word;
	        var caption = Dom_1.$$(omniboxRowContent).find('.coveo-facet-value-caption');
	        caption.innerHTML = this.highlightOmniboxMatch(this.facet.getValueCaption(facetValue), regex, valueToSearch);
	        var omniboxRow = Dom_1.$$('div', {
	            className: 'coveo-omnibox-selectable coveo-facet-value coveo-omnibox-facet-value'
	        }).el;
	        omniboxRow.appendChild(omniboxRowContent);
	        Dom_1.$$(omniboxRow).on('keyboardSelect', function () {
	            var input = Dom_1.$$(omniboxRowContent).find('input[type=checkbox]');
	            Dom_1.$$(input).trigger('change');
	        });
	        omniboxRow['no-text-suggestion'] = true;
	        return omniboxRow;
	    };
	    OmniboxValuesList.prototype.buildFinalOmniboxElement = function (rows) {
	        var header = this.buildOmniboxHeader();
	        if (Utils_1.Utils.isEmptyArray(rows)) {
	            return undefined;
	        }
	        else {
	            var ret = Dom_1.$$('div', {
	                className: 'coveo-omnibox-facet-value'
	            }).el;
	            ret.appendChild(header);
	            _.each(rows, function (r) {
	                ret.appendChild(r);
	            });
	            FacetUtils_1.FacetUtils.addNoStateCssClassToFacetValues(this.facet, ret);
	            return ret;
	        }
	    };
	    OmniboxValuesList.prototype.buildOmniboxHeader = function () {
	        var title = this.facet.options.title;
	        var header = Dom_1.$$('div', {
	            className: 'coveo-omnibox-facet-header'
	        }).el;
	        if (this.facet.searchInterface.isNewDesign()) {
	            Dom_1.$$(header).text(title);
	            return header;
	        }
	        else {
	            var icon = Dom_1.$$('span', {
	                className: 'coveo-icon ' + this.facet.options.field.substr(1)
	            }).el;
	            header.appendChild(icon);
	            Dom_1.$$(header).text(title);
	        }
	        return header;
	    };
	    OmniboxValuesList.prototype.highlightOmniboxMatch = function (orignalStr, regex, valueToSearch) {
	        var firstChar = orignalStr.search(regex);
	        var lastChar = firstChar + valueToSearch.length;
	        return orignalStr.slice(0, firstChar) + '<span class="coveo-highlight">' + orignalStr.slice(firstChar, lastChar) + '</span>' + orignalStr.slice(lastChar);
	    };
	    OmniboxValuesList.prototype.logAnalyticsEvent = function (elem, cause) {
	        var strippedFacetValues = _.pluck(this.facetValues, 'value');
	        elem.facet.usageAnalytics.logSearchEvent(cause, {
	            query: this.omniboxObject.completeQueryExpression.word,
	            facetId: elem.facet.options.id,
	            facetTitle: elem.facet.options.title,
	            facetValue: elem.facetValue.value,
	            suggestions: strippedFacetValues.join(';'),
	            suggestionRanking: _.indexOf(strippedFacetValues, elem.facetValue.value)
	        });
	    };
	    return OmniboxValuesList;
	}());
	exports.OmniboxValuesList = OmniboxValuesList;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var LiveAnalyticsClient_1 = __webpack_require__(128);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Component_1 = __webpack_require__(107);
	var SearchInterface_1 = __webpack_require__(108);
	var RecommendationAnalyticsClient = (function (_super) {
	    __extends(RecommendationAnalyticsClient, _super);
	    function RecommendationAnalyticsClient(endpoint, rootElement, userId, userDisplayName, anonymous, splitTestRunName, splitTestRunVersion, originLevel1, sendToCloud, bindings) {
	        var _this = _super.call(this, endpoint, rootElement, userId, userDisplayName, anonymous, splitTestRunName, splitTestRunVersion, originLevel1, sendToCloud) || this;
	        _this.endpoint = endpoint;
	        _this.rootElement = rootElement;
	        _this.userId = userId;
	        _this.userDisplayName = userDisplayName;
	        _this.anonymous = anonymous;
	        _this.splitTestRunName = splitTestRunName;
	        _this.splitTestRunVersion = splitTestRunVersion;
	        _this.originLevel1 = originLevel1;
	        _this.sendToCloud = sendToCloud;
	        _this.bindings = bindings;
	        _this.recommendation = _this.bindings.searchInterface;
	        return _this;
	    }
	    RecommendationAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
	        if (actionCause == AnalyticsActionListMeta_1.analyticsActionCauseList.interfaceLoad) {
	            actionCause = AnalyticsActionListMeta_1.analyticsActionCauseList.recommendationInterfaceLoad;
	        }
	        _super.prototype.logSearchEvent.call(this, actionCause, meta);
	    };
	    RecommendationAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
	        if (actionCause == AnalyticsActionListMeta_1.analyticsActionCauseList.documentOpen) {
	            actionCause = AnalyticsActionListMeta_1.analyticsActionCauseList.recommendationOpen;
	        }
	        _super.prototype.logClickEvent.call(this, actionCause, meta, result, element);
	        if (this.recommendation.mainQuerySearchUID && this.recommendation.mainQueryPipeline != null) {
	            // We log a second click associated with the main interface query to tell the analytics that the query was a success.
	            var mainInterface = Component_1.Component.get(this.recommendation.options.mainSearchInterface, SearchInterface_1.SearchInterface);
	            result.queryUid = this.recommendation.mainQuerySearchUID;
	            result.pipeline = this.recommendation.mainQueryPipeline;
	            mainInterface.usageAnalytics.logClickEvent(actionCause, meta, result, element);
	        }
	    };
	    RecommendationAnalyticsClient.prototype.getOriginLevel2 = function (element) {
	        return this.recommendation.getId();
	    };
	    return RecommendationAnalyticsClient;
	}(LiveAnalyticsClient_1.LiveAnalyticsClient));
	exports.RecommendationAnalyticsClient = RecommendationAnalyticsClient;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Initialization_1 = __webpack_require__(106);
	var _ = __webpack_require__(14);
	if (!initCoveoJQuery()) {
	    // Adding a check in case jQuery was added after the jsSearch
	    // Since this event listener is registered before the Coveo.init call, JQuery should always be initiated before the Coveo.init call
	    document.addEventListener('DOMContentLoaded', function () {
	        initCoveoJQuery();
	    });
	}
	function initCoveoJQuery() {
	    if (!jQueryIsDefined()) {
	        return false;
	    }
	    exports.jQueryInstance = getJQuery();
	    if (window['Coveo'] == undefined) {
	        window['Coveo'] = {};
	    }
	    if (window['Coveo']['$'] == undefined) {
	        window['Coveo']['$'] = exports.jQueryInstance;
	    }
	    exports.jQueryInstance.fn.coveo = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var returnValue;
	        this.each(function (index, element) {
	            var returnValueForThisElement;
	            if (_.isString(args[0])) {
	                var token = args[0];
	                returnValueForThisElement = Initialization_1.Initialization.dispatchNamedMethodCallOrComponentCreation(token, element, args.slice(1));
	            }
	            else {
	                // Invoking with no method name is a shortcut for the 'get' method (from Component).
	                returnValueForThisElement = Initialization_1.Initialization.dispatchNamedMethodCall('get', element, args);
	            }
	            // Keep only the first return value we encounter
	            returnValue = returnValue || returnValueForThisElement;
	        });
	        return returnValue;
	    };
	    return true;
	}
	exports.initCoveoJQuery = initCoveoJQuery;
	function jQueryIsDefined() {
	    return jQueryDefinedOnWindow() || jQueryDefinedOnCoveoObject();
	}
	exports.jQueryIsDefined = jQueryIsDefined;
	function jQueryDefinedOnCoveoObject() {
	    return window['Coveo'] != undefined && window['Coveo']['$'] != undefined;
	}
	function jQueryDefinedOnWindow() {
	    return window['$'] != undefined && window['$'].fn != undefined && window['$'].fn.jquery != undefined;
	}
	function getJQuery() {
	    var jQueryInstance;
	    if (window['$']) {
	        jQueryInstance = window['$'];
	    }
	    else {
	        jQueryInstance = window['Coveo']['$'];
	    }
	    return jQueryInstance;
	}


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TemplateHelpers_1 = __webpack_require__(176);
	exports.TemplateHelpers = TemplateHelpers_1.TemplateHelpers;
	var TemplateCache_1 = __webpack_require__(110);
	exports.TemplateCache = TemplateCache_1.TemplateCache;
	var HtmlTemplate_1 = __webpack_require__(117);
	exports.HtmlTemplate = HtmlTemplate_1.HtmlTemplate;
	var UnderscoreTemplate_1 = __webpack_require__(114);
	exports.UnderscoreTemplate = UnderscoreTemplate_1.UnderscoreTemplate;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Assert_1 = __webpack_require__(12);
	var UnderscoreTemplate_1 = __webpack_require__(114);
	var Utils_1 = __webpack_require__(13);
	/**
	 * Allow to register and return template helpers (essentially: Utility functions that can be executed in the context of a template to render complex elements).
	 */
	var TemplateHelpers = (function () {
	    function TemplateHelpers() {
	    }
	    TemplateHelpers.registerFieldHelper = function (name, helper) {
	        TemplateHelpers.fieldHelpers.push(name);
	        TemplateHelpers.registerTemplateHelper(name, helper);
	    };
	    /**
	     * Register a new helper in the framework, that will be available inside all templates execution context.
	     * @param name
	     * @param helper
	     */
	    TemplateHelpers.registerTemplateHelper = function (name, helper) {
	        Assert_1.Assert.isNonEmptyString(name);
	        Assert_1.Assert.exists(helper);
	        TemplateHelpers.registerTemplateHelperInUnderscore(name, helper);
	        TemplateHelpers.helpers[name] = helper;
	    };
	    /**
	     * Return a template helper function
	     * @param name
	     * @returns {any}
	     */
	    TemplateHelpers.getHelper = function (name) {
	        return Utils_1.Utils.getCaseInsensitiveProperty(TemplateHelpers.helpers, name);
	    };
	    /**
	     * Get all available helpers
	     * @returns {{}}
	     */
	    TemplateHelpers.getHelpers = function () {
	        return TemplateHelpers.helpers;
	    };
	    TemplateHelpers.registerTemplateHelperInUnderscore = function (name, helper) {
	        Assert_1.Assert.isNonEmptyString(name);
	        Assert_1.Assert.exists(helper);
	        UnderscoreTemplate_1.UnderscoreTemplate.registerTemplateHelper(name, helper);
	    };
	    return TemplateHelpers;
	}());
	TemplateHelpers.helpers = {};
	TemplateHelpers.fieldHelpers = [];
	exports.TemplateHelpers = TemplateHelpers;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TemplateHelpers_1 = __webpack_require__(176);
	var HighlightUtils_1 = __webpack_require__(66);
	var DateUtils_1 = __webpack_require__(58);
	var CurrencyUtils_1 = __webpack_require__(57);
	var HtmlUtils_1 = __webpack_require__(67);
	var Icon_1 = __webpack_require__(178);
	var Utils_1 = __webpack_require__(13);
	var StringUtils_1 = __webpack_require__(62);
	var TimeSpanUtils_1 = __webpack_require__(15);
	var EmailUtils_1 = __webpack_require__(64);
	var QueryUtils_1 = __webpack_require__(21);
	var DeviceUtils_1 = __webpack_require__(16);
	var TemplateCache_1 = __webpack_require__(110);
	var Dom_1 = __webpack_require__(59);
	var SearchEndpoint_1 = __webpack_require__(9);
	var ResultList_1 = __webpack_require__(182);
	var StreamHighlightUtils_1 = __webpack_require__(72);
	var FacetUtils_1 = __webpack_require__(93);
	var Globalize = __webpack_require__(28);
	var Quickview_1 = __webpack_require__(179);
	var _ = __webpack_require__(14);
	var CoreHelpers = (function () {
	    function CoreHelpers() {
	    }
	    /**
	     * For backward compatibility reason, the "global" template helper should be available under the
	     * coveo namespace.
	     * @param scope
	     */
	    CoreHelpers.exportAllHelpersGlobally = function (scope) {
	        _.each(TemplateHelpers_1.TemplateHelpers.getHelpers(), function (helper, name) {
	            if (scope[name] == undefined) {
	                scope[name] = helper;
	            }
	        });
	    };
	    return CoreHelpers;
	}());
	exports.CoreHelpers = CoreHelpers;
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('javascriptEncode', function (value) {
	    return Utils_1.Utils.exists(value) ? StringUtils_1.StringUtils.javascriptEncode(value) : undefined;
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('shorten', function (content, length, highlights, cssClass) {
	    var strAndHoles = HighlightUtils_1.StringAndHoles.shortenString(content, length, '...');
	    if (Utils_1.Utils.exists(highlights)) {
	        return HighlightUtils_1.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
	    }
	    else {
	        return strAndHoles.value;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('shortenPath', function (content, length, highlights, cssClass) {
	    var strAndHoles = HighlightUtils_1.StringAndHoles.shortenPath(content, length);
	    if (Utils_1.Utils.exists(highlights)) {
	        return HighlightUtils_1.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
	    }
	    else {
	        return strAndHoles.value;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('shortenUri', function (content, length, highlights, cssClass) {
	    var strAndHoles = HighlightUtils_1.StringAndHoles.shortenUri(content, length);
	    if (Utils_1.Utils.exists(highlights)) {
	        return HighlightUtils_1.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
	    }
	    else {
	        return strAndHoles.value;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('highlight', function (content, highlights, cssClass) {
	    if (Utils_1.Utils.exists(content)) {
	        if (Utils_1.Utils.exists(highlights)) {
	            return HighlightUtils_1.HighlightUtils.highlightString(content, highlights, null, cssClass || 'highlight');
	        }
	        else {
	            return content;
	        }
	    }
	    else {
	        return undefined;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('highlightStreamText', function (content, termsToHighlight, phrasesToHighlight, opts) {
	    if (termsToHighlight === void 0) { termsToHighlight = resolveTermsToHighlight(); }
	    if (phrasesToHighlight === void 0) { phrasesToHighlight = resolvePhrasesToHighlight(); }
	    if (Utils_1.Utils.exists(content) && Utils_1.Utils.exists(termsToHighlight) && Utils_1.Utils.exists(phrasesToHighlight)) {
	        if (termsToHighlightAreDefined(termsToHighlight, phrasesToHighlight)) {
	            return StreamHighlightUtils_1.StreamHighlightUtils.highlightStreamText(content, termsToHighlight, phrasesToHighlight, opts);
	        }
	        else {
	            return content;
	        }
	    }
	    else {
	        return undefined;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('highlightStreamHTML', function (content, termsToHighlight, phrasesToHighlight, opts) {
	    if (termsToHighlight === void 0) { termsToHighlight = resolveTermsToHighlight(); }
	    if (phrasesToHighlight === void 0) { phrasesToHighlight = resolvePhrasesToHighlight(); }
	    if (Utils_1.Utils.exists(content) && Utils_1.Utils.exists(termsToHighlight) && Utils_1.Utils.exists(phrasesToHighlight)) {
	        if (termsToHighlightAreDefined(termsToHighlight, phrasesToHighlight)) {
	            return StreamHighlightUtils_1.StreamHighlightUtils.highlightStreamHTML(content, termsToHighlight, phrasesToHighlight, opts);
	        }
	        else {
	            return content;
	        }
	    }
	    else {
	        return undefined;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('number', function (value, options) {
	    var numberValue = Number(value);
	    if (Utils_1.Utils.exists(value)) {
	        if (_.isString(options)) {
	            return StringUtils_1.StringUtils.htmlEncode(Globalize.format(numberValue, options));
	        }
	        else {
	            return StringUtils_1.StringUtils.htmlEncode(numberValue.toString());
	        }
	    }
	    else {
	        return undefined;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('date', function (value, options) {
	    return DateUtils_1.DateUtils.dateToString(DateUtils_1.DateUtils.convertFromJsonDateIfNeeded(value), options);
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('time', function (value, options) {
	    return DateUtils_1.DateUtils.timeToString(DateUtils_1.DateUtils.convertFromJsonDateIfNeeded(value), options);
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('dateTime', function (value, options) {
	    return DateUtils_1.DateUtils.dateTimeToString(DateUtils_1.DateUtils.convertFromJsonDateIfNeeded(value), options);
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('emailDateTime', function (value, options) {
	    var defaultOptions = {};
	    defaultOptions.includeTimeIfThisWeek = true;
	    var optionsToUse = _.extend(options, defaultOptions);
	    return value ? DateUtils_1.DateUtils.dateTimeToString(DateUtils_1.DateUtils.convertFromJsonDateIfNeeded(value), optionsToUse) : undefined;
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('currency', function (value, options) {
	    return CurrencyUtils_1.CurrencyUtils.currencyToString(value, options);
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('timeSpan', function (value, options) {
	    if (options === void 0) { options = { isMilliseconds: false }; }
	    return new TimeSpanUtils_1.TimeSpan(value, options.isMilliseconds).getHHMMSS();
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('email', function (value) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    // support old arguments (value: any, companyDomain: string, me: string, lengthLimit = 2, truncateName = false)
	    var companyDomain;
	    var me;
	    var lengthLimit;
	    var truncateName;
	    if (_.isObject(args[0])) {
	        companyDomain = args[0]['companyDomain'];
	        me = args[0]['me'];
	        lengthLimit = args[0]['lengthLimit'];
	        truncateName = args[0]['truncateName'];
	    }
	    else {
	        companyDomain = args[0];
	        me = args[1];
	        lengthLimit = args[2];
	        truncateName = args[3];
	    }
	    if (lengthLimit == undefined) {
	        lengthLimit = 2;
	    }
	    if (truncateName == undefined) {
	        truncateName = false;
	    }
	    if (_.isString(value)) {
	        var listOfAddresses = EmailUtils_1.EmailUtils.splitSemicolonSeparatedListOfEmailAddresses(value);
	        return EmailUtils_1.EmailUtils.emailAddressesToHyperlinks(listOfAddresses, companyDomain, me, lengthLimit, truncateName);
	    }
	    else if (_.isArray(value)) {
	        return EmailUtils_1.EmailUtils.emailAddressesToHyperlinks(value, companyDomain, me, lengthLimit, truncateName);
	    }
	    else {
	        return undefined;
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('excessEmailToggle', function (target) {
	    Dom_1.$$(target).removeClass('coveo-active');
	    if (Dom_1.$$(target).hasClass('coveo-emails-excess-collapsed')) {
	        _.each(Dom_1.$$(target).siblings('.coveo-emails-excess-expanded'), function (sibling) {
	            Dom_1.$$(sibling).addClass('coveo-active');
	        });
	    }
	    else if (Dom_1.$$(target).hasClass('coveo-hide-expanded')) {
	        Dom_1.$$(target.parentElement).addClass('coveo-inactive');
	        _.each(Dom_1.$$(target.parentElement).siblings('.coveo-emails-excess-collapsed'), function (sibling) {
	            Dom_1.$$(sibling).addClass('coveo-active');
	        });
	    }
	    return undefined;
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('anchor', function (href, options) {
	    return HtmlUtils_1.AnchorUtils.buildAnchor(href, options);
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('image', function (src, options) {
	    return HtmlUtils_1.ImageUtils.buildImage(src, options);
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('thumbnail', function (result, endpoint, options) {
	    if (result === void 0) { result = resolveQueryResult(); }
	    if (endpoint === void 0) { endpoint = 'default'; }
	    if (QueryUtils_1.QueryUtils.hasThumbnail(result)) {
	        return HtmlUtils_1.ImageUtils.buildImageFromResult(result, SearchEndpoint_1.SearchEndpoint.endpoints[endpoint], options);
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('fromFileTypeToIcon', function (result, options) {
	    if (result === void 0) { result = resolveQueryResult(); }
	    if (options === void 0) { options = {}; }
	    return Icon_1.Icon.createIcon(result, options).outerHTML;
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('attrEncode', function (value) {
	    return ('' + value) /* Forces the conversion to string. */
	        .replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */
	        .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */
	        .replace(/'/g, '&quot;')
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('loadTemplates', function (templatesToLoad, once) {
	    if (once === void 0) { once = true; }
	    var ret = '';
	    var data = resolveQueryResult();
	    var atLeastOneWasLoaded = false;
	    var toLoad = templatesToLoad;
	    var defaultTmpl;
	    _.each(templatesToLoad, function (value, key, obj) {
	        if (value == 'default') {
	            defaultTmpl = key;
	        }
	    });
	    if (defaultTmpl != undefined) {
	        toLoad = _.omit(templatesToLoad, defaultTmpl);
	    }
	    _.each(toLoad, function (condition, id, obj) {
	        if (!atLeastOneWasLoaded || !once) {
	            atLeastOneWasLoaded = atLeastOneWasLoaded || condition;
	            ret += TemplateHelpers_1.TemplateHelpers.getHelper('loadTemplate')(id, condition, data);
	        }
	    });
	    if (!atLeastOneWasLoaded && defaultTmpl != undefined) {
	        ret += TemplateHelpers_1.TemplateHelpers.getHelper('loadTemplate')(defaultTmpl, true, data);
	    }
	    return ret;
	});
	var byteMeasure = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'];
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('size', function (value, options) {
	    var size = parseInt(value, 10);
	    var precision = (options != null && options.precision != null ? options.precision : 2);
	    var base = (options != null && options.base != null ? options.base : 0);
	    while (size > 1024 && base + 1 < byteMeasure.length) {
	        size /= 1024;
	        base++;
	    }
	    size = Math.floor(size * Math.pow(10, precision)) / Math.pow(10, precision);
	    return size + ' ' + byteMeasure[base];
	});
	TemplateHelpers_1.TemplateHelpers.registerFieldHelper('translatedCaption', function (value) {
	    return FacetUtils_1.FacetUtils.tryToGetTranslatedCaption('@filetype', value);
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('loadTemplate', function (id, condition, data) {
	    if (condition === void 0) { condition = true; }
	    if (Utils_1.Utils.isNullOrUndefined(data)) {
	        data = resolveQueryResult();
	    }
	    if (condition) {
	        return TemplateCache_1.TemplateCache.getTemplate(id).instantiateToString(data, {
	            checkCondition: false
	        });
	    }
	    return '';
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('encodeCarriageReturn', function (data) {
	    if (Utils_1.Utils.isNullOrUndefined(data)) {
	        return undefined;
	    }
	    else {
	        return StringUtils_1.StringUtils.encodeCarriageReturn(data);
	    }
	});
	TemplateHelpers_1.TemplateHelpers.registerTemplateHelper('isMobileDevice', function () {
	    return DeviceUtils_1.DeviceUtils.isMobileDevice() ? DeviceUtils_1.DeviceUtils.getDeviceName() : null;
	});
	function resolveQueryResult() {
	    return ResultList_1.ResultList.resultCurrentlyBeingRendered || Quickview_1.Quickview.resultCurrentlyBeingRendered;
	}
	function resolveTermsToHighlight() {
	    var currentQueryResult = resolveQueryResult();
	    if (currentQueryResult) {
	        return currentQueryResult.termsToHighlight;
	    }
	}
	function resolvePhrasesToHighlight() {
	    var currentQueryResult = resolveQueryResult();
	    if (currentQueryResult) {
	        return currentQueryResult.phrasesToHighlight;
	    }
	}
	function termsToHighlightAreDefined(termsToHighlight, phrasesToHighlight) {
	    return Utils_1.Utils.isNonEmptyArray(_.keys(termsToHighlight)) || Utils_1.Utils.isNonEmptyArray(_.keys(phrasesToHighlight));
	}


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var Assert_1 = __webpack_require__(12);
	var QueryUtils_1 = __webpack_require__(21);
	var Initialization_1 = __webpack_require__(106);
	var Utils_1 = __webpack_require__(13);
	var FileTypes_1 = __webpack_require__(61);
	var Quickview_1 = __webpack_require__(179);
	var Dom_1 = __webpack_require__(59);
	/**
	 * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon
	 * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead
	 * outputs a generic icon.
	 *
	 * This component is a result template component (see [Result Templates](https://developers.coveo.com/x/aIGfAQ)).
	 */
	var Icon = (function (_super) {
	    __extends(Icon, _super);
	    /**
	     * Creates a new Icon component.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the Icon component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     * @param result The result to associate the component with.
	     */
	    function Icon(element, options, bindings, result) {
	        var _this = _super.call(this, element, Icon.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.result = result;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Icon, options);
	        _this.result = _this.result || _this.resolveResult();
	        Assert_1.Assert.exists(_this.result);
	        var possibleInternalQuickview = Dom_1.$$(_this.element).find('.' + Component_1.Component.computeCssClassNameForType(Quickview_1.Quickview.ID));
	        if (!Utils_1.Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils_1.QueryUtils.hasHTMLVersion(_this.result)) {
	            Dom_1.$$(_this.element).addClass('coveo-with-quickview');
	            Dom_1.$$(_this.element).on('click', function () {
	                var qv = Component_1.Component.get(possibleInternalQuickview);
	                qv.open();
	            });
	        }
	        Icon.createIcon(_this.result, _this.options, element, bindings);
	        return _this;
	    }
	    Icon.createIcon = function (result, options, element, bindings) {
	        if (options === void 0) { options = {}; }
	        if (element === void 0) { element = Dom_1.$$('div').el; }
	        var info = FileTypes_1.FileTypes.get(result);
	        if (!bindings && result.searchInterface) {
	            // try to resolve results bindings automatically
	            bindings = result.searchInterface.getBindings();
	        }
	        info = Icon.preprocessIconInfo(options, info);
	        Dom_1.$$(element).toggleClass('coveo-small', options.small === true);
	        if (options.value != undefined) {
	            if (options.small === true) {
	                if (options.value.indexOf('-small') == -1) {
	                    info.icon += '-small';
	                }
	            }
	            if (options.small === false) {
	                if (options.value.indexOf('-small') != -1) {
	                    info.icon = info.icon.replace('-small', '');
	                }
	            }
	        }
	        Dom_1.$$(element).addClass(info.icon);
	        element.setAttribute('title', info.caption);
	        if (Icon.shouldDisplayLabel(options, bindings)) {
	            element.appendChild(Dom_1.$$('span', {
	                className: 'coveo-icon-caption-overlay'
	            }, info.caption).el);
	            Dom_1.$$(element).addClass('coveo-icon-with-caption-overlay');
	            Dom_1.$$(element).setAttribute('data-with-label', 'true');
	        }
	        return element;
	    };
	    Icon.shouldDisplayLabel = function (options, bindings) {
	        // Display only in new design.
	        // If withLabel is explicitely set to false, the label will never display
	        // If withLabel is explicitely set to true, the label will always display
	        // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json
	        // with the property shouldDisplayLabel set on each file type/ objecttype
	        // In this case, the generated css will take care of outputting the correct css to display : block
	        return bindings && bindings.searchInterface.isNewDesign() && options.withLabel !== false;
	    };
	    Icon.preprocessIconInfo = function (options, info) {
	        if (options.labelValue != null) {
	            info.caption = options.labelValue;
	        }
	        if (options.value != null) {
	            info.icon = 'coveo-icon ' + options.value;
	        }
	        if (info.caption == null) {
	            info.caption = '';
	        }
	        if (info.icon == null) {
	            info.icon = 'coveo-icon coveo-sprites-custom';
	        }
	        return info;
	    };
	    return Icon;
	}(Component_1.Component));
	Icon.ID = 'Icon';
	/**
	 * The options for the Icon
	 * @componentOptions
	 */
	Icon.options = {
	    /**
	     * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.
	     *
	     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon
	     * depending on the result file type.
	     */
	    value: ComponentOptions_1.ComponentOptions.buildIconOption(),
	    /**
	     * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.
	     *
	     * Default value is `undefined`.
	     */
	    small: ComponentOptions_1.ComponentOptions.buildBooleanOption(),
	    /**
	     * Specifies whether the Icon component should force the output icon to display its caption/label.
	     *
	     * **Note:**
	     *
	     * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for
	     * > Salesforce Insight Panels.
	     *
	     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon
	     * needs to display a caption/label depending on the result file type.
	     */
	    withLabel: ComponentOptions_1.ComponentOptions.buildBooleanOption(),
	    /**
	     * Specifies what text to display as the icon caption/label.
	     *
	     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon
	     * needs to display depending on the result file type.
	     */
	    labelValue: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption()
	};
	Icon.fields = [
	    'objecttype',
	    'filetype',
	];
	exports.Icon = Icon;
	Initialization_1.Initialization.registerAutoCreateComponent(Icon);


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var DomUtils_1 = __webpack_require__(60);
	var DeviceUtils_1 = __webpack_require__(16);
	var Dom_1 = __webpack_require__(59);
	var DefaultQuickviewTemplate_1 = __webpack_require__(180);
	var ResultListEvents_1 = __webpack_require__(49);
	var StringUtils_1 = __webpack_require__(62);
	var QuickviewDocument_1 = __webpack_require__(181);
	var QueryStateModel_1 = __webpack_require__(101);
	var QuickviewEvents_1 = __webpack_require__(134);
	var Initialization_1 = __webpack_require__(106);
	var KeyboardUtils_1 = __webpack_require__(68);
	var ExternalModulesShim_1 = __webpack_require__(23);
	/**
	 * This component is meant to exist within a result template.
	 * It allows to create a button/link inside the result list that opens a modal box for a given result.
	 *
	 * Most of the time, this component will reference a {@link QuickviewDocument} in its content template.
	 *
	 * ## Choosing what to display for the Quickview
	 * The Quick View uses any HTML structure you put inside its tag and uses that as the content of the dialog box. This content can thus be any element you decide, using your CSS and your structure.
	 *
	 * ## Example
	 * - You can change the appearance of the Quick View link by adding HTML inside the body of the div.
	 *
	 * - You can change the content of the Quick View link by specifying a template ID.
	 *
	 * - You can use the methods of the [CoreHelpers]{@link ICoreHelpers} in the template.
	 *
	 * ```html
	 * <!-- This would change the appearance of the quickview button itself in the result. -->
	 * <div class="CoveoQuickview" data-template-id="TemplateId">
	 *   <span>Click here for Quickview</span>
	 * </div>
	 *
	 * <!-- This would modify the content of the quickview when it is opened in the modal box -->
	 * <script class='result-template' type='text/underscore' id='TemplateId' >
	 *   <div>
	 *     <span>This is the content that will be displayed when you open the Quick View. You can also include any other Coveo components.</span>
	 *     <table class="CoveoFieldTable">
	 *       <tr data-field="@liboardshorttitle" data-caption="Board" />
	 *       <tr data-field="@licategoryshorttitle" data-caption="Category" />
	 *       <tr data-field="@sysauthor" data-caption="Author" />
	 *     </table>
	 *   </div>
	 * </script>
	 *
	 * <!-- Note that this is all optional: Just including a <div class='CoveoQuickview'></div> will do the job most of the time, and will include a default template and default button appearance -->
	 * ```
	 */
	var Quickview = (function (_super) {
	    __extends(Quickview, _super);
	    function Quickview(element, options, bindings, result, ModalBox) {
	        if (ModalBox === void 0) { ModalBox = ExternalModulesShim_1.ModalBox; }
	        var _this = _super.call(this, element, Quickview.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.bindings = bindings;
	        _this.result = result;
	        _this.ModalBox = ModalBox;
	        _this.bindedHandleEscapeEvent = _this.handleEscapeEvent.bind(_this);
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Quickview, options);
	        if (_this.options.contentTemplate == null) {
	            _this.options.contentTemplate = new DefaultQuickviewTemplate_1.DefaultQuickviewTemplate();
	        }
	        // If there is no content inside the Quickview div,
	        // we need to add something that will show up in the result template itself
	        if (/^\s*$/.test(_this.element.innerHTML)) {
	            var iconForQuickview = Dom_1.$$('div');
	            iconForQuickview.addClass('coveo-icon-for-quickview');
	            if (_this.searchInterface.isNewDesign()) {
	                var captionForQuickview = Dom_1.$$('div', { className: 'coveo-caption-for-quickview', tabindex: 0 }, 'Quickview'.toLocaleString()).el;
	                var div = Dom_1.$$('div');
	                div.append(iconForQuickview.el);
	                div.append(captionForQuickview);
	                Dom_1.$$(_this.element).append(div.el);
	            }
	            else {
	                iconForQuickview.text('Quickview'.toLocaleString());
	                Dom_1.$$(_this.element).append(iconForQuickview.el);
	            }
	        }
	        _this.bindClick(result);
	        if (_this.bindings.resultElement) {
	            _this.bind.on(_this.bindings.resultElement, ResultListEvents_1.ResultListEvents.openQuickview, function () { return _this.open(); });
	        }
	        return _this;
	    }
	    /**
	     * Open the quickview
	     */
	    Quickview.prototype.open = function () {
	        if (this.modalbox == null) {
	            // To prevent the keyboard from opening on mobile if the search bar has focus
	            Quickview.resultCurrentlyBeingRendered = this.result;
	            Dom_1.$$(document.activeElement).trigger('blur');
	            var openerObject = this.prepareOpenQuickviewObject();
	            this.createModalBox(openerObject);
	            this.bindQuickviewEvents(openerObject);
	            this.animateAndOpen();
	            this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.quickview, this.getHashId());
	            Quickview.resultCurrentlyBeingRendered = null;
	        }
	    };
	    /**
	     * Close the quickview
	     */
	    Quickview.prototype.close = function () {
	        if (this.modalbox != null) {
	            this.modalbox.close();
	            this.modalbox = null;
	            Dom_1.$$(document.body).off('keyup', this.bindedHandleEscapeEvent);
	        }
	    };
	    Quickview.prototype.getHashId = function () {
	        return this.result.queryUid + '.' + this.result.index + '.' + StringUtils_1.StringUtils.hashCode(this.result.uniqueId);
	    };
	    Quickview.prototype.bindClick = function (result) {
	        var _this = this;
	        if (typeof result.hasHtmlVersion == 'undefined' || result.hasHtmlVersion || this.options.alwaysShow) {
	            var clickAction = function () { return _this.open(); };
	            Dom_1.$$(this.element).on('click', clickAction);
	            this.bind.on(this.element, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, clickAction));
	        }
	        else {
	            this.element.style.display = 'none';
	        }
	    };
	    Quickview.prototype.bindQuickviewEvents = function (openerObject) {
	        var _this = this;
	        var closeButton = Dom_1.$$(this.modalbox.wrapper).find('.coveo-quickview-close-button');
	        Dom_1.$$(closeButton).on('click', function () {
	            _this.closeQuickview();
	            _this.close();
	        });
	        Dom_1.$$(this.modalbox.overlay).on('click', function () {
	            _this.closeQuickview();
	        });
	        Dom_1.$$(this.modalbox.content).on(QuickviewEvents_1.QuickviewEvents.quickviewLoaded, function () {
	            Dom_1.$$(openerObject.loadingAnimation).remove();
	            _this.bindIFrameEscape();
	        });
	        this.bindEscape();
	    };
	    Quickview.prototype.animateAndOpen = function () {
	        var _this = this;
	        var animationDuration = this.modalbox.wrapper.style.animationDuration;
	        var quickviewDocument = Dom_1.$$(this.modalbox.modalBox).find('.' + Component_1.Component.computeCssClassName(QuickviewDocument_1.QuickviewDocument));
	        if (quickviewDocument) {
	            if (animationDuration) {
	                var duration = /^(.+)(ms|s)$/.exec(animationDuration);
	                var durationMs = Number(duration[1]) * (duration[2] == 's' ? 1000 : 1);
	                // open the QuickviewDocument
	                setTimeout(function () {
	                    if (_this.modalbox != null) {
	                        Initialization_1.Initialization.dispatchNamedMethodCallOrComponentCreation('open', quickviewDocument, null);
	                    }
	                }, durationMs);
	            }
	            else {
	                Initialization_1.Initialization.dispatchNamedMethodCallOrComponentCreation('open', quickviewDocument, null);
	            }
	        }
	    };
	    Quickview.prototype.createModalBox = function (openerObject) {
	        var computedModalBoxContent = Dom_1.$$('div');
	        computedModalBoxContent.append(openerObject.content.el);
	        this.modalbox = this.ModalBox.open(computedModalBoxContent.el, {
	            title: DomUtils_1.DomUtils.getQuickviewHeader(this.result, {
	                showDate: this.options.showDate,
	                title: this.options.title
	            }, this.bindings).el.outerHTML,
	            className: 'coveo-quick-view',
	            validation: function () { return true; },
	            body: this.element.ownerDocument.body
	        });
	        this.setQuickviewSize();
	    };
	    Quickview.prototype.prepareOpenQuickviewObject = function () {
	        var loadingAnimation = this.options.loadingAnimation;
	        return {
	            loadingAnimation: loadingAnimation,
	            content: this.prepareQuickviewContent(loadingAnimation)
	        };
	    };
	    Quickview.prototype.prepareQuickviewContent = function (loadingAnimation) {
	        var content = Dom_1.$$(this.options.contentTemplate.instantiateToElement(this.result));
	        var initOptions = this.searchInterface.options;
	        var initParameters = {
	            options: initOptions,
	            bindings: this.getBindings(),
	            result: this.result
	        };
	        Initialization_1.Initialization.automaticallyCreateComponentsInside(content.el, initParameters);
	        if (content.find('.' + Component_1.Component.computeCssClassName(QuickviewDocument_1.QuickviewDocument)) != undefined && this.options.enableLoadingAnimation) {
	            content.prepend(loadingAnimation);
	        }
	        return content;
	    };
	    Quickview.prototype.bindEscape = function () {
	        Dom_1.$$(document.body).on('keyup', this.bindedHandleEscapeEvent);
	    };
	    Quickview.prototype.bindIFrameEscape = function () {
	        var quickviewDocument = Dom_1.$$(this.modalbox.content).find('.' + Component_1.Component.computeCssClassName(QuickviewDocument_1.QuickviewDocument));
	        quickviewDocument = Dom_1.$$(quickviewDocument).find('iframe');
	        var body = quickviewDocument.contentWindow.document.body;
	        Dom_1.$$(body).on('keyup', this.bindedHandleEscapeEvent);
	    };
	    Quickview.prototype.closeQuickview = function () {
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.quickview, '');
	    };
	    Quickview.prototype.setQuickviewSize = function () {
	        var wrapper = Dom_1.$$(Dom_1.$$(this.modalbox.modalBox).find('.coveo-wrapper'));
	        wrapper.el.style.width = this.options.size;
	        wrapper.el.style.height = this.options.size;
	        wrapper.el.style.maxWidth = this.options.size;
	        wrapper.el.style.maxHeight = this.options.size;
	    };
	    Quickview.prototype.handleEscapeEvent = function (e) {
	        if (e.keyCode == KeyboardUtils_1.KEYBOARD.ESCAPE) {
	            this.closeQuickview();
	            this.close();
	        }
	    };
	    return Quickview;
	}(Component_1.Component));
	Quickview.ID = 'Quickview';
	Quickview.fields = [
	    'urihash',
	    'collection',
	    'source',
	    'author' // analytics
	];
	/**
	 * @componentOptions
	 */
	Quickview.options = {
	    /**
	     * Specifies whether the quickview is always shown, even when the index body for a document is empty.<br/>
	     * In such cases, the {@link Quickview.options.contentTemplate} specifies what appears in the quickview.<br/>
	     * If there is no quickview for the document, you *MUST* specify a contentTemplate otherwise the component will throw an error when opened.
	     */
	    alwaysShow: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the title of your choice that appears at the top of the Quick View modal window.
	     */
	    title: ComponentOptions_1.ComponentOptions.buildStringOption(),
	    /**
	     * Specifies whether to show the document date in the Quick View modal window header.<br/>
	     * The default value is `true`.
	     */
	    showDate: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    enableLoadingAnimation: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies the template to use to present the Quick View content in the modal window.<br/>
	     * e.g.: <br/>
	     *     <div class="CoveoQuickview" data-template-id="TemplateId"></div>
	     *     <div class="CoveoQuickview" data-template-selector=".templateSelector"></div>
	     */
	    contentTemplate: ComponentOptions_1.ComponentOptions.buildTemplateOption({
	        selectorAttr: 'data-template-selector',
	        idAttr: 'data-template-id'
	    }),
	    loadingAnimation: ComponentOptions_1.ComponentOptions.buildOption(ComponentOptions_1.ComponentOptionsType.NONE, function (element) {
	        var loadingAnimationSelector = element.getAttribute('data-loading-animation-selector');
	        if (loadingAnimationSelector != null) {
	            var loadingAnimation = Dom_1.$$(document.documentElement).find(loadingAnimationSelector);
	            if (loadingAnimation != null) {
	                Dom_1.$$(loadingAnimation).detach();
	                return loadingAnimation;
	            }
	        }
	        var id = element.getAttribute('data-loading-animation-template-id');
	        if (id != null) {
	            var loadingAnimationTemplate = ComponentOptions_1.ComponentOptions.loadResultTemplateFromId(id);
	            if (loadingAnimationTemplate) {
	                return loadingAnimationTemplate.instantiateToElement(undefined, {
	                    checkCondition: false
	                });
	            }
	        }
	        return DomUtils_1.DomUtils.getBasicLoadingAnimation();
	    }),
	    /**
	     * Specifies the Quick View modal window size (width and height) relative to the full window.<br/>
	     * The default value is 95% on a desktop and 100% on a mobile device.
	     */
	    size: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: DeviceUtils_1.DeviceUtils.isMobileDevice() ? '100%' : '95%' })
	};
	Quickview.resultCurrentlyBeingRendered = null;
	exports.Quickview = Quickview;
	Initialization_1.Initialization.registerAutoCreateComponent(Quickview);


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var DefaultQuickviewTemplate = (function (_super) {
	    __extends(DefaultQuickviewTemplate, _super);
	    function DefaultQuickviewTemplate() {
	        return _super.call(this) || this;
	    }
	    DefaultQuickviewTemplate.prototype.instantiateToString = function (queryResult) {
	        return '<div class="coveo-quick-view-full-height"><div class="CoveoQuickviewDocument"></div></div>';
	    };
	    return DefaultQuickviewTemplate;
	}(Template_1.Template));
	exports.DefaultQuickviewTemplate = DefaultQuickviewTemplate;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Assert_1 = __webpack_require__(12);
	var Dom_1 = __webpack_require__(59);
	var QuickviewEvents_1 = __webpack_require__(134);
	var DeviceUtils_1 = __webpack_require__(16);
	var Utils_1 = __webpack_require__(13);
	var ColorUtils_1 = __webpack_require__(56);
	var Initialization_1 = __webpack_require__(106);
	var Strings_1 = __webpack_require__(35);
	var _ = __webpack_require__(14);
	var HIGHLIGHT_PREFIX = 'CoveoHighlight';
	/**
	 * The QuickviewDocument component is meant to exist within Result Templates, more specifically inside a {@link Quickview} component.
	 * The sole purpose of this component is to include an iframe which will load the correct HTML version of the current document.
	 * By default, this component is included in the default template for a {@link Quickview} component.
	 */
	var QuickviewDocument = (function (_super) {
	    __extends(QuickviewDocument, _super);
	    /**
	     * Create a new instance of the component
	     * @param element
	     * @param options
	     * @param bindings
	     * @param result
	     */
	    function QuickviewDocument(element, options, bindings, result) {
	        var _this = _super.call(this, element, QuickviewDocument.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.result = result;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, QuickviewDocument, options);
	        _this.result = result || _this.resolveResult();
	        _this.termsToHighlightWereModified = false;
	        Assert_1.Assert.exists(_this.result);
	        return _this;
	    }
	    QuickviewDocument.prototype.createDom = function () {
	        var container = Dom_1.$$('div');
	        container.addClass('coveo-quickview-document');
	        this.element.appendChild(container.el);
	        this.header = this.buildHeader();
	        this.iframe = this.buildIFrame();
	        container.append(this.header.el);
	        container.append(this.iframe.el);
	    };
	    QuickviewDocument.prototype.open = function () {
	        var _this = this;
	        this.ensureDom();
	        var documentURL = Dom_1.$$(this.element).getAttribute('href');
	        if (documentURL == undefined || documentURL == '') {
	            documentURL = this.result.clickUri;
	        }
	        this.usageAnalytics.logClickEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.documentQuickview, {
	            author: Utils_1.Utils.getFieldValue(this.result, 'author'),
	            documentURL: documentURL,
	            documentTitle: this.result.title
	        }, this.result, this.queryController.element);
	        var beforeLoad = (new Date()).getTime();
	        var iframe = this.iframe.find('iframe');
	        iframe.src = 'about:blank';
	        var endpoint = this.queryController.getEndpoint();
	        var termsToHighlight = _.keys(this.result.termsToHighlight);
	        var dataToSendOnOpenQuickView = {
	            termsToHighlight: termsToHighlight
	        };
	        Dom_1.$$(this.element).trigger(QuickviewEvents_1.QuickviewEvents.openQuickview, dataToSendOnOpenQuickView);
	        this.checkIfTermsToHighlightWereModified(dataToSendOnOpenQuickView.termsToHighlight);
	        var queryObject = _.extend({}, this.getBindings().queryController.getLastQuery());
	        if (this.termsToHighlightWereModified) {
	            this.handleTermsToHighlight(dataToSendOnOpenQuickView.termsToHighlight, queryObject);
	        }
	        var callOptions = {
	            queryObject: queryObject,
	            requestedOutputSize: this.options.maximumDocumentSize
	        };
	        endpoint.getDocumentHtml(this.result.uniqueId, callOptions)
	            .then(function (html) {
	            // If the contentDocument is null at this point it means that the Quick View
	            // was closed before we've finished loading it. In this case do nothing.
	            if (iframe.contentDocument == null) {
	                return;
	            }
	            _this.renderHTMLDocument(iframe, html);
	            _this.triggerQuickviewLoaded(beforeLoad);
	        })
	            .catch(function (error) {
	            // If the contentDocument is null at this point it means that the Quick View
	            // was closed before we've finished loading it. In this case do nothing.
	            if (iframe.contentDocument == null) {
	                return;
	            }
	            if (error.status != 0) {
	                _this.renderErrorReport(iframe, error.status);
	                _this.triggerQuickviewLoaded(beforeLoad);
	            }
	            else {
	                iframe.onload = function () {
	                    _this.triggerQuickviewLoaded(beforeLoad);
	                };
	                iframe.src = endpoint.getViewAsHtmlUri(_this.result.uniqueId, callOptions);
	            }
	        });
	    };
	    QuickviewDocument.prototype.renderHTMLDocument = function (iframe, html) {
	        var _this = this;
	        iframe.onload = function () {
	            _this.computeHighlights(iframe.contentWindow);
	            // Remove white border for new Quickview
	            if (_this.isNewQuickviewDocument(iframe.contentWindow)) {
	                var body = Dom_1.$$(_this.element).closest('.coveo-body');
	                body.style.padding = '0';
	                var header = Dom_1.$$(_this.element).find('.coveo-quickview-header');
	                header.style.paddingTop = '10';
	                header.style.paddingLeft = '10';
	            }
	            if (Dom_1.$$(_this.element).find('.coveo-quickview-header').innerHTML == '') {
	                Dom_1.$$(_this.element).find('.coveo-quickview-header').style.display = 'none';
	            }
	        };
	        this.writeToIFrame(iframe, html);
	        this.wrapPreElementsInIframe(iframe);
	    };
	    QuickviewDocument.prototype.renderErrorReport = function (iframe, errorStatus) {
	        var errorString = '';
	        if (errorStatus == 400) {
	            errorString = 'NoQuickview';
	        }
	        else {
	            errorString = 'OopsError';
	        }
	        var errorMessage = "<html><body style='font-family: Arimo, 'Helvetica Neue', Helvetica, Arial, sans-serif; -webkit-text-size-adjust: none;' >" + Strings_1.l(errorString) + " </body></html>";
	        this.writeToIFrame(iframe, errorMessage);
	    };
	    QuickviewDocument.prototype.writeToIFrame = function (iframe, content) {
	        var toWrite = content;
	        // This sucks because we can't do instanceof HTMLDocument
	        // lib.d.ts declare HTMLDocument as an interface, not an actual object
	        if (typeof content == 'object') {
	            toWrite = content.getElementsByTagName('html')[0].outerHTML;
	        }
	        iframe.contentWindow.document.open();
	        iframe.contentWindow.document.write(toWrite);
	        iframe.contentWindow.document.close();
	    };
	    QuickviewDocument.prototype.wrapPreElementsInIframe = function (iframe) {
	        try {
	            var style = document.createElement('style');
	            style.type = 'text/css';
	            // This CSS forces <pre> tags used in some emails to wrap by default
	            var cssText = 'html pre { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word; }';
	            // Some people react strongly when presented with their browser's default font, so let's fix that
	            cssText += 'body, html { font-family: Arimo, \'Helvetica Neue\', Helvetica, Arial, sans-serif; -webkit-text-size-adjust: none; }';
	            if (DeviceUtils_1.DeviceUtils.isIos()) {
	                // Safari on iOS forces resize iframes to fit their content, even if an explicit size
	                // is set on the iframe. Isn't that great? By chance there is a trick around it: by
	                // setting a very small size on the body and instead using min-* to set the size to
	                // 100% we're able to trick Safari from thinking it must expand the iframe. Amazed.
	                // The 'scrolling' part is required otherwise the hack doesn't work.
	                //
	                // http://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari
	                cssText += 'body, html { height: 1px !important; min-height: 100%; width: 1px !important; min-width: 100%; overflow: scroll; }';
	                Dom_1.$$(iframe).setAttribute('scrolling', 'no');
	                // Some content is cropped on iOs if a margin is present
	                // We remove it and add one on the iframe wrapper.
	                cssText += 'body, html {margin: auto}';
	                iframe.parentElement.style.margin = '0 0 5px 5px';
	            }
	            if ('styleSheet' in style) {
	                style['styleSheet'].cssText = cssText;
	            }
	            else {
	                style.appendChild(document.createTextNode(cssText));
	            }
	            var head = iframe.contentWindow.document.head;
	            head.appendChild(style);
	        }
	        catch (e) {
	            // if not allowed
	        }
	    };
	    QuickviewDocument.prototype.triggerQuickviewLoaded = function (beforeLoad) {
	        var afterLoad = (new Date()).getTime();
	        var eventArgs = { duration: afterLoad - beforeLoad };
	        Dom_1.$$(this.element).trigger(QuickviewEvents_1.QuickviewEvents.quickviewLoaded, eventArgs);
	    };
	    // An highlighted term looks like:
	    //
	    //     <span id='CoveoHighlight:X.Y.Z'>a</span>
	    //
	    // The id has 3 components:
	    // - X: the term
	    // - Y: the term occurence
	    // - Z: the term part
	    //
	    // For the 'Z' component, if the term 'foo bar' is found in multiple elements, we will see:
	    //
	    //     <span id='CoveoHighlight:1.1.1'>foo</span>
	    //     <span id='CoveoHighlight:1.1.2'>bar</span>
	    //
	    // Highlighted words can overlap, which looks like:
	    //
	    //     <span id='CoveoHighlight:1.Y.Z'>
	    //         a
	    //         <coveotaggedword id='CoveoHighlight:2.Y.Z'>b</coveotaggedword>
	    //     </span>
	    //     <span id='CoveoHighlight:2.Y.Z'>c</span>
	    //
	    // In the previous example, the words 'ab' and 'bc' are highlighted.
	    //
	    // One thing important to note is that the id of all 'coveotaggedword' for
	    // the same word AND the first 'span' for that word will have the same id.
	    //
	    // Example:
	    //
	    //     <span id='CoveoHighlight:1.1.1'>
	    //         a
	    //         <coveotaggedword id='CoveoHighlight:2.1.1'>b</coveotaggedword>
	    //     </span>
	    //     <span id='CoveoHighlight:1.1.2'>
	    //         c
	    //         <coveotaggedword id='CoveoHighlight:2.1.1'>d</coveotaggedword>
	    //     </span>
	    //     <span id='CoveoHighlight:2.1.1'>e</span>
	    //     <span id='CoveoHighlight:2.1.2'>f</span>
	    //
	    // In the previous example, the words 'abcd' and 'bcdef' are highlighted.
	    //
	    // This method is public for testing purposes.
	    QuickviewDocument.prototype.computeHighlights = function (window) {
	        var _this = this;
	        Dom_1.$$(this.header).empty();
	        this.keywordsState = [];
	        var words = {};
	        var highlightsCount = 0;
	        _.each(Dom_1.$$(window.document.body).findAll('[id^="' + HIGHLIGHT_PREFIX + '"]'), function (element, index) {
	            var idParts = _this.getHighlightIdParts(element);
	            if (idParts) {
	                var idIndexPart = idParts[1]; // X
	                var idOccurencePart = parseInt(idParts[2], 10); // Y
	                var idTermPart = parseInt(idParts[3], 10); // Z in <span id='CoveoHighlight:X.Y.Z'>a</span>
	                var word = words[idIndexPart];
	                // The 'idTermPart' check is to circumvent a bug from the index
	                // where an highlight of an empty string start with an idTermPart > 1.
	                if (word == null && idTermPart == 1) {
	                    words[idIndexPart] = word = {
	                        text: _this.getHighlightInnerText(element),
	                        count: 1,
	                        index: parseInt(idIndexPart, 10),
	                        // Here I try to be clever.
	                        // An overlaping word:
	                        // 1) always start with a 'coveotaggedword' element.
	                        // 2) then other 'coveotaggedword' elements may follow
	                        // 3) then a 'span' element may follow.
	                        //
	                        // All 1), 2) and 3) will have the same id so I consider them as
	                        // a whole having the id 0 instead of 1.
	                        termsCount: element.nodeName.toLowerCase() == 'coveotaggedword' ? 0 : 1,
	                        element: element,
	                        occurence: idOccurencePart
	                    };
	                }
	                else if (word) {
	                    if (word.occurence == idOccurencePart) {
	                        if (element.nodeName.toLowerCase() == 'coveotaggedword') {
	                            word.text += _this.getHighlightInnerText(element);
	                            // Doesn't count as a term part (see method description for more info).
	                        }
	                        else if (word.termsCount < idTermPart) {
	                            word.text += _this.getHighlightInnerText(element);
	                            word.termsCount += 1;
	                        }
	                    }
	                    word.count = Math.max(word.count, idOccurencePart);
	                    highlightsCount += 1;
	                }
	                // See the method description to understand why this code let us
	                // create the word 'bcdef' instead of 'bdef'.
	                if (word && word.occurence == idOccurencePart && element.nodeName.toLowerCase() == 'span') {
	                    var embeddedWordParts = _this.getHightlightEmbeddedWordIdParts(element);
	                    var embeddedWord = embeddedWordParts ? words[embeddedWordParts[1]] : null;
	                    if (embeddedWord && embeddedWord.occurence == parseInt(embeddedWordParts[2], 10)) {
	                        embeddedWord.text += element.childNodes[0].nodeValue || ''; // only immediate text without children.
	                    }
	                }
	            }
	        });
	        if (highlightsCount == 0) {
	            this.header.el.style.minHeight = '0';
	        }
	        var resolvedWords = [];
	        _.each(words, function (word) {
	            // When possible, take care to find the original term from the query instead of the
	            // first highlighted version we encounter. This relies on a recent feature by the
	            // Search API, but will fallback properly on older versions.
	            word.text = _this.resolveOriginalTermFromHighlight(word.text);
	            var state = {
	                word: word,
	                color: word.element.style.backgroundColor,
	                currentIndex: 0,
	                index: word.index
	            };
	            _this.keywordsState.push(state);
	            Dom_1.$$(_this.header).append(_this.buildWordButton(state, window));
	            resolvedWords.push(word.text);
	        });
	        return resolvedWords;
	    };
	    QuickviewDocument.prototype.getHighlightIdParts = function (element) {
	        var parts = element
	            .id
	            .substr(HIGHLIGHT_PREFIX.length + 1)
	            .match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/);
	        return (parts && parts.length > 3) ? parts : null;
	    };
	    QuickviewDocument.prototype.getHighlightInnerText = function (element) {
	        if (element.nodeName.toLowerCase() == 'coveotaggedword') {
	            // only immediate text without children.
	            return element.childNodes.length >= 1 ? (element.childNodes.item(0).textContent || '') : '';
	        }
	        else {
	            return element.textContent || '';
	        }
	    };
	    QuickviewDocument.prototype.getHightlightEmbeddedWordIdParts = function (element) {
	        var embedded = element.getElementsByTagName('coveotaggedword')[0];
	        return embedded ? this.getHighlightIdParts(embedded) : null;
	    };
	    QuickviewDocument.prototype.resolveOriginalTermFromHighlight = function (highlight) {
	        var _this = this;
	        var found = highlight;
	        // Beware, terms to highlight is only set by recent search APIs.
	        if (this.result.termsToHighlight) {
	            // We look for the term expansion and we'll return the corresponding
	            // original term is one is found.
	            found = _.find(_.keys(this.result.termsToHighlight), function (originalTerm) {
	                // The expansions do NOT include the original term (makes sense), so be sure to check
	                // the original term for a match too.
	                return (originalTerm.toLowerCase() == highlight.toLowerCase()) ||
	                    (_.find(_this.result.termsToHighlight[originalTerm], function (expansion) { return expansion.toLowerCase() == highlight.toLowerCase(); }) != undefined);
	            }) || found;
	        }
	        return found;
	    };
	    QuickviewDocument.prototype.buildWordButton = function (wordState, window) {
	        var _this = this;
	        var wordHtml = Dom_1.$$('span');
	        wordHtml.addClass('coveo-term-for-quickview');
	        var quickviewName = Dom_1.$$('span');
	        quickviewName.addClass('coveo-term-for-quickview-name');
	        quickviewName.setHtml(wordState.word.text);
	        quickviewName.on('click', function () {
	            _this.navigate(wordState, false, window);
	        });
	        wordHtml.append(quickviewName.el);
	        var quickviewUpArrow = Dom_1.$$('span');
	        quickviewUpArrow.addClass('coveo-term-for-quickview-up-arrow');
	        var quickviewUpArrowIcon = Dom_1.$$('span');
	        quickviewUpArrowIcon.addClass('coveo-term-for-quickview-up-arrow-icon');
	        quickviewUpArrow.append(quickviewUpArrowIcon.el);
	        quickviewUpArrow.on('click', function () {
	            _this.navigate(wordState, true, window);
	        });
	        wordHtml.append(quickviewUpArrow.el);
	        var quickviewDownArrow = Dom_1.$$('span');
	        quickviewDownArrow.addClass('coveo-term-for-quickview-down-arrow');
	        var quickviewDownArrowIcon = Dom_1.$$('span');
	        quickviewDownArrowIcon.addClass('coveo-term-for-quickview-down-arrow-icon');
	        quickviewDownArrow.append(quickviewDownArrowIcon.el);
	        quickviewDownArrow.on('click', function () {
	            _this.navigate(wordState, false, window);
	        });
	        wordHtml.append(quickviewDownArrow.el);
	        wordHtml.el.style.backgroundColor = wordState.color;
	        wordHtml.el.style.borderColor = this.getSaturatedColor(wordState.color);
	        quickviewDownArrow.el.style.borderColor = this.getSaturatedColor(wordState.color);
	        return wordHtml.el;
	    };
	    QuickviewDocument.prototype.navigate = function (state, backward, window) {
	        var fromIndex = state.currentIndex;
	        var toIndex;
	        if (!backward) {
	            toIndex = fromIndex == state.word.count ? 1 : fromIndex + 1;
	        }
	        else {
	            toIndex = fromIndex <= 1 ? state.word.count : fromIndex - 1;
	        }
	        var scroll = this.getScrollingElement(window);
	        // Un-highlight any currently selected element
	        var current = Dom_1.$$(scroll).find('[id^="' + HIGHLIGHT_PREFIX + ':' + state.word.index + '.' + fromIndex + '"]');
	        if (current) {
	            current.style.border = '';
	        }
	        // Find and highlight the new element.
	        var element = Dom_1.$$(window.document.body).find('[id^="' + HIGHLIGHT_PREFIX + ':' + state.word.index + '.' + toIndex + '"]');
	        element.style.border = '1px dotted #333';
	        state.currentIndex = toIndex;
	        // pdf2html docs hide the non-visible frames by default, to speed up browsers.
	        // But this prevents keyword navigation from working so we must force show it. This
	        // is done by adding the 'opened' class to it (defined by pdf2html).
	        if (this.isNewQuickviewDocument(window)) {
	            var pdf = Dom_1.$$(element).closest('.pc');
	            Dom_1.$$(pdf).addClass('opened');
	        }
	        element.scrollIntoView();
	        // iOS on Safari might scroll the whole modal box body when we do this,
	        // so give it a nudge in the right direction.
	        var body = this.iframe.closest('.coveo-body');
	        body.scrollLeft = 0;
	        body.scrollTop = 0;
	    };
	    QuickviewDocument.prototype.buildHeader = function () {
	        var header = Dom_1.$$('div');
	        header.addClass('coveo-quickview-header');
	        return header;
	    };
	    QuickviewDocument.prototype.buildIFrame = function () {
	        var iFrame = Dom_1.$$('iframe');
	        iFrame.setAttribute('sandbox', 'allow-same-origin');
	        var iFrameWrapper = Dom_1.$$('div');
	        iFrameWrapper.addClass('coveo-iframeWrapper');
	        iFrameWrapper.el.appendChild(iFrame.el);
	        return iFrameWrapper;
	    };
	    QuickviewDocument.prototype.getScrollingElement = function (iframeWindow) {
	        var found;
	        if (this.isNewQuickviewDocument(iframeWindow)) {
	            // 'New' quick views have a #page-container element generated by the pdf2html thing.
	            // This is the element we want to scroll on.
	            found = Dom_1.$$(iframeWindow.document.body).find('#page-container');
	        }
	        // If all else fails, we use the body
	        if (!found) {
	            found = Dom_1.$$(iframeWindow.document.body).el;
	        }
	        return found;
	    };
	    QuickviewDocument.prototype.isNewQuickviewDocument = function (iframeWindow) {
	        var meta = Dom_1.$$(iframeWindow.document.head).find('meta[name=\'generator\']');
	        return meta && meta.getAttribute('content') == 'pdf2htmlEX';
	    };
	    QuickviewDocument.prototype.handleTermsToHighlight = function (termsToHighlight, queryObject) {
	        var _this = this;
	        for (var term in this.result.termsToHighlight) {
	            delete this.result.termsToHighlight[term];
	        }
	        var query = '';
	        _.each(termsToHighlight, function (term) {
	            query += term + ' ';
	            _this.result.termsToHighlight[term] = new Array(term);
	        });
	        query = query.substring(0, query.length - 1);
	        queryObject.q = query;
	    };
	    QuickviewDocument.prototype.checkIfTermsToHighlightWereModified = function (termsToHighlight) {
	        if (!Utils_1.Utils.arrayEqual(termsToHighlight, _.keys(this.result.termsToHighlight))) {
	            this.termsToHighlightWereModified = true;
	        }
	    };
	    QuickviewDocument.prototype.getSaturatedColor = function (color) {
	        var r = parseInt(color.substring(4, 7));
	        var g = parseInt(color.substring(9, 12));
	        var b = parseInt(color.substring(14, 17));
	        var hsv = ColorUtils_1.ColorUtils.rgbToHsv(r, g, b);
	        hsv[1] *= 2;
	        if (hsv[1] > 1) {
	            hsv[1] = 1;
	        }
	        var rgb = ColorUtils_1.ColorUtils.hsvToRgb(hsv[0], hsv[1], hsv[2]);
	        return 'rgb(' + rgb[0].toString() + ', ' + rgb[1].toString() + ', ' + rgb[2].toString() + ')';
	    };
	    return QuickviewDocument;
	}(Component_1.Component));
	QuickviewDocument.ID = 'QuickviewDocument';
	/**
	 * The options for the component
	 * @componentOptions
	 */
	QuickviewDocument.options = {
	    /**
	     * Specifies the maximum document size (the preview) that should be returned by the index.
	     *
	     * By default its value is 0, and the whole preview is returned.
	     */
	    maximumDocumentSize: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 0, min: 0 }),
	};
	exports.QuickviewDocument = QuickviewDocument;
	Initialization_1.Initialization.registerAutoCreateComponent(QuickviewDocument);


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var DefaultResultTemplate_1 = __webpack_require__(116);
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var Assert_1 = __webpack_require__(12);
	var QueryEvents_1 = __webpack_require__(48);
	var Model_1 = __webpack_require__(98);
	var QueryStateModel_1 = __webpack_require__(101);
	var QueryUtils_1 = __webpack_require__(21);
	var Dom_1 = __webpack_require__(59);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Initialization_1 = __webpack_require__(106);
	var Defer_1 = __webpack_require__(32);
	var DeviceUtils_1 = __webpack_require__(16);
	var ResultListEvents_1 = __webpack_require__(49);
	var ResultLayoutEvents_1 = __webpack_require__(50);
	var Utils_1 = __webpack_require__(13);
	var DomUtils_1 = __webpack_require__(60);
	var Recommendation_1 = __webpack_require__(133);
	var DefaultRecommendationTemplate_1 = __webpack_require__(183);
	var TemplateList_1 = __webpack_require__(118);
	var TemplateCache_1 = __webpack_require__(110);
	var ResponsiveDefaultResultTemplate_1 = __webpack_require__(184);
	var _ = __webpack_require__(14);
	var RegisteredNamedMethods_1 = __webpack_require__(105);
	/**
	 * The ResultList component is responsible for displaying the results of the current query using one or more result
	 * templates (see [Result Templates](https://developers.coveo.com/x/aIGfAQ)).
	 *
	 * This component supports many additional features, such as infinite scrolling.
	 */
	var ResultList = (function (_super) {
	    __extends(ResultList, _super);
	    /**
	     * Creates a new ResultList component. Binds various event related to queries (e.g., on querySuccess ->
	     * renderResults). Binds scroll event if {@link ResultList.options.enableInfiniteScroll} is `true`.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the ResultList component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     * @param elementClassId The class that this component should instantiate. Components that extend the base ResultList
	     * use this. Default value is `CoveoResultList`.
	     */
	    function ResultList(element, options, bindings, elementClassId) {
	        if (elementClassId === void 0) { elementClassId = ResultList.ID; }
	        var _this = _super.call(this, element, elementClassId, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.bindings = bindings;
	        _this.currentlyDisplayedResults = [];
	        _this.reachedTheEndOfResults = false;
	        // This variable serves to block some setup where the framework fails to correctly identify the "real" scrolling container.
	        // Since it's not technically feasible to correctly identify the scrolling container in every possible scenario without some very complex logic, we instead try to add some kind of mechanism to
	        // block runaway requests where UI will keep asking more results in the index, eventually bringing the browser to it's knee.
	        // Those successive request are needed in "displayMoreResults" to ensure we fill the scrolling container correctly.
	        // Since the container is not identified correctly, it is never "full", so we keep asking for more.
	        // It is reset every time the user actually scroll the container manually.
	        _this.successiveScrollCount = 0;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ResultList, options);
	        Assert_1.Assert.exists(element);
	        Assert_1.Assert.exists(_this.options);
	        Assert_1.Assert.exists(_this.options.resultContainer);
	        Assert_1.Assert.exists(_this.options.resultTemplate);
	        Assert_1.Assert.exists(_this.options.waitAnimationContainer);
	        Assert_1.Assert.exists(_this.options.infiniteScrollContainer);
	        _this.showOrHideElementsDependingOnState(false, false);
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.newQuery, function (args) { return _this.handleNewQuery(); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function (args) { return _this.handleQuerySuccess(args); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.duringQuery, function (args) { return _this.handleDuringQuery(); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.queryError, function (args) { return _this.handleQueryError(); });
	        Dom_1.$$(_this.root).on(ResultListEvents_1.ResultListEvents.changeLayout, function (e, args) { return _this.handleChangeLayout(args); });
	        if (_this.options.enableInfiniteScroll) {
	            _this.handlePageChanged();
	            _this.bind.on(_this.options.infiniteScrollContainer, 'scroll', function (e) {
	                _this.successiveScrollCount = 0;
	                _this.handleScrollOfResultList();
	            });
	        }
	        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.FIRST, function () { return _this.handlePageChanged(); });
	        Dom_1.$$(_this.options.resultContainer).addClass('coveo-result-list-container');
	        if (_this.searchInterface.isNewDesign()) {
	            _this.setupTemplatesVersusLayouts();
	            Dom_1.$$(_this.root).on(ResultLayoutEvents_1.ResultLayoutEvents.populateResultLayout, function (e, args) { return args.layouts.push(_this.options.layout); });
	        }
	        return _this;
	    }
	    ResultList.getDefaultTemplate = function (e) {
	        var template = ResultList.loadTemplatesFromCache();
	        if (template != null) {
	            return template;
	        }
	        var component = Component_1.Component.get(e);
	        if (component.searchInterface instanceof Recommendation_1.Recommendation) {
	            return new DefaultRecommendationTemplate_1.DefaultRecommendationTemplate();
	        }
	        return new DefaultResultTemplate_1.DefaultResultTemplate();
	    };
	    ResultList.loadTemplatesFromCache = function () {
	        var pageTemplateNames = TemplateCache_1.TemplateCache.getResultListTemplateNames();
	        if (pageTemplateNames.length > 0) {
	            return new TemplateList_1.TemplateList(_.compact(_.map(pageTemplateNames, function (templateName) { return TemplateCache_1.TemplateCache.getTemplate(templateName); })));
	        }
	        return null;
	    };
	    /**
	     * Get the fields needed to be automatically included in the query for this result list.
	     * @returns {string[]}
	     */
	    ResultList.prototype.getAutoSelectedFieldsToInclude = function () {
	        return _.chain(this.options.resultTemplate.getFields())
	            .concat(this.getMinimalFieldsToInclude())
	            .compact()
	            .unique()
	            .value();
	    };
	    ResultList.prototype.setupTemplatesVersusLayouts = function () {
	        var _this = this;
	        var layoutClassToAdd = "coveo-" + this.options.layout + "-layout-container";
	        Dom_1.$$(this.options.resultContainer).addClass(layoutClassToAdd);
	        // A TemplateList is the scenario where the result template are directly embedded inside the ResultList
	        // This is the typical scenario when a page gets created by the interface editor, for example.
	        // In that case, we try to stick closely that what is actually configured inside the page, and do no "special magic".
	        // Stick to the "hardcoded" configuration present in the page.
	        // We only add the correct layout options if it has not been set manually.
	        if (this.options.resultTemplate instanceof TemplateList_1.TemplateList) {
	            _.each(this.options.resultTemplate.templates, function (tmpl) {
	                if (!tmpl.layout) {
	                    tmpl.layout = _this.options.layout;
	                }
	            });
	        }
	        else if (this.options.resultTemplate instanceof DefaultResultTemplate_1.DefaultResultTemplate && this.options.layout == 'list') {
	            ResponsiveDefaultResultTemplate_1.ResponsiveDefaultResultTemplate.init(this.root, this, this.options);
	        }
	    };
	    /**
	     * Empties the current result list content and appends the given array of HTMLElement.
	     *
	     * Can append to existing elements in the result list, or replace them.
	     *
	     * Triggers the `newResultsDisplayed` and `newResultDisplayed` events.
	     * @param resultsElement
	     * @param append
	     */
	    ResultList.prototype.renderResults = function (resultsElement, append) {
	        var _this = this;
	        if (append === void 0) { append = false; }
	        if (!append) {
	            this.options.resultContainer.innerHTML = '';
	        }
	        _.each(resultsElement, function (resultElement) {
	            _this.options.resultContainer.appendChild(resultElement);
	            _this.triggerNewResultDisplayed(Component_1.Component.getResult(resultElement), resultElement);
	        });
	        if (this.options.layout == 'card' && !this.options.enableInfiniteScroll) {
	            // Used to prevent last card from spanning the grid's whole width
	            _.times(3, function () { return _this.options.resultContainer.appendChild(Dom_1.$$('div').el); });
	        }
	        this.triggerNewResultsDisplayed();
	    };
	    /**
	     * Builds and returns an array of HTMLElement with the given result set.
	     * @param results the result set to build an array of HTMLElement from.
	     */
	    ResultList.prototype.buildResults = function (results) {
	        var _this = this;
	        var res = [];
	        _.each(results.results, function (result) {
	            var resultElement = _this.buildResult(result);
	            if (resultElement != null) {
	                res.push(resultElement);
	            }
	        });
	        ResultList.resultCurrentlyBeingRendered = null;
	        return res;
	    };
	    /**
	     * Builds and returns an HTMLElement for the given result.
	     * @param result the result to build an HTMLElement from.
	     * @returns {HTMLElement}
	     */
	    ResultList.prototype.buildResult = function (result) {
	        Assert_1.Assert.exists(result);
	        QueryUtils_1.QueryUtils.setStateObjectOnQueryResult(this.queryStateModel.get(), result);
	        QueryUtils_1.QueryUtils.setSearchInterfaceObjectOnQueryResult(this.searchInterface, result);
	        ResultList.resultCurrentlyBeingRendered = result;
	        var resultElement = this.options.resultTemplate.instantiateToElement(result, {
	            wrapInDiv: true,
	            checkCondition: true,
	            currentLayout: this.options.layout,
	            responsiveComponents: this.searchInterface.responsiveComponents
	        });
	        if (resultElement != null) {
	            Component_1.Component.bindResultToElement(resultElement, result);
	            Dom_1.$$(resultElement).addClass('');
	        }
	        this.autoCreateComponentsInsideResult(resultElement, result);
	        return resultElement;
	    };
	    /**
	     * Executes a query to fetch new results. After the query returns, renders the new results.
	     *
	     * Asserts that there are more results to display by verifying whether the last query has returned as many results as
	     * requested.
	     *
	     * Asserts that the ResultList is not currently fetching results.
	     * @param count The number of results to fetch and display.
	     */
	    ResultList.prototype.displayMoreResults = function (count) {
	        var _this = this;
	        Assert_1.Assert.isLargerOrEqualsThan(1, count);
	        if (this.isCurrentlyFetchingMoreResults()) {
	            this.logger.warn('Ignoring request to display more results since we\'re already doing so');
	            return;
	        }
	        if (!this.hasPotentiallyMoreResultsToDisplay()) {
	            this.logger.warn('Ignoring request to display more results since we know there aren\'t more to display');
	            return;
	        }
	        if (this.options.enableInfiniteScrollWaitingAnimation) {
	            this.showWaitingAnimationForInfiniteScrolling();
	        }
	        this.fetchingMoreResults = this.queryController.fetchMore(count);
	        this.fetchingMoreResults.then(function (data) {
	            Assert_1.Assert.exists(data);
	            _this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.pagerScrolling, {}, _this.element);
	            var results = data.results;
	            _this.reachedTheEndOfResults = count > data.results.length;
	            _this.renderResults(_this.buildResults(data), true);
	            _.each(results, function (result) {
	                _this.currentlyDisplayedResults.push(result);
	            });
	            _this.triggerNewResultsDisplayed();
	        });
	        this.fetchingMoreResults.then(function () {
	            _this.hideWaitingAnimationForInfiniteScrolling();
	            _this.fetchingMoreResults = undefined;
	            Defer_1.Defer.defer(function () {
	                _this.successiveScrollCount++;
	                if (_this.successiveScrollCount <= ResultList.MAX_AMOUNT_OF_SUCESSIVE_REQUESTS) {
	                    _this.handleScrollOfResultList();
	                }
	                else {
	                    _this.logger.info("Result list has triggered 5 consecutive queries to try and fill up the scrolling container, but it is still unable to do so");
	                    _this.logger.info("Try explicitly setting the 'data-infinite-scroll-container-selector' option on the result list. See : https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer");
	                }
	            });
	        });
	    };
	    /**
	     * Gets the list of currently displayed result.
	     * @returns {IQueryResult[]}
	     */
	    ResultList.prototype.getDisplayedResults = function () {
	        return this.currentlyDisplayedResults;
	    };
	    /**
	     * Gets the list of currently displayed result HTMLElement.
	     * @returns {HTMLElement[]}
	     */
	    ResultList.prototype.getDisplayedResultsElements = function () {
	        return Dom_1.$$(this.options.resultContainer).findAll('.CoveoResult');
	    };
	    ResultList.prototype.enable = function () {
	        _super.prototype.enable.call(this);
	        Dom_1.$$(this.element).removeClass('coveo-hidden');
	    };
	    ResultList.prototype.disable = function () {
	        _super.prototype.disable.call(this);
	        Dom_1.$$(this.element).addClass('coveo-hidden');
	    };
	    ResultList.prototype.autoCreateComponentsInsideResult = function (element, result) {
	        Assert_1.Assert.exists(element);
	        var initOptions = this.searchInterface.options.originalOptionsObject;
	        var resultComponentBindings = _.extend({}, this.getBindings(), {
	            resultElement: element
	        });
	        var initParameters = {
	            options: initOptions,
	            bindings: resultComponentBindings,
	            result: result
	        };
	        Initialization_1.Initialization.automaticallyCreateComponentsInside(element, initParameters);
	    };
	    ResultList.prototype.triggerNewResultDisplayed = function (result, resultElement) {
	        var args = {
	            result: result,
	            item: resultElement
	        };
	        Dom_1.$$(this.element).trigger(ResultListEvents_1.ResultListEvents.newResultDisplayed, args);
	    };
	    ResultList.prototype.triggerNewResultsDisplayed = function () {
	        Dom_1.$$(this.element).trigger(ResultListEvents_1.ResultListEvents.newResultsDisplayed, {});
	    };
	    ResultList.prototype.handleDuringQuery = function () {
	        this.logger.trace('Emptying the result container');
	        this.cancelFetchingMoreResultsIfNeeded();
	        this.showWaitingAnimation();
	        this.showOrHideElementsDependingOnState(false, false);
	    };
	    ResultList.prototype.handleQueryError = function () {
	        this.hideWaitingAnimation();
	        Dom_1.$$(this.options.resultContainer).empty();
	        this.currentlyDisplayedResults = [];
	    };
	    ResultList.prototype.handleQuerySuccess = function (data) {
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.results);
	        var results = data.results;
	        this.logger.trace('Received query results from new query', results);
	        this.hideWaitingAnimation();
	        ResultList.resultCurrentlyBeingRendered = undefined;
	        this.currentlyDisplayedResults = [];
	        this.renderResults(this.buildResults(data.results));
	        this.currentlyDisplayedResults = results.results;
	        this.reachedTheEndOfResults = false;
	        this.showOrHideElementsDependingOnState(true, this.currentlyDisplayedResults.length != 0);
	        if (DeviceUtils_1.DeviceUtils.isMobileDevice() && this.options.mobileScrollContainer != undefined) {
	            this.options.mobileScrollContainer.scrollTop = 0;
	        }
	        if (this.options.enableInfiniteScroll && results.results.length == data.queryBuilder.numberOfResults) {
	            // This will check right away if we need to add more results to make the scroll container full & scrolling.
	            this.scrollBackToTop();
	            this.handleScrollOfResultList();
	        }
	    };
	    ResultList.prototype.handleScrollOfResultList = function () {
	        if (this.isCurrentlyFetchingMoreResults() || !this.options.enableInfiniteScroll) {
	            return;
	        }
	        if (this.isScrollingOfResultListAlmostAtTheBottom() && this.hasPotentiallyMoreResultsToDisplay()) {
	            this.displayMoreResults(this.options.infiniteScrollPageSize);
	        }
	    };
	    ResultList.prototype.handlePageChanged = function () {
	        var _this = this;
	        this.bind.onRootElement(QueryEvents_1.QueryEvents.deferredQuerySuccess, function () {
	            setTimeout(function () {
	                _this.scrollBackToTop();
	            }, 0);
	        });
	    };
	    ResultList.prototype.scrollBackToTop = function () {
	        if (this.options.infiniteScrollContainer instanceof Window) {
	            var win = this.options.infiniteScrollContainer;
	            win.scrollTo(0, 0);
	        }
	        else {
	            var el = this.options.infiniteScrollContainer;
	            el.scrollTop = 0;
	        }
	    };
	    ResultList.prototype.handleNewQuery = function () {
	        Dom_1.$$(this.element).removeClass('coveo-hidden');
	        ResultList.resultCurrentlyBeingRendered = undefined;
	    };
	    ResultList.prototype.handleBuildingQuery = function (args) {
	        var _this = this;
	        if (this.options.fieldsToInclude != null) {
	            // remove the @
	            args.queryBuilder.addFieldsToInclude(_.map(this.options.fieldsToInclude, function (field) { return field.substr(1); }));
	        }
	        if (this.options.autoSelectFieldsToInclude) {
	            var otherResultListsElements = _.reject(Dom_1.$$(this.root).findAll("." + Component_1.Component.computeCssClassName(ResultList)), function (resultListElement) { return resultListElement == _this.element; });
	            var otherFields = _.flatten(_.map(otherResultListsElements, function (otherResultListElement) {
	                return RegisteredNamedMethods_1.get(otherResultListElement).getAutoSelectedFieldsToInclude();
	            }));
	            args.queryBuilder.addRequiredFields(_.unique(otherFields.concat(this.getAutoSelectedFieldsToInclude())));
	            args.queryBuilder.includeRequiredFields = true;
	        }
	    };
	    ResultList.prototype.handleChangeLayout = function (args) {
	        var _this = this;
	        if (args.layout === this.options.layout) {
	            this.enable();
	            this.options.resultTemplate.layout = this.options.layout;
	            if (args.results) {
	                Defer_1.Defer.defer(function () {
	                    _this.renderResults(_this.buildResults(args.results));
	                });
	            }
	        }
	        else {
	            this.disable();
	        }
	    };
	    ResultList.prototype.isCurrentlyFetchingMoreResults = function () {
	        return Utils_1.Utils.exists(this.fetchingMoreResults);
	    };
	    ResultList.prototype.getMinimalFieldsToInclude = function () {
	        // these fields are needed for analytics click event
	        return ['author', 'language', 'urihash', 'objecttype', 'collection', 'source', 'language', 'permanentid'];
	    };
	    ResultList.prototype.isScrollingOfResultListAlmostAtTheBottom = function () {
	        // this is in a try catch because the unit test fail otherwise (Window does not exist for phantom js in the console)
	        var isWindow;
	        try {
	            isWindow = this.options.infiniteScrollContainer instanceof Window;
	        }
	        catch (e) {
	            isWindow = false;
	        }
	        return isWindow ? this.isScrollAtBottomForWindowElement() : this.isScrollAtBottomForHtmlElement();
	    };
	    ResultList.prototype.isScrollAtBottomForWindowElement = function () {
	        var win = new Dom_1.Win(window);
	        var windowHeight = win.height();
	        var scrollTop = win.scrollY();
	        var bodyHeight = new Dom_1.Doc(document).height();
	        return bodyHeight - (windowHeight + scrollTop) < windowHeight / 2;
	    };
	    ResultList.prototype.isScrollAtBottomForHtmlElement = function () {
	        var el = this.options.infiniteScrollContainer;
	        var elementHeight = el.clientHeight;
	        var scrollHeight = el.scrollHeight;
	        var bottomPosition = el.scrollTop + elementHeight;
	        return (scrollHeight - bottomPosition) < elementHeight / 2;
	    };
	    ResultList.prototype.hasPotentiallyMoreResultsToDisplay = function () {
	        return this.currentlyDisplayedResults.length > 0 && !this.reachedTheEndOfResults;
	    };
	    ResultList.prototype.cancelFetchingMoreResultsIfNeeded = function () {
	        if (this.isCurrentlyFetchingMoreResults()) {
	            this.logger.trace('Cancelling fetching more results');
	            Promise.reject(this.fetchingMoreResults);
	            this.fetchingMoreResults = undefined;
	        }
	    };
	    ResultList.prototype.showOrHideElementsDependingOnState = function (hasQuery, hasResults) {
	        var showIfQuery = Dom_1.$$(this.element).findAll('.coveo-show-if-query');
	        var showIfNoQuery = Dom_1.$$(this.element).findAll('.coveo-show-if-no-query');
	        var showIfResults = Dom_1.$$(this.element).findAll('.coveo-show-if-results');
	        var showIfNoResults = Dom_1.$$(this.element).findAll('.coveo-show-if-no-results');
	        _.each(showIfQuery, function (s) {
	            Dom_1.$$(s).toggle(hasQuery);
	        });
	        _.each(showIfNoQuery, function (s) {
	            Dom_1.$$(s).toggle(!hasQuery);
	        });
	        _.each(showIfResults, function (s) {
	            Dom_1.$$(s).toggle(hasQuery && hasResults);
	        });
	        _.each(showIfNoResults, function (s) {
	            Dom_1.$$(s).toggle(hasQuery && !hasResults);
	        });
	    };
	    ResultList.prototype.showWaitingAnimation = function () {
	        switch (this.options.waitAnimation.toLowerCase()) {
	            case 'fade':
	                Dom_1.$$(this.options.waitAnimationContainer).addClass('coveo-fade-out');
	                break;
	            case 'spinner':
	                _.each(this.options.resultContainer.children, function (child) {
	                    Dom_1.$$(child).hide();
	                });
	                if (Dom_1.$$(this.options.waitAnimationContainer).find('.coveo-wait-animation') == undefined) {
	                    this.options.waitAnimationContainer.appendChild(DomUtils_1.DomUtils.getBasicLoadingAnimation());
	                }
	                break;
	        }
	    };
	    ResultList.prototype.hideWaitingAnimation = function () {
	        switch (this.options.waitAnimation.toLowerCase()) {
	            case 'fade':
	                Dom_1.$$(this.options.waitAnimationContainer).removeClass('coveo-fade-out');
	                break;
	            case 'spinner':
	                var spinner = Dom_1.$$(this.options.waitAnimationContainer).find('.coveo-loading-spinner');
	                if (spinner) {
	                    Dom_1.$$(spinner).detach();
	                }
	                break;
	        }
	    };
	    ResultList.prototype.showWaitingAnimationForInfiniteScrolling = function () {
	        var spinner = DomUtils_1.DomUtils.getLoadingSpinner();
	        if (this.options.layout == 'card' && this.options.enableInfiniteScroll) {
	            var spinnerContainer = Dom_1.$$('div', {
	                className: 'coveo-loading-spinner-container'
	            });
	            spinnerContainer.append(spinner);
	            this.options.waitAnimationContainer.appendChild(spinnerContainer.el);
	        }
	        else {
	            this.options.waitAnimationContainer.appendChild(DomUtils_1.DomUtils.getLoadingSpinner());
	        }
	    };
	    ResultList.prototype.hideWaitingAnimationForInfiniteScrolling = function () {
	        var spinner = Dom_1.$$(this.options.waitAnimationContainer).find('.coveo-loading-spinner');
	        if (spinner) {
	            Dom_1.$$(spinner).detach();
	        }
	    };
	    return ResultList;
	}(Component_1.Component));
	ResultList.ID = 'ResultList';
	/**
	 * The options for the ResultList
	 * @componentOptions
	 */
	ResultList.options = {
	    /**
	     * Specifies the element within which to insert the rendered templates for results.
	     *
	     * Performing a new query clears the content of this element.
	     *
	     * You can change the container by specifying its selector (e.g.,
	     * `data-result-container-selector='#someCssSelector'`).
	     *
	     * If you specify no value for this option, a `div` element will be dynamically created and appended to the result
	     * list. This element will then be used as a result container.
	     */
	    resultContainer: ComponentOptions_1.ComponentOptions.buildChildHtmlElementOption({
	        defaultFunction: function (element) {
	            var d = document.createElement('div');
	            element.appendChild(d);
	            return d;
	        }
	    }),
	    resultTemplate: ComponentOptions_1.ComponentOptions.buildTemplateOption({ defaultFunction: ResultList.getDefaultTemplate }),
	    /**
	     * Specifies the type of animation to display while waiting for a query to return.
	     *
	     * The possible values are:
	     * - `fade`: Fades out the current list of results while the query is executing.
	     * - `spinner`: Shows a spinning animation while the query is executing.
	     * - `none`: Use no animation during queries.
	     *
	     * See also {@link ResultList.options.waitAnimationContainer}.
	     *
	     * Default value is `none`.
	     */
	    waitAnimation: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'none' }),
	    /**
	     * Specifies the element inside which to display the {@link ResultList.options.waitAnimation}.
	     *
	     * You can change this by specifying a CSS selector (e.g.,
	     * `data-wait-animation-container-selector='#someCssSelector'`).
	     *
	     * Default value is the value of {@link ResultList.options.resultContainer}.
	     */
	    waitAnimationContainer: ComponentOptions_1.ComponentOptions.buildChildHtmlElementOption({ postProcessing: function (value, options) { return value || options.resultContainer; } }),
	    /**
	     * Specifies whether to automatically retrieve an additional page of results and append it to the
	     * results that the ResultList is currently displaying when the user scrolls down to the bottom of the infinite
	     * scroll container.
	     *
	     * See also {@link ResultList.options.infiniteScrollPageSize}, {@link ResultList.options.infiniteScrollContainer}
	     * and {@link ResultList.options.enableInfiniteScrollWaitingAnimation}.
	     *
	     * It is important to specify the {@link ResultList.options.infiniteScrollContainer} manually if you want the scrolling
	     * element to be something else than the default `window` element.
	     * Otherwise, you might get in a weird state where the framework will rapidly trigger multiple successive query.
	     *
	     * Default value is `false`.
	     */
	    enableInfiniteScroll: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * If {@link ResultList.options.enableInfiniteScroll} is `true`, specifies the number of additional results to fetch
	     * when the user scrolls down to the bottom of the {@link ResultList.options.infiniteScrollContainer}.
	     *
	     * Default value is `10`. Minimum value is `1`.
	     */
	    infiniteScrollPageSize: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 10, min: 1, depend: 'enableInfiniteScroll' }),
	    /**
	     * If {@link ResultList.options.enableInfiniteScroll} is `true`, specifies the element that triggers the fetching of
	     * additional results when the end user scrolls down to its bottom.
	     *
	     * You can change the container by specifying its selector (e.g.,
	     * `data-infinite-scroll-container-selector='#someCssSelector'`).
	     *
	     * By default, the framework uses the first vertically scrollable parent element it finds, starting from the
	     * ResultList element itself. A vertically scrollable element is an element whose CSS `overflow-y` attribute is
	     * `scroll`.
	     *
	     * This implies that if the framework can find no scrollable parent, it uses the window itself as a scrollable
	     * container.
	     *
	     * This heuristic is not perfect, for technical reasons. There are always some corner case CSS combination which the framework will
	     * not be able to detect correctly as 'scrollable'.
	     *
	     * It is highly recommended that you manually set this option if you wish to have something else than `window` be the scrollable element.
	     */
	    infiniteScrollContainer: ComponentOptions_1.ComponentOptions.buildChildHtmlElementOption({ depend: 'enableInfiniteScroll', defaultFunction: function (element) { return ComponentOptions_1.ComponentOptions.findParentScrolling(element); } }),
	    /**
	     * If {@link ResultList.options.enableInfiniteScroll} is `true`, specifies whether to display the
	     * {@link ResultList.options.waitAnimation} while fetching additional results.
	     *
	     * Default value is `true`.
	     */
	    enableInfiniteScrollWaitingAnimation: ComponentOptions_1.ComponentOptions.buildBooleanOption({ depend: 'enableInfiniteScroll', defaultValue: true }),
	    mobileScrollContainer: ComponentOptions_1.ComponentOptions.buildSelectorOption({ defaultFunction: function () { return document.querySelector('.coveo-results-column'); } }),
	    /**
	     * Specifies a list of fields to include in the query.
	     *
	     * Specifying a list of values for this option ensures that the Search API does not send fields that are unnecessary
	     * for the UI to function.
	     *
	     * See also {@link ResultList.options.autoSelectFieldsToInclude}.
	     *
	     * Default value is `undefined`.
	     */
	    fieldsToInclude: ComponentOptions_1.ComponentOptions.buildFieldsOption({ includeInResults: true }),
	    /**
	     * Specifies whether the ResultList should scan its template and discover which fields it needs to render all
	     * results.
	     *
	     * Setting this option to `true` ensures that the Search API does not send fields that are unnecessary for the UI to
	     * function.
	     *
	     * See also {@link ResultList.options.fieldsToInclude}.
	     *
	     * Default value is `false`.
	     *
	     * **Note:**
	     * > Many interfaces created with the Interface Editor explicitly set this option to `true`.
	     */
	    autoSelectFieldsToInclude: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies the layout to use for displaying the results within this ResultList. Specifying a value for this option
	     * automatically populates a {@link ResultLayout} component with a switcher for the layout.
	     *
	     * For example, if there are two {@link ResultList} components in the page, one with its
	     * {@link ResultList.options.layout} set to `list` and the other with the same option set to `card`, then the
	     * ResultLayout component will render two buttons respectively titled **List** and **Card**.
	     *
	     * See the {@link ValidLayout} type for the list of possible values.
	     *
	     * Default value is `list`.
	     */
	    layout: ComponentOptions_1.ComponentOptions.buildStringOption({
	        defaultValue: 'list',
	        required: true,
	    })
	};
	ResultList.resultCurrentlyBeingRendered = null;
	ResultList.MAX_AMOUNT_OF_SUCESSIVE_REQUESTS = 5;
	exports.ResultList = ResultList;
	Initialization_1.Initialization.registerAutoCreateComponent(ResultList);


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Template_1 = __webpack_require__(111);
	var DefaultRecommendationTemplate = (function (_super) {
	    __extends(DefaultRecommendationTemplate, _super);
	    function DefaultRecommendationTemplate() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DefaultRecommendationTemplate.prototype.instantiateToString = function (object) {
	        var template = "<div class=\"coveo-result-frame\">\n        <div class=\"coveo-result-row\">\n          <div class=\"coveo-result-cell\" style=\"width:40px;text-align:center;vertical-align:middle;\">\n            <span class=\"CoveoIcon\" data-small=\"true\">\n            </span>\n          </div>\n          <div class=\"coveo-result-cell\" style=\"padding:0 0 3px 5px;vertical-align:middle\">\n            <div class=\"coveo-result-row\">\n              <div class=\"coveo-result-cell\" style=\"font-size:10pt;\">\n                <a class=\"CoveoResultLink\" style=\"display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis\">\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>";
	        return template;
	    };
	    DefaultRecommendationTemplate.prototype.instantiateToElement = function (object) {
	        var div = document.createElement('div');
	        div.innerHTML = this.instantiateToString(object);
	        return div;
	    };
	    return DefaultRecommendationTemplate;
	}(Template_1.Template));
	exports.DefaultRecommendationTemplate = DefaultRecommendationTemplate;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ResponsiveComponentsManager_1 = __webpack_require__(136);
	var SearchInterface_1 = __webpack_require__(108);
	var ResultList_1 = __webpack_require__(182);
	var Dom_1 = __webpack_require__(59);
	var Component_1 = __webpack_require__(107);
	var Logger_1 = __webpack_require__(11);
	var ResponsiveDefaultResultTemplate = (function () {
	    function ResponsiveDefaultResultTemplate(coveoRoot, ID, options, responsiveDropdown) {
	        this.coveoRoot = coveoRoot;
	        this.ID = ID;
	        this.searchInterface = Component_1.Component.get(this.coveoRoot.el, SearchInterface_1.SearchInterface, false);
	        this.currentMode = 'large';
	    }
	    ResponsiveDefaultResultTemplate.init = function (root, component, options) {
	        if (!Dom_1.$$(root).find("." + Component_1.Component.computeCssClassName(ResultList_1.ResultList))) {
	            var logger = new Logger_1.Logger('ResponsiveDefaultResultTemplate');
	            logger.trace('No ResultLayout component found : Cannot instantiate ResponsiveResultLayout');
	            return;
	        }
	        ResponsiveComponentsManager_1.ResponsiveComponentsManager.register(ResponsiveDefaultResultTemplate, Dom_1.$$(root), ResultList_1.ResultList.ID, component, options);
	    };
	    ResponsiveDefaultResultTemplate.prototype.registerComponent = function (accept) {
	        if (accept instanceof ResultList_1.ResultList) {
	            this.resultList = accept;
	            return true;
	        }
	        return false;
	    };
	    ResponsiveDefaultResultTemplate.prototype.handleResizeEvent = function () {
	        var lastResults = this.resultList.queryController.getLastResults();
	        if (this.needSmallMode()) {
	            Dom_1.$$(this.resultList.options.resultContainer).addClass('coveo-card-layout-container');
	            Dom_1.$$(this.resultList.options.resultContainer).removeClass("coveo-list-layout-container");
	            if (this.currentMode != 'small') {
	                if (lastResults) {
	                    this.resultList.renderResults(this.resultList.buildResults(lastResults));
	                }
	                this.currentMode = 'small';
	            }
	        }
	        else {
	            Dom_1.$$(this.resultList.options.resultContainer).removeClass('coveo-card-layout-container');
	            Dom_1.$$(this.resultList.options.resultContainer).addClass("coveo-list-layout-container");
	            if (this.currentMode != 'large') {
	                if (lastResults) {
	                    this.resultList.renderResults(this.resultList.buildResults(lastResults));
	                }
	                this.currentMode = 'large';
	            }
	        }
	    };
	    ResponsiveDefaultResultTemplate.prototype.needSmallMode = function () {
	        return this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getSmallScreenWidth();
	    };
	    return ResponsiveDefaultResultTemplate;
	}());
	exports.ResponsiveDefaultResultTemplate = ResponsiveDefaultResultTemplate;


/***/ }),
/* 185 */,
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Initialization_1 = __webpack_require__(106);
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var QueryEvents_1 = __webpack_require__(48);
	var Model_1 = __webpack_require__(98);
	var QueryStateModel_1 = __webpack_require__(101);
	var StandaloneSearchInterfaceEvents_1 = __webpack_require__(54);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Dom_1 = __webpack_require__(59);
	var Assert_1 = __webpack_require__(12);
	var QueryboxQueryParameters_1 = __webpack_require__(187);
	/**
	 * The Querybox component renders an input that the end user can interact with to enter and submit a query.
	 *
	 * When the user submits a query by hitting the **Enter** key, the Querybox component triggers a query and logs the
	 * corresponding usage analytics data.
	 *
	 * For technical reasons, it is necessary to instantiate this component on a `div` element rather than directly on an
	 * `input` element (i.e., `<div class='CoveoQuerybox'></div>` will work, but `<input class='CoveoQuerybox'></input>`
	 * will not).
	 *
	 * See also the {@link Searchbox} component, which can automatically instantiate a Querybox component along with an
	 * optional {@link SearchButton} component.
	 */
	var Querybox = (function (_super) {
	    __extends(Querybox, _super);
	    /**
	     * Creates a new Querybox. Creates a new `Coveo.Magicbox` instance and wraps the Magicbox methods (`onblur`,
	     * `onsubmit` etc.). Binds event on `buildingQuery` and on redirection (for standalone box).
	     * @param element The HTMLElement on which to instantiate the component. This cannot be an HTMLInputElement for
	     * technical reasons.
	     * @param options The options for the ResultLayout component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function Querybox(element, options, bindings) {
	        var _this = _super.call(this, element, Querybox.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.bindings = bindings;
	        if (element instanceof HTMLInputElement) {
	            _this.logger.error('Querybox cannot be used on an HTMLInputElement');
	        }
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Querybox, options);
	        _this.magicBox = Coveo.MagicBox.create(element, new Coveo.MagicBox.Grammar('Query', {
	            Query: '[Term*][Spaces?]',
	            Term: '[Spaces?][Word]',
	            Spaces: / +/,
	            Word: /[^ ]+/
	        }), {
	            inline: true
	        });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        _this.bind.onRootElement(StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents.beforeRedirect, function () { return _this.updateQueryState(); });
	        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.Q, function (args) { return _this.handleQueryStateChanged(args); });
	        if (_this.options.enableSearchAsYouType) {
	            Dom_1.$$(_this.element).addClass('coveo-search-as-you-type');
	            _this.magicBox.onchange = function () {
	                _this.searchAsYouType();
	            };
	        }
	        _this.magicBox.onsubmit = function () {
	            _this.submit();
	        };
	        _this.magicBox.onblur = function () {
	            _this.updateQueryState();
	        };
	        _this.magicBox.onclear = function () {
	            _this.updateQueryState();
	            if (_this.options.triggerQueryOnClear) {
	                _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxClear, {});
	                _this.triggerNewQuery(false);
	            }
	        };
	        if (_this.options.autoFocus) {
	            _this.magicBox.focus();
	        }
	        return _this;
	    }
	    /**
	     * Adds the current content of the input to the query and triggers a query if the current content of the input has
	     * changed since last submit.
	     *
	     * Also logs the `serachboxSubmit` event in the usage analytics.
	     */
	    Querybox.prototype.submit = function () {
	        this.magicBox.clearSuggestion();
	        this.updateQueryState();
	        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});
	        this.triggerNewQuery(false);
	    };
	    /**
	     * Sets the content of the input.
	     *
	     * @param text The string to set in the input.
	     */
	    Querybox.prototype.setText = function (text) {
	        this.magicBox.setText(text);
	        this.updateQueryState();
	    };
	    /**
	     * Clears the content of the input.
	     */
	    Querybox.prototype.clear = function () {
	        this.magicBox.clear();
	    };
	    /**
	     * Gets the content of the input.
	     *
	     * @returns {string} The content of the input.
	     */
	    Querybox.prototype.getText = function () {
	        return this.magicBox.getText();
	    };
	    /**
	     * Gets the result from the input.
	     *
	     * @returns {Result} The result.
	     */
	    Querybox.prototype.getResult = function () {
	        return this.magicBox.getResult();
	    };
	    /**
	     * Gets the displayed result from the input.
	     *
	     * @returns {Result} The displayed result.
	     */
	    Querybox.prototype.getDisplayedResult = function () {
	        return this.magicBox.getDisplayedResult();
	    };
	    /**
	     * Gets the current cursor position in the input.
	     *
	     * @returns {number} The cursor position (index starts at 0).
	     */
	    Querybox.prototype.getCursor = function () {
	        return this.magicBox.getCursor();
	    };
	    /**
	     * Gets the result at cursor position.
	     *
	     * @param match {string | { (result): boolean }} The match condition.
	     *
	     * @returns {Result[]} The result.
	     */
	    Querybox.prototype.resultAtCursor = function (match) {
	        return this.magicBox.resultAtCursor(match);
	    };
	    Querybox.prototype.handleBuildingQuery = function (args) {
	        Assert_1.Assert.exists(args);
	        Assert_1.Assert.exists(args.queryBuilder);
	        this.updateQueryState();
	        this.lastQuery = this.magicBox.getText();
	        new QueryboxQueryParameters_1.QueryboxQueryParameters(this.options).addParameters(args.queryBuilder, this.lastQuery);
	    };
	    Querybox.prototype.triggerNewQuery = function (searchAsYouType) {
	        clearTimeout(this.searchAsYouTypeTimeout);
	        var text = this.magicBox.getText();
	        if (this.lastQuery != text && text != null) {
	            this.lastQuery = text;
	            this.queryController.executeQuery({
	                searchAsYouType: searchAsYouType,
	                logInActionsHistory: true
	            });
	        }
	    };
	    Querybox.prototype.updateQueryState = function () {
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, this.magicBox.getText());
	    };
	    Querybox.prototype.handleQueryStateChanged = function (args) {
	        Assert_1.Assert.exists(args);
	        var q = args.value;
	        if (q != this.magicBox.getText()) {
	            this.magicBox.setText(q);
	        }
	    };
	    Querybox.prototype.searchAsYouType = function () {
	        var _this = this;
	        clearTimeout(this.searchAsYouTypeTimeout);
	        this.searchAsYouTypeTimeout = setTimeout(function () {
	            _this.usageAnalytics.logSearchAsYouType(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxAsYouType, {});
	            _this.triggerNewQuery(true);
	        }, this.options.searchAsYouTypeDelay);
	    };
	    return Querybox;
	}(Component_1.Component));
	Querybox.ID = 'Querybox';
	/**
	 * The options for the Querybox.
	 * @componentOptions
	 */
	Querybox.options = {
	    /**
	     * Specifies whether to enable the search-as-you-type feature.
	     *
	     * Default value is `false`.
	     */
	    enableSearchAsYouType: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * If {@link Querybox.options.enableSearchAsYouType} is `true`, specifies the delay (in milliseconds) between a
	     * key press and a query being triggered.
	     *
	     * Default value is `500`. Minimum value is `0`
	     */
	    searchAsYouTypeDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 500, min: 0 }),
	    /**
	     * Specifies whether the Coveo Platform should try to interpret special query syntax such as field references in the
	     * query that the user enters in the Querybox (see
	     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).
	     *
	     * Setting this option to `true` also causes the query syntax in the Querybox to highlight.
	     *
	     * Default value is `true`.
	     */
	    enableQuerySyntax: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether the Coveo Platform should expand keywords containing wildcard characters (`*`) to the possible
	     * matching keywords in order to broaden the query (see
	     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).
	     *
	     * Default value is `false`.
	     */
	    enableWildcards: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether the Coveo Platform should expand keywords containing question mark characters (`?`) to the
	     * possible matching keywords in order to broaden the query (see
	     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).
	     *
	     * Default value is `false`.
	     */
	    enableQuestionMarks: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * If {@link Querybox.options.enableQuerySyntax} is `true`, specifies whether to treat the `AND`, `NOT`, `OR` and
	     * `NEAR` keywords in the Querybox as query operators in the query even when the end user types them in lowercase.
	     * This option applies to all query operators (see
	     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).
	     *
	     * Default value is `false`.
	     *
	     * **Example:**
	     * > If this option and the enableQuerySyntax option are both `true`, then the Coveo Platform interprets the `near`
	     * > keyword in a query such as `service center near me` as a query operator (not as a query term).
	     *
	     * > Otherwise, if the enableQuerySyntax option is `true` and this option is `false`, the end user has to type the
	     * > `NEAR` keyword in uppercase in order for the Coveo Platform to interpret it as a query operator.
	     */
	    enableLowercaseOperators: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether to automatically convert a basic expression containing at least a certain number of keywords
	     * (see {@link Querybox.options.partialMatchKeywords}) to a partial match expression, so that documents containing
	     * at least a certain subset of those keywords (see {@link Querybox.options.partialMatchThreshold}) will match the
	     * query.
	     *
	     * Default value is `false`.
	     *
	     * **Example:**
	     *
	     * With the following markup configuration, if a basic expression contains at least 4 keywords, then documents
	     * containing at least 75% of those keywords (round up) will match the query.
	     *
	     * For instance, if the basic expression is `Coveo custom component configuration help`, then documents containing
	     * all 5 of those keywords, or 4 of them (75% of 5 rounded up) will match the query.
	     *
	     * ```html
	     * <div class='CoveoQuerybox' data-enable-partial-match='true' data-partial-match-keywords='4' data-partial-match-threshold='75%'></div>
	     * ```
	     */
	    enablePartialMatch: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * When {@link Querybox.options.enablePartialMatch} is `true`, specifies the minimum number of keywords that need to
	     * be present in the basic expression to convert this expression to a partial match expression.
	     *
	     * See also {@link Querybox.options.partialMatchThreshold}.
	     *
	     * Default value is `5`.
	     *
	     * **Note:**
	     * > Only the basic expression of the query (see {@link q}) can be converted to a partial match expression.
	     *
	     * **Example:**
	     * > If the partialMatchKeywords option is `7`, the basic expression will have to contain at least 7 keywords
	     * > to be converted to a partial match expression.
	     */
	    partialMatchKeywords: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),
	    /**
	     * When {@link Querybox.options.enablePartialMatch} is `true`, specifies an absolute or relative (percentage) value
	     * indicating the minimum number of partial match expression keywords a document must contain in order to match the
	     * query.
	     *
	     * See also {@link Querybox.options.partialMatchKeywords}.
	     *
	     * Default value is `50%`.
	     *
	     * **Note:**
	     * > The relative threshold is always rounded up to the nearest integer.
	     *
	     * **Examples:**
	     * > If the partialMatchThreshold option is `50%` and the partial match expression contains exactly 9 keywords, then
	     * > documents will have to contain at least 5 of those keywords to match the query (50% of 9, rounded up).
	     *
	     * > With the same configuration, if the partial match expression contains exactly 12 keywords, then documents will
	     * > have to contain at least 6 of those keywords to match the query (50% of 12).
	     *
	     * > If the partialMatchThreshold option is `2`, then documents will always have to contain at least 2 of the
	     * > partial match expression keywords to match the query, no matter how many keywords the partial match expression
	     * > actually contains.
	     */
	    partialMatchThreshold: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '50%' }),
	    /**
	     * Specifies whether to trigger a query when the Querybox is cleared.
	     *
	     * Default value is `true`.
	     */
	    triggerQueryOnClear: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether the Querybox should get auto focus and selection upon initialization.
	     *
	     * Default value is `true`.
	     */
	    autoFocus: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true })
	};
	exports.Querybox = Querybox;
	Initialization_1.Initialization.registerAutoCreateComponent(Querybox);


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	var QueryboxQueryParameters = (function () {
	    function QueryboxQueryParameters(options) {
	        this.options = options;
	    }
	    QueryboxQueryParameters.prototype.addParameters = function (queryBuilder, lastQuery) {
	        if (this.options.enableWildcards) {
	            queryBuilder.enableWildcards = true;
	        }
	        if (this.options.enableQuestionMarks) {
	            queryBuilder.enableQuestionMarks = true;
	        }
	        if (this.options.enableLowercaseOperators) {
	            queryBuilder.enableLowercaseOperators = true;
	        }
	        if (!_.isEmpty(lastQuery)) {
	            queryBuilder.disableQuerySyntax = !this.options.enableQuerySyntax;
	            queryBuilder.expression.add(lastQuery);
	            if (this.options.enablePartialMatch) {
	                queryBuilder.enablePartialMatch = this.options.enablePartialMatch;
	                if (this.options.partialMatchKeywords) {
	                    queryBuilder.partialMatchKeywords = this.options.partialMatchKeywords;
	                }
	                if (this.options.partialMatchThreshold) {
	                    queryBuilder.partialMatchThreshold = this.options.partialMatchThreshold;
	                }
	            }
	        }
	    };
	    return QueryboxQueryParameters;
	}());
	exports.QueryboxQueryParameters = QueryboxQueryParameters;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var Utils_1 = __webpack_require__(13);
	var Dom_1 = __webpack_require__(59);
	var Strings_1 = __webpack_require__(35);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Initialization_1 = __webpack_require__(106);
	/**
	 * The SearchButton component renders a search icon that the end user can click to trigger a new query.
	 *
	 * See also the {@link Searchbox} component, which can automatically instantiate a SearchButton component along with a
	 * {@link Querybox} component or an {@link Omnibox} component.
	 */
	var SearchButton = (function (_super) {
	    __extends(SearchButton, _super);
	    /**
	     * Creates a new SearchButton. Binds a `click` event on the element. Adds a search icon on the element.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the SearchButton component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function SearchButton(element, options, bindings) {
	        var _this = _super.call(this, element, SearchButton.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.bind.on(element, 'click', function () { return _this.handleClick(); });
	        // Provide a magnifier icon if element contains nothing
	        if (Utils_1.Utils.trim(Dom_1.$$(_this.element).text()) == '') {
	            element.innerHTML = '<span class=\'coveo-icon\'>' + Strings_1.l('Search') + '</span>';
	        }
	        return _this;
	    }
	    /**
	     * Triggers the `click` event handler, which logs a `searchboxSubmit` event in the usage analytics and executes a
	     * query.
	     */
	    SearchButton.prototype.click = function () {
	        this.handleClick();
	    };
	    SearchButton.prototype.handleClick = function () {
	        this.logger.debug('Performing query following button click');
	        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});
	        this.queryController.executeQuery();
	    };
	    return SearchButton;
	}(Component_1.Component));
	SearchButton.ID = 'SearchButton';
	SearchButton.options = {};
	exports.SearchButton = SearchButton;
	Initialization_1.Initialization.registerAutoCreateComponent(SearchButton);


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var Omnibox_1 = __webpack_require__(190);
	var ComponentOptions_1 = __webpack_require__(109);
	var SearchButton_1 = __webpack_require__(188);
	var Querybox_1 = __webpack_require__(186);
	var Dom_1 = __webpack_require__(59);
	var Initialization_1 = __webpack_require__(106);
	var _ = __webpack_require__(14);
	/**
	 * The Searchbox component can conveniently create two components that are frequently used together to allow the end
	 * user to input and submit queries.
	 *
	 * This component attaches itself to a `div` element and takes care of instantiating either a {@link Querybox} component
	 * or an {@link Omnibox} component, depending on its configuration. Optionally, the Searchbox component can also
	 * instantiate a {@link SearchButton} component and append it inside the same `div`.
	 */
	var Searchbox = (function (_super) {
	    __extends(Searchbox, _super);
	    /**
	     * Creates a new Searchbox. Creates a new Coveo.Magicbox instance and wraps magic box methods (on blur, on submit
	     * etc.). Binds event on `buildingQuery` and on redirection (for standalone box).
	     * @param element The HTMLElement on which to instantiate the component. This cannot be an `HTMLInputElement` for
	     * technical reasons.
	     * @param options The options for the Searchbox component. These will merge with the options from the component set
	     * directly on the `HTMLElement`.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function Searchbox(element, options, bindings) {
	        var _this = _super.call(this, element, Searchbox.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Searchbox, options);
	        if (_this.options.inline) {
	            Dom_1.$$(element).addClass('coveo-inline');
	        }
	        if (_this.options.addSearchButton) {
	            var anchor = document.createElement('a');
	            _this.element.appendChild(anchor);
	            _this.searchButton = new SearchButton_1.SearchButton(anchor, undefined, bindings);
	        }
	        var div = document.createElement('div');
	        _this.element.appendChild(div);
	        if (_this.options.enableOmnibox) {
	            _this.searchbox = new Omnibox_1.Omnibox(div, _this.options, bindings);
	        }
	        else {
	            _this.searchbox = new Querybox_1.Querybox(div, _this.options, bindings);
	        }
	        return _this;
	    }
	    return Searchbox;
	}(Component_1.Component));
	Searchbox.ID = 'Searchbox';
	Searchbox.parent = Omnibox_1.Omnibox;
	/**
	 * Possible options for the {@link Searchbox}
	 * @componentOptions
	 */
	Searchbox.options = {
	    /**
	     * Specifies whether to instantiate a {@link SearchButton} component.
	     *
	     * Default value is `true`.
	     */
	    addSearchButton: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),
	    /**
	     * Specifies whether to instantiate an {@link Omnibox} component.
	     *
	     * When this option is `false`, the Searchbox component instantiates a {@link Querybox} component instead of an
	     * Omnibox component.
	     *
	     * **Note:**
	     * > You can use configuration options specific to the component that the Searchbox instantiates.
	     *
	     * **Examples:**
	     *
	     * In this first case, the Searchbox will instantiate a Querybox component. It is therefore possible to configure
	     * that Querybox instance using any of the Querybox component options such as
	     * {@link Querybox.options.triggerQueryOnClear}.
	     * ```html
	     * <div class='CoveoSearchbox' data-trigger-query-on-clear='true'></div>
	     * ```
	     *
	     * In this second case, the Searchbox will instantiate an Omnibox component. It is therefore possible to configure
	     * that Omnibox instance using any of the Omnibox component options such as {@link Omnibox.options.placeholder}.
	     * Moreover, since the Omnibox component inherits all of the Querybox component options, the
	     * `data-trigger-query-on-clear` option will also work on that Omnibox instance.
	     * ```html
	     * <div class='CoveoSearchbox' data-enableOmnibox='true' data-place-holder='Please enter a query'></div>
	     * ```
	     *
	     * Default value is `false`.
	     */
	    enableOmnibox: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })
	};
	exports.Searchbox = Searchbox;
	Searchbox.options = _.extend({}, Searchbox.options, Omnibox_1.Omnibox.options, Querybox_1.Querybox.options);
	// Only parse omnibox option if omnibox is enabled
	_.each(Searchbox.options, function (value, key) {
	    if (key in Omnibox_1.Omnibox.options && !(key in Querybox_1.Querybox.options)) {
	        Searchbox.options[key] = _.extend({ depend: 'enableOmnibox' }, value);
	    }
	});
	Initialization_1.Initialization.registerAutoCreateComponent(Searchbox);


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var QueryEvents_1 = __webpack_require__(48);
	var StandaloneSearchInterfaceEvents_1 = __webpack_require__(54);
	var Model_1 = __webpack_require__(98);
	var QueryStateModel_1 = __webpack_require__(101);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var OmniboxEvents_1 = __webpack_require__(46);
	var Dom_1 = __webpack_require__(59);
	var Assert_1 = __webpack_require__(12);
	var QueryStateModel_2 = __webpack_require__(101);
	var Initialization_1 = __webpack_require__(106);
	var Querybox_1 = __webpack_require__(186);
	var FieldAddon_1 = __webpack_require__(191);
	var QueryExtensionAddon_1 = __webpack_require__(192);
	var RevealQuerySuggestAddon_1 = __webpack_require__(193);
	var OldOmniboxAddon_1 = __webpack_require__(194);
	var QueryboxQueryParameters_1 = __webpack_require__(187);
	var PendingSearchAsYouTypeSearchEvent_1 = __webpack_require__(131);
	var Utils_1 = __webpack_require__(13);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var SearchInterface_1 = __webpack_require__(108);
	var _ = __webpack_require__(14);
	var MINIMUM_EXECUTABLE_CONFIDENCE = 0.8;
	/**
	 * The Omnibox component is very similar to the simpler {@link Querybox} component. It supports all of the same options
	 * and behaviors.
	 *
	 * The Omnibox component takes care of adding type-ahead capability to the search input. Custom components can extend
	 * and customize the type-ahead and the suggestions it provides.
	 *
	 * The type-ahead is configurable by activating addons, which the Coveo JavaScript Search Framework provides OOTB
	 * (facets, analytics suggestions, Coveo Machine Learning suggestions and advanced Coveo syntax suggestions).
	 *
	 * It is also possible for external code to provide type-ahead suggestions.
	 *
	 * See also the {@link Searchbox} component, which can automatically instantiate an Omnibox component along with an
	 * optional {@link SearchButton} component.
	 */
	var Omnibox = (function (_super) {
	    __extends(Omnibox, _super);
	    /**
	     * Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the Omnibox component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function Omnibox(element, options, bindings) {
	        var _this = _super.call(this, element, Omnibox.ID, bindings) || this;
	        _this.element = element;
	        _this.options = options;
	        _this.partialQueries = [];
	        _this.lastSuggestions = [];
	        _this.movedOnce = false;
	        _this.skipRevealAutoSuggest = false;
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Omnibox, options);
	        var grammar;
	        if (_this.options.enableQuerySyntax) {
	            grammar = ExternalModulesShim_1.MagicBox.Grammars.Expressions(ExternalModulesShim_1.MagicBox.Grammars.Complete);
	            if (_this.options.enableFieldAddon) {
	                new FieldAddon_1.FieldAddon(_this);
	            }
	            if (_this.options.fieldAlias != null) {
	                _this.options.listOfFields = _this.options.listOfFields || [];
	                _this.options.listOfFields = _this.options.listOfFields.concat(_.keys(_this.options.fieldAlias));
	            }
	            if (_this.options.enableQueryExtensionAddon) {
	                new QueryExtensionAddon_1.QueryExtensionAddon(_this);
	            }
	        }
	        else {
	            grammar = { start: 'Any', expressions: { Any: /.*/ } };
	        }
	        if (_this.options.enableRevealQuerySuggestAddon) {
	            new RevealQuerySuggestAddon_1.RevealQuerySuggestAddon(_this);
	        }
	        new OldOmniboxAddon_1.OldOmniboxAddon(_this);
	        if (_this.options.grammar != null) {
	            grammar = _this.options.grammar(grammar);
	        }
	        _this.magicBox = ExternalModulesShim_1.MagicBox.create(element, new ExternalModulesShim_1.MagicBox.Grammar(grammar.start, grammar.expressions), {
	            inline: _this.options.inline,
	            selectableSuggestionClass: 'coveo-omnibox-selectable',
	            selectedSuggestionClass: 'coveo-omnibox-selected',
	            suggestionTimeout: _this.options.omniboxTimeout
	        });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
	        _this.bind.onRootElement(StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents.beforeRedirect, function () { return _this.handleBeforeRedirect(); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function () { return _this.handleQuerySuccess(); });
	        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.Q, function (args) { return _this.handleQueryStateChanged(args); });
	        if (_this.isRevealAutoSuggestion()) {
	            _this.bind.onRootElement(QueryEvents_1.QueryEvents.duringQuery, function (args) { return _this.handleDuringQuery(args); });
	        }
	        _this.setupMagicBox();
	        return _this;
	    }
	    /**
	     * Adds the current content of the input to the query and triggers a query if the current content of the input has
	     * changed since last submit.
	     *
	     * Also logs a `searchboxSubmit` event in the usage analytics.
	     */
	    Omnibox.prototype.submit = function () {
	        var _this = this;
	        this.magicBox.clearSuggestion();
	        this.updateQueryState();
	        this.triggerNewQuery(false, function () {
	            _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});
	        });
	    };
	    /**
	     * Gets the current content of the input.
	     * @returns {string} The current content of the input.
	     */
	    Omnibox.prototype.getText = function () {
	        return this.magicBox.getText();
	    };
	    /**
	     * Sets the content of the input
	     * @param text The string to set in the input.
	     */
	    Omnibox.prototype.setText = function (text) {
	        this.magicBox.setText(text);
	        this.updateQueryState();
	    };
	    /**
	     * Clears the content of the input.
	     */
	    Omnibox.prototype.clear = function () {
	        this.magicBox.clear();
	    };
	    /**
	     * Gets the `HTMLInputElement` of the Omnibox.
	     */
	    Omnibox.prototype.getInput = function () {
	        return this.magicBox.element.querySelector('input');
	    };
	    Omnibox.prototype.getResult = function () {
	        return this.magicBox.getResult();
	    };
	    Omnibox.prototype.getDisplayedResult = function () {
	        return this.magicBox.getDisplayedResult();
	    };
	    Omnibox.prototype.getCursor = function () {
	        return this.magicBox.getCursor();
	    };
	    Omnibox.prototype.resultAtCursor = function (match) {
	        return this.magicBox.resultAtCursor(match);
	    };
	    Omnibox.prototype.setupMagicBox = function () {
	        var _this = this;
	        this.magicBox.onmove = function () {
	            // We assume that once the user has moved its selection, it becomes an explicit omnibox analytics event
	            if (_this.isRevealAutoSuggestion()) {
	                _this.modifyEventTo = _this.getOmniboxAnalyticsEventCause();
	            }
	            _this.movedOnce = true;
	        };
	        this.magicBox.onfocus = function () {
	            if (_this.isRevealAutoSuggestion()) {
	                // This flag is used to block the automatic query when the UI is loaded with a query (#q=foo)
	                // and then the input is focused. We want to block that query, even if it match the suggestion
	                // Only when there is an actual change in the input (user typing something) is when we want the automatic query to kick in
	                _this.skipRevealAutoSuggest = true;
	            }
	        };
	        this.magicBox.onsuggestions = function (suggestions) {
	            // If text is empty, this can mean that user selected text from the search box
	            // and hit "delete" : Reset the partial queries in this case
	            if (Utils_1.Utils.isEmptyString(_this.getText())) {
	                _this.partialQueries = [];
	            }
	            _this.movedOnce = false;
	            _this.lastSuggestions = suggestions;
	            if (_this.isRevealAutoSuggestion() && !_this.skipRevealAutoSuggest) {
	                _this.searchAsYouType();
	            }
	        };
	        if (this.options.enableSearchAsYouType) {
	            Dom_1.$$(this.element).addClass('coveo-magicbox-search-as-you-type');
	        }
	        this.magicBox.onchange = function () {
	            _this.skipRevealAutoSuggest = false;
	            var text = _this.getText();
	            if (text != undefined && text != '') {
	                if (_this.isRevealAutoSuggestion()) {
	                    if (_this.movedOnce) {
	                        _this.searchAsYouType(true);
	                    }
	                }
	                else if (_this.options.enableSearchAsYouType) {
	                    _this.searchAsYouType(true);
	                }
	            }
	            else {
	                _this.clear();
	            }
	        };
	        if (this.options.placeholder) {
	            this.magicBox.element.querySelector('input').placeholder = this.options.placeholder;
	        }
	        this.magicBox.onsubmit = function () {
	            _this.magicBox.clearSuggestion();
	            _this.updateQueryState();
	            _this.triggerNewQuery(false, function () {
	                _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});
	            });
	            _this.magicBox.blur();
	        };
	        this.magicBox.onselect = function (suggestion) {
	            var index = _.indexOf(_this.lastSuggestions, suggestion);
	            var suggestions = _.compact(_.map(_this.lastSuggestions, function (suggestion) { return suggestion.text; }));
	            _this.magicBox.clearSuggestion();
	            _this.updateQueryState();
	            // A bit tricky here : When it's reveal auto suggestions
	            // the mouse selection and keyboard selection acts differently :
	            // keyboard selection will automatically do the query (which will log a search as you type event -> further modified by this.modifyEventTo if needed)
	            // mouse selection will not "auto" send the query.
	            // the movedOnce variable detect the keyboard movement, and is used to differentiate mouse vs keyboard
	            if (!_this.isRevealAutoSuggestion()) {
	                _this.usageAnalytics.cancelAllPendingEvents();
	                _this.triggerNewQuery(false, function () {
	                    _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));
	                });
	            }
	            else if (_this.isRevealAutoSuggestion() && _this.movedOnce) {
	                _this.handleRevealAutoSuggestionWithKeyboard(index, suggestions);
	            }
	            else if (_this.isRevealAutoSuggestion() && !_this.movedOnce) {
	                _this.handleRevealAutoSuggestionsWithMouse(index, suggestions);
	            }
	            // Consider a selection like a reset of the partial queries (it's the end of a suggestion pattern)
	            if (_this.isRevealAutoSuggestion()) {
	                _this.partialQueries = [];
	            }
	        };
	        this.magicBox.onblur = function () {
	            if (_this.options.enableSearchAsYouType && !_this.options.inline) {
	                _this.setText(_this.lastQuery);
	            }
	            else {
	                _this.updateQueryState();
	            }
	            if (_this.isRevealAutoSuggestion()) {
	                _this.usageAnalytics.sendAllPendingEvents();
	            }
	        };
	        this.magicBox.onclear = function () {
	            _this.updateQueryState();
	            if (_this.options.triggerQueryOnClear) {
	                _this.triggerNewQuery(false, function () {
	                    _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxClear, {});
	                });
	            }
	        };
	        if (this.options.autoFocus) {
	            this.magicBox.focus();
	        }
	        this.magicBox.ontabpress = function () {
	            _this.handleTabPress();
	        };
	        this.magicBox.getSuggestions = function () { return _this.handleSuggestions(); };
	    };
	    Omnibox.prototype.handleRevealAutoSuggestionWithKeyboard = function (index, suggestions) {
	        var _this = this;
	        if (this.searchAsYouTypeTimeout) {
	            // Here, there is currently a search as you typed queued up :
	            // Think : user typed very quickly, then very quickly selected a suggestion (without waiting for the search as you type)
	            // Cancel the search as you type query, then immediately do the query with the selection (+analytics event with the selection)
	            this.usageAnalytics.cancelAllPendingEvents();
	            clearTimeout(this.searchAsYouTypeTimeout);
	            this.searchAsYouTypeTimeout = undefined;
	            this.triggerNewQuery(false, function () {
	                _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));
	            });
	        }
	        else {
	            // Here, the search as you type query has returned, but the analytics event has not ye been sent.
	            // Think : user typed slowly, the query returned, and then the user selected a suggestion.
	            // Since the analytics event has not yet been sent (search as you type event have a 5 sec delay)
	            // modify the pending event, then send the newly modified analytics event immediately.
	            this.modifyEventTo = this.getOmniboxAnalyticsEventCause();
	            this.modifyCustomDataOnPending(index, suggestions);
	            this.usageAnalytics.sendAllPendingEvents();
	        }
	    };
	    Omnibox.prototype.handleRevealAutoSuggestionsWithMouse = function (index, suggestions) {
	        var _this = this;
	        if (this.searchAsYouTypeTimeout || index != 0) {
	            // Here : the user either very quickly chose the first suggestion, and the search as you type is still queued up.
	            // OR
	            // the user chose something different then the first suggestion.
	            // Remove the search as you type if it's there, and do the query with the suggestion directly.
	            this.clearSearchAsYouType();
	            this.usageAnalytics.cancelAllPendingEvents();
	            this.triggerNewQuery(false, function () {
	                _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));
	            });
	        }
	        else {
	            // Here : the user either very slowly chose a suggestion, and there is no search as you typed queued up
	            // AND
	            // the user chose the first suggestion.
	            // this means the query is already returned, but the analytics event is still queued up.
	            // modify the analytics event, and send it.
	            this.modifyEventTo = this.getOmniboxAnalyticsEventCause();
	            this.modifyCustomDataOnPending(index, suggestions);
	            this.usageAnalytics.sendAllPendingEvents();
	        }
	    };
	    Omnibox.prototype.modifyCustomDataOnPending = function (index, suggestions) {
	        var pendingEvt = this.usageAnalytics.getPendingSearchEvent();
	        if (pendingEvt instanceof PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent) {
	            var newCustomData_1 = this.buildCustomDataForPartialQueries(index, suggestions);
	            _.each(_.keys(newCustomData_1), function (k) {
	                pendingEvt.modifyCustomData(k, newCustomData_1[k]);
	            });
	        }
	    };
	    Omnibox.prototype.buildCustomDataForPartialQueries = function (index, suggestions) {
	        return {
	            partialQueries: this.cleanCustomData(this.partialQueries),
	            suggestionRanking: index,
	            suggestions: this.cleanCustomData(suggestions),
	            partialQuery: _.last(this.partialQueries)
	        };
	    };
	    Omnibox.prototype.cleanCustomData = function (toClean, rejectLength) {
	        if (rejectLength === void 0) { rejectLength = 256; }
	        // Filter out only consecutive values that are the identical
	        toClean = _.compact(_.filter(toClean, function (partial, pos, array) {
	            return pos === 0 || partial !== array[pos - 1];
	        }));
	        // Custom dimensions cannot be an array in analytics service: Send a string joined by ; instead.
	        // Need to replace ;
	        toClean = _.map(toClean, function (partial) {
	            return partial.replace(/;/g, '');
	        });
	        // Reduce right to get the last X words that adds to less then rejectLength
	        var reducedToRejectLengthOrLess = [];
	        _.reduceRight(toClean, function (memo, partial) {
	            var totalSoFar = memo + partial.length;
	            if (totalSoFar <= rejectLength) {
	                reducedToRejectLengthOrLess.push(partial);
	            }
	            return totalSoFar;
	        }, 0);
	        toClean = reducedToRejectLengthOrLess.reverse();
	        var ret = toClean.join(';');
	        // analytics service can store max 256 char in a custom event
	        // if we're over that, call cleanup again with an arbitrary 10 less char accepted
	        if (ret.length >= 256) {
	            return this.cleanCustomData(toClean, rejectLength - 10);
	        }
	        return toClean.join(';');
	    };
	    Omnibox.prototype.handleSuggestions = function () {
	        var suggestionsEventArgs = {
	            suggestions: [],
	            omnibox: this
	        };
	        this.bind.trigger(this.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, suggestionsEventArgs);
	        var text = this.getText();
	        if (!Utils_1.Utils.isNullOrEmptyString(text)) {
	            this.partialQueries.push(text);
	        }
	        return _.compact(suggestionsEventArgs.suggestions);
	    };
	    Omnibox.prototype.handleBeforeRedirect = function () {
	        this.updateQueryState();
	    };
	    Omnibox.prototype.handleBuildingQuery = function (data) {
	        var _this = this;
	        Assert_1.Assert.exists(data);
	        Assert_1.Assert.exists(data.queryBuilder);
	        this.updateQueryState();
	        this.lastQuery = this.getQuery(data.searchAsYouType);
	        var result = this.lastQuery == this.magicBox.getDisplayedResult().input ? this.magicBox.getDisplayedResult().clone() : this.magicBox.grammar.parse(this.lastQuery).clean();
	        var preprocessResultForQueryArgs = {
	            result: result
	        };
	        if (this.options.enableQuerySyntax) {
	            var notQuotedValues = preprocessResultForQueryArgs.result.findAll('FieldValueNotQuoted');
	            _.each(notQuotedValues, function (value) { return value.value = '"' + value.value.replace(/"|\u00A0/g, ' ') + '"'; });
	            if (this.options.fieldAlias) {
	                var fieldNames = preprocessResultForQueryArgs.result.findAll(function (result) { return result.expression.id == 'FieldName' && result.isSuccess(); });
	                _.each(fieldNames, function (result) {
	                    var alias = _.find(_.keys(_this.options.fieldAlias), function (alias) { return alias.toLowerCase() == result.value.toLowerCase(); });
	                    if (alias != null) {
	                        result.value = _this.options.fieldAlias[alias];
	                    }
	                });
	            }
	        }
	        this.bind.trigger(this.element, OmniboxEvents_1.OmniboxEvents.omniboxPreprocessResultForQuery, preprocessResultForQueryArgs);
	        var query = preprocessResultForQueryArgs.result.toString();
	        new QueryboxQueryParameters_1.QueryboxQueryParameters(this.options).addParameters(data.queryBuilder, query);
	    };
	    Omnibox.prototype.handleTabPress = function () {
	        if (this.options.enableRevealQuerySuggestAddon) {
	            this.handleTabPressForRevealSuggestions();
	        }
	        else {
	            this.handleTabPressForOldOmniboxAddon();
	        }
	    };
	    Omnibox.prototype.handleTabPressForRevealSuggestions = function () {
	        if (!this.options.enableSearchAsYouType) {
	            var suggestions = _.compact(_.map(this.lastSuggestions, function (suggestion) { return suggestion.text; }));
	            this.usageAnalytics.logCustomEvent(this.getOmniboxAnalyticsEventCause(), this.buildCustomDataForPartialQueries(0, suggestions), this.element);
	        }
	    };
	    Omnibox.prototype.handleTabPressForOldOmniboxAddon = function () {
	        if (this.lastSuggestions && this.lastSuggestions[0] && this.lastSuggestions[0].dom) {
	            var firstSelected = Dom_1.$$(this.lastSuggestions[0].dom).find('.coveo-omnibox-selected');
	            var firstSelectable = Dom_1.$$(this.lastSuggestions[0].dom).find('.coveo-omnibox-selectable');
	            if (firstSelected) {
	                Dom_1.$$(firstSelected).trigger('tabSelect');
	            }
	            else if (firstSelectable) {
	                Dom_1.$$(firstSelectable).trigger('tabSelect');
	            }
	        }
	    };
	    Omnibox.prototype.triggerNewQuery = function (searchAsYouType, analyticsEvent) {
	        clearTimeout(this.searchAsYouTypeTimeout);
	        var text = this.getQuery(searchAsYouType);
	        if (this.shouldExecuteQuery(searchAsYouType)) {
	            this.lastQuery = text;
	            analyticsEvent();
	            this.queryController.executeQuery({
	                searchAsYouType: searchAsYouType,
	                logInActionsHistory: true
	            });
	        }
	    };
	    Omnibox.prototype.getQuery = function (searchAsYouType) {
	        var query;
	        if (searchAsYouType) {
	            query = this.magicBox.getWordCompletion();
	            if (query == null && this.lastSuggestions != null && this.lastSuggestions.length > 0) {
	                var textSuggestion = _.find(this.lastSuggestions, function (suggestion) { return suggestion.text != null; });
	                if (textSuggestion != null) {
	                    query = textSuggestion.text;
	                }
	            }
	        }
	        return query || this.magicBox.getText();
	    };
	    Omnibox.prototype.updateQueryState = function () {
	        this.queryStateModel.set(QueryStateModel_2.QueryStateModel.attributesEnum.q, this.magicBox.getText());
	    };
	    Omnibox.prototype.handleQueryStateChanged = function (args) {
	        Assert_1.Assert.exists(args);
	        var q = args.value;
	        if (q != this.magicBox.getText()) {
	            this.magicBox.setText(q);
	        }
	    };
	    Omnibox.prototype.handleQuerySuccess = function () {
	        if (!this.isRevealAutoSuggestion()) {
	            this.partialQueries = [];
	        }
	    };
	    Omnibox.prototype.handleDuringQuery = function (args) {
	        var _this = this;
	        // When the query results returns ... (args.promise)
	        args.promise.then(function () {
	            // Get a handle on a pending search as you type (those events are delayed, not sent instantly)
	            var pendingEvent = _this.usageAnalytics.getPendingSearchEvent();
	            if (pendingEvent instanceof PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent) {
	                pendingEvent.beforeResolve.then(function (evt) {
	                    // Check if we need to modify the event type beforeResolving it
	                    args.promise.then(function () {
	                        if (_this.modifyEventTo) {
	                            evt.modifyEventCause(_this.modifyEventTo);
	                            _this.modifyEventTo = null;
	                        }
	                    });
	                });
	            }
	        });
	    };
	    Omnibox.prototype.searchAsYouType = function (forceExecuteQuery) {
	        var _this = this;
	        if (forceExecuteQuery === void 0) { forceExecuteQuery = false; }
	        this.clearSearchAsYouType();
	        if (this.shouldExecuteQuery(true)) {
	            this.searchAsYouTypeTimeout = setTimeout(function () {
	                if (_this.suggestionShouldTriggerQuery() || forceExecuteQuery) {
	                    var suggestions_1 = _.map(_this.lastSuggestions, function (suggestion) { return suggestion.text; });
	                    var index_1 = _.indexOf(suggestions_1, _this.magicBox.getWordCompletion());
	                    _this.triggerNewQuery(true, function () {
	                        _this.usageAnalytics.logSearchAsYouType(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxAsYouType, _this.buildCustomDataForPartialQueries(index_1, suggestions_1));
	                    });
	                    _this.clearSearchAsYouType();
	                }
	            }, this.options.searchAsYouTypeDelay);
	        }
	    };
	    Omnibox.prototype.isRevealAutoSuggestion = function () {
	        return this.options.enableSearchAsYouType && this.options.enableRevealQuerySuggestAddon;
	    };
	    Omnibox.prototype.shouldExecuteQuery = function (searchAsYouType) {
	        var text = this.getQuery(searchAsYouType);
	        return this.lastQuery != text && text != null;
	    };
	    Omnibox.prototype.suggestionShouldTriggerQuery = function (suggestions) {
	        if (suggestions === void 0) { suggestions = this.lastSuggestions; }
	        if (this.shouldExecuteQuery(true)) {
	            if (suggestions && suggestions[0]) {
	                var suggestion = suggestions[0];
	                // If we have access to a confidence level, return true if we are equal or above the minimum confidence level.
	                if (suggestion && suggestion.executableConfidence != undefined) {
	                    return suggestion.executableConfidence >= MINIMUM_EXECUTABLE_CONFIDENCE;
	                }
	                // If we don't have access to a confidence level, return true only if it "starts with" the content of the search box
	                if (suggestion.text && suggestion.text.indexOf(this.magicBox.getText()) == 0) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    Omnibox.prototype.clearSearchAsYouType = function () {
	        clearTimeout(this.searchAsYouTypeTimeout);
	        this.searchAsYouTypeTimeout = undefined;
	    };
	    Omnibox.prototype.getOmniboxAnalyticsEventCause = function () {
	        if (this.searchInterface instanceof SearchInterface_1.StandaloneSearchInterface) {
	            return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFromLink;
	        }
	        return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxAnalytics;
	    };
	    return Omnibox;
	}(Component_1.Component));
	Omnibox.ID = 'Omnibox';
	/**
	 * The options for the omnibox
	 * @componentOptions
	 */
	Omnibox.options = {
	    /**
	     * Specifies whether suggestions appearing in the Omnibox should push the result down instead of appearing over the
	     * results.
	     *
	     * Set this option as well as {@link Omnibox.options.enableSearchAsYouType} and
	     * {@link Omnibox.options.enableRevealQuerySuggestAddon} to `true` for a cool effect!
	     *
	     * Default value is `false`.
	     */
	    inline: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * Specifies whether to automatically trigger a new query whenever the end user types new text inside the Omnibox.
	     *
	     * Set this option as well a {@link Omnibox.options.inline} and
	     * {@link Omnibox.options.enableRevealQuerySuggestAddon} to `true` for a cool effect!
	     *
	     * Default value is `false`.
	     */
	    enableSearchAsYouType: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),
	    /**
	     * If {@link Omnibox.options.enableSearchAsYouType} is `true`, specifies the delay (in milliseconds) before
	     * triggering a new query when the user types new text inside the Omnibox.
	     *
	     * Default value is `2000`. Minimum value is `0`.
	     */
	    searchAsYouTypeDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({
	        defaultValue: 2000,
	        min: 0,
	        depend: 'enableSearchAsYouType'
	    }),
	    /**
	     * If {@link Querybox.options.enableQuerySyntax} is `true`, specifies whether to enable the `field` addon.
	     *
	     * The `field` addon allows the search box to highlight and complete field syntax.
	     *
	     * **Example:**
	     *
	     * > Suppose you want to filter on a certain file type. You start typing `@sysf` in the input. The Omnibox provides
	     * > you with several matching fields. You select the `@sysfiletype` suggestion and type `=`. If this option is set
	     * > to `true`, then the Omnibox provides you with suggestions for available matching file types.
	     *
	     * Default value is `false`.
	     */
	    enableFieldAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableQuerySyntax' }),
	    enableSimpleFieldAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableFieldAddon' }),
	    listOfFields: ComponentOptions_1.ComponentOptions.buildFieldsOption({ depend: 'enableFieldAddon' }),
	    /**
	     * Specifies whether to enable the Coveo Machine Learning (Coveo ML) query suggestions.
	     *
	     * This implies that you have a proper Coveo ML integration configured (see
	     * [Coveo Machine Learning](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=177)).
	     *
	     * Default value is `true`.
	     */
	    enableRevealQuerySuggestAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true, alias: 'enableTopQueryAddon' }),
	    /**
	     * If {@link Querybox.options.enableQuerySyntax} is `true`, specifies whether to enable the `query extension` addon.
	     *
	     * The `query extension` addon allows the Omnibox to complete the syntax for query extensions.
	     *
	     * Default value is `false`.
	     */
	    enableQueryExtensionAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableQuerySyntax' }),
	    /**
	     * Specifies a placeholder for the input.
	     */
	    placeholder: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),
	    /**
	     * Specifies a timeout (in milliseconds) before rejecting suggestions in the Omnibox.
	     *
	     * Default value is `2000`. Minimum value is `0`.
	     */
	    omniboxTimeout: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 2000, min: 0 })
	};
	exports.Omnibox = Omnibox;
	Omnibox.options = _.extend({}, Omnibox.options, Querybox_1.Querybox.options);
	Initialization_1.Initialization.registerAutoCreateComponent(Omnibox);


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var OmniboxEvents_1 = __webpack_require__(46);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var _ = __webpack_require__(14);
	var FieldAddon = (function () {
	    function FieldAddon(omnibox) {
	        var _this = this;
	        this.omnibox = omnibox;
	        this.cache = {};
	        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {
	            args.suggestions.push(_this.getSuggestion());
	        });
	    }
	    FieldAddon.prototype.getSuggestion = function () {
	        var _this = this;
	        var hash = this.getHash();
	        if (hash == null) {
	            return null;
	        }
	        var hashString = this.hashToString(hash);
	        if (this.cache[hashString] != null) {
	            return this.hashValueToSuggestion(hash, this.cache[hashString]);
	        }
	        var values;
	        if (hash.type == 'FieldName') {
	            values = this.fieldNames(hash.current);
	        }
	        if (hash.type == 'FieldValue') {
	            values = this.fieldValues(hash.field, hash.current);
	        }
	        if (hash.type == 'SimpleFieldName') {
	            values = this.simpleFieldNames(hash.current);
	        }
	        this.cache[hashString] = values;
	        values.catch(function () {
	            delete _this.cache[hashString];
	        });
	        return this.hashValueToSuggestion(hash, values);
	    };
	    FieldAddon.prototype.getHash = function () {
	        var fieldName = _.last(this.omnibox.resultAtCursor('FieldName'));
	        if (fieldName != null) {
	            fieldName = fieldName.findParent('Field') || fieldName;
	            var currentField = fieldName.toString();
	            var before = fieldName.before();
	            var after = fieldName.after();
	            return { type: 'FieldName', current: currentField, before: before, after: after };
	        }
	        var fieldValue = _.last(this.omnibox.resultAtCursor('FieldValue'));
	        if (fieldValue) {
	            var fieldQuery = fieldValue.findParent('FieldQuery') || (this.omnibox.options.enableSimpleFieldAddon && fieldValue.findParent('FieldSimpleQuery'));
	            if (fieldQuery) {
	                var field = fieldQuery.find('FieldName').toString();
	                if (this.omnibox.options.fieldAlias) {
	                    if (field in this.omnibox.options.fieldAlias) {
	                        field = this.omnibox.options.fieldAlias[field];
	                    }
	                }
	                var value = fieldValue.toString();
	                var before = fieldValue.before();
	                var after = fieldValue.after();
	                return { type: 'FieldValue', field: field, current: value, before: before, after: after };
	            }
	        }
	        if (this.omnibox.options.enableSimpleFieldAddon) {
	            var word = _.last(this.omnibox.resultAtCursor('Word'));
	            if (word != null) {
	                var currentField = word.toString();
	                var before = word.before();
	                var after = word.after();
	                return { type: 'SimpleFieldName', current: currentField, before: before, after: after };
	            }
	        }
	    };
	    FieldAddon.prototype.hashToString = function (hash) {
	        if (hash == null) {
	            return null;
	        }
	        return hash.type + hash.current + (hash.field || '');
	    };
	    FieldAddon.prototype.hashValueToSuggestion = function (hash, promise) {
	        return promise.then(function (values) {
	            var suggestions = _.map(values, function (value, i) {
	                return {
	                    text: hash.before + (hash.current.toLowerCase().indexOf(value.toLowerCase()) == 0 ? hash.current + value.substr(hash.current.length) : value) + hash.after,
	                    html: ExternalModulesShim_1.MagicBox.Utils.highlightText(value, hash.current, true),
	                    index: FieldAddon.INDEX - i / values.length
	                };
	            });
	            return suggestions;
	        });
	    };
	    FieldAddon.prototype.getFields = function () {
	        var _this = this;
	        if (this.fields == null) {
	            this.fields = new Promise(function (resolve, reject) {
	                if (_this.omnibox.options.listOfFields != null) {
	                    resolve(_this.omnibox.options.listOfFields);
	                }
	                else {
	                    var promise = _this.omnibox.queryController.getEndpoint().listFields();
	                    promise.then(function (fieldDescriptions) {
	                        var fieldNames = _.chain(fieldDescriptions)
	                            .filter(function (fieldDescription) { return fieldDescription.includeInQuery && fieldDescription.groupByField; })
	                            .map(function (fieldDescription) { return fieldDescription.name.substr(1); })
	                            .value();
	                        resolve(fieldNames);
	                    }).catch(function () {
	                        reject();
	                    });
	                }
	            });
	        }
	        return this.fields;
	    };
	    FieldAddon.prototype.fieldNames = function (current) {
	        var withAt = current.length > 0 && current[0] == '@';
	        var fieldName = withAt ? current.substr(1) : current;
	        var fieldNameLC = fieldName.toLowerCase();
	        return this.getFields().then(function (fields) {
	            var matchFields = _.chain(fields)
	                .map(function (field) {
	                return {
	                    index: field.toLowerCase().indexOf(fieldNameLC),
	                    field: withAt ? field : '@' + field
	                };
	            })
	                .filter(function (field) {
	                return field.index != -1 && field.field.length > current.length;
	            })
	                .sortBy('index')
	                .map(function (field) { return field.field; })
	                .value();
	            matchFields = _.first(matchFields, 5);
	            return matchFields;
	        });
	    };
	    FieldAddon.prototype.fieldValues = function (field, current) {
	        return this.omnibox.queryController.getEndpoint().listFieldValues({
	            pattern: '.*' + current + '.*',
	            patternType: 'RegularExpression',
	            sortCriteria: 'occurrences',
	            field: '@' + field,
	            maximumNumberOfValues: 5
	        }).then(function (values) {
	            return _.chain(values)
	                .map(function (value) {
	                return {
	                    index: value.value.toLowerCase().indexOf(current),
	                    value: value.value
	                };
	            })
	                .filter(function (value) {
	                return value.value.length > current.length;
	            })
	                .sortBy('index')
	                .map(function (value) {
	                return value.value.replace(/ /g, '\u00A0');
	            })
	                .value();
	        });
	    };
	    FieldAddon.prototype.simpleFieldNames = function (current) {
	        var fieldName = current;
	        var fieldNameLC = fieldName.toLowerCase();
	        return this.getFields().then(function (fields) {
	            var matchFields = _.chain(fields)
	                .map(function (field) {
	                return {
	                    index: field.toLowerCase().indexOf(fieldNameLC),
	                    field: field + ':'
	                };
	            })
	                .filter(function (field) {
	                return field.index != -1 && field.field.length > current.length;
	            })
	                .sortBy('index')
	                .map(function (field) { return field.field; })
	                .value();
	            matchFields = _.first(matchFields, 5);
	            return matchFields;
	        });
	    };
	    return FieldAddon;
	}());
	FieldAddon.INDEX = 64;
	exports.FieldAddon = FieldAddon;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	///<reference path='Omnibox.ts'/>
	var OmniboxEvents_1 = __webpack_require__(46);
	var ExternalModulesShim_1 = __webpack_require__(23);
	var _ = __webpack_require__(14);
	var QueryExtensionAddon = (function () {
	    function QueryExtensionAddon(omnibox) {
	        var _this = this;
	        this.omnibox = omnibox;
	        this.cache = {};
	        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {
	            args.suggestions.push(_this.getSuggestion());
	        });
	    }
	    QueryExtensionAddon.prototype.getSuggestion = function () {
	        var _this = this;
	        var hash = this.getHash(this.omnibox.magicBox);
	        if (hash == null) {
	            return null;
	        }
	        var hashString = this.hashToString(hash);
	        if (this.cache[hashString] != null) {
	            return this.hashValueToSuggestion(hash, this.cache[hashString]);
	        }
	        var values = (hash.type == 'QueryExtensionName' ? this.names(hash.current) : this.attributeNames(hash.name, hash.current, hash.used));
	        this.cache[hashString] = values;
	        values.catch(function () {
	            delete _this.cache[hashString];
	        });
	        return this.hashValueToSuggestion(hash, values);
	    };
	    QueryExtensionAddon.prototype.getHash = function (magicBox) {
	        var queryExtension = _.last(magicBox.resultAtCursor('QueryExtension'));
	        if (queryExtension != null) {
	            var queryExtensionArgumentResults = queryExtension.findAll('QueryExtensionArgument');
	            var current = _.last(magicBox.resultAtCursor('QueryExtensionName'));
	            if (current != null) {
	                return {
	                    type: 'QueryExtensionName',
	                    current: current.toString(),
	                    before: current.before(),
	                    after: current.after()
	                };
	            }
	            current = _.last(magicBox.resultAtCursor('QueryExtensionArgumentName'));
	            if (current != null) {
	                var used = _.chain(queryExtensionArgumentResults)
	                    .map(function (result) {
	                    var name = result.find('QueryExtensionArgumentName');
	                    return name && name.toString();
	                })
	                    .compact()
	                    .value();
	                var name = queryExtension.find('QueryExtensionName').toString();
	                return {
	                    type: 'QueryExtensionArgumentName',
	                    current: current.toString(),
	                    before: current.before(),
	                    after: current.after(),
	                    name: name,
	                    used: used
	                };
	            }
	        }
	        return null;
	    };
	    QueryExtensionAddon.prototype.hashToString = function (hash) {
	        if (hash == null) {
	            return null;
	        }
	        return [hash.type, hash.current, (hash.name || ''), (hash.used ? hash.used.join() : '')].join();
	    };
	    QueryExtensionAddon.prototype.hashValueToSuggestion = function (hash, promise) {
	        return promise.then(function (values) {
	            var suggestions = _.map(values, function (value, i) {
	                return {
	                    html: ExternalModulesShim_1.MagicBox.Utils.highlightText(value, hash.current, true),
	                    text: hash.before + value + hash.after,
	                    index: QueryExtensionAddon.INDEX - i / values.length
	                };
	            });
	            return suggestions;
	        });
	    };
	    QueryExtensionAddon.prototype.getExtensions = function () {
	        if (this.extensions == null) {
	            this.extensions = this.omnibox.queryController.getEndpoint().extensions();
	        }
	        return this.extensions;
	    };
	    QueryExtensionAddon.prototype.names = function (current) {
	        var extensionName = current.toLowerCase();
	        return this.getExtensions().then(function (extensions) {
	            var matchExtensions = _.chain(extensions)
	                .map(function (extension) {
	                return {
	                    index: extension.name.toLowerCase().indexOf(extensionName),
	                    extension: extension.name
	                };
	            })
	                .filter(function (extension) {
	                return extension.index != -1 && extension.extension.length > extensionName.length;
	            })
	                .sortBy('index')
	                .pluck('extension')
	                .value();
	            matchExtensions = _.first(matchExtensions, 5);
	            return matchExtensions;
	        });
	    };
	    QueryExtensionAddon.prototype.attributeNames = function (name, current, used) {
	        return this.getExtensions().then(function (extensions) {
	            var extension = _.find(extensions, function (extension) { return extension.name == name; });
	            if (extension == null) {
	                return [];
	            }
	            else {
	                return _.filter(_.difference(extension.argumentNames, used), function (argumentName) { return argumentName.indexOf(current) == 0; });
	            }
	        });
	    };
	    QueryExtensionAddon.prototype.hash = function () {
	        return;
	    };
	    return QueryExtensionAddon;
	}());
	QueryExtensionAddon.INDEX = 62;
	exports.QueryExtensionAddon = QueryExtensionAddon;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dom_1 = __webpack_require__(59);
	var ComponentOptionsModel_1 = __webpack_require__(102);
	var OmniboxEvents_1 = __webpack_require__(46);
	var StringUtils_1 = __webpack_require__(62);
	var _ = __webpack_require__(14);
	var RevealQuerySuggestAddon = (function () {
	    function RevealQuerySuggestAddon(omnibox) {
	        var _this = this;
	        this.omnibox = omnibox;
	        this.cache = {};
	        Dom_1.$$(this.omnibox.element).on(OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (e, args) {
	            args.suggestions.push(_this.getSuggestion());
	        });
	    }
	    RevealQuerySuggestAddon.suggestiontHtml = function (suggestion) {
	        return suggestion.highlighted.replace(/\[(.*?)\]|\{(.*?)\}|\((.*?)\)/g, function (part, notMatched, matched, corrected) {
	            var className = '';
	            if (matched) {
	                className = 'coveo-omnibox-hightlight';
	            }
	            if (corrected) {
	                className = 'coveo-omnibox-hightlight2';
	            }
	            var ret;
	            if (className) {
	                ret = Dom_1.$$('span', {
	                    className: className
	                });
	            }
	            else {
	                ret = Dom_1.$$('span');
	            }
	            ret.text(notMatched || matched || corrected);
	            return ret.el.outerHTML;
	        });
	    };
	    RevealQuerySuggestAddon.isPartialMatch = function (suggestion) {
	        // groups : 1=notMatched, 2=matched, 3=corrected
	        var parts = StringUtils_1.StringUtils.match(suggestion.highlighted, /\[(.*?)\]|\{(.*?)\}|\((.*?)\)/g);
	        var firstFail = _.find(parts, function (part) { return part[1] != null; });
	        // if no fail found, this is a partial or a full match
	        if (firstFail == null) {
	            return true;
	        }
	        // if all right parts are notMatched, the right parts is autocomplete
	        return _.every(_.last(parts, _.indexOf(parts, firstFail) - parts.length), function (part) { return part[1] != null; });
	    };
	    RevealQuerySuggestAddon.prototype.getSuggestion = function () {
	        var _this = this;
	        var text = this.omnibox.magicBox.getText();
	        if (text.length == 0) {
	            return null;
	        }
	        if (this.cache[text] != null) {
	            return this.cache[text];
	        }
	        var promise = this.getRevealQuerySuggest(text);
	        this.cache[text] = promise;
	        promise.catch(function () {
	            delete _this.cache[text];
	        });
	        return this.cache[text];
	    };
	    RevealQuerySuggestAddon.prototype.getRevealQuerySuggest = function (text) {
	        var payload = { q: text };
	        var language = String['locale'];
	        var searchHub = this.omnibox.getBindings().componentOptionsModel.get(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchHub);
	        var pipeline = this.omnibox.getBindings().searchInterface.options.pipeline;
	        var enableWordCompletion = this.omnibox.options.enableSearchAsYouType;
	        var context = this.omnibox.getBindings().queryController.getLastQuery().context;
	        if (language) {
	            payload.language = language;
	        }
	        if (searchHub) {
	            payload.searchHub = searchHub;
	        }
	        if (pipeline) {
	            payload.pipeline = pipeline;
	        }
	        if (context) {
	            payload.context = context;
	        }
	        payload.enableWordCompletion = enableWordCompletion;
	        return this.omnibox.queryController.getEndpoint()
	            .getRevealQuerySuggest(payload)
	            .then(function (result) {
	            var completions = result.completions;
	            var results = _.map(completions, function (completion, i) {
	                return {
	                    html: RevealQuerySuggestAddon.suggestiontHtml(completion),
	                    text: completion.expression,
	                    index: RevealQuerySuggestAddon.INDEX - i / completions.length,
	                    partial: RevealQuerySuggestAddon.isPartialMatch(completion),
	                    executableConfidence: completion.executableConfidence
	                };
	            });
	            return results;
	        });
	    };
	    return RevealQuerySuggestAddon;
	}());
	RevealQuerySuggestAddon.INDEX = 60;
	exports.RevealQuerySuggestAddon = RevealQuerySuggestAddon;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var OmniboxEvents_1 = __webpack_require__(46);
	var Dom_1 = __webpack_require__(59);
	var Utils_1 = __webpack_require__(13);
	var _ = __webpack_require__(14);
	var OldOmniboxAddon = (function () {
	    function OldOmniboxAddon(omnibox) {
	        var _this = this;
	        this.omnibox = omnibox;
	        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {
	            _.each(_this.getSuggestion(), function (suggestion) {
	                args.suggestions.push(suggestion);
	            });
	        });
	    }
	    OldOmniboxAddon.prototype.getSuggestion = function () {
	        var text = this.omnibox.magicBox.getText();
	        if (text.length == 0) {
	            return null;
	        }
	        if (this.lastQuery == text) {
	            return this.lastSuggestions;
	        }
	        this.lastQuery = text;
	        var eventArgs = this.buildPopulateOmniboxEventArgs();
	        Dom_1.$$(this.omnibox.root).trigger(OmniboxEvents_1.OmniboxEvents.populateOmnibox, eventArgs);
	        return this.lastSuggestions = this.rowsToSuggestions(eventArgs.rows);
	    };
	    OldOmniboxAddon.prototype.getCurrentQueryExpression = function () {
	        var cursorPos = this.omnibox.getCursor();
	        var value = this.omnibox.getText();
	        var length = value.length;
	        var start = cursorPos;
	        var end = cursorPos;
	        if (value[start] == ' ') {
	            start--;
	        }
	        while (start > 0 && value[start] != ' ') {
	            start--;
	        }
	        while (end < length && value[end] != ' ') {
	            end++;
	        }
	        return value.substring(start, end);
	    };
	    OldOmniboxAddon.prototype.getRegexToSearch = function (strValue) {
	        if (strValue == null) {
	            strValue = this.omnibox.getText();
	        }
	        return new RegExp(Utils_1.Utils.escapeRegexCharacter(strValue), 'i');
	    };
	    OldOmniboxAddon.prototype.getQueryExpressionBreakDown = function () {
	        var _this = this;
	        var ret = [];
	        var queryWords = this.omnibox.getText().split(' ');
	        _.each(queryWords, function (word) {
	            ret.push({
	                word: word,
	                regex: _this.getRegexToSearch(word)
	            });
	        });
	        return ret;
	    };
	    OldOmniboxAddon.prototype.replace = function (searchValue, newValue) {
	        this.omnibox.setText(this.omnibox.getText().replace(searchValue, newValue));
	    };
	    OldOmniboxAddon.prototype.clearCurrentExpression = function () {
	        this.replace(this.getCurrentQueryExpression(), '');
	    };
	    OldOmniboxAddon.prototype.insertAt = function (at, toInsert) {
	        var oldValue = this.omnibox.getText();
	        var newValue = [oldValue.slice(0, at), toInsert, oldValue.slice(at)].join('');
	        this.omnibox.setText(newValue);
	    };
	    OldOmniboxAddon.prototype.replaceCurrentExpression = function (newValue) {
	        this.replace(this.getCurrentQueryExpression(), newValue);
	    };
	    OldOmniboxAddon.prototype.buildPopulateOmniboxEventArgs = function () {
	        var _this = this;
	        var currentQueryExpression = this.getCurrentQueryExpression();
	        var ret = {
	            rows: [],
	            completeQueryExpression: {
	                word: this.omnibox.getText(),
	                regex: this.getRegexToSearch()
	            },
	            currentQueryExpression: {
	                word: currentQueryExpression,
	                regex: this.getRegexToSearch(currentQueryExpression)
	            },
	            allQueryExpressions: this.getQueryExpressionBreakDown(),
	            cursorPosition: this.omnibox.getCursor(),
	            clear: function () {
	                _this.omnibox.clear();
	            },
	            clearCurrentExpression: function () {
	                _this.clearCurrentExpression();
	            },
	            replace: function (searchValue, newValue) {
	                _this.replace(searchValue, newValue);
	            },
	            replaceCurrentExpression: function (newValue) {
	                _this.replaceCurrentExpression(newValue);
	            },
	            insertAt: function (at, toInsert) {
	                _this.insertAt(at, toInsert);
	            },
	            closeOmnibox: function () {
	                _this.omnibox.magicBox.blur();
	            }
	        };
	        return ret;
	    };
	    OldOmniboxAddon.prototype.rowsToSuggestions = function (rows) {
	        return _.map(rows, function (row) {
	            if (!Utils_1.Utils.isNullOrUndefined(row.element)) {
	                return new Promise(function (resolve) {
	                    resolve([{
	                            dom: row.element,
	                            index: row.zIndex
	                        }]);
	                });
	            }
	            else if (!Utils_1.Utils.isNullOrUndefined(row.deferred)) {
	                return new Promise(function (resolve) {
	                    row.deferred.then(function (row) {
	                        if (row.element != null) {
	                            resolve([{
	                                    dom: row.element,
	                                    index: row.zIndex
	                                }]);
	                        }
	                        else {
	                            resolve(null);
	                        }
	                    });
	                });
	            }
	            return null;
	        });
	    };
	    return OldOmniboxAddon;
	}());
	exports.OldOmniboxAddon = OldOmniboxAddon;


/***/ }),
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DomUtils_1 = __webpack_require__(60);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	var SuggestionForOmnibox = (function () {
	    function SuggestionForOmnibox(structure, onSelect, onTabPress) {
	        this.structure = structure;
	        this.onSelect = onSelect;
	        this.onTabPress = onTabPress;
	    }
	    SuggestionForOmnibox.prototype.buildOmniboxElement = function (results, args) {
	        var element;
	        if (results.length != 0) {
	            element = Dom_1.$$('div').el;
	            if (this.structure.header) {
	                var header = this.buildElementHeader();
	                element.appendChild(header);
	            }
	            var rows = this.buildRowElements(results, args);
	            _.each(rows, function (row) {
	                element.appendChild(row);
	            });
	        }
	        return element;
	    };
	    SuggestionForOmnibox.prototype.buildElementHeader = function () {
	        return Dom_1.$$('div', undefined, this.structure.header.template({
	            headerTitle: this.structure.header.title
	        })).el;
	    };
	    SuggestionForOmnibox.prototype.buildRowElements = function (results, args) {
	        var _this = this;
	        var ret = [];
	        _.each(results, function (result) {
	            var row = Dom_1.$$('div', undefined, _this.structure.row({
	                rawValue: result.value,
	                data: DomUtils_1.DomUtils.highlightElement(result.value, args.completeQueryExpression.word)
	            })).el;
	            Dom_1.$$(row).on('click', function () {
	                _this.onSelect.call(_this, result.value, args);
	            });
	            Dom_1.$$(row).on('keyboardSelect', function () {
	                _this.onSelect.call(_this, result.value, args);
	            });
	            Dom_1.$$(row).on('tabSelect', function () {
	                _this.onTabPress.call(_this, result.value, args);
	            });
	            ret.push(row);
	        });
	        return ret;
	    };
	    return SuggestionForOmnibox;
	}());
	exports.SuggestionForOmnibox = SuggestionForOmnibox;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SuggestionForOmnibox_1 = __webpack_require__(245);
	var ComponentOptions_1 = __webpack_require__(109);
	var Component_1 = __webpack_require__(107);
	var Assert_1 = __webpack_require__(12);
	var OmniboxEvents_1 = __webpack_require__(46);
	var QueryEvents_1 = __webpack_require__(48);
	var Strings_1 = __webpack_require__(35);
	var QueryStateModel_1 = __webpack_require__(101);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Initialization_1 = __webpack_require__(106);
	var Dom_1 = __webpack_require__(59);
	var SearchInterface_1 = __webpack_require__(108);
	var _ = __webpack_require__(14);
	/**
	 * The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most
	 * commonly logs.
	 *
	 * This component orders possible query suggestions by their respective number of successful document views, thus
	 * prioritizing the most relevant query suggestions. Consequently, when better options are available, this component
	 * does not suggest queries resulting in no clicks from users or requiring refinements.
	 *
	 * The query suggestions appear in the {@link Omnibox} Component. The AnalyticsSuggestion component strongly
	 * relates to the {@link Analytics} component. While a user is typing in a query box, the AnalyticsSuggestion component
	 * allows them to see and select the most commonly used and relevant queries.
	 */
	var AnalyticsSuggestions = (function (_super) {
	    __extends(AnalyticsSuggestions, _super);
	    /**
	     * Creates a new AnalyticsSuggestions component.
	     *
	     * Also binds event handlers so that when a user selects a suggestion, an `omniboxFromLink` usage analytics event is
	     * logged if the suggestion comes from a standalone search box, or an `omniboxAnalytics` usage analytics
	     * event is logged otherwise.
	     *
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the AnalyticsSuggestions component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function AnalyticsSuggestions(element, options, bindings) {
	        var _this = _super.call(this, element, AnalyticsSuggestions.ID, bindings) || this;
	        _this.options = options;
	        _this.partialQueries = [];
	        _this.lastSuggestions = [];
	        _this.resultsToBuildWith = [];
	        if (_this.options && 'omniboxSuggestionOptions' in _this.options) {
	            _this.options = _.extend(_this.options, _this.options['omniboxSuggestionOptions']);
	        }
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, AnalyticsSuggestions, _this.options);
	        var rowTemplate = function (toRender) {
	            var rowElement = Dom_1.$$('div', {
	                className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-analytics-suggestion-row'
	            });
	            if (toRender['data']) {
	                rowElement.el.innerHTML = toRender['data'];
	            }
	            return rowElement.el.outerHTML;
	        };
	        _this.options.onSelect = _this.options.onSelect || _this.onRowSelection;
	        var suggestionStructure;
	        if (_this.searchInterface.isNewDesign()) {
	            suggestionStructure = {
	                row: rowTemplate
	            };
	        }
	        else {
	            var headerTemplate = function () {
	                var headerElement = Dom_1.$$('div', {
	                    className: 'coveo-top-analytics-suggestion-header'
	                });
	                var iconElement = Dom_1.$$('span', {
	                    className: 'coveo-icon-top-analytics'
	                });
	                var captionElement = Dom_1.$$('span', {
	                    className: 'coveo-caption'
	                });
	                if (_this.options.headerTitle) {
	                    captionElement.text(_this.options.headerTitle);
	                }
	                headerElement.append(iconElement.el);
	                headerElement.append(captionElement.el);
	                return headerElement.el.outerHTML;
	            };
	            suggestionStructure = {
	                header: { template: headerTemplate, title: _this.options.headerTitle },
	                row: rowTemplate
	            };
	        }
	        _this.suggestionForOmnibox = new SuggestionForOmnibox_1.SuggestionForOmnibox(suggestionStructure, function (value, args) {
	            _this.options.onSelect.call(_this, value, args);
	        }, function (value, args) {
	            _this.onRowTab.call(_this, value, args);
	        });
	        _this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.populateOmnibox, function (args) { return _this.handlePopulateOmnibox(args); });
	        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function () { return _this.partialQueries = []; });
	        return _this;
	    }
	    AnalyticsSuggestions.prototype.selectSuggestion = function (suggestion) {
	        if (this.currentlyDisplayedSuggestions) {
	            if (isNaN(suggestion)) {
	                if (this.currentlyDisplayedSuggestions[suggestion]) {
	                    Dom_1.$$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');
	                }
	            }
	            else {
	                var currentlySuggested = _.findWhere(this.currentlyDisplayedSuggestions, { pos: suggestion });
	                if (currentlySuggested) {
	                    Dom_1.$$(currentlySuggested.element).trigger('click');
	                }
	            }
	        }
	    };
	    AnalyticsSuggestions.prototype.handlePopulateOmnibox = function (args) {
	        var _this = this;
	        Assert_1.Assert.exists(args);
	        var promise = new Promise(function (resolve, reject) {
	            var searchPromise = _this.usageAnalytics.getTopQueries({
	                pageSize: _this.options.numberOfSuggestions,
	                queryText: args.completeQueryExpression.word
	            });
	            searchPromise.then(function (results) {
	                _this.resultsToBuildWith = _.map(results, function (result) {
	                    return {
	                        value: result
	                    };
	                });
	                _this.lastSuggestions = results;
	                if (!_.isEmpty(_this.resultsToBuildWith) && args.completeQueryExpression.word != '') {
	                    _this.partialQueries.push(args.completeQueryExpression.word);
	                }
	                var element = _this.suggestionForOmnibox.buildOmniboxElement(_this.resultsToBuildWith, args);
	                _this.currentlyDisplayedSuggestions = {};
	                if (element) {
	                    _.map(Dom_1.$$(element).findAll('.coveo-omnibox-selectable'), function (selectable, i) {
	                        _this.currentlyDisplayedSuggestions[Dom_1.$$(selectable).text()] = {
	                            element: selectable,
	                            pos: i
	                        };
	                    });
	                }
	                resolve({
	                    element: element,
	                    zIndex: _this.options.omniboxZIndex
	                });
	            });
	            searchPromise.catch(function () {
	                resolve({
	                    element: undefined
	                });
	            });
	        });
	        args.rows.push({ deferred: promise });
	    };
	    AnalyticsSuggestions.prototype.onRowSelection = function (value, args) {
	        args.clear();
	        args.closeOmnibox();
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, value);
	        this.usageAnalytics.logSearchEvent(this.getOmniboxAnalyticsEventCause(), {
	            partialQueries: this.cleanCustomData(this.partialQueries),
	            suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),
	            suggestions: this.cleanCustomData(this.lastSuggestions),
	            partialQuery: args.completeQueryExpression.word
	        });
	        this.queryController.executeQuery();
	    };
	    AnalyticsSuggestions.prototype.onRowTab = function (value, args) {
	        args.clear();
	        args.closeOmnibox();
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, "" + value);
	        this.usageAnalytics.logCustomEvent(this.getOmniboxAnalyticsEventCause(), {
	            partialQueries: this.cleanCustomData(this.partialQueries),
	            suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),
	            suggestions: this.cleanCustomData(this.lastSuggestions),
	            partialQuery: args.completeQueryExpression.word
	        }, this.element);
	    };
	    AnalyticsSuggestions.prototype.cleanCustomData = function (toClean, rejectLength) {
	        if (rejectLength === void 0) { rejectLength = 256; }
	        // Filter out only consecutive values that are the identical
	        toClean = _.compact(_.filter(toClean, function (partial, pos, array) {
	            return pos === 0 || partial !== array[pos - 1];
	        }));
	        // Custom dimensions cannot be an array in analytics service: Send a string joined by ; instead.
	        // Need to replace ;
	        toClean = _.map(toClean, function (partial) {
	            return partial.replace(/;/g, '');
	        });
	        // Reduce right to get the last X words that adds to less then rejectLength
	        var reducedToRejectLengthOrLess = [];
	        _.reduceRight(toClean, function (memo, partial) {
	            var totalSoFar = memo + partial.length;
	            if (totalSoFar <= rejectLength) {
	                reducedToRejectLengthOrLess.push(partial);
	            }
	            return totalSoFar;
	        }, 0);
	        toClean = reducedToRejectLengthOrLess.reverse();
	        var ret = toClean.join(';');
	        // analytics service can store max 256 char in a custom event
	        // if we're over that, call cleanup again with an arbitrary 10 less char accepted
	        if (ret.length >= 256) {
	            return this.cleanCustomData(toClean, rejectLength - 10);
	        }
	        return toClean.join(';');
	    };
	    AnalyticsSuggestions.prototype.getOmniboxAnalyticsEventCause = function () {
	        if (this.searchInterface instanceof SearchInterface_1.StandaloneSearchInterface) {
	            return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFromLink;
	        }
	        return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxAnalytics;
	    };
	    return AnalyticsSuggestions;
	}(Component_1.Component));
	AnalyticsSuggestions.ID = 'AnalyticsSuggestions';
	/**
	 * The options for the component
	 * @componentOptions
	 */
	AnalyticsSuggestions.options = {
	    /**
	     * Specifies the z-index position at which the query suggestions render themselves in the {@link Omnibox}
	     * component. Higher values are placed first.
	     *
	     * Default value is `52` and minimum value is `0`.
	     */
	    omniboxZIndex: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 52, min: 0 }),
	    /**
	     * Specifies the title of the query suggestions group in the {@link Omnibox} component. This option is not available
	     * when using the default Lightning Friendly Theme (see
	     * [Lightning Friendly Theme](https://developers.coveo.com/x/Y4EAAg)).
	     *
	     * Default value is the localized string for `"Suggested Queries"`.
	     */
	    headerTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ defaultValue: Strings_1.l('SuggestedQueries') }),
	    /**
	     * Specifies the number of query suggestions to request and display in the {@link Omnibox} component.
	     *
	     * Default value is `5` and minimum value is `1`.
	     */
	    numberOfSuggestions: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 })
	};
	exports.AnalyticsSuggestions = AnalyticsSuggestions;
	Initialization_1.Initialization.registerAutoCreateComponent(AnalyticsSuggestions);


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SuggestionForOmnibox_1 = __webpack_require__(245);
	var Component_1 = __webpack_require__(107);
	var ComponentOptions_1 = __webpack_require__(109);
	var Assert_1 = __webpack_require__(12);
	var Utils_1 = __webpack_require__(13);
	var OmniboxEvents_1 = __webpack_require__(46);
	var QueryStateModel_1 = __webpack_require__(101);
	var Initialization_1 = __webpack_require__(106);
	var AnalyticsActionListMeta_1 = __webpack_require__(126);
	var Strings_1 = __webpack_require__(35);
	var Dom_1 = __webpack_require__(59);
	var _ = __webpack_require__(14);
	/**
	 * The FieldSuggestions component provides query suggestions based on a particular facet field. For example, you could
	 * use this component to provide auto-complete suggestions while the end user is typing a document
	 * title.
	 *
	 * The query suggestions that this component provides appear in the {@link Omnibox} component.
	 */
	var FieldSuggestions = (function (_super) {
	    __extends(FieldSuggestions, _super);
	    /**
	     * Creates a new FieldSuggestions component.
	     * @param element The HTMLElement on which to instantiate the component.
	     * @param options The options for the FieldSuggestions component.
	     * @param bindings The bindings that the component requires to function normally. If not set, these will be
	     * automatically resolved (with a slower execution time).
	     */
	    function FieldSuggestions(element, options, bindings) {
	        var _this = _super.call(this, element, FieldSuggestions.ID, bindings) || this;
	        _this.options = options;
	        if (_this.options && 'omniboxSuggestionOptions' in _this.options) {
	            _this.options = _.extend(_this.options, _this.options['omniboxSuggestionOptions']);
	        }
	        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, FieldSuggestions, options);
	        Assert_1.Assert.check(Utils_1.Utils.isCoveoField(_this.options.field), _this.options.field + ' is not a valid field');
	        _this.options.onSelect = _this.options.onSelect || _this.onRowSelection;
	        var rowTemplate = function (toRender) {
	            var rowElement = Dom_1.$$('div', {
	                className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-field-suggestion-row'
	            });
	            if (toRender['data']) {
	                rowElement.el.innerHTML = toRender['data'];
	            }
	            return rowElement.el.outerHTML;
	        };
	        var suggestionStructure;
	        if (_this.searchInterface.isNewDesign()) {
	            suggestionStructure = {
	                row: rowTemplate
	            };
	        }
	        else {
	            var headerTemplate = function () {
	                var headerElement = Dom_1.$$('div', {
	                    className: 'coveo-top-field-suggestion-header'
	                });
	                var iconElement = Dom_1.$$('span', {
	                    className: 'coveo-icon-top-field'
	                });
	                var captionElement = Dom_1.$$('span', {
	                    className: 'coveo-caption'
	                });
	                if (_this.options.headerTitle) {
	                    captionElement.text(_this.options.headerTitle);
	                }
	                headerElement.append(iconElement.el);
	                headerElement.append(captionElement.el);
	                return headerElement.el.outerHTML;
	            };
	            suggestionStructure = {
	                header: { template: headerTemplate, title: _this.options.headerTitle },
	                row: rowTemplate
	            };
	        }
	        _this.suggestionForOmnibox = new SuggestionForOmnibox_1.SuggestionForOmnibox(suggestionStructure, function (value, args) {
	            _this.options.onSelect.call(_this, value, args);
	        }, function (value, args) {
	            _this.onRowTab(value, args);
	        });
	        _this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.populateOmnibox, function (args) { return _this.handlePopulateOmnibox(args); });
	        return _this;
	    }
	    /**
	     * Selects a currently displayed query suggestion. This implies that at least one suggestion must have been returned
	     * at least once.
	     * @param suggestion Either a number (0-based index position of the query suggestion to select) or a string that
	     * matches the suggestion to select.
	     */
	    FieldSuggestions.prototype.selectSuggestion = function (suggestion) {
	        if (this.currentlyDisplayedSuggestions) {
	            if (isNaN(suggestion)) {
	                if (this.currentlyDisplayedSuggestions[suggestion]) {
	                    Dom_1.$$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');
	                }
	            }
	            else {
	                var currentlySuggested = _.findWhere(this.currentlyDisplayedSuggestions, { pos: suggestion });
	                if (currentlySuggested) {
	                    Dom_1.$$(currentlySuggested.element).trigger('click');
	                }
	            }
	        }
	    };
	    FieldSuggestions.prototype.handlePopulateOmnibox = function (args) {
	        var _this = this;
	        Assert_1.Assert.exists(args);
	        var valueToSearch = args.completeQueryExpression.word;
	        var promise = new Promise(function (resolve) {
	            _this.queryController.getEndpoint().listFieldValues(_this.buildListFieldValueRequest(valueToSearch)).then(function (results) {
	                var element = _this.suggestionForOmnibox.buildOmniboxElement(results, args);
	                _this.currentlyDisplayedSuggestions = {};
	                if (element) {
	                    _.map(Dom_1.$$(element).findAll('.coveo-omnibox-selectable'), function (selectable, i) {
	                        _this.currentlyDisplayedSuggestions[Dom_1.$$(selectable).text()] = {
	                            element: selectable,
	                            pos: i
	                        };
	                    });
	                    resolve({
	                        element: element,
	                        zIndex: _this.options.omniboxZIndex
	                    });
	                }
	                else {
	                    resolve({
	                        element: undefined
	                    });
	                }
	            }).catch(function () {
	                resolve({
	                    element: undefined
	                });
	            });
	        });
	        args.rows.push({
	            deferred: promise
	        });
	    };
	    FieldSuggestions.prototype.onRowSelection = function (value, args) {
	        args.clear();
	        args.closeOmnibox();
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, value);
	        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxField, {});
	        this.queryController.executeQuery();
	    };
	    FieldSuggestions.prototype.onRowTab = function (value, args) {
	        args.clear();
	        args.closeOmnibox();
	        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, "" + value);
	        this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxField, {}, this.element);
	    };
	    FieldSuggestions.prototype.buildListFieldValueRequest = function (valueToSearch) {
	        return {
	            field: this.options.field,
	            ignoreAccents: true,
	            sortCriteria: 'occurrences',
	            maximumNumberOfValues: this.options.numberOfSuggestions,
	            patternType: 'Wildcards',
	            pattern: '*' + valueToSearch + '*',
	            queryOverride: this.options.queryOverride
	        };
	    };
	    return FieldSuggestions;
	}(Component_1.Component));
	FieldSuggestions.ID = 'FieldSuggestions';
	/**
	 * @componentOptions
	 */
	FieldSuggestions.options = {
	    /**
	     * Specifies the field from which to provide suggestions.
	     *
	     * Specifying a value for this option is required for the FieldSuggestions component to work.
	     */
	    field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),
	    /**
	     * Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see
	     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).
	     *
	     * Default value is `''`, which means that the component applies no query override by default.
	     */
	    queryOverride: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '' }),
	    /**
	     * Specifies the z-index position at which the suggestions render themselves in the {@link Omnibox}.
	     *
	     * When there are multiple suggestion providers (e.g., {@link Facet} or {@link AnalyticsSuggestions}), components
	     * with a higher omniboxZIndex values render themselves first.
	     *
	     * Default value is `51`. Minimum value is `0`.
	     */
	    omniboxZIndex: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 51, min: 0 }),
	    /**
	     * Specifies the title of the result suggestions group in the {@link Omnibox} component. This option is not
	     * available when using the default Lightning Friendly Theme (see
	     * [Lightning Friendly Theme](https://developers.coveo.com/x/Y4EAAg)).
	     *
	     * Default value is the localized string for `"SuggestedResults"`.
	     */
	    headerTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ defaultValue: Strings_1.l('SuggestedResults') }),
	    /**
	     * Specifies the number of suggestions to render in the {@link Omnibox}.
	     *
	     * Default value is `5`. Minimum value is `1`.
	     */
	    numberOfSuggestions: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),
	    /**
	     * Specifies the event handler function to execute when the end user selects a suggested value un the
	     * {@link Omnibox}. By default, the query box text is replaced by what the end user selected and a new query is
	     * executed. You can, however, replace this default behavior by providing a callback function to execute when the
	     * value is selected.
	     *
	     * You can only set this option in the `init` call of your search interface. You cannot set it directly in the
	     * markup as an HTML attribute.
	     *
	     * **Example:**
	     *
	     * ```javascript
	     * // You can call the init script using "pure" JavaScript:
	     * Coveo.init(document.querySelector('#search'), {
	     *    FieldSuggestions : {
	     *      omniboxSuggestionOptions : {
	     *        onSelect : function(valueSelected, populateOmniBoxEventArgs){
	     *          // Do something special when a value is selected.
	     *          // You receive the selected value as the first argument, and the Omnibox object as the second argument.
	     *        }
	     *      }
	     *    }
	     * })
	     *
	     * // Or you can call the init script using the jQuery extension:
	     * $('#mySearch').coveo('init', {
	     *    FieldSuggestions : {
	     *      omniboxSuggestionOptions : {
	     *        onSelect : function(valueSelected, populateOmniBoxEventArgs){
	     *          // Do something special when a value is selected.
	     *          // You receive the selected value as the first argument, and the Omnibox object as the second argument.
	     *        }
	     *      }
	     *    }
	     * })
	     * ```
	     */
	    onSelect: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {
	        return null;
	    })
	};
	exports.FieldSuggestions = FieldSuggestions;
	Initialization_1.Initialization.registerAutoCreateComponent(FieldSuggestions);


/***/ }),
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(14);
	exports.underscoreInstance = _;
	setCoveoUnderscore();
	function setCoveoUnderscore() {
	    if (window['Coveo'] == undefined) {
	        window['Coveo'] = {};
	    }
	    if (window['Coveo']['_'] == undefined) {
	        window['Coveo']['_'] = _;
	        exports.underscoreInstance = window['Coveo']['_'];
	    }
	}
	window['_'] = _;


/***/ }),
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var CoreHelpers_1 = __webpack_require__(177);
	var _ = __webpack_require__(14);
	// Webpack output a library target with a temporary name.
	// This is to allow end user to put CoveoJsSearch.Dependencie.js before or after the main CoveoJsSearch.js, without breaking
	// This code swap the current module to the "real" Coveo variable.
	function swapVar(scope) {
	    if (window['Coveo'] == undefined) {
	        window['Coveo'] = scope;
	    }
	    else {
	        _.each(_.keys(scope), function (k) {
	            window['Coveo'][k] = scope[k];
	        });
	    }
	    CoreHelpers_1.CoreHelpers.exportAllHelpersGlobally(window['Coveo']);
	    if (window['__extends'] == undefined) {
	        var __extends = function (d, b) {
	            for (var p in b) {
	                if (b.hasOwnProperty(p)) {
	                    d[p] = b[p];
	                }
	            }
	            function __() {
	                this.constructor = d;
	            }
	            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	        window['__extends'] = __extends;
	    }
	}
	exports.swapVar = swapVar;


/***/ })
/******/ ])
});
;
//# sourceMappingURL=CoveoJsSearch.Searchbox.js.map